<?php

/**
 * @file
 * The ITG Task Allocation module.
 * Provides Task Allocation functionality and customizations.
 */

//All common function of layout manager.
module_load_include('inc', 'itg_task_allocation', 'includes/itg_task_allocation.mail');

/**
 * Implements hook_init().
 */
function itg_task_allocation_init() {
  global $theme;
  if ($theme == 'itgadmin') {
    drupal_add_js(drupal_get_path('module', 'itg_task_allocation') . '/js/itg_task_allocation.js', array('scope' => 'footer'));
  }
}


/**
 * Implements hook_menu().
 */
function itg_task_allocation_menu() {
  $items['content-task-list/%/autocomplete'] = array(
    'page callback' => 'itg_task_allocation_autocomplete',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'file' => 'includes/itg_task_allocation.inc',
  );
  $items['notify-detail'] = array(
    'page callback' => 'get_task_notification_of_user',
    'type' => MENU_CALLBACK,
    'access callback' => 'check_user_logged_in',
    'file' => 'includes/itg_task_allocation.inc',
  );
  $items['tak-test'] = array(
    'page callback' => 'itg_task_allocation_expirestatus_enddatemail',
    'access arguments' => array('access content'),
    'file' => 'includes/itg_task_allocation.inc',
  );
  return $items;
}


/**
 * Implements views header link 
 * @param type $view Description
 */
function itg_task_allocation_views_pre_render(&$view) {
  if ($view->name == "task") {
    $header_content = '<span class="count">Count (' . $view->total_rows . ') </span>';
    $header_content .= l(t('Create Task Idea'), 'node/add/task-idea-allocation-tracking', array('query' => array('destination' => arg(0))));
    $view->attachment_before = $header_content;
  }
}

/**
 * Implements hook_form_FORMID_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id  
 */
function itg_task_allocation_form_task_idea_allocation_tracking_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field_task_team_member'][LANGUAGE_NONE][0]['target_id']['#entity']->field_task_team_member[LANGUAGE_NONE][0]['target_id'])) {
    $uid = $form['field_task_team_member'][LANGUAGE_NONE][0]['target_id']['#entity']->field_task_team_member[LANGUAGE_NONE][0]['target_id'];
    $user = user_load($uid);  
    $form['field_task_team_member'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $user->mail . ' (' . $uid . ')';
  }
  $form['#after_build'][] = 'itg_task_allocation_form_after_build';
  $form['#after_build'][] = 'itg_common_cancel_button';
  $form['#validate'][] = 'itg_task_allocation_node_form_validate';
  $form['actions']['submit']['#submit'][] = 'itg_task_allocation_form_custom_callback';
}

/**
 * Implements hook_form_FORMID_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id  
 */
function itg_task_allocation_form_comment_node_task_idea_allocation_tracking_form_alter(&$form, &$form_state, $form_id) {

  $form['field_task_comment_change_status'][LANGUAGE_NONE]['#options'] = array('open' => 'In Progress', 'closed' => 'Completed');
  if ($form['#node']->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] == 'closed') {
    $form['#access'] = FALSE;
  }
  
  $form['author']['_author']['#markup'] = $form['author']['name']['#value'];
  $_GET['destination'] = 'assigned-task-list';
  
  drupal_add_js(drupal_get_path('module', 'itg_task_allocation') . '/js/itg_task_comment.js', array('weight' => 1, 'scope' => 'footer'));
  
  // Add cancel button to create/edit astro page
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'assigned-task-list', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );
}

/**
 * After build for task allocation form.
 * @param type $form
 * @param type $form_state
 */
function itg_task_allocation_form_after_build($form, &$form_state) {
  hide($form['field_task_comment_change_status']);

  if (isset($form['#node']->nid)) {
    $form['actions']['submit']['#value'] = 'Update';
  }
  else {
    $form['actions']['submit']['#value'] = 'Create';
  }

  $settings['checkurl'] = arg(2);
  
  drupal_add_js(array('itg_task_allocation' => array('settings' => $settings)) , array('type' => 'setting'));
  
  drupal_add_js(drupal_get_path('module', 'itg_task_allocation') . '/js/itg_task_allocation.js', array('weight' => 1, 'scope' => 'footer'));
  
  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id  
 */
function itg_task_allocation_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-task-page' || $form['#id'] == 'views-exposed-form-task-page-1') {
    $form['title']['#autocomplete_path'] = 'content-title-list/task_idea_allocation_tracking/autocomplete';
    $form['field_task_team_member_target_id']['#autocomplete_path'] = 'content-task-list/task_idea_allocation_tracking/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Task Name'));
    $form['#info']['filter-created']['label'] = '';
    $form['created']['min'] = array(
      '#type' => 'date_popup',
      '#title' => t('Created From'),
      '#date_format' => 'd/m/Y',
      '#date_year_range' => '-1:' . (date('Y')),
      '#datepicker_options' => array(
        'maxDate' => 0,
      ),
      '#attributes' => array(
        'readonly' => 'readonly'
      ),
    );

    $form['created']['max'] = array(
      '#type' => 'date_popup',
      '#title' => t('To'),
      '#date_format' => 'd/m/Y',
      '#date_year_range' => '-1:' . (date('Y')),
      '#datepicker_options' => array(
        'maxDate' => 0,
      ),
      '#attributes' => array(
        'readonly' => 'readonly'
      ),
    );
    if($form['#id'] == 'views-exposed-form-task-page') {
      $form['mail']['#autocomplete_path'] = 'content-task-list/task_idea_allocation_tracking/autocomplete';
    }
  }
}

/**
 * Custom submit callback for task allocation form.
 * @param type $form
 * @param type $form_state
 */
function itg_task_allocation_form_custom_callback($form, &$form_state) {
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }

  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'task-idea-allocation-tracking') {
    $task_title = $form_state['node']->title;
    drupal_set_message(t('Task <b>' . $task_title . '</b> has been submitted successfully.'));
  }
  else {
    $task_title = $form_state['node']->title;
    drupal_set_message(t('Task <b>' . $task_title . '</b> has been updated successfully.'));
  }

  if (isset($_REQUEST['destination'])) {
    $destination_array = explode('?', $_REQUEST['destination']);
    $_GET['destination'] = $destination_array[0];
  }
}

/**
 * Implements hook_comment_insert().
 * @param type $comment
 *  
 */
function itg_task_allocation_comment_insert($comment) {
  if ($comment->node_type == 'comment_node_task_idea_allocation_tracking') {
    $node = node_load($comment->nid);
    $uid_array = array($node->uid => $node->uid, $node->field_task_team_member[LANGUAGE_NONE][0]['target_id'] => $node->field_task_team_member[LANGUAGE_NONE][0]['target_id']);
    unset($uid_array[$comment->uid]);
    $first_key = key($uid_array);
    if (isset($first_key)) {
      $user_fields = user_load($first_key);
      $node->comment_value = $comment->comment_body[LANGUAGE_NONE][0]['value'];
      task_get_mail_content($node, 'comment', $user_fields->mail, $comment->name);
    }
  }

  if ($comment->node_type == 'comment_node_task_idea_allocation_tracking' && $comment->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] == 'closed') {
    $node = node_load($comment->nid);
    $node->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] = 'closed';
    field_attach_update('node', $node);
  }
}

/**
 * Implements hook_node_access. 
 * @param type $node
 * @param type $op
 * @param type $account
 */
function itg_task_allocation_node_access($node, $op, $account) {
  if (isset($node->type) && $node->type == 'task_idea_allocation_tracking' && $node->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] == 'closed') {
    if ($op == 'update') {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implementation of hook_views_query_alter
 * @param array reference $view
 * @param array reference $query
 */
function itg_task_allocation_views_query_alter(&$view, &$query) {

  if (isset($view->name) && $view->name === 'task' && $view->current_display == 'page') {
    if (isset($_GET['field_task_team_member_target_id']) && $_GET['field_task_team_member_target_id'] !== '') {
      $search_id = check_plain($query->where[1]['conditions'][2]['value']);
      $queries = db_select('users', 'u');
      $queries->fields('u', array('uid'));
      $queries->condition('u.mail', $search_id, '=');
      $queries->range(0, 20);
      $result = $queries->execute();
      while ($record = $result->fetchAssoc()) {
        $name = $record['uid'];
      }
      $query->where[1]['conditions'][2]['value'] = $name;
    }

    if (isset($_GET['created']['max']['date'])) {
      $max_conditions_array = array();
      $_GET['created']['min']['date'] = str_replace('/', '-', $_GET['created']['min']['date']);
      $_GET['created']['max']['date'] = str_replace('/', '-', $_GET['created']['max']['date']);
      $_GET['created']['min']['date'] = date("Y-m-d", strtotime($_GET['created']['min']['date']));

      $max_date = strtotime(date('Y-m-d', strtotime($_GET['created']['max']['date'] . ' +1 days')));
      $max_date_condition = " AND " . $max_date;
      if (isset($view->query->where[1]['conditions'][1]['field'])) {
        foreach ($query->where[1]['conditions'] as $idx => $condition) {
          if (!is_object($condition['field']) && $condition['operator'] == 'formula') {
            $max_conditions_array = explode('AND', $view->query->where[1]['conditions'][$idx]['field']);
            $view->query->where[1]['conditions'][$idx]['field'] = $max_conditions_array[0] . $max_date_condition;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_view
 * {@inheritdoc}
 */
function itg_task_allocation_node_view($node, $view_mode) {
  if ($node->type == "task_idea_allocation_tracking") {
    if (isset($_GET['onotify']) && !empty($_GET['onotify'])) {
      if (function_exists('itg_octopus_notification_by_uid')) {
        itg_octopus_notification_by_uid($_GET['onotify']);
      }
    }
  }
}
/**
 * Implements hook_node_insert
 * @param Array $node
 */
function itg_task_allocation_node_insert($node) {
  if ($node->type == 'task_idea_allocation_tracking') {
    $user_fields = user_load($node->field_task_team_member[LANGUAGE_NONE][0]['target_id']);
    task_get_mail_content($node, 'create', $user_fields->mail, $node->name);
  }
  // Adding to Notification table
  if (!empty($node->field_task_finish_date_and_time[LANGUAGE_NONE][0]['value'])) {
    $hyperlink = l($node->title, 'node/' . $node->nid);
    $time = strtotime($node->field_task_finish_date_and_time[LANGUAGE_NONE][0]['value']);
    if (function_exists('itg_octopus_add_notification')) {
      itg_octopus_add_notification('task', $node->title, 'node/' . $node->nid, $query_string = NULL, $time, 1);
    }
  }
}

/**
 * Implements hook_node_update
 * @param Array $node
 */
function itg_task_allocation_node_update($node) {
  if ($node->type == 'task_idea_allocation_tracking') {
    $user_fields = user_load($node->field_task_team_member[LANGUAGE_NONE][0]['target_id']);
    task_get_mail_content($node, 'update', $user_fields->mail, $node->name);
  }
  // Adding to Notification table
  if (!empty($node->field_task_finish_date_and_time[LANGUAGE_NONE][0]['value'])) {
    $hyperlink = l($node->title, 'node/' . $node->nid);
    $time = strtotime($node->field_task_finish_date_and_time[LANGUAGE_NONE][0]['value']);
    if (function_exists('itg_octopus_add_notification')) {
      itg_octopus_add_notification('task', $node->title, 'node/' . $node->nid, $query_string = NULL, $time, 1);
    }
  }

}


/**
 * Implements hook_mail
 * @param type $key
 * @param type $message
 * @param type $params
 */
function itg_task_allocation_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_mail_to_task':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=iso-8859-1;',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );

      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
    case 'exp_task_rem':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=iso-8859-1;',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );

      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Implements hook_node_validate().
 * @param type $form
 * @param type $form
 * @param type $form   
 */
function itg_task_allocation_node_validate($node, $form, &$form_state) {
  if ($node->type == 'task_idea_allocation_tracking') {
    // code for check expiry date is greater then schedule date
    $schedule_date = $node->field_task_finish_date_and_time[LANGUAGE_NONE][0]['value'];
    $schedule_date = strtotime($schedule_date);
    $time = time();
    if (isset($schedule_date) && $time > $schedule_date) {
      form_set_error('edit-field-task-finish-date-and-time-und-0-value-datepicker-popup-2', t("Scheduled time should be greater than current time"));
    }
  }
}

/**
 * Get task count of user.
 * @return task count    
 */
function get_task_count_of_user() {
  global $user;
  
  $start = date('Y-m-d H:i:s');
  $end = date('Y-m-d H:i:s', strtotime('+1 day'));

  $query = db_select('node', 'n');
  $query->fields('n', array('title'));
  $query->join('field_data_field_task_finish_date_and_time', 'f', 'n.nid = f.entity_id');
  $query->join('field_data_field_task_team_member', 'tm', 'n.nid = tm.entity_id');
  $query->condition('f.field_task_finish_date_and_time_value', $start, '>');
  $query->condition('f.field_task_finish_date_and_time_value', $end, '<=');
  $query->condition('tm.field_task_team_member_target_id', $user->uid, '=');
  $query->condition('n.type', 'task_idea_allocation_tracking', '=');
  $result = $query->execute();

  return $result->rowCount();
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_task_allocation_cronapi($op, $job = NULL) {
  $items['task_complete_mail'] = array(
    'description' => 'Mail shoot after task completion date.',
    'weight' => 5,
    'callback' => 'itg_task_allocation_expirestatus_enddatemail',
    'file' => 'include/itg_task_allocation.inc',
  );
  
  return $items;
}

/**
 * Implements custom validate of node add form for poll.
 * @param array $form
 * @param array reference $form_state
 */
function itg_task_allocation_node_form_validate($form, &$form_state) {

  $user_id = $form_state['values']['field_task_team_member']['und']['0']['target_id'];
  $total = db_select('users', 'u')
          ->fields('u', array('uid'))
          ->condition('u.uid', $user_id)->execute()->rowCount();
  if ($total == 0) {
    form_set_error('field_task_team_member', 'Please select valid team member.');
  }
}
/**
 * Check if user is logged in.
 * @return true or false   
 */
function check_user_logged_in() {
  global $user;
  if ($user->uid > 0) {
    return true;
  }
  else
    return false;
}
