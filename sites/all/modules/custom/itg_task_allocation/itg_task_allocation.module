<?php

/**
 * @file
 * The ITG Task Allocation module.
 * Provides Task Allocation functionality and customizations.
 */


/**
 * Implements hook_menu().
 */
function itg_task_allocation_menu() {
  
  $items['content-task-list/%/autocomplete'] = array(
    'page callback' => 'itg_task_allocation_autocomplete',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'file' => 'includes/itg_task_allocation.inc',
  );
 
  return $items;
}

/**
 * Implements views header link 
 * @param type $view Description
 */
function itg_task_allocation_views_pre_render(&$view) { 
  if ($view->name == "task") {
    $header_content = '<span class="count">Count ('.$view->total_rows.') </span>';
    $header_content .= l(t('Create Task Idea'), 'node/add/task-idea-allocation-tracking', array('query' => array('destination' => arg(0))));    
    $view->attachment_before = $header_content;
  }  
}

/**
 * Implements hook_form_FORMID_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id  
 */
function itg_task_allocation_form_task_idea_allocation_tracking_node_form_alter(&$form, &$form_state, $form_id) {
  $uid = $form['field_task_team_member'][LANGUAGE_NONE][0]['target_id']['#entity']->field_task_team_member[LANGUAGE_NONE][0]['target_id'];
  $user = user_load($uid);
  if (isset($user->mail)) {
    $form['field_task_team_member'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $user->mail.' ('.$uid.')';
  }
  $form['#after_build'][] = 'itg_task_allocation_form_after_build';
  $form['#after_build'][] = 'itg_common_cancel_button';
  $form['actions']['submit']['#submit'][] = 'itg_task_allocation_form_custom_callback';
}

/**
 * Implements hook_form_FORMID_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id  
 */
function itg_task_allocation_form_comment_node_task_idea_allocation_tracking_form_alter(&$form, &$form_state, $form_id) {
  
  $form['field_task_comment_change_status'][LANGUAGE_NONE]['#options'] = array('open' => 'In Progress', 'closed' => 'Completed');
  if ($form['#node']->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] == 'closed') {
    $form['#access'] = FALSE;
  }
  $form['author']['_author']['#markup'] = $form['author']['name']['#value'];
  $_GET['destination'] = 'assigned-task-list';
  drupal_add_js('jQuery(document).ready(function() {                  
                     jQuery(".comment-add").hide(); 
                     jQuery(".comment-reply").hide(); 
          });', array('type' => 'inline', 'scope' => 'footer'));
  $form['#after_build'][] = 'itg_task_allocation_form_after_build';
   // Add cancel button to create/edit astro page
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'assigned-task-list', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );
}

/**
 * After build for task allocation form.
 * @param type $form
 * @param type $form_state
 */
function itg_task_allocation_form_after_build($form, &$form_state) {
  hide($form['field_task_comment_change_status']);
  
  if (isset($form['#node']->nid)){
    $form['actions']['submit']['#value'] = 'Update';
  } else {
      $form['actions']['submit']['#value'] = 'Create';
  } 
  
  drupal_add_js(drupal_get_path('module', 'itg_task_allocation') . '/js/itg_task_allocation.js', array('weight' => 1));
  
  return $form;
  
}

/**
 * Implements hook_form_FORMID_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id  
 */
function itg_task_allocation_form_views_exposed_form_alter(&$form, &$form_state, $form_id) { 
   if ($form['#id'] == 'views-exposed-form-task-page' || $form['#id'] == 'views-exposed-form-task-page-1') {  
     $form['title']['#autocomplete_path'] = 'content-title-list/task_idea_allocation_tracking/autocomplete';
     $form['field_task_team_member_target_id']['#autocomplete_path'] = 'content-task-list/task_idea_allocation_tracking/autocomplete';
     $form['title']['#attributes'] = array('placeholder' => t('Task Name'));     
     $form['#info']['filter-created']['label'] = '';     
     $form['created']['min'] = array(
      '#type' => 'date_popup',
      '#title' => t('From'),
      '#date_format' => 'd/m/Y',
      '#date_year_range' => '-1:+1',
      '#attributes' => array(
        'readonly' => 'readonly'
      ),
    );
     
    $form['created']['max'] = array(
      '#type' => 'date_popup',
      '#title' => t('To'),
      '#date_format' => 'd/m/Y',
      '#date_year_range' => '-1:+1',
      '#attributes' => array(
        'readonly' => 'readonly'
      ),
    );
   }
}


/**
 * Custom submit callback for task allocation form.
 * @param type $form
 * @param type $form_state
 */
function itg_task_allocation_form_custom_callback($form, &$form_state) {  
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }
  
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'task-idea-allocation-tracking') {
   $task_title = $form_state['node']->title; 
   drupal_set_message(t('Task <b>'. $task_title .'</b> has been submitted successfully.')); expiredmail();
    } else {
      $task_title = $form_state['node']->title;
      drupal_set_message(t('Task <b>'. $task_title .'</b> has been updated successfully.'));
  }
  
  if (isset($_REQUEST['destination'])) {    
    $destination_array = explode('?', $_REQUEST['destination']);    
    $_GET['destination'] = $destination_array[0];    
  }  
  
}

/**
 * Implements hook_comment_insert().
 * @param type $comment
 *  
 */
function itg_task_allocation_comment_insert($comment) {
  if ($comment->node_type == 'comment_node_task_idea_allocation_tracking') {    
    $node = node_load($comment->nid);
    $uid_array = array($node->uid => $node->uid, $node->field_task_team_member[LANGUAGE_NONE][0]['target_id'] => $node->field_task_team_member[LANGUAGE_NONE][0]['target_id']);
    unset($uid_array[$comment->uid]);
    $first_key = key($uid_array);
    if(isset($first_key)){
      $user_fields = user_load($first_key);
      $node->comment_value = $comment->comment_body[LANGUAGE_NONE][0]['value'];
      task_get_mail_content($node, 'comment', $user_fields->mail, $comment->name);
    }
  }
  
  if ($comment->node_type == 'comment_node_task_idea_allocation_tracking' && $comment->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] == 'closed') {
   $node = node_load($comment->nid);
   $node->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] = 'closed';
   field_attach_update('node', $node);
  }
}

/**
 * Implements hook_node_access. 
 * @param type $node
 * @param type $op
 * @param type $account
 */
function itg_task_allocation_node_access($node, $op, $account) {  
  if (isset($node->type) && $node->type == 'task_idea_allocation_tracking' && $node->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] == 'closed') {
   if ($op == 'update') {
     return NODE_ACCESS_DENY; 
   }        
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implementation of hook_views_query_alter
 * @param array reference $view
 * @param array reference $query
 */
function itg_task_allocation_views_query_alter(&$view, &$query) {

    if (isset($view->name) && $view->name === 'task') {
        if (isset($_GET['field_task_team_member_target_id']) && $_GET['field_task_team_member_target_id'] !== '') {
            $search_id = check_plain($query->where[1]['conditions'][2]['value']);
            $queries = db_select('users', 'u');
            $queries->fields('u', array('uid'));
            $queries->condition('u.mail', $search_id, '=');
            $queries->range(0, 20);
            $result = $queries->execute();
            while ($record = $result->fetchAssoc()) {
                $name = $record['uid'];
            }
            $query->where[1]['conditions'][2]['value'] = $name;
        }

        if (isset($_GET['created']['max']['date'])) {
            $max_conditions_array = array();
            $_GET['created']['min']['date'] = str_replace('/', '-', $_GET['created']['min']['date']);
            $_GET['created']['max']['date'] = str_replace('/', '-', $_GET['created']['max']['date']);
            $_GET['created']['min']['date'] = date("Y-m-d", strtotime($_GET['created']['min']['date']));

            $max_date = strtotime(date('Y-m-d', strtotime($_GET['created']['max']['date'] . ' +1 days')));
            $max_date_condition = " AND " . $max_date;
            if (isset($view->query->where[1]['conditions'][1]['field'])) {
                foreach ($query->where[1]['conditions'] as $idx => $condition) {
                    if (!is_object($condition['field']) && $condition['operator'] == 'formula') {
                        $max_conditions_array = explode('AND', $view->query->where[1]['conditions'][$idx]['field']);
                        $view->query->where[1]['conditions'][$idx]['field'] = $max_conditions_array[0] . $max_date_condition;
                    }
                }
            }
        }
    }
}

/**
 * Implements hook_node_insert
 * @param Array $node
 */
function itg_task_allocation_node_insert($node) {  
  if ($node->type == 'task_idea_allocation_tracking') {    
    $user_fields = user_load($node->field_task_team_member[LANGUAGE_NONE][0]['target_id']);
    task_get_mail_content($node, 'create', $user_fields->mail, $node->name);   
  }
}

/**
 * Implements hook_node_update
 * @param Array $node
 */
function itg_task_allocation_node_update($node) {  
  if ($node->type == 'task_idea_allocation_tracking') {
    $user_fields = user_load($node->field_task_team_member[LANGUAGE_NONE][0]['target_id']);    
    task_get_mail_content($node, 'update', $user_fields->mail, $node->name);   
  }
}

/**
 * Get Mail content
 * @global String $base_url
 * @param type $node
 * @param type $event
 * @param type $to
 * @return 
 */
function task_get_mail_content($node, $event, $to, $user_name) {
  
  global $base_url;
  
  if ($event == 'create') {
    $task_subject = 'New Task has been assigned, please find below detail.';
  } else if ($event == 'update') {
      $task_subject = 'Your Task has been updated, please find below detail.';
  } else if ($event == 'comment') {
      $task_subject = 'New Comment has been added, please find below detail.';
  }
  
  $node_url = $base_url.'/node/'.$node->nid;
  $finish_date = date("d/m/Y H:i:s", strtotime($node->field_task_finish_date_and_time[LANGUAGE_NONE][0]['value']));
  
  $content = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
              <html xmlns:v="urn:schemas-microsoft-com:vml">
              <head><title></title></head>
              <body style="margin:0; padding:0;">
                    <table cellpadding="0" cellspacing="0" width="760" align="center"><tr><td>Hi,</td></tr>
                    <tr><td></td></tr>
                    <tr><td>'.$task_subject.'</td></tr>
                    <tr><td></td></tr>
                    <tr><td>Task Name: ' . $node->title . '</td></tr>
                    <tr><td>URL: ' . $node_url . '</td></tr>
                      
                    <tr><td></td></tr>';
                    if ($event != 'comment') {
                      $content .='<tr><td>Assigned By: ' . $user_name . '</td></tr>
                                  <tr><td></td></tr>
                                  <tr><td>Task / idea: ' . $node->field_task_task_idea[LANGUAGE_NONE][0]['value'] . '</td></tr>
                                  <tr><td></td></tr>
                                  <tr><td>Finish Date and time: ' . $finish_date . '</td></tr>';
                    }else {
                      $content .= '<tr><td>Comment: ' . $node->comment_value . '</td></tr>';        
                    }

                    $content .='<tr><td></td></tr>
                    <tr><td></td></tr>
                    <tr><td>Thanks,</td></tr>
                    <tr><td>India Today Team</td></tr></table>
              </body></html>';
  
  
   $params = array(
      'body' => $content,
      'subject' => $node->title,
    );

    $mail = drupal_mail('itg_task_allocation', 'send_mail_to_task', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
    if ($mail['result']) {
      return TRUE;
    }
    else {
      $error_msg = 'Failed to send the email!';
      watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
      return FALSE;
    }
  
}

/**
 * Implements hook_mail
 * @param type $key
 * @param type $message
 * @param type $params
 */
function itg_task_allocation_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_mail_to_task':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Implements hook_node_validate().
 * @param type $form
 * @param type $form
 * @param type $form   
 */
function itg_task_allocation_node_validate($node, $form, &$form_state) {
 
  if ($node->type == 'task_idea_allocation_tracking') {
   // code for check expiry date is greater then schedule date
    $schedule_date = $node->field_task_finish_date_and_time[LANGUAGE_NONE][0]['value'];
    $schedule_date = strtotime($schedule_date);
    $time = time();    
    if (isset($schedule_date) && $time > $schedule_date) { 
      form_set_error('edit-field-task-finish-date-and-time-und-0-value-datepicker-popup-2', t("Scheduled time should be greater than current time"));
    }   
  }
}

/**
 * Get task count of user.
 * @return task count    
 */
function get_task_count_of_user() {
  global $user;
  
  $start = date('Y-m-d H:i:s');
  $end = date('Y-m-d H:i:s', strtotime('+1 day'));
  
  $query = db_select('node', 'n');
  $query->fields('n', array('title'));
  $query->join('field_data_field_task_finish_date_and_time', 'f', 'n.nid = f.entity_id');  
  $query->join('field_data_field_task_team_member', 'tm', 'n.nid = tm.entity_id');
  $query->condition('f.field_task_finish_date_and_time_value', $start, '>');
  $query->condition('f.field_task_finish_date_and_time_value', $end, '<=');
  $query->condition('tm.field_task_team_member_target_id', $user->uid, '=');
  $query->condition('n.type', 'task_idea_allocation_tracking', '=');
  $result = $query->execute();
  
  return $result->rowCount();  
}

/**
 * Custom method for expired task.
 */
function expiredmail() {
    $current_time = date('Y-m-d H:i:s');
    $query = db_select('field_data_field_task_finish_date_and_time', 'f');
    $query->condition('f.field_task_finish_date_and_time_value', $current_time, '<=');
    $query->join('node', 'n', 'n.nid = f.entity_id');
    $query->leftjoin('task_allocation', 'tm', 'n.nid = tm.node_id');
    $query->join('users', 'u', 'u.uid = n.uid');
    $query->fields('u', array('mail'));
    $result = $query->execute();
    foreach ($result as $val) {
        if ($val->node_id == '') {
            $value .= $val->mail . ',';
        }
    }
    $high_level_user = trim($value, ",");
    expiredmail_mail_content($high_level_user);
}

/**
 * Get Mail content
 * @return 
 */
function expiredmail_mail_content($to) {

    $task_subject = 'A task has been expired that was created by you';
    $subject = 'Task Expired';
    $node_url = $base_url . '/node/' . $node->nid;
    $content = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
              <html xmlns:v="urn:schemas-microsoft-com:vml">
                <head><title></title></head>
                <body style="margin:0; padding:0;">';
    $content .= 'Dear Team,';
    $content .= '<br /><br />' . $task_subject;
    $content .= '</body>';
    $content .= '</html>';
    $params = array(
      'body' => $content,
      'subject' => $subject,
    );

    $mail = drupal_mail('itg_task_allocation', 'send_mail_to_task', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
    if ($mail['result']) {
        return TRUE;
    }
    else {
        $error_msg = 'Failed to send the email!';
        watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
        return FALSE;
    }
}

?>
