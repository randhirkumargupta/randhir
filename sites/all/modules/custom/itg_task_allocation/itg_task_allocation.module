<?php

/**
 * @file
 * The ITG Task Allocation module.
 * Provides Task Allocation functionality and customizations.
 */

/**
 * Implements hook_init().
 */
function itg_task_allocation_init() {
  global $theme;
  if ($theme == 'itgadmin') {
    drupal_add_js(drupal_get_path('module', 'itg_task_allocation') . '/js/itg_task_allocation.js');
  }
}


/**
 * Implements hook_menu().
 */
function itg_task_allocation_menu() {
  $items['content-task-list/%/autocomplete'] = array(
    'page callback' => 'itg_task_allocation_autocomplete',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'file' => 'includes/itg_task_allocation.inc',
  );
  $items['notify-detail'] = array(
    'page callback' => 'get_task_notification_of_user',
    'type' => MENU_CALLBACK,
    'access callback' => 'check_user_logged_in',
  );
  $items['tak-test'] = array(
    'page callback' => 'itg_task_allocation_expirestatus_enddatemail',
    'access arguments' => array('access content'),
  );
  return $items;
}

//$val= user_is_logged_in();
/**
 * Expire task acc to date and send mail to the author of node.   
 */
function itg_task_allocation_expirestatus_enddatemail() {
  $current_time = date('Y-m-d H:i:s');
  
  
    $query = db_select('node', 'n');
    $query->leftjoin('field_data_field_task_finish_date_and_time', 'f', 'n.nid = f.entity_id');
    $query->leftjoin('field_data_field_task_comment_change_status', 's', 'n.nid = s.entity_id');
    $query->leftjoin('field_data_field_task_team_member', 'ttm', 'n.nid = ttm.entity_id');
    $query->join('users', 'u', 'u.uid = n.uid');
    $query->join('users', 'ur', 'ur.uid = ttm.field_task_team_member_target_id');
    $query->fields('n', array('nid'));
    $query->condition('n.status', 1, '=');
    $query->condition('n.type', 'task_idea_allocation_tracking', '=');
    $query->fields('f', array('field_task_finish_date_and_time_value'));
    $query->fields('s', array('field_task_comment_change_status_value'));
    $query->fields('u', array('mail'));
    $query->fields('ur', array('mail'));
//    $query->condition('s.field_task_comment_change_status_value', 'open', '=');
    $query->condition('f.field_task_finish_date_and_time_value', $current_time, '<=');
    $result = $query->execute();
  foreach ($result as $value) {   
    $node = node_load($value->nid);
    $node->field_task_comment_change_status['und'][0]['value'] = 'expired';
    field_attach_update('node', $node);
    expiredtask_authormail_content($value, 'task_expiry', 'task_idea_allocation_tracking');
  }
}

/**
 * Implements views header link 
 * @param type $view Description
 */
function itg_task_allocation_views_pre_render(&$view) {
  if ($view->name == "task") {
    $header_content = '<span class="count">Count (' . $view->total_rows . ') </span>';
    $header_content .= l(t('Create Task Idea'), 'node/add/task-idea-allocation-tracking', array('query' => array('destination' => arg(0))));
    $view->attachment_before = $header_content;
  }
}

/**
 * Implements hook_form_FORMID_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id  
 */
function itg_task_allocation_form_task_idea_allocation_tracking_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field_task_team_member'][LANGUAGE_NONE][0]['target_id']['#entity']->field_task_team_member[LANGUAGE_NONE][0]['target_id'])) {
    $uid = $form['field_task_team_member'][LANGUAGE_NONE][0]['target_id']['#entity']->field_task_team_member[LANGUAGE_NONE][0]['target_id'];
    $user = user_load($uid);  
    $form['field_task_team_member'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $user->mail . ' (' . $uid . ')';
  }
  $form['#after_build'][] = 'itg_task_allocation_form_after_build';
  $form['#after_build'][] = 'itg_common_cancel_button';
  $form['#validate'][] = 'itg_task_allocation_node_form_validate';
  $form['actions']['submit']['#submit'][] = 'itg_task_allocation_form_custom_callback';
}

/**
 * Implements hook_form_FORMID_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id  
 */
function itg_task_allocation_form_comment_node_task_idea_allocation_tracking_form_alter(&$form, &$form_state, $form_id) {

  $form['field_task_comment_change_status'][LANGUAGE_NONE]['#options'] = array('open' => 'In Progress', 'closed' => 'Completed');
  if ($form['#node']->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] == 'closed') {
    $form['#access'] = FALSE;
  }
  //hide($form['author']);
  $form['author']['_author']['#markup'] = $form['author']['name']['#value'];
  $_GET['destination'] = 'assigned-task-list';
  drupal_add_js('jQuery(document).ready(function() {                  
                     jQuery(".comment-add").hide(); 
                     jQuery(".comment-reply").hide(); 
          });', array('type' => 'inline', 'scope' => 'footer'));
  //$form['#after_build'][] = 'itg_task_allocation_form_after_build';
  // Add cancel button to create/edit astro page
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'assigned-task-list', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );
}

/**
 * After build for task allocation form.
 * @param type $form
 * @param type $form_state
 */
function itg_task_allocation_form_after_build($form, &$form_state) {
  hide($form['field_task_comment_change_status']);

  if (isset($form['#node']->nid)) {
    $form['actions']['submit']['#value'] = 'Update';
  }
  else {
    $form['actions']['submit']['#value'] = 'Create';
  }

  drupal_add_js(drupal_get_path('module', 'itg_task_allocation') . '/js/itg_task_allocation.js', array('weight' => 1));
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'task-idea-allocation-tracking') {
    drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-field-task-task-idea-und-0-remove-button").hide();              
            });', array('type' => 'inline', 'scope' => 'footer'));
  }
  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id  
 */
function itg_task_allocation_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-task-page' || $form['#id'] == 'views-exposed-form-task-page-1') {
    $form['title']['#autocomplete_path'] = 'content-title-list/task_idea_allocation_tracking/autocomplete';
    $form['field_task_team_member_target_id']['#autocomplete_path'] = 'content-task-list/task_idea_allocation_tracking/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Task Name'));
    $form['#info']['filter-created']['label'] = '';
    $form['created']['min'] = array(
      '#type' => 'date_popup',
      '#title' => t('Created From'),
      '#date_format' => 'd/m/Y',
      '#date_year_range' => '-1:' . (date('Y')),
      '#datepicker_options' => array(
        'maxDate' => 0,
      ),
      '#attributes' => array(
        'readonly' => 'readonly'
      ),
    );

    $form['created']['max'] = array(
      '#type' => 'date_popup',
      '#title' => t('To'),
      '#date_format' => 'd/m/Y',
      '#date_year_range' => '-1:' . (date('Y')),
      '#datepicker_options' => array(
        'maxDate' => 0,
      ),
      '#attributes' => array(
        'readonly' => 'readonly'
      ),
    );
  }
}

/**
 * Custom submit callback for task allocation form.
 * @param type $form
 * @param type $form_state
 */
function itg_task_allocation_form_custom_callback($form, &$form_state) {
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }

  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'task-idea-allocation-tracking') {
    $task_title = $form_state['node']->title;
    drupal_set_message(t('Task <b>' . $task_title . '</b> has been submitted successfully.'));
  }
  else {
    $task_title = $form_state['node']->title;
    drupal_set_message(t('Task <b>' . $task_title . '</b> has been updated successfully.'));
  }

  if (isset($_REQUEST['destination'])) {
    $destination_array = explode('?', $_REQUEST['destination']);
    $_GET['destination'] = $destination_array[0];
  }
}

/**
 * Implements hook_comment_insert().
 * @param type $comment
 *  
 */
function itg_task_allocation_comment_insert($comment) {
  if ($comment->node_type == 'comment_node_task_idea_allocation_tracking') {
    $node = node_load($comment->nid);
    $uid_array = array($node->uid => $node->uid, $node->field_task_team_member[LANGUAGE_NONE][0]['target_id'] => $node->field_task_team_member[LANGUAGE_NONE][0]['target_id']);
    unset($uid_array[$comment->uid]);
    $first_key = key($uid_array);
    if (isset($first_key)) {
      $user_fields = user_load($first_key);
      $node->comment_value = $comment->comment_body[LANGUAGE_NONE][0]['value'];
      task_get_mail_content($node, 'comment', $user_fields->mail, $comment->name);
    }
  }

  if ($comment->node_type == 'comment_node_task_idea_allocation_tracking' && $comment->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] == 'closed') {
    $node = node_load($comment->nid);
    $node->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] = 'closed';
    field_attach_update('node', $node);
  }
}

/**
 * Implements hook_node_access. 
 * @param type $node
 * @param type $op
 * @param type $account
 */
function itg_task_allocation_node_access($node, $op, $account) {
  if (isset($node->type) && $node->type == 'task_idea_allocation_tracking' && $node->field_task_comment_change_status[LANGUAGE_NONE][0]['value'] == 'closed') {
    if ($op == 'update') {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implementation of hook_views_query_alter
 * @param array reference $view
 * @param array reference $query
 */
function itg_task_allocation_views_query_alter(&$view, &$query) {

  if (isset($view->name) && $view->name === 'task' && $view->current_display == 'page') {
    if (isset($_GET['field_task_team_member_target_id']) && $_GET['field_task_team_member_target_id'] !== '') {
      $search_id = check_plain($query->where[1]['conditions'][2]['value']);
      $queries = db_select('users', 'u');
      $queries->fields('u', array('uid'));
      $queries->condition('u.mail', $search_id, '=');
      $queries->range(0, 20);
      $result = $queries->execute();
      while ($record = $result->fetchAssoc()) {
        $name = $record['uid'];
      }
      $query->where[1]['conditions'][2]['value'] = $name;
    }

    if (isset($_GET['created']['max']['date'])) {
      $max_conditions_array = array();
      $_GET['created']['min']['date'] = str_replace('/', '-', $_GET['created']['min']['date']);
      $_GET['created']['max']['date'] = str_replace('/', '-', $_GET['created']['max']['date']);
      $_GET['created']['min']['date'] = date("Y-m-d", strtotime($_GET['created']['min']['date']));

      $max_date = strtotime(date('Y-m-d', strtotime($_GET['created']['max']['date'] . ' +1 days')));
      $max_date_condition = " AND " . $max_date;
      if (isset($view->query->where[1]['conditions'][1]['field'])) {
        foreach ($query->where[1]['conditions'] as $idx => $condition) {
          if (!is_object($condition['field']) && $condition['operator'] == 'formula') {
            $max_conditions_array = explode('AND', $view->query->where[1]['conditions'][$idx]['field']);
            $view->query->where[1]['conditions'][$idx]['field'] = $max_conditions_array[0] . $max_date_condition;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert
 * @param Array $node
 */
function itg_task_allocation_node_insert($node) {
  if ($node->type == 'task_idea_allocation_tracking') {
    $user_fields = user_load($node->field_task_team_member[LANGUAGE_NONE][0]['target_id']);
    task_get_mail_content($node, 'create', $user_fields->mail, $node->name);
  }
}

/**
 * Implements hook_node_update
 * @param Array $node
 */
function itg_task_allocation_node_update($node) {
  if ($node->type == 'task_idea_allocation_tracking') {
    $user_fields = user_load($node->field_task_team_member[LANGUAGE_NONE][0]['target_id']);
    task_get_mail_content($node, 'update', $user_fields->mail, $node->name);
  }
}

/**
 * Get Mail content
 * @global String $base_url
 * @param type $node
 * @param type $event
 * @param type $to
 * @return 
 */
function task_get_mail_content($node, $event, $to, $user_name) {
  global $base_url;
  $your_idea = $node->field_task_task_idea[LANGUAGE_NONE][0]['value'];
  $finish_date = date("d/m/Y H:i:s", strtotime($node->field_task_finish_date_and_time[LANGUAGE_NONE][0]['value']));

  if ($event == 'create') {
    if (function_exists('itg_mail_templates_get_mailcontent')) {
      $mail_data = itg_mail_templates_get_mailcontent($node, 'create');
      $task_subject = $mail_data->field_mail_subject_task_idea[LANGUAGE_NONE][0]['value'];
    }
  }
  else if ($event == 'update') {
    if (function_exists('itg_mail_templates_get_mailcontent')) {
      $mail_data = itg_mail_templates_get_mailcontent($node, 'update');
      $task_subject = $mail_data->field_mail_subject_task_idea[LANGUAGE_NONE][0]['value'];
    }
  }
  else if ($event == 'comment') {
    if (function_exists('itg_mail_templates_get_mailcontent')) {
      $mail_data = itg_mail_templates_get_mailcontent($node, 'comment');
      $task_subject = $mail_data->field_mail_subject_task_idea[LANGUAGE_NONE][0]['value'];
    }
  }
  if ($event != 'comment') {
    $body = str_replace('[itg_mail_token:itg_node_title]', l($node->title, 'node/'.$node->nid), $mail_data->field_mail_subject_body[LANGUAGE_NONE][0]['value']);
    $assigned_by = str_replace('[itg_mail_token:itg_loggedin_user]', $user_name, $body);
    $idea = str_replace('[itg_mail_token:itg_node_body]', $your_idea, $assigned_by);
    $idea_last_date = str_replace('[itg_mail_token:itg_task_date_time]', $finish_date, $idea);
    $mail_content = $idea_last_date;
  } else {
    $body = str_replace('[itg_mail_token:itg_node_title]', l($node->title, 'node/'.$node->nid), $mail_data->field_mail_subject_body[LANGUAGE_NONE][0]['value']);
    $assigned_by = str_replace('[itg_mail_token:itg_task_comment]', $node->comment_value, $body);
    $mail_content = $assigned_by;
  }
  $content = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
              <html xmlns:v="urn:schemas-microsoft-com:vml">
                <head><title></title></head>
                <body style="margin:0; padding:0;">';
  $content .= $mail_content;
  $content .= '</body>';
  $content .= '</html>';
  
  $params = array(
    'body' => $content,
    'subject' => $task_subject,
  );
  $to = 'gourav.walia@kelltontech.com';
  $mail = drupal_mail('itg_task_allocation', 'send_mail_to_task', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
  if ($mail['result']) {
    return TRUE;
  }
  else {
    $error_msg = 'Failed to send the email!';
    watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
    return FALSE;
  }
}

/**
 * Implements hook_mail
 * @param type $key
 * @param type $message
 * @param type $params
 */
function itg_task_allocation_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_mail_to_task':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=iso-8859-1;',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );

      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
    case 'exp_task_rem':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=iso-8859-1;',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );

      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_node_validate().
 * @param type $form
 * @param type $form
 * @param type $form   
 */
function itg_task_allocation_node_validate($node, $form, &$form_state) {

  if ($node->type == 'task_idea_allocation_tracking') {
    // code for check expiry date is greater then schedule date
    $schedule_date = $node->field_task_finish_date_and_time[LANGUAGE_NONE][0]['value'];
    $schedule_date = strtotime($schedule_date);
    $time = time();
    if (isset($schedule_date) && $time > $schedule_date) {
      form_set_error('edit-field-task-finish-date-and-time-und-0-value-datepicker-popup-2', t("Scheduled time should be greater than current time"));
    }
  }
}

/**
 * Get task count of user.
 * @return task count    
 */
function get_task_count_of_user() {
  global $user;

  $start = date('Y-m-d H:i:s');
  $end = date('Y-m-d H:i:s', strtotime('+1 day'));

  $query = db_select('node', 'n');
  $query->fields('n', array('title'));
  $query->join('field_data_field_task_finish_date_and_time', 'f', 'n.nid = f.entity_id');
  $query->join('field_data_field_task_team_member', 'tm', 'n.nid = tm.entity_id');
  $query->condition('f.field_task_finish_date_and_time_value', $start, '>');
  $query->condition('f.field_task_finish_date_and_time_value', $end, '<=');
  $query->condition('tm.field_task_team_member_target_id', $user->uid, '=');
  $query->condition('n.type', 'task_idea_allocation_tracking', '=');
  $result = $query->execute();

  return $result->rowCount();
}

/**
 * Display task notification of user.    
 */
function get_task_notification_of_user() {
  global $user;
  $string = '';
  $string.="<ul>";
  $start = date('Y-m-d H:i');
  $end = date('Y-m-d H:i', strtotime('+1 day'));
  $query = db_select('node', 'n');
  $query->fields('n', array('title'));
  $query->fields('n', array('nid'));
  $query->join('field_data_field_task_comment_change_status', 's', 'n.nid = s.entity_id');
  $query->join('field_data_field_task_finish_date_and_time', 'f', 'n.nid = f.entity_id');
  $query->join('field_data_field_task_team_member', 'tm', 'n.nid = tm.entity_id');
  $query->fields('s', array('field_task_comment_change_status_value'));
  $query->condition('f.field_task_finish_date_and_time_value', $start, '>');
  $query->condition('f.field_task_finish_date_and_time_value', $end, '<=');
  $query->condition('s.field_task_comment_change_status_value', 'open', '=');
  $query->condition('tm.field_task_team_member_target_id', $user->uid, '=');
  $query->condition('n.type', 'task_idea_allocation_tracking', '=');
  $result = $query->execute();
  foreach ($result as $value) {
    $string .= '<li>' . l("your task " . $value->title . " is going to expire", 'node/' . $value->nid) . '</li>';
  }
  $string .= "</ul>";
  print $string;
  drupal_exit();
}

/**
 * Custom method for expired task.
 */
function itg_task_allocation_expiredmail() {
  $current_time = date('Y-m-d H:i:s');
  $query = db_select('field_data_field_task_finish_date_and_time', 'f');
  $query->condition('f.field_task_finish_date_and_time_value', $current_time, '<=');
  $query->join('node', 'n', 'n.nid = f.entity_id');
  $query->leftjoin('task_allocation', 'tm', 'n.nid = tm.node_id');
  $query->join('users', 'u', 'u.uid = n.uid');
  $query->fields('u', array('mail'));
  $query->fields('n', array('nid'));
  $query->fields('tm', array('node_id'));
  $result = $query->execute();
  foreach ($result as $val) {
    if ($val->node_id == '') {
      $value .= $val->mail . ',';
    }
    if ($val->node_id != $val->nid) {
      $value_id .= $val->nid . ',';
    }
  }
  $node_ids = trim($value_id, ",");
  $node_id = explode(",", $node_ids);
  foreach ($node_id as $value) {
    $query1 = db_insert('task_allocation');
    $query1->fields(array('node_id' => $value))->execute();
  }

  $high_level_user = trim($value, ",");
  expiredmail_mail_content($high_level_user);
}

/**
 * Get Mail content
 * @param type $to
 * @return 
 */
function expiredmail_mail_content($to) {
  global $base_url;
  $task_subject = t('A task has been expired that was created by you');
  $subject = t('Task Expired');
  //$node_url = $base_url . '/node/' . $node->nid;
  $node_url = l('URL', 'node/'.$node->nid);

  $content = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
              <html xmlns:v="urn:schemas-microsoft-com:vml">
                <head><title></title></head>
                <body style="margin:0; padding:0;">';
  $content .= 'Dear Team,';
  $content .= '<br /><br />' . $task_subject;
  $content .= '<br />' . $node_url;
  $content .= '</body>';
  $content .= '</html>';
  $params = array(
    'body' => $content,
    'subject' => $subject,
  );

  $mail = drupal_mail('itg_task_allocation', 'send_mail_to_task', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
  if ($mail['result']) {
    return TRUE;
  }
  else {
    $error_msg = t('Failed to send the email!');
    watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
    return FALSE;
  }
}

/**
 * Get Mail content
 * @param type $to
 * @return 
 */
function expiredtask_authormail_content($var, $expiry_task, $task_type) {
  if (function_exists("itg_mail_templates_get_mailcontent")) {
    $get_mail_data = itg_mail_templates_get_mailcontent($task_type, $expiry_task);
    $subject = $get_mail_data->field_mail_subject_task_idea[LANGUAGE_NONE][0]['value'];
    $to_assignee = str_replace('[itg_mail_token:itg_task_assignee]', $var->ur_mail, $get_mail_data->field_to_assignee[LANGUAGE_NONE][0]['value']);
    $to_assigner = str_replace('[itg_mail_token:itg_task_assigner]', $var->mail, $get_mail_data->field_to_assigner[LANGUAGE_NONE][0]['value']);
  }
  
  global $base_url;
  if (!empty($var->ur_mail) || !empty($var->mail)) {
    $node_url = l('URL', 'node/'.$var->nid);
    $body = $get_mail_data->field_mail_subject_body[LANGUAGE_NONE][0]['value'];
    $body_data = str_replace('[itg_mail_token:itg_node_title_link]', $node_url, $body);

    $content = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
                <html xmlns:v="urn:schemas-microsoft-com:vml">
                  <head><title></title></head>
                  <body style="margin:0; padding:0;">';
    $content .= $body_data;
    $content .= '</body>';
    $content .= '</html>';
    $params = array(
      'body' => $content,
      'subject' => $subject,
    );
    $to_assignee = 'gourav.walia@kelltontech.com';
    $mail = drupal_mail('itg_task_allocation', 'exp_task_rem', $to_assignee, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
    if ($mail['result']) {
      return TRUE;
    }
    else {
      $error_msg = 'Failed to send the email!';
      watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
      return FALSE;
    }
    
  }
  
  if (!empty($var->mail)) {
    $node_url = l('URL', 'node/'.$var->nid);
    $body = $get_mail_data->field_mail_body_task_idea_assign[LANGUAGE_NONE][0]['value'];
    
    $body_data = str_replace('[itg_mail_token:itg_node_title_link]', $node_url, $body);

    $content = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
                <html xmlns:v="urn:schemas-microsoft-com:vml">
                  <head><title></title></head>
                  <body style="margin:0; padding:0;">';
    $content .= $body_data;
    $content .= '</body>';
    $content .= '</html>';
    $params = array(
      'body' => $content,
      'subject' => $subject,
    );
    $mail = drupal_mail('itg_task_allocation', 'exp_task_rem', $to_assigner, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
    if ($mail['result']) {
      return TRUE;
    }
    else {
      $error_msg = 'Failed to send the email!';
      watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
      return FALSE;
    }
  }
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_task_allocation_cronapi($op, $job = NULL) {
  $items['task_complete_mail'] = array(
    'description' => 'Mail shoot after task completion date.',
    'weight' => 5,
    'callback' => 'itg_task_allocation_expirestatus_enddatemail',
  );
  /*$items['task_ending_mail'] = array(
    'description' => 'Mail shoot after task ending date.',
    'weight' => 5,
    'callback' => 'itg_task_allocation_expiredmail_enddate',
  );*/
  return $items;
}

/**
 * Implements custom validate of node add form for poll.
 * @param array $form
 * @param array reference $form_state
 */
function itg_task_allocation_node_form_validate($form, &$form_state) {

  $user_id = $form_state['values']['field_task_team_member']['und']['0']['target_id'];
  $total = db_select('users', 'u')
          ->fields('u', array('uid'))
          ->condition('u.uid', $user_id)->execute()->rowCount();
  if ($total == 0) {
    form_set_error('field_task_team_member', 'Please select valid team member.');
  }
}
/**
 * Check if user is logged in.
 * @return true or false   
 */
function check_user_logged_in() {
  global $user;
  if ($user->uid > 0) {
    return true;
  }
  else
    return false;
}
