<?php

module_load_include('inc', 'itg_user_forgot_password', 'includes/itg_user_forgot_password_mail');
module_load_include('inc', 'itg_sso_reg', 'includes/common_fn');

/**
 * Implements hook_menu().
 * {@inheritdoc}
 */
function itg_user_forgot_password_menu() {
  $menu['forgot-password'] = array(
    'title' => 'Forgot Password',
    'description' => 'Creates an ajax multistep form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_user_forgot_password_multistep_form'),
    'access callback' => TRUE,
  );

  $menu['forgototp'] = array(
    'title' => 'Test form',
    'page callback' => 'itg_forgot_otp_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $menu;
}


/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_user_forgot_password_theme($existing, $type, $theme, $path) {
  $themes = array(
    'itg_forgot_otp_mail' => array(
      'variables' => array('rand_otp' => NULL),
      'template' => 'templates/user-otp-mail',
    )
  );

  return $themes;
}

/**
 * Implements hook_form().
 * {@inheritdoc}
 */
function itg_user_forgot_password_multistep_form($form, &$form_state) {

  $arg = arg();
  if(!empty($arg[1])) {
    $appnd_to_lnk = '/'.$arg[1];
  }
  // If $form_state['step'] is not set, we set it to 1
  $form_state['step'] = isset($form_state['step']) ? $form_state['step'] : 1;
  global $user, $base_url;
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;

  drupal_add_js(array('itg_user_forgot_password' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_user_forgot_password') . '/js/itg_user_forgot_password.js', array('scope' => 'footer'));
  // Add a wrapper div that will be used by the Form API to update the form using AJAX
  if ($form_state['step'] == '1') {
    $fn_link = 'saml_login/other' . $appnd_to_lnk;
    $signup = 'signup' . $appnd_to_lnk;
    $ext_div = '<div class="sign-in-link">' . l('Already Register ? Sign in', $fn_link, array('attributes' => array('class' => array('signin-link')))) . l('Not Registered ? Sign up', $signup, array('attributes' => array('class' => array('signup-link')))) . '</div>';
    $form['#prefix'] = '<div id="itg_user_forgot_password_multistep_form"><div class="center-heading"><h2>Forgotten or need to reset your password ?</div><div class="parent-background">';
    $form['#suffix'] = $ext_div . '</div></div>';
  }
  else {
    $form['#prefix'] = '<div id="itg_user_forgot_password_multistep_form">';
    $form['#suffix'] = $ext_div . '</div>';
  }
  $form['#attributes'] = array('autocomplete' => 'off');

  // Depending on which step of the form we are on, we output different form fields
  switch ($form_state['step']) {
    // Step 1
    case 1:
      $default_value = '';
      if (isset($form_state['values']['step_1'])) {
        $default_value = $form_state['values']['step_1'];
      }
      elseif (isset($form_state['storage']['step_1'])) {
        $default_value = $form_state['storage']['step_1'];
      }

      $form['domain_info'] = array(
        '#title' => '',
        '#description' => '',
        '#id' => '',
        '#type' => 'hidden',
        '#value' => $arg[1],
        '#attributes' => array('placeholder' => t('')),

      );


      $form['heading_markup'] = array(
        '#markup' => '<div id="forgot-field-heading">'.t('Enter Email ID / Mobile').'</div><div id="ufname">'.t('OTP will be sent to your Email ID/Mobile. Once verified,<br/>you will be able to reset your password').'</div>',
      );

      $form['ufname'] = array(
        '#title' => '',
        '#description' => '',
        '#type' => 'textfield',
        '#attributes' => array('placeholder' => t('Email ID/Mobile'), 'autocomplete' => 'off'),
        '#prefix' => '',
        '#suffix' => '<div class="forgot-error"></div>',
        '#default_value' => $default_value,
      );

      break;

    // Step 2
    case 2:
      $default_value = '';
      if (isset($form_state['values']['step_2'])) {
        $default_value = $form_state['values']['step_2'];
      }
      elseif (isset($form_state['storage']['step_2'])) {
        $default_value = $form_state['storage']['step_2'];
      }

      $unemail = $form_state['values']['ufname'];

      $form['domain_info'] = array(
        '#title' => '',
        '#description' => '',
        '#id' => '',
        '#type' => 'hidden',
        '#value' => $form_state['values']['domain_info'],
        '#attributes' => array('placeholder' => t('')),

      );

      $form['ufname'] = array(
        '#title' => '',
        '#description' => '',
        '#type' => 'hidden',
        '#value' => $unemail,
      );

      $form['fotp'] = array(
        '#title' => '',
        '#description' => '',
        '#type' => 'textfield',
        '#maxlength' => 4,
        '#attributes' => array('placeholder' => t('OTP'), 'autocomplete' => 'off'),
        '#prefix' => '<div id="fotp">',
      );


      $form['forgot_otp_links'] = array(
        '#markup' => '<div id="forgototpclickme">Resend OTP</div>',
      );

      $form['loader'] = array(
        '#markup' => '<div id="ajax-loader" style="display:none">
      <img src="' . base_path() . path_to_theme() . '/images/loader.svg" alt=""/>
      </div>
    ',
      );

      $form['forgot_otp_success'] = array(
        '#markup' => '<div id="forgot_otp_success"></div>',
        '#suffix' => '</div>',
      );

      break;

    // Step 3
    case 3:
      $default_value = '';
      if (isset($form_state['values']['step_3'])) {
        $default_value = $form_state['values']['step_3'];
      }
      elseif (isset($form_state['storage']['step_3'])) {
        $default_value = $form_state['storage']['step_3'];
      }

      $unemail = $form_state['values']['ufname'];

      $form['domain_info'] = array(
        '#title' => '',
        '#description' => '',
        '#id' => '',
        '#type' => 'hidden',
        '#value' => $form_state['values']['domain_info'],
        '#attributes' => array('placeholder' => t('')),

      );

      $form['ufname'] = array(
        '#type' => 'hidden',
        '#title' => t('Username or Email'),
        '#value' => $unemail
      );

      // Password confirm field.
      $form['account']['pass'] = array(
        '#type' => 'password_confirm',
        '#size' => 25,
        '#attributes' => array('autocomplete' => 'off'),
        '#title' => t(''),
        '#required' => TRUE
      );

      break;

    // Step 4
    case 4:
      $default_value = '';
      if (isset($form_state['values']['step_4'])) {
        $default_value = $form_state['values']['step_4'];
      }
      elseif (isset($form_state['storage']['step_4'])) {
        $default_value = $form_state['storage']['step_4'];
      }

      if (!empty($form_state['values']['domain_info'])) {
        $append_lnk = '/'.$form_state['values']['domain_info'];
      }
      else
      {
        $append_lnk = '';
      }
        $fn_link = 'saml_login/other' . $append_lnk;
        $ext_div = '<div class="sign-in-link">' . l('Click here to sign in', $fn_link, array('attributes' => array('class' => array('sso-sign-in')))) . '</div>';

      $form['thank-you'] = array(
        '#markup' => '<div id="thank-you">'. l('Your password has been changed, Please login to continue!', $fn_link) .'</div>',
      );

      break;
  }

  // Create a container for our buttons
  $form['buttons'] = array
    (
    '#type' => 'container',
  );

  // We only want a forward button if we are not on the last step of the form
  // change butoon value based on step
  if ($form_state['step'] == 1) {

    $button = 'Submit';
  }
  if ($form_state['step'] == 2) {
    $button = 'Validate';
  }

  if ($form_state['step'] !== 3 && $form_state['step'] !== 4) {
    $form['buttons']['forward'] = array
      (
      '#type' => 'submit',
      '#value' => $button,
      '#ajax' => array
        (
        // We pass in the wrapper we created at the start of the form
        'wrapper' => 'itg_user_forgot_password_multistep_form',
        // We pass a callback function we will use later to render the form for the user
        'callback' => 'itg_user_forgot_password_multistep_form_ajax_callback',
      ),
    );
  }
  // We only want a submit button if we are on the last step of the form
  if ($form_state['step'] == 3) {

    $form['buttons']['submit'] = array
      (
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#ajax' => array
        (
        // We pass in the wrapper we created at the start of the form
        'wrapper' => 'itg_user_forgot_password_multistep_form',
        // We pass a callback function we will use later to render the form for the user
        'callback' => 'itg_user_forgot_password_multistep_form_ajax_callback',
      ),
    );
  }

  return $form;
}

/**
 * Implements hook_validate().
 * {@inheritdoc}
 */
function itg_user_forgot_password_multistep_form_validate($form, &$form_state) {
  // First we set up a switch for each of our three steps
  switch ($form_state['step']) {
    case "1":
      $error = array();
      // Check that the first value is alphabetic
      $ufname = $form_state['values']['ufname'];
      if(empty($ufname)) {
       form_set_error('ufname', t(""));
       $error['ufname'] = t('Enter valid Email ID/Mobile');
      }
      else if (is_numeric($ufname)) {
        if (function_exists(itg_sso_user_mobile_check)) {
          $get_user_check_mobile = itg_sso_user_mobile_check($ufname);
          if (empty($get_user_check_mobile)) {
            form_set_error('ufname', t(""));
            $error['ufname'] = t('Mobile No. Does Not Exist!');
          } else {

          }
        }
      }
      //else {
       else if (function_exists(itg_sso_user_email_check)) {
          $get_user_check_email = itg_sso_user_email_check($ufname);
          if (empty($get_user_check_email)) {
            form_set_error('ufname', t(""));
            $error['ufname'] = t('Email ID Not Exist!');
          }
        }
        else {
          $error['ufname'] = '';
        }
      //}
      $error_settings = array();
      $error_settings['forgot_error'] = $error;
      drupal_add_js(array('itg_user_forgot_password' => array('settings' => $error_settings)), array('type' => 'setting'));
      break;

    case "2":
      // Check that the second value is numeric
      $unemail = $form_state['values']['unemail'];
      $otp = $form_state['values']['fotp'];
      if (function_exists(itg_sso_reg_get_otp)) {
        if (is_numeric($ufname)) {
          $otp_match = itg_sso_reg_get_otp($unemail, $email = '', 'reset');
        }
        else {
          $otp_match = itg_sso_reg_get_otp($mobile = '', $unemail, 'reset');
        }
      }

      if (empty($otp)) {

        form_set_error('otp', t("Enter OTP!"));
      }

      if ($otp_match != $otp) {

        form_set_error('otp', t("Enter valid OTP!"));
      }
      break;

    case "3":
      // Check that the third value is alphanumeric
      $uname = $form_state['values']['ufname'];
      if (is_numeric($uname)) {
        if (function_exists(itg_sso_user_mobile_check)) {
          $get_user_check_mobile = itg_sso_user_mobile_check($uname);
        }
        if (!empty($get_user_check_mobile)) {
          $account = user_load($get_user_check_mobile);
        }
      }
      else {
        if (function_exists(itg_sso_user_email_check)) {
          $get_user_check_email = itg_sso_user_email_check($uname);
        }
        if (!empty($get_user_check_email)) {
          $account = user_load($get_user_check_email);
        }
      }

      $min_length = 3;
      $max_length = 10;
      $pass = $form_state['values']['pass'];
      if (strlen($pass) < $min_length) {
        form_set_error('pass', t('password is too short, minimum is '. $min_length. ' characters '));
      }
      elseif (strlen($pass) > $max_length) {
        form_set_error('pass', t('password is too long, maximum is '. $max_length. ' characters '));
      }

      break;
  }
}

/**
 * Implements hook_form_submit().
 * {@inheritdoc}
 */
function itg_user_forgot_password_multistep_form_back_submit($form, &$form_state) {
  $form_state['step'] --;

  // Because this is a multi-step form, we always need to rebuild the form
  // on every step, even after submission. This allows our form to be completely
  // Ajaxified without ever requiring a page load.
  $form_state['rebuild'] = TRUE;
}

function itg_user_forgot_password_multistep_form_submit($form, &$form_state) {
  // First we determine which step we are on, and save the
  // submitted values to $form_state['storage']. This will
  // allow our submitted values to persist.
  $step = $form_state['step'];

  $form_state['storage']['step_' . $step] = $form_state['values']['step_' . $step];

  // Check to see if the next/forward button was clicked
  if (isset($form_state['values']['forward']) && $form_state['values']['op'] == $form_state['values']['forward']) {
    // Increase the step by one, to move on to the next step
    if ($step == '1') {

      $ufname = $form_state['values']['ufname'];
      if (is_numeric($ufname)) {
        $rand_otp = rand(0, 9999);
        if (function_exists(itg_sso_first_time_otp_insert)) {
          itg_sso_first_time_otp_insert($ufname, $email = '', $rand_otp, 'reset');
          itg_sso_sms_send($rand_otp, $ufname);
        }
        drupal_set_message('Please check your mobile for otp');
        // to do mobile script for sending sms
      }
      else {
        $rand_otp = rand(0, 9999);
        if (function_exists(itg_sso_first_time_otp_insert)) {
          itg_sso_first_time_otp_insert($mobile = '', $ufname, $rand_otp, 'reset');
        }
        if (function_exists(itg_forgot_otp_content)) {
          $mail_content = itg_forgot_otp_content($rand_otp, $ufname);
        }
        drupal_set_message('Please check your mail for otp');
      }

      $form_state['step'] ++;
    }

    if ($step == '2') {

      $ufname = $multstep_values['username_step']['ufname'];
      $uotp = $multstep_values['otp_step']['fotp'];

      if (is_numeric($ufname)) {
        if (function_exists(itg_sso_user_mobile_check)) {
          $get_user_check_mobile = itg_sso_user_mobile_check($ufname);
        }
        if (function_exists(itg_sso_otp_delete)) {
          itg_sso_otp_delete($mail = '', $ufname, 'reset');
        }
      }
      else {
        if (function_exists(itg_sso_user_email_check)) {
          $get_user_check_email = itg_sso_user_email_check($ufname);
        }
        // $account = user_load($get_user_check_email);
        // $mail_content = itg_forgot_email_get_mail_content($account, $ufname);
        if (function_exists(itg_sso_otp_delete)) {
          itg_sso_otp_delete($ufname, $mobile = '', 'reset');
        }
      }

      $form_state['step'] ++;
    }
  }
  // Check to see if the final step has been submitted
  elseif (isset($form_state['values']['submit']) && $form_state['values']['op'] == $form_state['values']['submit']) {
    // Here we will collect the data and show the submitted values to the user in a message.
    // In a real-world application of this form, you would use the submitted values to complete the
    // purpose of the form - save them to the database and/or send an email and/or display something
    // to the user etc. The following is just s simple example to show how the values can be used.
    //$items = array($form_state['storage']['step_1'], $form_state['storage']['step_2'], $form_state['storage']['step_3']);
    //drupal_set_message(t('You submitted the following values:!values', array('!values' => theme('item_list', array('items' => $items)))));
    $multstep_values = $form_state['multistep_values'];
    $uname = $form_state['values']['ufname'];
    if (is_numeric($uname)) {
      if (function_exists(itg_sso_user_mobile_check)) {
        $get_user_check_mobile = itg_sso_user_mobile_check($uname);
      }
      if (!empty($get_user_check_mobile)) {
        $account = user_load($get_user_check_mobile);
      }
    }
    else {
      if (function_exists(itg_sso_user_email_check)) {
        $get_user_check_email = itg_sso_user_email_check($uname);
      }
      if (!empty($get_user_check_email)) {
        $account = user_load($get_user_check_email);
      }
    }


    $edit = array('pass' => $form_state['values']['pass']);

    // Save the account with the new password.
    user_save($account, $edit);
    // The form has been completed, so we want to return the user to step 1
    // as well as clear any saved values.
    $form_state['step'] = 4;
    $form_state['storage'] = array();
  }

  // As in ajax_form_multistep_form_back_submit(), we need to set
  // $form_state['rebuild'] to TRUE, in able to ensure that our
  // our form is rebuilt, allowing for the multi-step process
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements itg_user_forgot_password_multistep_form_ajax_callback().
 * @param $form
 * @param $form_state
 */

function itg_user_forgot_password_multistep_form_ajax_callback($form, &$form_state) {
  return $form;
}


/**
 * Send otp mail to sso user
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_user_forgot_password_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_forgot_otp_mail':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Implement itg_forgot_otp_callback
 */
function itg_forgot_otp_callback() {

  $mobile = $_POST['mobile'];
  $email = $_POST['email'];
  $rand_otp = $_POST['otp'];
  $source = $_POST['source'];
  $otp_exist = itg_sso_otp_check($mobile, $email, $source);

  if ($otp_exist) {
    $otp = db_update('itg_sso_reg_otp_info');
    $otp->expression('otp_count', 'otp_count + 1');// Table name no longer needs {}
    $otp->condition('id', $otp_exist, '=');
    $otp ->fields(array(
      'otp' => $rand_otp,
      'created' => date('Y-m-d G:i:s'),
    ));

    $otp->execute();
    if(!empty($email)) {
    $mail_content = itg_forgot_otp_content($rand_otp, $email);
    }
    if(!empty($mobile)) {
    $mail_content = itg_sso_sms_send($rand_otp, $mobile);
    }
  }
}
