<?php

/**
 * @file
 * The ITG Survey module.
 *
 * Contains functionality for survey.
 *
 */

/**
 * Implements hook_permission
 * {@inheritdoc}
 */
function itg_survey_permission() {
    return array(
    'survey admin users' => array(
      'title' => t('Access Survey Result'),
    )
  );
}

/**
 * Implements hook_menu
 * {@inheritdoc}
 */
function itg_survey_menu() {
  
  $items = array();
  
  $items['itg-survey/%'] = array(
      'title' => t('Survey'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('itg_survey_survey_form'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_survey_form.inc',
  );
  
  $items['survey-result/%'] = array(
       'title' => t('Survey'),
      'page callback' => 'itg_survey_result',
      'access callback' => 'user_access',
      'access arguments' => array('survey admin users'),
      'file' => 'includes/itg_survey_result.inc',
  );

  return $items;
}

/**
 * Implements hook_theme
 * {@inheritdoc}
 */
function itg_survey_theme() {
  $path = drupal_get_path('module', 'itg_survey') . '/templates';
  return array(    
    'itg_survey_form' => array(
      'variable' => array('data' => NULL),
      'template' => 'templates/itg-survey-form',
      'render element' => 'form',
    ),
    'survey_tab_form_display_block' => array(
      'template' => 'survey-form-tab-template',
      'path' => drupal_get_path('module', 'itg_survey') . '/templates',
      'variables' => array('data' => NULL),
    ), 
 );
}

/***************************Form Related hooks*********************************/
/**
 * Implements hook_form_alter
 * {@inheritdoc}
 */
function itg_survey_form_alter(&$form, &$form_state, $form_id) {

  // Set destination for survey form
  if ($form_id == 'survey_node_form') {
         $form['field_survey_category']['und']['#config']['module'] = 'itg_category_manager';

      // Set Destination
      $destination = 'manage-survey';
     
      // Form fields treatment
      $form['title']['#title'] = 'Survey Title';
      $form['title']['#description'] = '<p>' . t('Please enter survey title.') . '</p>';
      
      if(is_numeric(arg(1)) && arg(2) == 'edit') {
        $form['actions']['view_survey_result'] = array(
          '#markup' => l(t('View Survey Result'), 'survey-result/'.arg(1), array('attributes' => array('class' => 'button', 'target'=>'_blank'))),
          '#weight' => 20,
          '#value' => t('View Survey Result'),
        );
      }
            
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
        '#weight' => 21,
        '#value' => t('Cancel'),
      );
                 
      $form['field_survey_add_questions'][LANGUAGE_NONE]['#title'] = '';
      
      // Unset add more answer option
      unset($form['field_survey_add_questions'][LANGUAGE_NONE][0]['field_survey_answer_option_more']);
      
      // After build and custom submit callback
      $form['#after_build'][] = 'itg_survey_form_after_build';
      $form['actions']['submit']['#submit'][] = 'itg_survey_form_custom_submit_callback';
    }
    
    if($form_id == 'itg_survey_survey_form'){
      drupal_set_title('India Today Survey');
    }
}

/**
 * Custom function on submit of survey form
 * @param array $form
 * @param array $form_state
 */
 function itg_survey_form_custom_submit_callback($form, &$form_state) {
  
  // Unset drupal redirection and add custom redirection URL
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  $form_state['redirect'] = 'manage-survey';

  // Set custom message on creation/updation of survey form.
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }
  
  $title = $form_state['node']->title;
  if (arg(2) == 'edit') {
    drupal_set_message(t('Survey <strong>@title</strong> has been updated.', array('@title' => $title)));
  } else {
    drupal_set_message(t('Survey <strong>@title</strong> has been submitted for further review and approval.', array('@title' => $title)));
  }
}

/**
 * After build function for survey
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_survey_form_after_build($form, &$form_state) {
  global $user, $base_url;
  
  // Get node type
  if (arg(0) == 'node') {
    if (arg(1) == 'add') {
        $type = arg(2);
        $nid = '';
    } else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }

  // Array used in itg_survey.js
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;
  drupal_add_js(array('itg_survey' => array('settings' => $settings)), array('type' => 'setting'));
  
  // Add JS for survey
   drupal_add_js(drupal_get_path('module', 'itg_survey') . '/js/itg_survey.js', array('weight' => 1));
   
   $form['#attached']['js'] = array(
    drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js',
   );
    
  // Unset metatag description
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags'][LANGUAGE_NONE]['basic']['#title']);
  unset($form['metatags'][LANGUAGE_NONE]['basic']['#description']);
 
  return $form;
}

/*******************************View Related hooks*****************************/

/**
 * Implement hook_views_pre_render
 * {@inheritdoc}
 */
function itg_survey_views_pre_render(&$view) {
  
  // Add "Create Survey" button on listing page of survey
  if ($view->name == "manage_survey") {
    $header_content_survey = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_survey .= l(t('Create Survey'), 'node/add/survey');
    $view->attachment_before = $header_content_survey;
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * {@inheritdoc}
 */
function itg_survey_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  
   if ($form['#id'] == 'views-exposed-form-manage-survey-page') {
     
     //Call function autocomplete to show matching titles
     $form['title']['#autocomplete_path'] = 'content-title-list/survey/autocomplete';
     $form['title']['#attributes'] = array('placeholder' => t('Title'));     
   }
}

/**
 * Implement hook_node_presave
 *  
 * {@inheritdoc}
 */
function itg_survey_node_presave($node){
  
  // Publish/unpublish functionality for survey
  if ($node->type == 'survey') {
    if ($node->is_new == 1) {
      $node->status = $node->field_supp_publish[LANGUAGE_NONE][0]['value'];
    }
    else {
      $publish = $node->field_supp_publish[LANGUAGE_NONE][0]['value'] ? 1 : 0;
      $node->status = $publish;
      field_attach_update('node', $node);
    }
  }
}

/**
 * Implement hook_node_insert
 *  
 * {@inheritdoc}
 */
function itg_survey_node_insert($node) {
  
  if($node->type == 'survey'){
    // Insert in to survey notification table
    itg_survey_insert_notification_details($node->nid, strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']), 'insert');
  }
}

/**
 * Implement hook_node_update
 *  
 * {@inheritdoc}
 */
function itg_survey_node_update($node) {
  
  if($node->type == 'survey'){
    // Update date in survey notification table, if updated
    itg_survey_insert_notification_details($node->nid, strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']), 'update');
  }
}


/**
 * Implement hook_node_validate
 *  
 * {@inheritdoc}
 */
function itg_survey_node_validate($node, $form, &$form_state) {
  
  if ($node->type == 'survey') {
    $survey_start_date = $node->field_survey_start_date[LANGUAGE_NONE][0]['value'];
    $survey_end_date = $node->field_survey_end_date[LANGUAGE_NONE][0]['value'];
    
    // Validation for survey start and end date
    if (!empty($survey_end_date) && (strtotime($survey_start_date) > strtotime($survey_end_date))) {
      form_set_error('field_survey_end_date', t('Survey end date must be greater or equal to start date.'));
    }
  }

  // Validation for answer choices
  foreach ($node->field_survey_add_questions[LANGUAGE_NONE] as $key => $question_arr) {
    $answer_type = $question_arr['field_survey_answer_type'][LANGUAGE_NONE][0]['value'];
    if ($answer_type == 'radios' || $answer_type == 'checkboxes') {
      $ans_op1 = $question_arr['field_survey_answer_option_1'][LANGUAGE_NONE][0]['value'];
      $ans_op2 = $question_arr['field_survey_answer_option_2'][LANGUAGE_NONE][0]['value'];
      if(empty($ans_op1) || empty($ans_op2)){
        form_set_error('field_survey_answer_option_1', t('Please provide atleast two answer choices for question <strong>@question?<strong>', array('@question' => $question_arr['field_survey_question'][LANGUAGE_NONE][0]['value'])));
      }
    }
  }
}

/*******************************Common Functions*****************************/

/**
 * Get Active node for survey
 * @return array
 */
function itg_survey_get_current_survey() {
  $curr_time = strtotime(date('Y-m-d').' 00:00:00');
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
          ->condition('n.type', 'survey', '=')
          ->condition('n.status', 1, '=')
          ->orderBy('n.created', 'DESC')
          ->range(0, 1);
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $nid = $record['nid'];
  }

  // Load Node
  $node = node_load($nid);
  $survey_end_date = strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']);

  if (!empty($node->field_survey_end_date[LANGUAGE_NONE][0]['value'])) {
    if ($survey_end_date < $curr_time) {
      return FALSE;
    }
    else {
      return $node;
    }
  } 
  else {
    return $node;
  }
}

/**
 * Get survey percentage taken by a user type(Anonymous/Authenticated)
 * @param int $nid
 * @param string $user_type
 * @return string
 */
function itg_survey_get_survey_by_users($nid, $user_type){
  
  // Get total survey for a node
  $total_survey = itg_survey_get_total_survey($nid);
  if (!$total_survey) {
    return '0%';
  }
  else {
    $result = db_select('itg_survey_user', 'su')
            ->fields('su')
            ->condition('su.user_type', $user_type, '=')
            ->condition('su.nid', $nid, '=')
            ->execute();
    $total_survey_by_user = $result->rowCount();
    $survey_percentage = ($total_survey_by_user / $total_survey) * 100;
    return round($survey_percentage, 2) . '%';
  }
}

/**
 * Get total number of survey taken by users for a node
 * @param Int $nid
 * @return Int
 */
function itg_survey_get_total_survey($nid){
    $result = db_select('itg_survey_user', 'isu')
            ->fields('isu')
            ->condition('isu.nid', $nid, '=')
            ->execute();
    $total_survey = $result->rowCount();
    if($total_survey){
      return $total_survey;
    }
    else {
      return 0;
    }
    
}

/**
 * Get total vote of a perticular answer for a individual question
 * @param Int $nid
 * @param Int $ques_id
 * @param String $answer
 * @return string
 */
function itg_survey_vote_percentage($nid, $ques_id, $answer){
  
  $total_vote_on_question = itg_survey_get_total_vote_question($nid, $ques_id, $answer, NULL);
  
  if (!$total_vote_on_question) {
    return '0%';
  }
  else {
    $result = db_select('itg_survey_detail', 'su')
            ->fields('su')
            ->condition('su.ques_id', $ques_id, '=')
            ->condition('su.nid', $nid, '=')
            ->condition('su.answer', $answer, '=')
            ->condition('su.survey_info', 1, '=')
            ->execute();
    $total_answwer_for_ques = $result->rowCount();
    $vote_percentage = ($total_answwer_for_ques / $total_vote_on_question) * 100;
    return round($vote_percentage, 2) . '%';
  }
}

/**
 * 
 * @param int $nid
 * @param int $ques_id
 * @param string $answer
 * @param string $user_type
 * @return string
 */
function itg_survey_vote_percentage_user($nid, $ques_id, $answer, $user_type){

  $total_vote_on_question_user = itg_survey_get_total_vote_question($nid, $ques_id, $answer, $user_type);
  
  if (!$total_vote_on_question_user) {
    return '0%';
  } else {
    $result = db_select('itg_survey_detail', 'su')
            ->fields('su')
            ->condition('su.ques_id', $ques_id, '=')
            ->condition('su.nid', $nid, '=')
            ->condition('su.answer', $answer, '=')
            ->condition('su.user_type', $user_type, '=')
            ->condition('su.survey_info', 1, '=')
            ->execute();
    $total_answwer_for_ques_user = $result->rowCount();
    $vote_percentage = ($total_answwer_for_ques_user / $total_vote_on_question_user) * 100;
    return round($vote_percentage, 2) . '%';
  }
}

/**
 * Get total vote for a question
 * @param int $nid
 * @param int $ques_id
 * @return int
 */
function itg_survey_get_total_vote_question($nid, $ques_id, $answer, $user_type){
  if ($user_type) {
    $result = db_select('itg_survey_detail', 'isu')
            ->fields('isu')
            ->condition('isu.nid', $nid, '=')
            ->condition('isu.ques_id', $ques_id, '=')
            ->condition('isu.answer', $answer, '=')
            ->condition('isu.survey_info', 1, '=')
            ->execute();
  } else {
    $result = db_select('itg_survey_detail', 'isu')
            ->fields('isu')
            ->condition('isu.nid', $nid, '=')
            ->condition('isu.ques_id', $ques_id, '=')
            ->condition('isu.survey_info', 1, '=')
            ->execute();
  }

  $total_question_vote = $result->rowCount();
  if ($total_question_vote) {
    return $total_question_vote;
  } else {
    return 0;
  }
}

/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_survey_block_info() {
  $blocks['survey_tab_form_block'] = array(
    'info' => t('Survey Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_survey_block_view($delta = '') {
  $block = array();
  $data = '';
  switch ($delta) {
    case 'survey_tab_form_block':                       
      $block['content'] = theme('survey_tab_form_display_block', array('data' => $data));
    break;        
  }
  
  return $block;
}

/**
 * View survey result link on survey listing page.
 * @param type $nid
 * @return string
 */
function itg_survey_show_survey_result($nid){
  if(itg_common_check_record_existance($nid, 'itg_survey_detail', 'nid') > 0){
    return l('View Result','survey-result/'.$nid, array('attributes' => array('target'=>'_blank')));
  } else {
    return 'View Result';
  }
}

/**
 * Return name as per dropdown used on view survey page
 * 
 * @param string $name
 */
function itg_survey_get_answer_type_name($name){
  switch ($name) {
        case 'radios':
          $name = 'Radio Button';
      break;
        case 'checkboxes':
          $name = 'Checkbox';
      break;
        case 'rating':
          $name = 'Rating';
      break;
        case 'textfield':
          $name = 'Text Field';
      break;
  }
  return ucwords($name);
}

/**
 * Access denied for expired survey
 * @param object $node
 * @param string $op
 * @param array $account
 * @return string
 */
function itg_survey_node_access($node, $op, $account) {
  global $user;
  
  if (!in_array('Site Admin', $user->roles)) {
    $curr_time = strtotime(date('Y-m-d') . ' 00:00:00');
    
    $survey_start_date = strtotime($node->field_survey_start_date[LANGUAGE_NONE][0]['value']);
    $survey_end_date = strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']);

    $node_edit = FALSE;

    if ($curr_time > $survey_end_date) {
      $node_edit = TRUE;
    }
    
    if ($curr_time >= $survey_start_date) {
      $node_edit = TRUE;
    }

    if (isset($node->type) && ($node->type == 'survey' || $node->type == 'quiz') && $node_edit) {
      if ($op == 'update') {
        return NODE_ACCESS_DENY;
      }
    }
    return NODE_ACCESS_IGNORE;
  }
}

/**
 * Insert survey expiry date in to notification table 
 * 
 * Send mail before 24 hours of survey expiration
 * 
 * @param int $nid
 * @param string $expiry_date
 */
function itg_survey_insert_notification_details($nid, $expiry_date, $op) {
  
  if ($op == 'insert') {
    db_insert('itg_survey_ntf')
            ->fields(array(
                'nid' => $nid,
                'survey_expiry' => $expiry_date,
                'status' => 'N',
                'created' => time()
            ))
            ->execute();
  } else {
    db_update('itg_survey_ntf')
            ->fields(array(
                'survey_expiry' => $expiry_date,
            ))
            ->condition('nid', $nid, '=')
            ->execute();
  }
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_survey_cronapi($op, $job = NULL) {
  $items['itg_survey_expiry_notification'] = array(
    'description' => 'Send mail before 24 hours for survey expiration',
    'callback' => 'itg_survey_expiry_notification_callback', 
  );
  return $items;
}

/**
 * Send notification mail before 24 hours of survey expiration
 */
function itg_survey_expiry_notification_callback(){
  
  // Include survey notification mail inc file
  module_load_include('inc', 'itg_survey', 'includes/survey_notification_mail');
  
  $current_time = time();
  
  $query = db_select('itg_survey_ntf', 's');
  $query->fields('s')
          ->condition('s.status', 'N', '=');
  $result = $query->execute();
  
  // Fetch node to send notification
  while($record = $result->fetchAssoc()){
    $end_date = $record['survey_expiry'];
    $diff = $end_date - $current_time;
    $diff_in_hours = round($diff / ( 60 * 60 ));
    if($diff_in_hours > 0){
      if($diff_in_hours <= 24){
        itg_survey_send_mail_for_notification($record['nid']);
      }
    }
  }
}

/**
 * Callback to send notification mail
 * @param type $nid
 */
function itg_survey_send_mail_for_notification($nid) {
  
  $node = node_load($nid);
  $user = user_load($node->uid);
  
  $mail_content = itg_survey_get_mail_content($node, $user);
  $params = array(
      'body' => $mail_content,
      'subject' => 'India Today | Survey Expired',
    );
  $user_email_str = $user->mail;
  drupal_mail('itg_survey_send_notification', 'send_survey_noti', $user_email_str, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
  
  // Update mail status after sending notification      
  db_update('itg_survey_ntf')
          ->fields(array(
              'status' => 'Y',
          ))
          ->condition('nid', $nid, '=')
          ->execute();
 
}

/**
 * Mail function to send notification
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_survey_send_notification_mail($key, &$message, $params){
  switch ($key) {
    case 'send_survey_noti':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Get survey notification mail body
 * @param int $nid
 * @return string
 */
function itg_survey_get_mail_content($node, $user){
  
  $expiry_date = date('d/m/Y',strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']));
   
  $content = '<p>Dear '.$user->name.', </p><p>Survey <strong>'.$node->title.'</strong> will be expired soon.</p><p>Expiry Date: '.$expiry_date.'</p>';
  
  $content .='<p>&nbsp;</p><p>Thanks,</p><p>India Today Team</p>';
    
  return $content;
}
