<?php

/**
 * @file
 * The ITG Survey module.
 *
 * Contains functionality for survey.
 *
 */

/**
 * Implements hook_permission
 * 
 * {@inheritdoc}
 */
function itg_survey_permission() {
  return array(
    'survey admin users' => array(
      'title' => t('Access Survey Result'),
    )
  );
}

/**
 * Implements hook_menu
 * 
 * {@inheritdoc}
 */
function itg_survey_menu() {

  $items = array();

  $items['itg-survey/%'] = array(
    'title' => t('Survey'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_survey_survey_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_survey_form.inc',
  );

  $items['survey-result/%'] = array(
    'title' => t('Survey Result'),
    'page callback' => 'itg_survey_result',
    'access callback' => 'user_access',
    'access arguments' => array('survey admin users'),
    'file' => 'includes/itg_survey_result.inc',
  );

  $items['pqs/associate-with-story/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_survey_pqs_generatetokens'),
    'access callback' => 'user_access',
    'access arguments' => array('survey admin users'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_theme
 * 
 * {@inheritdoc}
 */
function itg_survey_theme() {
  $path = drupal_get_path('module', 'itg_survey') . '/templates';
  return array(
    'itg_survey_form' => array(
      'template' => 'itg-survey-form',
      'path' => $path,
      'render element' => 'form',
    ),
    'survey_tab_form_display_block' => array(
      'template' => 'survey-form-tab-template',
      'path' => drupal_get_path('module', 'itg_survey') . '/templates',
      'variables' => array('data' => NULL),
    ),
  );
}

/* * *************************Form Related hooks******************************** */

/**
 * Implements hook_form_alter
 * 
 * {@inheritdoc}
 */
function itg_survey_form_alter(&$form, &$form_state, $form_id) {

  // Set destination for survey form
  if ($form_id == 'survey_node_form') {
    $form['field_survey_category']['und']['#config']['module'] = 'itg_category_manager';
    unset($form['field_supp_publish']['und']['#options']['_none']);
    if (is_numeric(arg(1))) {
      $publish_value = itg_survey_get_publish_status(arg(1));
    }
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'survey' || $publish_value == 0) {
      unset($form['field_supp_publish']['und']['#options'][2]);
    }
    if ($publish_value == 1 || $publish_value == 2) {
      unset($form['field_supp_publish']['und']['#options'][0]);
    }
    // Set Destination
    $destination = 'manage-survey';

    // Form fields treatment
    $form['title']['#title'] = 'Survey Title';
    $form['title']['#description'] = '<p>' . t('Please enter survey title.') . '</p>';
    unset($form['field_supp_publish'][LANGUAGE_NONE]['#title']);

    if (is_numeric(arg(1)) && arg(2) == 'edit') {
      $form['actions']['view_survey_result'] = array(
        '#markup' => l(t('View Survey Result'), 'survey-result/' . arg(1), array('attributes' => array('class' => 'survey-view-result-btn', 'target' => '_blank'))),
        '#weight' => 20,
        '#value' => t('View Survey Result'),
      );
    }

    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
      '#weight' => 21,
      '#value' => t('Cancel'),
    );

    $form['field_survey_add_questions'][LANGUAGE_NONE]['#title'] = '';

    // Unset add more answer option
    unset($form['field_survey_add_questions'][LANGUAGE_NONE][0]['field_survey_answer_option_more']);

    // After build and custom submit callback
    $form['#after_build'][] = 'itg_survey_form_after_build';
    $form['actions']['submit']['#submit'][] = 'itg_survey_form_custom_submit_callback';
    $form['actions']['itg_custom_button']['#submit'][] = 'itg_survey_form_save_as_draft_submit_callback';
  }

  // Hide add token field from survey, quiz and poll form
  if ($form_id == 'survey_node_form' || $form_id == 'quiz_node_form' || $form_id == 'poll_node_form') {
    $form['field_pqs_add_token']['#access'] = FALSE;
  }
}

/**
 * Custom function on submit of survey form
 * @param array $form
 * @param array $form_state
 */
function itg_survey_form_custom_submit_callback($form, &$form_state) {

  // Unset drupal redirection and add custom redirection URL
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  $form_state['redirect'] = 'manage-survey';

  // Set custom message on creation/updation of survey form.
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }

  $title = $form_state['node']->title;
  if (arg(2) == 'edit') {
    drupal_set_message(t('Survey <strong>@title</strong> has been updated.', array('@title' => $title)));
  }
  else {
    drupal_set_message(t('Survey <strong>@title</strong> has been submitted for further review and approval.', array('@title' => $title)));
  }
}

/**
 * Custom function on submit of survey form
 * @param array $form
 * @param array $form_state
 */
function itg_survey_form_save_as_draft_submit_callback(&$form, &$form_state) {
  $form_state['redirect'] = 'manage-draft-survey';
}

/**
 * After build function for survey
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_survey_form_after_build($form, &$form_state) {
  global $user, $base_url;

  // Get node type
  if (arg(0) == 'node') {
    if (arg(1) == 'add') {
      $type = arg(2);
      $nid = '';
    }
    else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }

  if (!isset($form['#node']->nid)) {
    // hide remove button of first field on add form
    drupal_add_js('jQuery(document).ready(function() {
            jQuery("#edit-field-story-reporter-und-0-remove-button").hide();              
          });', array('type' => 'inline', 'scope' => 'footer'));
  }

  // Array used in itg_survey.js
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;
  drupal_add_js(array('itg_survey' => array('settings' => $settings)), array('type' => 'setting'));

  // Add JS for survey
  drupal_add_js(drupal_get_path('module', 'itg_survey') . '/js/itg_survey.js', array('weight' => 1));

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js',
  );

  // Hide multiple answer options in case of "rating" 
  for ($ques = 0; $ques <= $form['field_survey_add_questions']['und']['#max_delta']; $ques++) {
    if ($form['field_survey_add_questions']['und'][$ques]['field_survey_answer_type'][LANGUAGE_NONE]['#default_value'][0] == 'rating') {
      unset($form['field_survey_add_questions']['und'][$ques]['field_survey_answer_option_2']);
    }
  }

  // Unset metatag description
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags'][LANGUAGE_NONE]['basic']['#title']);
  unset($form['metatags'][LANGUAGE_NONE]['basic']['#description']);

  return $form;
}

/* * *****************************View Related hooks**************************** */

/**
 * Implement hook_views_pre_render
 * {@inheritdoc}
 */
function itg_survey_views_pre_render(&$view) {

  // Add "Create Survey" button on listing page of survey
  if ($view->name == "manage_survey") {
    $header_content_survey = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_survey .= l(t('Create Survey'), 'node/add/survey');
    $view->attachment_before = $header_content_survey;
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * 
 * {@inheritdoc}
 */
function itg_survey_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#id'] == 'views-exposed-form-manage-survey-page' || $form['#id'] == 'views-exposed-form-manage-survey-page-1'  || $form['#id'] == 'views-exposed-form-manage-survey-page-2') {

    // Call function autocomplete to show matching titles
    $form['title']['#autocomplete_path'] = 'content-title-list/survey/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
}

/**
 * Implement hook_node_presave
 *  
 * {@inheritdoc}
 */
function itg_survey_node_presave($node) {
// code modified on 6thfeb,2017
  /*
   * field_supp_publish can have 3 values
   * '0' for save as draft
   * '1' for publish and '2' for unpublish
   */
  if ($node->type == 'survey' && isset($node->field_supp_publish)) {
    switch ($node->field_supp_publish[LANGUAGE_NONE][0]['value']) {
      case '0':
        $node->status = 0;
        break;
      case '1':
        $node->status = 1;
        break;
      default :
        $node->status = 0;
        break;
    }
  }
}

/**
 * Implement hook_node_insert
 *  
 * {@inheritdoc}
 */
function itg_survey_node_insert($node) {

  if ($node->type == 'survey') {
    // Insert in to survey notification table
    itg_survey_insert_notification_details($node->nid, strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']), 'insert');
  }

  // Add token value
  if ($node->type == 'poll' || $node->type == 'quiz' || $node->type == 'survey') {
    $node->field_pqs_add_token[LANGUAGE_NONE][0]['value'] = '[ITG:' . strtoupper($node->type) . ':' . $node->nid . ']';
    field_attach_update('node', $node);
  }
}

/**
 * Implement hook_node_update
 *  
 * {@inheritdoc}
 */
function itg_survey_node_update($node) {

  if ($node->type == 'survey') {
    // Update date in survey notification table, if updated
    itg_survey_insert_notification_details($node->nid, strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']), 'update');
  }
}

/**
 * Implement hook_node_validate
 *  
 * {@inheritdoc}
 */
function itg_survey_node_validate($node, $form, &$form_state) {

  if ($node->type == 'survey') {
    $survey_start_date = $node->field_survey_start_date[LANGUAGE_NONE][0]['value'];
    $survey_end_date = $node->field_survey_end_date[LANGUAGE_NONE][0]['value'];

    // Validation for survey start and end date
    if (!empty($survey_end_date) && (strtotime($survey_start_date) > strtotime($survey_end_date))) {
      form_set_error('field_survey_end_date', t('Survey end date must be greater or equal to start date.'));
    }
    // Validation for answer choices
    foreach ($node->field_survey_add_questions[LANGUAGE_NONE] as $key => $question_arr) {
      $answer_type = $question_arr['field_survey_answer_type'][LANGUAGE_NONE][0]['value'];
      if ($answer_type == 'radios' || $answer_type == 'checkboxes') {
        $ans_op1 = $question_arr['field_survey_answer_option_1'][LANGUAGE_NONE][0]['value'];
        $ans_op2 = $question_arr['field_survey_answer_option_2'][LANGUAGE_NONE][0]['value'];
        if (empty($ans_op1) || empty($ans_op2)) {
          form_set_error('field_survey_answer_option_1', t('Please provide atleast two answer choices for question <strong>@question?<strong>', array('@question' => $question_arr['field_survey_question'][LANGUAGE_NONE][0]['value'])));
          // Validation for answer choices
          if (!empty($node->field_survey_add_questions[LANGUAGE_NONE])) {
            foreach ($node->field_survey_add_questions[LANGUAGE_NONE] as $key => $question_arr) {
              $answer_type = $question_arr['field_survey_answer_type'][LANGUAGE_NONE][0]['value'];
              if ($answer_type == 'radios' || $answer_type == 'checkboxes') {
                $ans_op1 = $question_arr['field_survey_answer_option_1'][LANGUAGE_NONE][0]['value'];
                $ans_op2 = $question_arr['field_survey_answer_option_2'][LANGUAGE_NONE][0]['value'];
                if (empty($ans_op1) || empty($ans_op2)) {
                  form_set_error('field_survey_answer_option_1', t('Please provide atleast two answer choices for question <strong>@question?<strong>', array('@question' => $question_arr['field_survey_question'][LANGUAGE_NONE][0]['value'])));
                }
              }
            }
          }
        }
      }
    }
  }
}

/* * *****************************Common Functions**************************** */

/**
 * Get Active node for survey
 * @return array
 */
function itg_survey_get_current_survey() {
  $curr_time = strtotime(date('Y-m-d') . ' 00:00:00');
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
      ->condition('n.type', 'survey', '=')
      ->condition('n.status', 1, '=')
      ->orderBy('n.created', 'DESC')
      ->range(0, 1);
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $nid = $record['nid'];
  }

  // Load Node
  $node = node_load($nid);
  $survey_end_date = strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']);

  if (!empty($node->field_survey_end_date[LANGUAGE_NONE][0]['value'])) {
    if ($survey_end_date < $curr_time) {
      return FALSE;
    }
    else {
      return $node;
    }
  }
  else {
    return $node;
  }
}

/**
 * Get survey percentage taken by a user type(Anonymous/Authenticated)
 * @param int $nid
 * @param string $user_type
 * @return string
 */
function itg_survey_get_survey_by_users($nid, $user_type) {

  // Get total survey for a node
  $total_survey = itg_survey_get_total_survey($nid);
  if (!$total_survey) {
    return '0%';
  }
  else {
    $result = db_select('itg_survey_user', 'su')
        ->fields('su')
        ->condition('su.user_type', $user_type, '=')
        ->condition('su.nid', $nid, '=')
        ->execute();
    $total_survey_by_user = $result->rowCount();
    $survey_percentage = ($total_survey_by_user / $total_survey) * 100;
    return round($survey_percentage, 2) . '%';
  }
}

/**
 * Get total number of survey taken by users for a node
 * @param int $nid
 * @return int
 */
function itg_survey_get_total_survey($nid) {
  $result = db_select('itg_survey_user', 'isu')
      ->fields('isu')
      ->condition('isu.nid', $nid, '=')
      ->execute();
  $total_survey = $result->rowCount();
  if ($total_survey) {
    return $total_survey;
  }
  else {
    return 0;
  }
}

/**
 * Get total vote of a perticular answer for a individual question
 * @param int $nid
 * @param int $ques_id
 * @param string $answer
 * @return string
 */
function itg_survey_vote_percentage($nid, $ques_id, $answer) {

  $total_vote_on_question = itg_survey_get_total_vote_question($nid, $ques_id, $answer, NULL);

  if (!$total_vote_on_question) {
    return '0%';
  }
  else {
    $result = db_select('itg_survey_detail', 'su')
        ->fields('su')
        ->condition('su.ques_id', $ques_id, '=')
        ->condition('su.nid', $nid, '=')
        ->condition('su.answer', $answer, '=')
        ->condition('su.survey_info', 1, '=')
        ->execute();
    $total_answwer_for_ques = $result->rowCount();

    $vote_percentage = ($total_answwer_for_ques / $total_vote_on_question) * 100;
    return round($vote_percentage, 2) . '%';
  }
}

/**
 * 
 * @param int $nid
 * @param int $ques_id
 * @param string $answer
 * @param string $user_type
 * @return string
 */
function itg_survey_vote_percentage_user($nid, $ques_id, $answer, $user_type) {

  $total_vote_on_question_user = itg_survey_get_total_vote_question($nid, $ques_id, $answer, $user_type);

  if (!$total_vote_on_question_user) {
    return '0%';
  }
  else {
    $result = db_select('itg_survey_detail', 'su')
        ->fields('su')
        ->condition('su.ques_id', $ques_id, '=')
        ->condition('su.nid', $nid, '=')
        ->condition('su.answer', $answer, '=')
        ->condition('su.user_type', $user_type, '=')
        ->condition('su.survey_info', 1, '=')
        ->execute();
    $total_answwer_for_ques_user = $result->rowCount();
    $vote_percentage = ($total_answwer_for_ques_user / $total_vote_on_question_user) * 100;
    return round($vote_percentage, 2) . '%';
  }
}

/**
 * Get total vote for a question
 * @param int $nid
 * @param int $ques_id
 * @return int
 */
function itg_survey_get_total_vote_question($nid, $ques_id, $answer, $user_type) {
  if ($user_type) {
    $result = db_select('itg_survey_detail', 'isu')
        ->fields('isu')
        ->condition('isu.nid', $nid, '=')
        ->condition('isu.ques_id', $ques_id, '=')
        ->condition('isu.answer', $answer, '=')
        ->condition('isu.survey_info', 1, '=')
        ->execute();
  }
  else {
    $result = db_select('itg_survey_detail', 'isu')
        ->fields('isu')
        ->condition('isu.nid', $nid, '=')
        ->condition('isu.ques_id', $ques_id, '=')
        ->condition('isu.survey_info', 1, '=')
        ->execute();
  }

  $total_question_vote = $result->rowCount();
  if ($total_question_vote) {
    return $total_question_vote;
  }
  else {
    return 0;
  }
}

/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_survey_block_info() {
  $blocks['survey_tab_form_block'] = array(
    'info' => t('Survey Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_survey_block_view($delta = '') {
  $block = array();
  $data = '';
  switch ($delta) {
    case 'survey_tab_form_block':
      $block['content'] = theme('survey_tab_form_display_block', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * View survey result link on survey listing page.
 * @param type $nid
 * @return string
 */
function itg_survey_show_survey_result($nid) {
  if (itg_common_check_record_existance($nid, 'itg_survey_detail', 'nid') > 0) {
    return l('View Result', 'survey-result/' . $nid, array('attributes' => array('target' => '_blank')));
  }
  else {
    return 'View Result';
  }
}

/**
 * Return name as per dropdown used on view survey page
 * 
 * @param string $name
 */
function itg_survey_get_answer_type_name($name) {
  switch ($name) {
    case 'radios':
      $name = 'Radio Button';
      break;
    case 'checkboxes':
      $name = 'Checkbox';
      break;
    case 'rating':
      $name = 'Rating';
      break;
    case 'textfield':
      $name = 'Text Field';
      break;
  }
  return ucwords($name);
}

/**
 * Access denied for expired survey and quiz
 * @param object $node
 * @param string $op
 * @param array $account
 * @return string
 */
function itg_survey_node_access($node, $op, $account) {
  global $user;

  // If user in not super admin
  if (!in_array('Site Admin', $user->roles)) {

    // Check for survey and quiz
    if (!empty($node->type) && ($node->type == 'survey' || $node->type == 'quiz')) {
      $curr_time = strtotime(date('Y-m-d') . ' 00:00:00');
      $survey_start_date = strtotime($node->field_survey_start_date[LANGUAGE_NONE][0]['value']);
      $survey_end_date = strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']);

      $node_edit = FALSE;
      if (($curr_time >= $survey_start_date) || ($curr_time > $survey_end_date)) {
        $node_edit = TRUE;
      }
      $condition = ($node->field_supp_publish[LANGUAGE_NONE][0]['value'] == 2 || $node->field_supp_publish[LANGUAGE_NONE][0]['value'] == 1) ;
      // If condition is true, user doesn't allow to see node
      if (($node_edit && $op == 'update' && !(array_key_exists(10, $account->roles)) && $condition) || user_is_anonymous() || ($op == 'update' && $node->uid != $user->uid)) {
        return NODE_ACCESS_DENY;
      }
    }
    return NODE_ACCESS_IGNORE;
  }
}

/**
 * Insert survey expiry date in to notification table 
 * 
 * Send mail before 24 hours of survey expiration
 * 
 * @param int $nid
 * @param string $expiry_date
 */
function itg_survey_insert_notification_details($nid, $expiry_date, $op) {

  if ($op == 'insert') {
    db_insert('itg_survey_ntf')
        ->fields(array(
          'nid' => $nid,
          'survey_expiry' => $expiry_date,
          'status' => 'N',
          'created' => time()
        ))
        ->execute();
  }
  else {
    db_update('itg_survey_ntf')
        ->fields(array(
          'survey_expiry' => $expiry_date,
        ))
        ->condition('nid', $nid, '=')
        ->execute();
  }
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_survey_cronapi($op, $job = NULL) {
  $items['itg_survey_expiry_notification'] = array(
    'description' => 'Send mail before 24 hours for survey expiration',
    'callback' => 'itg_survey_expiry_notification_callback',
  );
  return $items;
}

/**
 * Send notification mail before 24 hours of survey expiration
 */
function itg_survey_expiry_notification_callback() {

  // Include survey notification mail inc file
  module_load_include('inc', 'itg_survey', 'includes/survey_notification_mail');

  $current_time = time();

  $query = db_select('itg_survey_ntf', 's');
  $query->fields('s')
      ->condition('s.status', 'N', '=');
  $result = $query->execute();

  // Fetch node to send notification
  while ($record = $result->fetchAssoc()) {
    $end_date = $record['survey_expiry'];
    $diff = $end_date - $current_time;
    $diff_in_hours = round($diff / ( 60 * 60 ));
    if ($diff_in_hours > 0) {
      if ($diff_in_hours <= 24) {
        itg_survey_send_mail_for_notification($record['nid']);
      }
    }
  }
}

/**
 * Callback to send notification mail
 * @param type $nid
 */
function itg_survey_send_mail_for_notification($nid) {

  $node = node_load($nid);
  $user = user_load($node->uid);

  $mail_content = itg_survey_get_mail_content($node, $user);
  $params = array(
    'body' => $mail_content,
    'subject' => 'India Today | Survey Expired',
  );
  $user_email_str = $user->mail;
  drupal_mail('itg_survey_send_notification', 'send_survey_noti', $user_email_str, language_default(), $params, 'no-reply@kelltontech.com', TRUE);

  // Update mail status after sending notification      
  db_update('itg_survey_ntf')
      ->fields(array(
        'status' => 'Y',
      ))
      ->condition('nid', $nid, '=')
      ->execute();
}

/**
 * Mail function to send notification
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_survey_send_notification_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_survey_noti':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Get survey notification mail body
 * @param int $nid
 * @return string
 */
function itg_survey_get_mail_content($node, $user) {

  $expiry_date = date('d/m/Y', strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']));

  $content = '<p>Dear ' . $user->name . ', </p><p>Survey <strong>' . $node->title . '</strong> will be expired soon.</p><p>Expiry Date: ' . $expiry_date . '</p>';

  $content .='<p>&nbsp;</p><p>Thanks,</p><p>India Today Team</p>';

  return $content;
}

/**
 * Get all nodes of survey, quiz and polls
 * Used to associate these nodes with story
 * @return array
 */
function itg_survey_pqs_generatetokens() {
  $type = arg(2);
  drupal_add_js(drupal_get_path('module', 'itg_survey') . '/js/itg_associate_story_ckeditor.js', array('weight' => 1));
  $cur_date = date('Y-m-d H:i:s');
  if ($type == 'poll') {
    $query = db_select('node', 'n');
    $query->leftjoin('field_data_field_poll_start_date', 'sd', 'n.nid = sd.entity_id');
    $query->leftjoin('field_data_field_poll_end_date', 'ed', 'n.nid = ed.entity_id');
    $query->fields('n', array('nid', 'title'));
    $query->fields('sd', array('field_poll_start_date_value'));
    $query->fields('ed', array('field_poll_end_date_value'));
    $query->condition('n.type', $type, '=');
    $query->condition('n.status', 1, '=');
    $query->condition('sd.field_poll_start_date_value', $cur_date, '<=');
    $query->condition(db_or()->isNull('ed.field_poll_end_date_value')->condition('ed.field_poll_end_date_value', $cur_date, '>='));
  }
  elseif ($type == 'survey' || $type == 'quiz') {
    $query = db_select('node', 'n');
    $query->leftjoin('field_data_field_survey_start_date', 'sd', 'n.nid = sd.entity_id');
    $query->leftjoin('field_data_field_survey_end_date', 'ed', 'n.nid = ed.entity_id');
    $query->fields('n', array('nid', 'title'));
    $query->fields('sd', array('field_survey_start_date_value'));
    $query->fields('ed', array('field_survey_end_date_value'));
    $query->condition('n.type', $type, '=');
    $query->condition('n.status', 1, '=');
    $query->condition('sd.field_survey_start_date_value', $cur_date, '<=');
    $query->condition(db_or()->isNull('ed.field_survey_end_date_value')->condition('ed.field_survey_end_date_value', $cur_date, '>='));
  }
  $data = array();
  $result = $query->execute();
  // Fetch node title and nid
  while ($record = $result->fetchAssoc()) {
    if (strlen($record['title']) > 30) {
      $title = substr($record['title'], 0, 30) . '...';
    }
    else {
      $title = $record['title'];
    }
    $options['[ITG:' . strtoupper($type) . ':' . $record['nid'] . ']'] = $title;
  }
  $form = array();
  $form['pqs-listing-heading'] = array(
    '#type' => 'markup',
    '#markup' => '<div style="padding-top:10px; padding-bottom:10px"><h2> Please Select ' . ucfirst($type) . ' to Associate With Story:</h2></div>',
    '#prefix' => '<div style="margin:10px 0px 10px 20px">'
  );

  $form['pqs-listing'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#attributes' => array('class' => array('pqs-listing-options'))
  );

  $form['html'] = array(
    '#type' => 'markup',
    '#markup' => '<div style="margin-top:10px"><span id="add-pqs" class="button">Add</span></div>',
    '#tree' => true,
    '#suffix' => '</div>'
  );

  return $form;
}

/**
 * Call survey, quiz and poll form
 * @param string $token
 */
function itg_survey_pqs_associate_with_story($token) {
  $token_arr = explode(':', $token);
  $nid = rtrim($token_arr[2], ']');
  $type = strtolower($token_arr[1]);
  if ($type == 'survey') {
    module_load_include('inc', 'itg_survey', 'includes/itg_survey_form');
    $form = drupal_get_form('itg_survey_survey_form', $nid);
  }
  if ($type == 'quiz') {
    module_load_include('inc', 'itg_quiz', 'includes/itg_quiz_form');
    $form = drupal_get_form('itg_quiz_quiz_form', $nid);
  }
  print drupal_render($form);
}

function itg_survey_pqs_associate_poll_with_story($nid) {

  $node = node_load($nid);
  $poll_banner_image = '';
  if (isset($node->field_poll_banner[$node->language][0]['uri']) && !empty($node->field_poll_banner[$node->language][0]['uri'])) {
    $poll_banner_image = theme('image_style', array('style_name' => 'home_page_poll_images_style', 'path' => $node->field_poll_banner[$node->language][0]['uri']));
  }
  else {
    $poll_banner_image = '';
  }

  $poll_image_exist_class = '';

  foreach ($node->field_poll_answer['und'] as $row) {
    $item_id[] = $row['value']; // fieldcollection id
  }
// instant or after complete

  $fieldcollect = entity_load('field_collection_item', $item_id);
  if (is_array($fieldcollect) && count($fieldcollect) > 0) {
    $temp_ent = array_shift(array_slice($fieldcollect, 0, 1));
    $poll_answer_image = isset($temp_ent->field_poll_answer_image[LANGUAGE_NONE]) ? $temp_ent->field_poll_answer_image[LANGUAGE_NONE][0]['fid'] : '';
    if (isset($poll_answer_image) && $poll_answer_image > 0) {
      $poll_image_exist_class = 'poll-option-image';
    }
    else {
      $poll_image_exist_class = '';
    }
  }


  $polls_info['poll_banner_image'] = $poll_banner_image;
  $polls_info['nid'] = $nid;
  $polls_info['title'] = $node->title;
  $polls_info['updated'] = t('Updated: ') . date('M d Y H:i', $node->changed);
  $polls_info['poll_image_exist_class'] = $poll_image_exist_class;
  return theme('itg_poll_homepage_forms', array('data' => $polls_info));
}

/**
 * Validate function of survey form
 * @param array $form
 * @param array $form_state
 */
function itg_survey_survey_form_validate($form, &$form_state) {
  global $user;
  $form_detail = $form_state['values'];

  if ($user->uid) {
    $cookie_name = 'Drupal_visitor_itgcms_survey_' . $form_state['values']['nid'] . '_' . $user->uid;
  }
  else {
    $cookie_name = 'Drupal_visitor_itgcms_survey_' . $form_state['values']['nid'];
  }


  if (isset($_COOKIE[$cookie_name])) {
    form_set_error('answer_option', t('Sorry! You can not proceed, you have already taken this survey!'));
  }
  else {

    $btn_num_arr = explode('_', $form_state['clicked_button']['#name']);
    $num = $btn_num_arr[1];

    $question_total = $form_detail['question_total'];
    $question_format = $form_detail['question_format'];

    if ($question_format == 'All questions at a time') {
      $loop_start_num = 0;
      $loop_end_num = $question_total - 1;
    }
    else {
      $loop_start_num = $num;
      $loop_end_num = $num;
    }

    for ($ques_num = $loop_start_num; $ques_num <= $loop_end_num; $ques_num++) {

      // Checkbox validation
      if ($form_detail['question_type' . $ques_num] === 'checkboxes') {
        if ($form_detail['question_skip' . $ques_num] !== 'yes') {
          $ans_flag = FALSE;
          foreach ($form_detail['answer_option' . $ques_num] as $key => $value) {
            if ($value !== 0) {
              $ans_flag = TRUE;
            }
          }
          if (!$ans_flag) {
            form_set_error('answer_option' . $ques_num, t('Question "@questiontitle" is required.', array('@questiontitle' => $form_detail['question' . $ques_num])));
          }
        }
      }

      // Radio Button validation
      if ($form_detail['question_type' . $ques_num] === 'radios') {
        if ($form_detail['question_skip' . $ques_num] !== 'yes') {
          if (empty($form_detail['answer_option' . $ques_num])) {
            form_set_error('answer_option' . $ques_num, t('Question "@questiontitle" is required.', array('@questiontitle' => $form_detail['question' . $ques_num])));
          }
        }
      }

      // Rating validation
      if ($form_detail['question_type' . $ques_num] === 'rating') {
        if ($form_detail['question_skip' . $ques_num] !== 'yes') {
          $rating_ans_flag = FALSE;
          for ($rating_field = 0; $rating_field < $form_detail['rating_total_count']; $rating_field++) {
            for ($rating_field_val = 1; $rating_field_val <= 5; $rating_field_val++) {
              if ($form_detail['answer_option' . $ques_num . '_' . $rating_field][$rating_field_val] !== 0) {
                $rating_ans_flag = TRUE;
              }
            }
          }
          if (!$rating_ans_flag) {
            form_set_error('answer_option' . $ques_num, t('Question "@questiontitle" is required.', array('@questiontitle' => $form_detail['question' . $ques_num])));
          }
        }
      }

      // Textfield validation
      if ($form_detail['question_type' . $ques_num] === 'textfield') {
        if ($form_detail['question_skip' . $ques_num] !== 'yes') {
          $txt_ans_flag = FALSE;
          for ($text_field = 0; $text_field < $form_detail['textfield_total_count']; $text_field++) {
            if ($form_detail['answer_option' . $ques_num . '_' . $text_field] !== '') {
              $txt_ans_flag = TRUE;
            }
          }
          if (!$txt_ans_flag) {
            form_set_error('answer_option' . $ques_num, t('Question "@questiontitle" is required.', array('@questiontitle' => $form_detail['question' . $ques_num])));
          }
        }
      }
    }
  }
}

/**
 * Submit handler for survey form
 * @param array $form
 * @param array $form_state
 */
function itg_survey_survey_form_submit($form, &$form_state) {
  global $user;

  //Form variable
  $form_detail = $form_state['values'];
  $btn_num_arr = explode('_', $form_state['clicked_button']['#name']);
  $num = $btn_num_arr[1];
  $question_total = $form_detail['question_total'];
  $question_format = $form_detail['question_format'];

  // Extract user type
  if ($user->uid) {
    $user_type = 'authenticated';
  }
  else {
    $user_type = 'anonymous';
  }

  // Set a session for a survey (Will be same for all questions during a survey) 
  if (!isset($_SESSION['survey_unique_key'])) {
    $_SESSION['survey_unique_key'] = user_password(6);
  }

  // Set loop variables for both scenario (all/one-by-one)
  if ($question_format == 'All questions at a time') {
    $loop_start_num = 0;
    $loop_end_num = $question_total - 1;
  }
  else {
    $loop_start_num = $num;
    $loop_end_num = $num;
  }

  // Save answer into DB
  if ($btn_num_arr[0] == 'surveysubmit') {

    for ($ques_num = $loop_start_num; $ques_num <= $loop_end_num; $ques_num++) {

      // Insert for radio button type answer
      if ($form_state['values']['question_type' . $ques_num] == 'radios') {

        db_insert('itg_survey_detail')
            ->fields(array(
              'nid' => $form_state['values']['nid'],
              'uid' => $user->uid,
              'ques_id' => $form_state['values']['question_id' . $ques_num],
              'question' => $form_state['values']['question' . $ques_num],
              'answer' => strtolower($form_state['values']['answer_option' . $ques_num]),
              'ans_type' => $form_state['values']['question_type' . $ques_num],
              'user_type' => $user_type,
              'page_url' => $form_state['values']['survey_url'],
              'survey_title' => $form_state['values']['survey_title'],
              'survey_key' => $_SESSION['survey_unique_key'],
              'survey_info' => 0,
              'created' => time(),
            ))
            ->execute();
      }

      // Insert for checkboxs type answer
      if ($form_state['values']['question_type' . $ques_num] == 'checkboxes') {

        foreach ($form_state['values']['answer_option' . $ques_num] as $key => $value) {
          if ($value) {
            db_insert('itg_survey_detail')
                ->fields(array(
                  'nid' => $form_state['values']['nid'],
                  'uid' => $user->uid,
                  'ques_id' => $form_state['values']['question_id' . $ques_num],
                  'question' => $form_state['values']['question' . $ques_num],
                  'answer' => strtolower($value),
                  'ans_type' => $form_state['values']['question_type' . $ques_num],
                  'user_type' => $user_type,
                  'page_url' => $form_state['values']['survey_url'],
                  'survey_title' => $form_state['values']['survey_title'],
                  'survey_key' => $_SESSION['survey_unique_key'],
                  'survey_info' => 0,
                  'created' => time(),
                ))
                ->execute();
          }
        }
      }

      // Insert for textfield type answer
      if ($form_state['values']['question_type' . $ques_num] == 'textfield') {

        for ($text_field = 0; $text_field < $form_detail['textfield_total_count']; $text_field++) {
          if ($form_detail['answer_option' . $ques_num . '_' . $text_field] !== '') {
            db_insert('itg_survey_detail')
                ->fields(array(
                  'nid' => $form_state['values']['nid'],
                  'uid' => $user->uid,
                  'ques_id' => $form_state['values']['question_id' . $ques_num],
                  'question' => $form_state['values']['question' . $ques_num],
                  'answer' => strtolower($form_detail['answer_option_name' . $ques_num . '_' . $text_field]),
                  'ans_type' => $form_state['values']['question_type' . $ques_num],
                  'user_type' => $user_type,
                  'page_url' => $form_state['values']['survey_url'],
                  'survey_title' => $form_state['values']['survey_title'],
                  'survey_key' => $_SESSION['survey_unique_key'],
                  'survey_info' => 0,
                  'created' => time(),
                ))
                ->execute();
          }
        }
      }

      // Insert for rating type answer
      if ($form_state['values']['question_type' . $ques_num] == 'rating') {

        for ($rating_field = 0; $rating_field < $form_detail['rating_total_count']; $rating_field++) {
          for ($rating_field_val = 1; $rating_field_val <= 5; $rating_field_val++) {
            if ($form_detail['answer_option' . $ques_num . '_' . $rating_field][$rating_field_val] == 1) {
              db_insert('itg_survey_detail')
                  ->fields(array(
                    'nid' => $form_state['values']['nid'],
                    'uid' => $user->uid,
                    'ques_id' => $form_state['values']['question_id' . $ques_num],
                    'question' => $form_state['values']['question' . $ques_num],
                    'answer' => $form_detail['answer_option' . $ques_num . '_' . $rating_field . '_name'] ? strtolower($form_detail['answer_option' . $ques_num . '_' . $rating_field . '_name']) : $form_state['values']['question' . $ques_num],
                    'ans_type' => $form_state['values']['question_type' . $ques_num],
                    'user_type' => $user_type,
                    'page_url' => $form_state['values']['survey_url'],
                    'survey_title' => $form_state['values']['survey_title'],
                    'survey_key' => $_SESSION['survey_unique_key'],
                    'survey_info' => 0,
                    'created' => time(),
                  ))
                  ->execute();
            }
          }
        }
      }
    }
  }

  // On final survey submit
  if (strtolower($form_state['clicked_button']['#value']) == 'submit') {

    // Set cookie for survey
    if ($user->uid) {
      user_cookie_save(array('itgcms_survey_' . $form_state['values']['nid'] . '_' . $user->uid => 1));
    }
    else {
      user_cookie_save(array('itgcms_survey_' . $form_state['values']['nid'] => 1));
    }

    // Insert in to survey user table
    db_insert('itg_survey_user')
        ->fields(array(
          'nid' => $form_state['values']['nid'],
          'uid' => $user->uid,
          'user_type' => $user_type,
          'page_url' => $_GET['q'],
          'created' => time(),
        ))
        ->execute();

    // Update table and set survey_info(status) = 1(means this survey has been completed by a user) 
    db_update('itg_survey_detail')
        ->fields(array(
          'survey_info' => 1,
        ))
        ->condition('survey_key', $_SESSION['survey_unique_key'], '=')
        ->execute();

    unset($_SESSION['survey_unique_key']);

    // Call loyalty & rewards function to save points for a user
    if (function_exists('itg_loyalty_reward_earnpoint')) {
      if ($user->uid) {
        itg_loyalty_reward_earnpoint($form_state['values']['nid'], 'participate', $user->uid);
      }
    }
  }

  // Display message on final submit.
  if ($question_format == 'All questions at a time') {
    drupal_set_message(t('Survey has been saved successfully. Thank you for taking our survey!'));
  }
  else {
    if ($num == ($form_detail['question_total'] - 1)) {
      drupal_set_message(t('Survey has been saved successfully. Thank you for taking our survey!'));
    }
  }
}

/**
 * Submit handler of Ajax
 * @param array $form
 * @param array $form_state
 * @return array
 */
function survey_form_ajax_handler(&$form, &$form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#messages', '<div id="messages">' . theme('status_messages') . '</div>');
  return array(
    '#type' => 'ajax',
    '#commands' => $commands);
}

/**
 * Implements itg_survey_get_publish_status()
 * @param type $nid
 */
function itg_survey_get_publish_status($nid) {
  $query = db_select('field_data_field_supp_publish', 'p')
    ->fields('p', array('field_supp_publish_value'))
    ->condition('p.entity_id', $nid, '=')
    ->execute();
  $result = $query->fetchField();
  if ($result == 0 || $result == '') {
    $result = 0;
  }
  return $result;
}