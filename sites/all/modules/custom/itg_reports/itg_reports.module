<?php

/**
 * @file
 *   Display front user reports to administrator user.
 */

/**
 * Implements hook_permission().
 *
 * {@inheritdoc}.
 */
function itg_reports_permission() {
    return array(
        'view report dashboard' => array(
            'title' => t('ITG Reports')
        ),
    );
}

/**
 * Implements hook_menu().
 *
 * {@inheritdoc}.
 */
function itg_reports_menu() {
    // Menu links for cms report user dashboard.
    $items['itg-report-dashboard'] = array(
        'title' => 'User Dashboard',
        'page callback' => 'itg_report_user_dashboard',
        'access arguments' => array('view report dashboard'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'includes/itg_reports.helper.inc',
    );
    // Menu form email autocomplete.
    $items['itg-reports-mail/autocomplete'] = array(
        'page callback' => 'itg_reports_email_autocomplete',
        'access arguments' => array('view report dashboard'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_reports.helper.inc',
    );

    return $items;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_reports_theme($existing, $type, $theme, $path) {
    $themes = array(
        'itg_reports_dashboard' => array(
            'variables' => array('data' => NULL),
            'template' => 'templates/itg-reports-dashboard',
        ),
        'itg_reports_career_graph' => array(
            'variables' => array('output' => NULL, 'actor' => NULL),
            'template' => 'templates/itg-reports-career-graph',
        ),
    );

    return $themes;
}

/**
 * Implements  hook_form_FORM_ID_alter().
 *
 * {@inheritdoc}.
 */
function itg_reports_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
    switch ($form['#id']) {
        case 'views-exposed-form-report-filed-content-page':
            $form['field_story_category_tid']['#attributes'] = array('placeholder' => 'Search by section name');
            $form['uid']['#attributes'] = array('placeholder' => 'Search by user name');
            $form['mail']['#attributes'] = array('placeholder' => 'Search by user email');
            $form['node_status']['#options'][1] = t('Published');
            $form['node_status']['#options'][0] = t('Not published');
            $form['moderation'] = array(
                '#title' => t('Moderation'),
                '#type' => 'select',
                '#options' => array('all' => 'Any', 'yes' => 'Yes', 'no' => 'No'),
                '#default_value' => 'all',
            );
            $form['mail']['#autocomplete_path'] = 'itg-reports-mail/autocomplete';
            $form['date_filter']['min']['#attributes'] = array('autocomplete' => 'off', 'readonly' => 'readonly', 'placeholder' => t('Start Date'));
            unset($form['date_filter']['min']['#title']);
            $form['date_filter']['max']['#attributes'] = array('autocomplete' => 'off', 'readonly' => 'readonly', 'placeholder' => t('End Date'));
            unset($form['date_filter']['max']['#title']);
            $form['from_state']['#prefix'] = '<div style="display: none;">';
            $form['from_state']['#suffix'] = '</div>';
            $form['#after_build'][] = 'itg_reports_view_after_build';

            break;
        case 'views-exposed-form-comparative-report-cm-page':
            $form['tid']['#attributes'] = array('placeholder' => 'Search by section name');
            $form['date_filter']['min']['#attributes'] = array('autocomplete' => 'off', 'readonly' => 'readonly', 'placeholder' => t('Start Date'));
            unset($form['date_filter']['min']['#title']);
            $form['date_filter']['max']['#attributes'] = array('autocomplete' => 'off', 'readonly' => 'readonly', 'placeholder' => t('End Date'));
            unset($form['date_filter']['max']['#title']);
            $form['#after_build'][] = 'itg_reports_view_after_build';

            break;
        case 'views-exposed-form-movies-master-page':
            $form['tid']['#attributes'] = array('placeholder' => t('Search by movie name'));
            $form['field_movie_earning_value']['min']['#attributes'] = array('placeholder' => t('Start range'));
            $form['field_movie_earning_value']['max']['#attributes'] = array('placeholder' => t('End range'));
            unset($form['field_movie_earning_value']['max']['#title']);
    }
}

/**
 * Implements after build function for views exposed form.
 * {@inheritdoc}.
 */
function itg_reports_view_after_build($form, &$form_state) {
    $form['#attached']['js'] = array(
        drupal_get_path('module', 'itg_reports') . '/js/itg_reports.js',
    );

    return $form;
}

/**
 * Implements hook_block_info().
 *
 * {@inheritdoc}.
 */
function itg_reports_block_info() {
    // Career graph.
    $blocks['itg_report_career_graph'] = array(
        'info' => t('Career Graph'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * {@inheritdoc}.
 */
function itg_reports_block_view($delta = '') {
    switch ($delta) {
        case 'itg_report_career_graph':
            $output = array();
            $data = itg_report_get_graph_data();

            $errors = array_filter($data);
            if (!empty($errors)) {
               
                foreach ($data as $key => $chart_data) {
                    $errors = array_filter($chart_data['graph']);
                    if (empty($errors)) {
                        continue;
                    }
                    $chart = array(
                        '#type' => 'chart',
                        '#chart_type' => 'line',
                        '#chart_library' => 'highcharts',
                        '#legend' => FALSE,
                    );

                    // Add missing year.
                    //itg_reports_missing_year($chart_data['graph']);
                    $chart_data_all = itg_reports_missing_year($chart_data['graph']);
                   
                    foreach ($chart_data_all as $keys => $graph_data) {
                        
                        $chart[$keys] = array(
                            '#type' => 'chart_data',
                            '#data' => $graph_data,
                            '#title' => $keys,
                        );
                    }
//                    $chart['career'] = array(
//                        '#type' => 'chart_data',
//                        '#data' => $chart_data['graph'],
//                        '#title' => t($chart_data['actor'][$key]['actor_name']),
//                    );
                    $chart['xaxis'] = array(
                        '#type' => 'chart_xaxis',
                        '#title' => t('Year'),
                    );


                    $chart['yaxis'] = array(
                        '#type' => 'chart_yaxis',
                        '#title' => t('Earning'),
                    );
                    $career_graph['chart'] = $chart;
                    $output[] = $career_graph;
                    $actor_info[] = array(
                        'name' => $chart_data['actor'][0]['actor_name'],
                        'pic_uri' => $chart_data['actor'][0]['actor_pic'],
                    );
                }
            }
            $block['content'] = theme('itg_reports_career_graph', array('output' => $output, 'actor' => $actor_info));

            break;
    }

    return $block;
}

/**
 * Get graph data from database.
 * 
 * @return array
 *   Array of chart data.
 */
function itg_report_get_graph_data() {
    global $base_url;
    $arg = arg();
    $chart_data = array();
    $node = node_load($arg[1]);

    foreach ($node->field_mega_review_career_graph['und'] as $field_collection) {
        $data = array();
        $actor_data = array();

        // $items = field_get_items('node', $field_collection['entity'], 'field_reporter_career_graph');

        foreach ($field_collection['entity']->field_reporter_career_graph['und'] as $key => $field_value) {
            $entity_id = $field_value['value'];
            $field_data_all = entity_load('field_collection_item', array($entity_id));
          $field_data = $field_data_all[$entity_id];
       
            $tid = $field_data->field_reporter_movie_name['und'][0]['tid'];
           
            $movie_details = taxonomy_term_load($tid);
           
            $movie_name = $movie_details->name;
            $timestamp = $field_data->field_reporter_movie_year['und'][0]['value'];
            $movie_year = format_date($timestamp, 'custom', 'Y');
            $actor_pic_uri = $field_collection['entity']->field_story_extra_large_image['und'][0]['uri'];
            if (empty($actor_pic_uri)) {
                $actor_pic_real_uri = file_create_url($base_url . '/' . drupal_get_path('theme', 'itg') . '/images/default_career_graph.png');
            }
            else {
                $actor_pic_real_uri = $actor_pic_uri;
            }
            $actor_data[] = array(
                'actor_name' => $field_collection['entity']->title,
                'movie_name' => $movie_name,
                'actor_pic' => $actor_pic_real_uri,
            );
            $data[] = array(
                (int) $movie_year,
                (int) $field_data->field_reporter_earning['und'][0]['value'],
                $movie_name
            );
        }
        $chart_data[] = array(
            'actor' => $actor_data,
            'graph' => $data,
        );
    }

    return $chart_data;
}

/**
 * Ad missing year to the chart data.
 *
 * @param array $chart_data
 *   Array containing year wise data of celebrity career graph.
 *
 * @return array
 *   Sorted array with missing intervals.
 */
function itg_reports_missing_year(&$chart_data) {
    $data = array();
    $all_year = array();
    if (!empty($chart_data)) {
        foreach ($chart_data as $movie_data) {
            $all_year[] = $movie_data[0];
        }
    }
    $start = min($all_year);
    $end = max($all_year);
    foreach ($chart_data as $movie_data) {

        for ($i = $start - 3; $i <= $end; $i++) {
            $movie_rating = 0;
            if ($i == $movie_data[0]) {
                $movie_rating = $movie_data[1];
            }
            $data[$movie_data[2]][] = array($i, $movie_rating);
        }
    }

    return $data;
}


/**
 * Get node edit count from revision table.
 *
 * @param int $output
 *   Unique node id of the node.
 * 
 * @return int
 *   Total count of the node edit.
 */
function itg_report_node_edit_count($output) {
    $result = 0;
    try {
        $itg_query = db_select('node_revision', 'n');
        $itg_query->fields('n', array('nid'))
                ->condition('nid', $output);
        $result = $itg_query->execute()->rowCount();
    } catch (Exception $ex) {
        drupal_set_message($ex->getMessage(), 'error');
    }

    return $result;
}

/**
 * Implements hook_views_pre_render().
 *
 * {@inheritdoc}.
 */
function itg_reports_views_pre_render(&$view) {
    switch ($view->name) {
        case 'report_filed_content':
            foreach ($view->result as $rows) {
                $rows->nid = itg_report_node_edit_count($rows->nid);
            }
            $header_content = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
            $view->attachment_before = $header_content;

            break;
    }
}

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc}.
 */
function itg_reports_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'taxonomy_form_term') {
        if (is_array($form['#term'])) {
            if (isset($form['#term']['vocabulary_machine_name']) && $form['#term']['vocabulary_machine_name'] == 'movies') {
                $form['relations']['#prefix'] = '<div style="display:none;">';
                $form['relations']['#suffix'] = '</div>';
            }
        }
        if (is_object($form['#term'])) {
            if (isset($form['#term']->vocabulary_machine_name) && $form['#term']->vocabulary_machine_name == 'movies') {
                $form['relations']['#prefix'] = '<div style="display:none;">';
                $form['relations']['#suffix'] = '</div>';
            }
        }
    }
}
