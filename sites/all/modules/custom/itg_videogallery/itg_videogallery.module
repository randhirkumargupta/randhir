<?php

/**
 * @file
 * ITG Videogallery module.
 *
 * Provides customizations and functions for Video Gallery.
 *
 */

/**
 * Implements hook_block_info()
 * {@inheritdoc}
 */
function itg_videogallery_block_info() {
  $blocks['videogallery_tab_form_block'] = array(
    'info' => t('Video Gallery Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_videogallery_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'videogallery_tab_form_block':
      $block['content'] = theme('videogallery_tab_form_block', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_videogallery_theme($existing, $type, $theme, $path) {
  $themes = array(
    'videogallery_tab_form_block' => array(
      'template' => 'videogallery-form-tab-template',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'videogallery_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'videogallery-node-form',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'render element' => 'form',
    ),
    'itg_videogallery_browse_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'videogallery-file-form',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'render element' => 'form',
    ),
  );

  return $themes;
}

/**
 * Implemets hook_form_alter().
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_videogallery_form_alter(&$form, &$form_state, $form_id) {
  global $user, $base_url;

  switch ($form_id) {
    case 'videogallery_node_form':
      unset($form['actions']['preview_changes']);
      $form['#after_build'][] = 'itg_videogallery_after_build';
      $form['#validate'][] = 'itg_videogallery_custom_validate';
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'manage-videogallery', array('attributes' => array('class' => 'button'))),
        '#weight' => 20,
      );
      /*
      $form['upload'] = array(
        '#type' => 'plupload',
        '#weight' => 21,
        '#upload_validators' => array(
          'file_validate_extensions' => array("mp4"),
          'file_validate_size' => array(format_size(file_upload_max_size())),
        ),
      );*/

      // FTP browse
      
      $form['video_browse_select'] = array(
      '#type' => 'radios',
      '#options' => itg_videogallery_select_options(),
      '#suffix' => '<a href="javascript:void(0)" class = "button">Attach Video</a>',
     );
      $form['field_upload_video'][LANGUAGE_NONE][0]['#upload_validators']['itg_custom_field_validate'] = array(1, 2);
      $form['actions']['submit']['#submit'][] = 'itg_videogallery_submit_status_message';
      $form['actions']['submit']['#submit'][] = 'itg_videogallery_custom_submit';
      break;
  }
}

/**
 * Implements function for validate image
 * @param array $field
 * @return array
 */
function itg_custom_field_validate($field) {
  $val = itg_video_check_exist_file($field->filename);
  $field->destination = $val;
  $errors = array();
  return $errors;
}

/**
 * Implements function check exist filename
 * @param array $form
 * @param array $form_state
 * @return string
 */
function itg_video_check_exist_file($filename) {
  $query = db_select('file_managed', 'fm');
  $query->condition('filename', $filename, '=');
  $query->fields('fm');
  $query->orderBy('fm.fid', 'DESC');
  $query->range(0, 1);
  $results = $query->execute()->fetchAll();

  if (!isset($results[0])) {
    $res = 'public://dailymotion_video_dir/' . $filename;
    return $res;
  }
  else {
    $result = explode('public://dailymotion_video_dir/', $results[0]->uri);
    $path_info = pathinfo($results[0]->filename);
    $extension = $path_info['extension'];
    $file_name = $path_info['filename'];
    $result_num = explode($file_name . '_', $result[1]);
    $num_file_id = explode('.' . $extension, $result_num[1]);
    if (is_numeric($num_file_id[0]) && isset($num_file_id[0])) {
      $value = $num_file_id[0] + 1;
      $value = '_' . $value;
    }
    else {
      $value = '_0';
    }
    $file_info = pathinfo($filename);
    $res = 'public://dailymotion_video_dir/' . $file_info['filename'] . $value . '.' . $extension;
    return $res;
  }
}

/**
 * Implements custom submit for move video on dailymotion.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_custom_submit($form, &$form_state) {
  foreach ($form_state['values']['field_story_itg_tags'][LANGUAGE_NONE] as $tags) {
    $tag[] = $tags['name'];
  }
  $tag_value = implode(', ', $tag);
  $tags_value = trim($tag_value, ",");
  $node_id = $form_state['values']['nid'];
  foreach ($form_state['values']['field_dailymotion_playlist'][LANGUAGE_NONE] as $playlist_term) {
    $playlist_name[] = $playlist_term['name'];
  }
  $thumb_flag = FALSE;
  if($form_state['values']['field_story_extra_large_image'][LANGUAGE_NONE][0]['fid'] == 0){
    $thumb_flag = TRUE;
  }
  
  $video_fid = $form_state['values']['field_upload_video'][LANGUAGE_NONE][0]['fid'];
  if($video_fid != '' && is_numeric($video_fid)){
      $query = db_select('dailymotion_response_details', 'drd');
      $query->fields('drd', array('fid', 'video_id'));
      $query->condition('fid', $video_fid, '=');
      $dailymotion_video_result = $query->execute()->fetchAssoc();
      if(empty($dailymotion_video_result['fid'])){
        // Video not uploaded on dailymotion
        $file_details = file_load($video_fid);
        $real_path = drupal_realpath($file_details->uri);
        $response = itg_videogallery_dailymotion($real_path, $file_details->uri, $video_fid, $tags_value);
        // Perform playlist and tags when new video create.
        $response_result['video_id'] = $response['id'];
        $response_result['fid'] = $response['fid'];

        $nid = db_insert('dailymotion_response_details')
            ->fields(array(
              'title' => $response['title'],
              'channel' => $response['channel'],
              'fid' => $response['fid'],
              'tags' => $response['tags'],
              'video_id' => $response['id'],
              'nid' => $node_id,
              'upload_time' => REQUEST_TIME,
            ))
            ->execute();
        itg_videogallery_unlink_video_playlist($response_result, $playlist_name, $tags_value);
        $thumb_file = itg_videogallery_edit_dailymotion($response_result, $playlist_name, $node_id, $thumb_flag);
      }else{
        // Video uploaded on dailymotion
         itg_videogallery_unlink_video_playlist($dailymotion_video_result, $playlist_name, $tags_value);
         $thumb_file = itg_videogallery_edit_dailymotion($dailymotion_video_result, $playlist_name, $node_id, $thumb_flag);
      }
  }
  if($thumb_flag == TRUE){
    $node = node_load($form_state['node']->nid);
    $node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'] = $thumb_file->fid;
    field_attach_update('node', $node);
  }
}

/**
 * Implements function for dailymotion api
 * @return object
 */
function itg_videogallery_dailymotion_api() {
  require_once 'includes/Dailymotion.php';
  $user_name = variable_get('dailymotion_username', '');
  $password = variable_get('dailymotion_password', '');
  $api_key = variable_get('dailymotion_apikey', '');
  $api_secret = variable_get('dailymotion_secretkey', '');

  try {
    $api = new Dailymotion();
    $scopes = array(
      'userinfo',
      'feed',
      'manage_videos',
      'manage_subtitles',
      'read',
      'write',
      'delete',
    );
    $api->setGrantType(
        Dailymotion::GRANT_TYPE_PASSWORD, $api_key, $api_secret, $scopes, array(
      'username' => $user_name,
      'password' => $password,
        )
    );
  }
  catch (Exception $e) {
    if ($e->getMessage() == "Missing API key") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('Please enter API Key.'), 'error');
      drupal_goto('dailymotion/config');
    }
    else {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
  return $api;
}

/**
 * Implements function for remove video from playlist
 */
function itg_videogallery_unlink_video_playlist($vid_res_result, $playlist_name, $tags_value) {
  $thumbnail = file_load($thumbnail_fid);
  $thumb_real_path = drupal_realpath($thumbnail->uri);
  $video_id = $vid_res_result['video_id'];
  $api = itg_videogallery_dailymotion_api();
  // Tags assign to node and thumbnail
  $api->post('/video/' . $video_id . '?tags=' . $tags_value);
//  $thumb_url = $api->uploadFile($thumb_real_path);
//  $api->post('/video/' . $video_id . '?thumbnail_url=' . $thumb_url . '&tags='. $tags_value);
  $old_playlist = array_diff($_SESSION['old_playlist'], $playlist_name);
  // Delete playlist with video
  if (isset($old_playlist)) {
    foreach ($old_playlist as $old_play) {
      $del_play_id = itg_videogallery_get_playlist_id($old_play);
      if ($del_play_id[0]->pid != '') {
        $api->delete('/playlist/' . $del_play_id[0]->pid . '/videos/' . $video_id);
      }
    }
  }
}

/**
 * Implements dailymotion video edit function
 * @param array $vid_res_result
 * @param array $playlist_name
 * @param array $tags_value
 * @param int $node_id
 */
function itg_videogallery_edit_dailymotion($vid_res_result, $playlist_name, $node_id, $thumb_flag) {
  $video_id = $vid_res_result['video_id'];
  $fid = $vid_res_result['fid'];
  $api = itg_videogallery_dailymotion_api();
  // create playlist
  foreach ($playlist_name as $name) {
    // local saved playlist check
    $exist_playlist = itg_videogallery_get_playlist_id($name);
    if ($exist_playlist[0]->pid == '') {
      try {
        $result = $api->post(
            '/me/playlists', array(
          'name' => $name,
            )
        );
        // Insert data in dailymotion_playlist_details table
        db_insert('dailymotion_playlist_details')
            ->fields(array(
              'pid' => $result['id'],
              'playlist_name' => $result['name'],
              'node_id' => $node_id,
              'video_id' => $video_id,
            ))->execute();
          $api->post('/playlist/' . $result['id'] . '/videos/' . $video_id);
      }
      catch (Exception $e) {
        if ($e->getCode() == 500) {
          $playlists = $api->get(
            '/me/playlists',

                array('limit' => 100 , 'fields' => array('id','name'))
          );
        foreach($playlists['list'] as $p_value){
          $play[$p_value['name']] = $p_value['id'];
        }
        db_insert('dailymotion_playlist_details')
            ->fields(array(
              'pid' => $play[$name],
              'playlist_name' => $name,
              'node_id' => $node_id,
              'video_id' => $video_id,
            ))->execute();
            $playlist_id = itg_videogallery_get_playlist_id($name);
            $api->post('/playlist/' . $playlist_id[0]->pid . '/videos/' . $video_id);
        }
      }
    }
    else {
      $playlist_id = itg_videogallery_get_playlist_id($name);
      $api->post('/playlist/' . $playlist_id[0]->pid . '/videos/' . $video_id);
    }
  }
  // Dailymotion Thumbnail image assign
  if($thumb_flag == TRUE){
    $thumb_url = $api->get(
        '/video/'.$video_id,
        array('fields' => array('thumbnail_url'))
    );
    $image_url = $thumb_url['thumbnail_url'];
    $imagedata=file_get_contents($image_url);
    $file = file_save_data($imagedata, file_default_scheme() . '://' . end(explode('/',$image_url)));
    file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
    return $file;
  }
}

/**
 * Implement dailymotion api call
 * @param string $real_path
 * @param int $key
 * @param string $uri
 * @param int $fid
 * @return array
 */
function itg_videogallery_dailymotion($real_path, $uri, $fid, $tags_value) {
  $api = itg_videogallery_dailymotion_api();
// TODO: status get work  
//  try {
//    // The following line will actually try to authenticate before making the API call.
//    // * The SDK takes care of retrying if the access token has expired.
//    // * The SDK takes care of storing the access token itself using its `readSession()`
//    //   and `storeSession()` methods that are made to be overridden in an extension
//    //   of the class if you want a different storage than provided by default.
//    $result1 = $api->get(
//        '/me/videos', array('fields' => array('id', 'title', 'owner', 'status', 'stream_h264_uhd_url', 'stream_h264_qhd_url', 'stream_h264_hd1080_url', 'stream_h264_hd_url', 'stream_h264_hq_url', 'stream_h264_url', 'available_formats', 'views_last_day', 'views_total'))
//    );
//// drupal_set_message('<pre>' . print_r($result, 1) . '</pre>', 'status');
//  }
//  catch (DailymotionAuthRequiredException $e) {
//    // If the SDK doesn't have any access token stored in memory, it tries to
//    // redirect the user to the Dailymotion authorization page for authentication.
//    return header('Location: ' . $api->getAuthorizationUrl());
//  }
//  catch (DailymotionAuthRefusedException $e) {
//    // Handle the situation when the user refused to authorize and came back here.
//    // <YOUR CODE>
//    drupal_set_message(t('Some error from dailymotion please retry'), 'error');
//  //  drupal_goto('manage-videogallery');
//  }
  // $filePath = $real_path;
  // Temporarily upload a file on Dailymotion' servers
  // This does not create a video, it only offers you a public URL to work with.
  try {
    /*
    if (itg_videogallery_check_ftp_video($fid)) {
      $connection_id = itg_videogallery_ftp_video_list();
      $ftp_files = ftp_nlist($connection_id, "/videos/");
      $ftp_file = explode('/dailymotion_video_dir/', $real_path);
      $ftp_server = variable_get('dailymotion_ftp_host', '');
      $ftp_user_name = variable_get('dailymotion_ftp_username', '');
      $ftp_user_pass = variable_get('dailymotion_ftp_password', '');
      // $real_path = 'ftp://'.$ftp_user_name.':'.$ftp_user_pass.'@'.$ftp_server.'/home/ftptest1/videos/videos/'.$ftp_file[1];
      $uri = 'public://dailymotion-ftp/' . $ftp_file[1];
      //$url = 'ftp://'.$ftp_user_name.':'.$ftp_user_pass.'@'.$ftp_server.'/videos/'.$ftp_file[1];
    }*/// TODO FTP code
    $url = $api->uploadFile($real_path);
    $result = $api->post(
        '/me/videos', array(
      'url' => $url,
      'title' => $uri,
      'tags' => $tags_value,
      'channel' => 'tv',
      'published' => TRUE,
        )
    );
    ftp_close($connection_id);
    $a = new Dailymotion();
    $a->logout();
    $result['fid'] = $fid;
    $result['tags'] = $tags_value;
  }
  catch (Exception $e) {
    if ($e->getMessage() == "This `client_id' doesn't exist.") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('API Key is wrong.'), 'error');
      drupal_goto('dailymotion/config');
    }
    elseif ($e->getMessage() == "Invalid `client_secret'") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('Secret Key is wrong.'), 'error');
      drupal_goto('dailymotion/config');
    }
    elseif ($e->getCode() == 6) {
      drupal_set_message(t('There is some issue with internet connection.'), 'error');
      drupal_goto();
    }
    else {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
  return $result;
}

/**
 * Implements function for custom validate.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_custom_validate($form, &$form_state) {
  //schedule date & expiry date validation
  $schedule_date = strtotime($form_state['values']['field_story_schedule_date_time'][LANGUAGE_NONE][0]['value']);
  $expiry_date = strtotime($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value']);
  if (isset($expiry_date) && ($schedule_date > $expiry_date)) {
    form_set_error('field_story_expiry_date', t("Expiry date should be greater then schedule start date"));
  }
  //comment question validation
  $comment_checkbox = $form_state['values']['field_video_configurations'][LANGUAGE_NONE][0]['value'];
  if (isset($comment_checkbox) && $form_state['values']['field_story_comment_question'][LANGUAGE_NONE][0]['value'] == '') {
    foreach ($form_state['values']['field_video_configurations'][LANGUAGE_NONE] as $key => $val) {
      if ($val['value'] == 'comment') {
        form_set_error('field_story_comment_question', t("Please enter the comment question."));
      }
    }
  }
}

/**
 * After build for story form.
 * {@inheritdoc}
 */
function itg_videogallery_after_build($form, &$form_state) {

  global $user, $base_url;
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_videogallery' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/itg_videogallery.js', array('weight' => 1));
  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_videogallery_form_videogallery_node_form_alter(&$form, &$form_state, $form_id) {
  global $base_url, $user;
  // code for story expiry date field show and hide
  $form['field_story_expiry_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_expires[und][Yes]"]' => array('checked' => TRUE),
    )
  );

  // code for Comment Question field hide and show
  $form['field_story_comment_question']['#states'] = array(
    'visible' => array(
      ':input[name="field_video_configurations[und][comment]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_video_configurations[und][comment]"]' => array('checked' => TRUE),
    )
  );


  $form['field_story_posted_by_twitter']['#default_value'] = $user->mail;
  $form['field_story_posted_by_instagram']['#default_value'] = $user->mail;
}

/**
 * Implement hook_form_FORM_ID_alter().
 * {@inheritdoc}
 */
function itg_videogallery_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form["#id"] == 'views-exposed-form-manage-videogallery-page') {
    $form['title']['#autocomplete_path'] = 'content-title-list/videogallery/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
    $form['nid']['#autocomplete_path'] = 'content-nid-list/videogallery/autocomplete';
    $form['nid']['#attributes'] = array('placeholder' => t('Video Id'));
  }
}

/**
 * Implement hook_views_pre_render().
 * {@inheritdoc}
 */
function itg_videogallery_views_pre_render(&$view) {
  if ($view->name == "manage_videogallery") {
    $header_content_video = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_video .= l(t('Upload Video'), 'node/add/videogallery', array('query' => array('destination' => 'manage-videogallery')));
    $view->attachment_before = $header_content_video;
  }
}

/**
 * Implements submit function for bolt video title in msg.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_submit_status_message(&$form, $form_state) {
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'poll') {
    $op = 'created';
  }
  else {
    $op = 'updated';
  }
  $video_title = $form_state['node']->title;
  drupal_set_message(t('Video Gallery <b>' . $video_title . '</b> has been ' . $op . '.'));
  $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * Impelements form for configuration.
 * {@inheritdoc}
 */
function itg_videogallery_configuration_form($form) {
  $form['dailymotion_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion Username'),
    '#default_value' => variable_get('dailymotion_username'),
    '#required' => TRUE,
  );
  $form['dailymotion_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion Password'),
    '#default_value' => variable_get('dailymotion_password', ''),
    '#required' => TRUE,
  );
  $form['dailymotion_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('Api Key'),
    '#default_value' => variable_get('dailymotion_apikey', ''),
    '#required' => TRUE,
  );
  $form['dailymotion_secretkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#default_value' => variable_get('dailymotion_secretkey', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_menu().
 * {@inheritdoc}
 */
function itg_videogallery_menu() {
  $items['dailymotion/config'] = array(
    'title' => 'Dailymotion Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_videogallery_configuration_form'),
    'access arguments' => array('authorized user dailymotion credin'),
    'type' => MENU_CALLBACK,
  );
  $items['dailymotion/ftp/config'] = array(
    'title' => 'Ftp Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_videogallery_ftp_video_form'),
    'access arguments' => array('authorized user ftp credin'),
    'file' => 'includes/itg_videogallery.inc',
  );
  $items['dailymotion-ftp-videos-post'] = array(
    'page callback' => 'itg_videogallery_ftp_video_post',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['test-post'] = array(
    'page callback' => 'itg_videogallery_thumb_assign',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission.
 */
function itg_videogallery_permission() {
  return array(
    'authorized user dailymotion credin' => array(
      'title' => t('Dailymotion credintial permission'),
      'description' => t('Dailymotion credintial configuration permission'),
    ),
    'authorized user ftp credin' => array(
      'title' => t('Dailymotion FTP config permission'),
      'description' => t('Dailymotion FTP configuration permission'),
    ),
  );
}

/**
 * Implement function get dailymotion video id by fid
 * @param int $fid
 * @return type string
 */
function itg_videogallery_get_video($fid) {
  $query = db_select('dailymotion_response_details', 'dm')
      ->fields('dm', array('video_id'))
      ->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements hook_node_access().
 * {@inheritdoc}
 */
function itg_videogallery_node_access($node, $op, $account) {
  if ($account->uid == 0) {
    $current_time = time();
    $video_schedule_date = strtotime($node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value']);
    $video_expire_date = strtotime($node->field_story_expiry_date[LANGUAGE_NONE][0]['value']);
    if (($current_time > $video_schedule_date) && ($current_time < $video_expire_date) && ($node->type == 'videogallery' && $op == 'view')) {
      return NODE_ACCESS_ALLOW;
    }
    elseif (($current_time > $video_expire_date || $current_time < $video_schedule_date) && ($node->type == 'videogallery') && ($op == 'view')) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_videogallery_node_validate($node, $form, &$form_state) {

  // Code for redirection url validation
  if ($node->type == 'videogallery') {
    // Code for category validation.
    if (empty($node->field_story_category[LANGUAGE_NONE][0]['tid'])) {
      form_set_error('edit-field-story-category-und-hierarchical-select-selects-0', t("Section field is required."));
    }
  }
}

/**
 * Implements function return playlist id
 * @param string $tname
 * @return array
 */
function itg_videogallery_get_playlist_id($tname) {
  $query = db_select('dailymotion_playlist_details', 'dpt');
  $query->fields('dpt', array('pid', 'playlist_name'));
  $query->condition('dpt.playlist_name', $tname, '=');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * Implements function for get old playlist for remove video
 * @param int $nid
 * @return array
 */
function itg_videogallery_get_old_playlist($nid) {
  $query = db_select('field_data_field_dailymotion_playlist', 'fdp');
  $query->fields('fdp', array('field_dailymotion_playlist_tid', 'entity_id'));
  $query->join('taxonomy_term_data', 'ttd', 'fdp.field_dailymotion_playlist_tid = ttd.tid');
  $query->fields('ttd', array('name', 'tid'));
  $query->condition('fdp.bundle', 'videogallery', '=');
  $query->condition('fdp.entity_id', $nid, '=');
  $result = $query->execute();
  foreach ($result as $value) {
    $output[$value->field_dailymotion_playlist_tid] = $value->name;
  }
  return $output;
}

/**
 * Implements hook_node_presave()
 * {@inheritdoc}
 */
function itg_videogallery_node_presave($node) {
  if ($node->type == 'videogallery') {
    foreach ($node->field_dailymotion_playlist[LANGUAGE_NONE] as $playlist_val) {
      $playlist[$playlist_val['tid']] = $playlist_val['name'];
    }
    $node->field_story_source_id = $playlist;
    $_SESSION['old_playlist'] = itg_videogallery_get_old_playlist($node->nid);
  }
}

/**
 * Implements function for get term name by tid
 * @param int $tid
 * @return string
 */
function itg_videogallery_get_tname($tid) {
  $query = db_select('taxonomy_term_data', 'ttd');
  $query->fields('ttd', array('name'));
  $query->condition('tid', $tid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_videogallery_cronapi($op, $job = NULL) {
  $items['video_file_delete'] = array(
    'description' => 'video file delete in files folder.',
    'callback' => 'itg_videogallery_remove_video',
  );
  $items['video_thumb_assign'] = array(
    'description' => 'Thumbnail image assign to node from dailymotion.',
    'callback' => 'itg_videogallery_thumb_assign',
  );
  return $items;
}

/**
 * Implement function for remove files
 */
function itg_videogallery_remove_video() {
  $files = glob('sites/default/files/dailymotion_video_dir/*');
  foreach ($files as $file) {
    if (is_file($file))
      unlink($file);
  }
}

function itg_videogallery_thumb_assign(){
  $query = db_select('field_data_field_upload_video', 'upload_video');
  $query->fields('upload_video', array('entity_id'));
  $query->condition('upload_video.bundle', 'videogallery', '=');
  $query->leftJoin('field_data_field_story_extra_large_image', 'large_image', 'large_image.entity_id = upload_video.entity_id');
  $query->fields('large_image', array('entity_id', 'field_story_extra_large_image_fid'));
  //$query->condition('large_image.field_story_extra_large_image_fid', NULL, '=');
  $result = $query->execute()->fetchAll();
 // p($result);
  
}
/**
 * Implements function for get videoid by file id
 * @param int $fid
 */
function itg_videogallery_get_videoid($fid) {
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd', array('video_id'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for get options for FTP file list
 * @return array
 */
function itg_videogallery_select_options() {
  $file_path = drupal_realpath('public://');
  //$ftp_files = itg_videogallery_dir_content($file_path. '/dailymotion-ftp');
  $connection_id = itg_videogallery_ftp_video_list();
  $ftp_files = ftp_nlist($connection_id, "/videos/");
  ftp_close($connection_id);
  foreach ($ftp_files as $files) {
    $file_array = explode('/videos/', $files);
    $file[] = itg_video_check_exist_file_browse($file_array[1]);
    $new_file[] = itg_videogallery_getfile_details($file_array[1]);
  }
  foreach ($new_file as $final_file) {
    $options[$final_file['fid']] = $final_file['filename'];
  }
  return $options;
}

/**
 * Implements function for get all files from directory
 * @param string $dir
 * @param array $results
 *
 * @return array
 */
function itg_videogallery_dir_content($dir, &$results = array()) {
  $files = scandir($dir);

  foreach ($files as $key => $value) {
    $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
    if (!is_dir($path)) {
      $results[] = $path;
    }
    elseif ($value != "." && $value != "..") {
      get_dir_content($path, $results);
      $results[] = $path;
    }
  }

  return $results;
}

/**
 * Implements function check exist filename
 * @param array $form
 * @param array $form_state
 * @return string
 */
function itg_video_check_exist_file_browse($filename) {
  global $user;
  $connection_id = itg_videogallery_ftp_video_list();
  $ftp_files = ftp_nlist($connection_id, "/videos/");
  $results = itg_videogallery_getfile_details($filename);
  if ($results == '' && empty($results)) {
    $file_size = ftp_size($connection_id, '/videos/' . $filename);
    if ($res != -1) {
      $uri = 'public://dailymotion_video_dir/' . $filename;
      $fid = db_insert('file_managed')
          ->fields(array(
            'uid' => $user->uid,
            'filename' => $filename,
            'uri' => $uri,
            'filemime' => file_get_mimetype($uri),
            'filesize' => $file_size,
            'status' => 1,
            'timestamp' => REQUEST_TIME,
          ))
          ->execute();
      // Entry for FTP Video
      db_insert('itg_dailymotion_ftp_video')
          ->fields(array(
            'fid' => $fid,
          ))
          ->execute();
    }
  }
  ftp_close($connection_id);
  return $results;
}

/**
 * Implements function for get FTP exist file
 * @param string $filename
 * @return array
 */
function itg_videogallery_getfile_details($filename) {
  $uri = 'public://dailymotion_video_dir/' . $filename;
  $query = db_select('file_managed', 'fm');
  $query->condition('filename', $filename, '=');
  $query->condition('uri', $uri, '=');
  $query->fields('fm');
  $query->orderBy('fm.fid', 'DESC');
  $query->range(0, 1);
  $results = $query->execute()->fetchAssoc();
  return $results;
}

/**
 * Implements function for get check ftp video
 * @param int $fid
 * @return array
 */
function itg_videogallery_check_ftp_video($fid) {
  $query = db_select('itg_dailymotion_ftp_video', 'ftp');
  $query->fields('ftp', array('fid'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for ftp connection.
 */
function itg_videogallery_ftp_video_list() {
  $ftp_server = variable_get('dailymotion_ftp_host', '');
  $ftp_user_name = variable_get('dailymotion_ftp_username', '');
  $ftp_user_pass = variable_get('dailymotion_ftp_password', '');
  $conn_id = ftp_connect($ftp_server);
  $login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);
  if ((!$conn_id) || (!$login_result)) {
    watchdog("WATCHDOG_INFO_video", "FTP connection has failed");
  }
  return $conn_id;
}
