<?php

/**
 * @file
 * ITG Videogallery module.
 *
 * Provides customizations and functions for Video Gallery.
 *
 */

/**
 * Implements hook_block_info()
 * {@inheritdoc}
 */
function itg_videogallery_block_info() {
  $blocks['videogallery_tab_form_block'] = array(
    'info' => t('Video Gallery Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_videogallery_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'videogallery_tab_form_block':
      $block['content'] = theme('videogallery_tab_form_block', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_videogallery_theme($existing, $type, $theme, $path) {
  $themes = array(
    'videogallery_tab_form_block' => array(
      'template' => 'videogallery-form-tab-template',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'videogallery_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'videogallery-node-form',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'render element' => 'form',
    ),
  );

  return $themes;
}

/**
 * Implemets hook_form_alter().
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_videogallery_form_alter(&$form, &$form_state, $form_id) {
  global $user, $base_url;

  switch ($form_id) {
    case 'videogallery_node_form':
      unset($form['actions']['preview_changes']);
      $form['#after_build'][] = 'itg_videogallery_after_build';
      $form['#validate'][] = 'itg_videogallery_custom_validate';
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'manage-videogallery', array('attributes' => array('class' => 'button'))),
        '#weight' => 20,
      );
      $form['upload'] = array(
        '#type' => 'plupload',
        '#weight' => 21,
        '#upload_validators' => array(
          'file_validate_extensions' => array("mp4"),
        ),
//      '#description' => t('88x66 smallest size of image.'),
      );
      $form['#submit'][] = 'itg_videogallery_custom_submit';
      foreach ($form['field_videogallery_video_upload'][LANGUAGE_NONE] as $key => $fieldcollection) {
        if (is_numeric($key)) {
          $form['field_videogallery_video_upload'][LANGUAGE_NONE][$key]['field_upload_video'][LANGUAGE_NONE][0]['#upload_validators']['itg_custom_field_validate'] = array(1, 2);
        }
      }
      $form['actions']['submit']['#submit'][] = 'itg_videogallery_submit_status_message';
      break;
  }
}

/**
 * Implements function for validate image
 * @param array $field
 * @return array
 */
function itg_custom_field_validate($field) {
  $val = itg_video_check_exist_file($field->filename);
  $field->destination = $val;
  $errors = array();
  return $errors;
}

/**
 * Implements function check exist filename
 * @param array $form
 * @param array $form_state
 * @return string
 */
function itg_video_check_exist_file($filename) {
  $query = db_select('file_managed', 'fm');
  $query->condition('filename', $filename, '=');
  $query->fields('fm');
  $query->orderBy('fm.fid', 'DESC');
  $query->range(0, 1);
  $results = $query->execute()->fetchAll();
  if (!isset($results) && empty($results[0])) {
    $value = '';
  }
  else {
    //public://dailymotion_video_dir/filename_165.mp4
    $result = explode('public://dailymotion_video_dir/', $results[0]->uri);
    //$results[0]->filename = filename_165.mp4
    $file_name = explode('.', $results[0]->filename);
    $result_num = explode($file_name[0] . '_', $result[1]);
    //$result_num = [1] => 165.mp4
    $num_file_id = explode('.', $result_num[1]);
    $value = $num_file_id[0] + 1;
    $value = '_' . $value;
  }
  $file_name = explode('.', $filename);
  $res = 'public://dailymotion_video_dir/' . $file_name[0] . $value . '.' . $file_name[1];
  return $res;
}

/**
 * Implements custom submit for move video on dailymotion.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_custom_submit($form, &$form_state) {
  foreach ($form_state['values']['field_videogallery_video_upload'][LANGUAGE_NONE] as $key => $fieldcollection) {
    if (is_numeric($key)) {
      $fid = $form_state['values']['field_videogallery_video_upload'][LANGUAGE_NONE][$key]['field_upload_video'][LANGUAGE_NONE][0]['fid'];
      if($fid != '' && is_numeric($fid)){
        $query = db_select('dailymotion_response_details', 'drd');
        $query->fields('drd', array('fid'));
        $query->condition('fid', $fid, '=');
        $result_fid = $query->execute()->fetchCol();
          if ($result_fid[0] == '') {
            $new_fid_array[$key] = $fid;
          }
        }
     }
  }
  drupal_set_message('<pre>' . print_r($new_fid_array, 1) . '<pre>');

  foreach ($new_fid_array as $key => $value) {
    if (is_numeric($key)) {
      $file_details = file_load($value);
      $real_path = drupal_realpath($file_details->uri);
      $response = itg_videogallery_dailymotion($real_path, $key, $file_details->uri, $value);

      $nid = db_insert('dailymotion_response_details')
          ->fields(array(
            'title' => $response['title'],
            'channel' => $response['channel'],
            'fid' => $response['fid'],
            'tags' => $response['tags'],
            'video_id' => $response['id'],
          ))
          ->execute();
    }
  }
}

/**
 * Implement dailymotion api call
 * @param string $real_path
 * @param int $key
 * @param string $uri
 * @param int $fid
 * @return array
 */
function itg_videogallery_dailymotion($real_path, $key, $uri, $fid) {
  require_once 'includes/Dailymotion.php';
  $username = variable_get('dailymotion_username', '');
  $password = variable_get('dailymotion_password', '');
  $apiKey =  variable_get('dailymotion_apikey', '');
  $apiSecret = variable_get('dailymotion_secretkey', '');

  // Tell the SDK what kind of authentication you'd like to use.
  // Because the SDK works with lazy authentication, no request is performed at this point.
  $api = new Dailymotion();
  $scopes = array(
    'userinfo',
    'feed',
    'manage_videos',
    'manage_subtitles',
    'read',
    'write',
    'delete',
  );
  $api->setGrantType(
      Dailymotion::GRANT_TYPE_PASSWORD, $apiKey, $apiSecret, $scopes, array(
      'username' => $username,
      'password' => $password,
      )
  );



//  try {
//    // The following line will actually try to authenticate before making the API call.
//    // * The SDK takes care of retrying if the access token has expired.
//    // * The SDK takes care of storing the access token itself using its `readSession()`
//    //   and `storeSession()` methods that are made to be overridden in an extension
//    //   of the class if you want a different storage than provided by default.
//    $result1 = $api->get(
//        '/me/videos', array('fields' => array('id', 'title', 'owner', 'status', 'stream_h264_uhd_url', 'stream_h264_qhd_url', 'stream_h264_hd1080_url', 'stream_h264_hd_url', 'stream_h264_hq_url', 'stream_h264_url', 'available_formats', 'views_last_day', 'views_total'))
//    );
//// drupal_set_message('<pre>' . print_r($result, 1) . '</pre>', 'status');
//  }
//  catch (DailymotionAuthRequiredException $e) {
//    // If the SDK doesn't have any access token stored in memory, it tries to
//    // redirect the user to the Dailymotion authorization page for authentication.
//    return header('Location: ' . $api->getAuthorizationUrl());
//  }
//  catch (DailymotionAuthRefusedException $e) {
//    // Handle the situation when the user refused to authorize and came back here.
//    // <YOUR CODE>
//    drupal_set_message(t('Some error from dailymotion please retry'), 'error');
//  //  drupal_goto('manage-videogallery');
//  }
  $filePath = $real_path;
  // Temporarily upload a file on Dailymotion' servers
  // This does not create a video, it only offers you a public URL to work with.
  try {
  $url = $api->uploadFile($filePath);
  $result = $api->post(
      '/me/videos', array(
    'url' => $url,
    'title' => $uri,
    'tags' => 'video upload for test, testing',
    'channel' => 'tv',
    'published' => true,
      )
  );
  $a = new Dailymotion();
  $a->logout();
  $result['fid'] = $fid;
  $result['tags'] = $fid;
  drupal_set_message('<pre>' . print_r($result, 1) . '</pre>', 'status');
  }
  catch (Exception $e) {
    if ($e->getMessage() == "This `client_id' doesn't exist.") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message('API Key is wrong.', 'error');
      drupal_goto('dailymotion/config');
    }
    elseif ($e->getMessage() == "Invalid `client_secret'") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message('Secret Key is wrong.', 'error');
      drupal_goto('dailymotion/config');
    }
    else {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
  return $result;
}

/**
 * Implements function for custom validate.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_custom_validate($form, &$form_state) {
  //schedule date & expiry date validation
  $schedule_date = strtotime($form_state['values']['field_story_schedule_date_time'][LANGUAGE_NONE][0]['value']);
  $expiry_date = strtotime($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value']);
  if (isset($expiry_date) && ($schedule_date > $expiry_date)) {
    form_set_error('field_story_expiry_date', t("Expiry date should be greater then schedule start date"));
  }
  //comment question validation
  $comment_checkbox = $form_state['values']['field_video_configurations'][LANGUAGE_NONE][0]['value'];
  if (isset($comment_checkbox) && $form_state['values']['field_story_comment_question'][LANGUAGE_NONE][0]['value'] == '') {
    form_set_error('field_story_comment_question', t("Please enter the comment question."));
  }
  
  // field collection validation
  foreach ($form_state['field']['field_videogallery_video_upload'][LANGUAGE_NONE]['entity'] as $key => $filed_collection) {
    $fids[] = $form_state['field']['field_videogallery_video_upload'][LANGUAGE_NONE]['entity'][$key]->field_upload_video[LANGUAGE_NONE][0]['fid'];
    $validate_thumb[$key] = $form_state['field']['field_videogallery_video_upload'][LANGUAGE_NONE]['entity'][$key]->field_upload_video[LANGUAGE_NONE][0]['fid'];
    }
  $newfid = array_filter($fids);
  $validate_thumbs = array_filter($validate_thumb);
  if(empty($newfid)){
    form_set_error('field_upload_video',t('Upload video is required.'));
  }
  foreach($validate_thumbs as $key => $valu){
    $count = $key + 1;
    if($form_state['field']['field_videogallery_video_upload'][LANGUAGE_NONE]['entity'][$key]->field_video_thumbnail[LANGUAGE_NONE][0]['fid'] == ''){
      form_set_error('field_video_thumbnail',t('Thumbnail image is required.'));
    }elseif ($form_state['field']['field_videogallery_video_upload'][LANGUAGE_NONE]['entity'][$key]->field_story_expert_description[LANGUAGE_NONE][0]['value'] == ''){
      form_set_error('field_story_expert_description',t('Long description of video is required.'));
    }
  }
  // end of fieldcollection validation
}

/**
 * After build for story form.
 * {@inheritdoc}
 */
function itg_videogallery_after_build($form, &$form_state) {

  global $user, $base_url;
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_videogallery' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/itg_videogallery.js', array('weight' => 1));
  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * @param array $form
 * @param array $form_state
 * @param array $form_id  
 */
function itg_videogallery_form_videogallery_node_form_alter(&$form, &$form_state, $form_id) {
  global $base_url, $user;
  // code for story expiry date field show and hide
  $form['field_story_expiry_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_expires[und][Yes]"]' => array('checked' => TRUE),
    )
  );

  // code for Comment Question field hide and show
  $form['field_story_comment_question']['#states'] = array(
    'visible' => array(
      ':input[name="field_video_configurations[und][comment]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_video_configurations[und][comment]"]' => array('checked' => TRUE),
    )
  );


  $form['field_story_posted_by_twitter']['#default_value'] = $user->mail;
  $form['field_story_posted_by_instagram']['#default_value'] = $user->mail;
}

/**
 * Implement hook_form_FORM_ID_alter().
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_videogallery_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form["#id"] == 'views-exposed-form-manage-videogallery-page') {
    $form['title']['#autocomplete_path'] = 'content-title-list/videogallery/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
    $form['nid']['#autocomplete_path'] = 'content-nid-list/videogallery/autocomplete';
    $form['nid']['#attributes'] = array('placeholder' => t('Video Id'));
  }
}

/**
 * Implement hook_views_pre_render().
 * {@inheritdoc}
 */
function itg_videogallery_views_pre_render(&$view) {
  if ($view->name == "manage_videogallery") {
    $header_content_video = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_video .= l(t('Create Video'), 'node/add/videogallery', array('query' => array('destination' => 'manage-videogallery')));
    $view->attachment_before = $header_content_video;
  }
}

/**
 * Implements hook_field_attach_form().
 * {@inheritdoc}
 */
function itg_videogallery_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $options = array('language' => field_valid_language($langcode));
  // Merge default options.
  $default_options = array(
    'default' => FALSE,
    'deleted' => FALSE,
    'language' => NULL,
  );
  $options += $default_options;
  list(,, $bundle) = entity_extract_ids($entity_type, $entity);
  $instances = _field_invoke_get_instances($entity_type, $bundle, $options);
  // Iterate through the instances.
  $return = array();
  foreach ($instances as $instance) {
    // field_info_field() is not available for deleted fields, so use
    // field_info_field_by_id().
    $field = field_info_field_by_id($instance['field_id']);
    $field_name = $field['field_name'];

    //If we are looking at our field type and specific widget type, and we are multiple entries
    if (($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) && ($field['type'] == "field_collection")) {
      if ($field['bundles']['node'][0] == "videogallery") {
        drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/upload.js', array('weight' => 2));
        //Check just in case the button is here, and add another #submit function
        if (isset($form[$field['field_name']]['und']['add_more'])) {
          // add a simple select list, this defaults to numb 3
          $form[$field['field_name']]['add_more_number'] = array(
            '#type' => 'select',
            '#title' => t('Add more no.'),
            '#options' => drupal_map_assoc(range(0, 20)),
            '#default_value' => 1,
            '#attributes' => array('style' => 'display:none;'),
          );
          $form[$field['field_name']]['und']['add_more']['#submit'][] = 'itg_videogallery_field_add_more_submit';
        }
      }
    }
  }
}

/**
 * Implements hook_form_submit().
 * @global object $user
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_field_add_more_submit($form, &$form_state) {
  global $user;
  $button = $form_state['triggering_element'];
  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];

  // Alter the number of widgets to show. items_count = 0 means 1.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  //get the number from the select
  $numbtoadd = $form[$field_name]['add_more_number']['#value'];
  if ($numbtoadd) {
    $field_state['items_count'] += $numbtoadd - 1;
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
    $form_state['rebuild'] = TRUE;
  }
  $node = drupal_rebuild_form('videogallery_node_form', $form_state, $old_form = NULL);
  $fids = array();
  $mydir = 'public://dailymotion_video_dir'; 
 // file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
   drupal_mkdir('public://' . $mydir , 0777);
  foreach ($node['upload']['#value'] as $video) {
    $scheme = variable_get('file_default_scheme', 'public') . '://dailymotion_video_dir/';
    $source = $video['tmppath'];
    $uri = itg_video_check_exist_file($video['name']);
    $newuri = explode('//dailymotion_video_dir/', $uri);
    $directory = '';
    $destination = file_stream_wrapper_uri_normalize($scheme . $directory . $newuri[1]);
    $destination = file_unmanaged_move($source, $destination);
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $file = new StdClass;
    $file->uid = $user->uid;
    $file->filename = $video['name'];
    $file->uri = $uri;
    $file->filemime = file_get_mimetype($uri);
    $file->filesize = @filesize($uri);
    $file->timestamp = REQUEST_TIME;
    $file->is_new = TRUE;
    $file->status = 0;
    $fids[] = file_save($file);
  }
  $key_val = 0;
  foreach ($fids as $file_id) {
    $file_ids[$key_val]['fid'] = $file_id->fid;
    $file_ids[$key_val]['filename'] = $file_id->filename;
    $key_val++;
  }

  $i = 0;
  foreach ($form_state['field']['field_videogallery_video_upload']['und']['entity'] as $key => $filed_collection) {
    if (!isset($filed_collection->field_upload_video['und'])) {
      $form_state['field']['field_videogallery_video_upload']['und']['entity'][$key]->field_upload_video['und'][0]['fid'] = $file_ids[$i]['fid'];
      $i++;
    }
  }
}

/**
 * Implements submit function for bolt video title in msg.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_submit_status_message(&$form, $form_state){
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);}
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'poll') {
    $op = 'created';
  }
  else {
    $op = 'updated';}
  $video_title = $form_state['node']->title;
  drupal_set_message(t('Video Gallery <b>' . $video_title . '</b> has been ' . $op.'.' ));
  $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * Impelements form for configuration.
 * {@inheritdoc}
 */
function itg_videogallery_configuration_form($form) {
  $form['dailymotion_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion Username'),
    '#default_value' => variable_get('dailymotion_username'),
    '#required' => TRUE,
  );
  $form['dailymotion_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion Password'),
    '#default_value' => variable_get('dailymotion_password', ''),
    '#required' => TRUE,
  );
  $form['dailymotion_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('Api Key'),
    '#default_value' => variable_get('dailymotion_apikey', ''),
    '#required' => TRUE,
  );
  $form['dailymotion_secretkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#default_value' => variable_get('dailymotion_secretkey', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_menu().
 * {@inheritdoc}
 */

function itg_videogallery_menu(){
   $items['dailymotion/config'] = array(
    'title' => 'Dailymotion Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_videogallery_configuration_form'),
    'access arguments' => array('authorized user dailymotion credin'),
    'type' => MENU_CALLBACK,
  );
   return $items;
}

/**
 * Implements hook_permission.
 */
function itg_videogallery_permission() {
  return array(
    'authorized user dailymotion credin' => array(
      'title' => t('Dailymotion credintial permission'),
      'description' => t('Dailymotion credintial configuration permission'),
     ),
   );
}

/**
 * Get dailymotion video id by fid
 */
function itg_videogallery_get_video($fid){
  $query = db_select('dailymotion_response_details', 'dm')
          ->fields('dm', array('video_id'))
          ->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}