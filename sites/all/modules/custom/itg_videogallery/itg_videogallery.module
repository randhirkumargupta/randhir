<?php

/**
 * @file
 * ITG Videogallery module.
 *
 * Provides customizations and functions for Video Gallery.I  
 *
 */
define('FTP_URL_VIDEO', variable_get('dailymotion_ftp_url'));
define('LOCAL_VIDEO_DIR', variable_get('local_s3_video_folder'));
define('FOLDER_FTP_ROOT', variable_get('ftp_root_folder'));

module_load_include('inc', 'itg_videogallery', 'includes/itg_videogallery.helper');
module_load_include('inc', 'itg_videogallery', 'includes/itg_videogallery_bitrate');
module_load_include('inc', 'itg_videogallery', 'includes/itg_videogallery_custom.helper');

/**
 * Implements hook_menu().
 * {@inheritdoc}
 */
function itg_videogallery_menu() {
  $items['dailymotion/config'] = array(
    'title' => 'Dailymotion Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_videogallery_configuration_form'),
    'access arguments' => array('authorized user dailymotion credin'),
    'type' => MENU_CALLBACK,
  );

  $items['dailymotion/ftp/config'] = array(
    'title' => 'Ftp Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_videogallery_ftp_video_form'),
    'access arguments' => array('authorized user ftp credin'),
    'file' => 'includes/itg_videogallery.inc',
  );

  $items['dailymotion/s3/config'] = array(
    'title' => 'AWS S3 For Dailymotion Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_videogallery_s3_video_form'),
    'access arguments' => array('authorized user ftp credin'),
    'file' => 'includes/itg_videogallery.inc',
  );
  
  $items['file-itgt-video'] = array(
     'type' => MENU_CALLBACK,
    'page callback' => 'itg_videogallery_push_itg_video',
     'access arguments' => array('access content'),
    'file' => 'includes/itg_videogallery_itg_video_file.inc',
  );
 
 $items['internal-video-play'] = array(
    'page callback' => 'itg_videogallery_internal_video_play',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_video_dailymotion.inc',
  );

  $items['dailymotion-ftp-template'] = array(
    'page callback' => 'itg_videogallery_ftp_template',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_video_dailymotion.inc',
  );
  
  $items['dailymotion-img'] = array(
    'page callback' => 'itg_videogallery_thumb_url',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_video_dailymotion.inc',
  );
  
  $items['dailymotion-image'] = array(
    'page callback' => 'itg_videogallery_thumb_assign',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_video_dailymotion.inc',
  );
  
  $items['embeded-video/%'] = array(
    'page callback' => 'itg_videogallery_dm_embed',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_videogallery.inc',
  ); 
  
  $items['dailymotion-video-play'] = array(
    'page callback' => 'itg_videogallery_dailymotion_video_play',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_video_dailymotion.inc',
  );
  
  $items['getvideoplayer'] = array(
    'page callback' => 'itg_videogallery_getvideoplayer',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_videogallery.inc',
  );
  
  $items['getvideoplayer-migrated'] = array(
    'page callback' => 'itg_videogallery_getvideoplayer_migrated',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_videogallery.inc',
  );
  
  $items['solr-video-make-fid'] = array(
    'page callback' => 'itg_videogallery_solr_video_insert_in_for_fid',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_videogallery_solr.inc',
  );
  
  $items['dailymotion-bitrate'] = array(
    'page callback' => 'itg_videogallery_video_bitrate',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_video_dailymotion.inc',
  );
  
  $items['check-s3'] = array(
    'page callback' => 'itg_videogallery_s3_file_to_dm',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_videogallery_solr.inc',
  );
  
  $items['move-ftp'] = array(
    'page callback' => 'itg_videogallery_move_ftp_videos',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_videogallery.inc',
  );

  $items['video-delete-parent'] = array(
    'page callback' => 'itg_videogallery_remove_video_id_parent_site_delete_or_unpublish',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_video_dailymotion.inc',
  );

  $items['daily-motion-video-dashboard'] = array(
    'title' => 'Daily Motion Video Dashboard',
    'description' => 'Daily Motion Video Dashboard',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('daily_motion_video_dashboard'),
    'access arguments' => array('access content'),
    'file' => 'includes/itg_dailymotion_video_dashboard.inc',
  );

  $items['delete_daily_motion_video/%'] = array(
    'title' => 'Daily Motion Video Dashboard Video Delete',
    'description' => 'Daily Motion Video Dashboard Video Delete',
    'page callback' => 'delete_daily_motion_video_callback',
    'access arguments' => array('access content'),
    'file' => 'includes/itg_dailymotion_video_dashboard.inc',
  );

  $items['get-file-details'] = array(
    'page callback' => 'itg_videogallery_get_file_details',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_videogallery.inc',
  );

   $items['itg-dfp-tags-setting'] = array (
		   'page callback'		=>	'drupal_get_form',
		   'title'				=>	'DFP Tags Configuration ', 
		   'page arguments' => array('itg_videogallery_dfp_tags_setting_form'),
       'access arguments' => array('authorized user ftp credin'),
       'file' => 'includes/itg_videogallery.inc',
		    'type'				=>	MENU_NORMAL_ITEM
		   );
   
   $items['itg-dfp-tags-list'] = array(
    'title' => 'DFP Tags List',
    'description' => 'DFP Tags List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_videogallery_dfp_tags_list'),
    'access arguments' => array('authorized user ftp credin'),
       'file' => 'includes/itg_videogallery.inc',
		    'type'				=>	MENU_NORMAL_ITEM
		   );
  
    $items['itg-video-watch-later-refresh/%'] = array(
      'title' => 'videogallery watch later block refresh',
      'description' => 'videogallery watch later block refresh',
      'page callback' => 'itg_video_watch_later_refresh',
      'access arguments' => array('access content'),
      'file' => 'includes/itg_video_watch_later_refresh.helper.inc',
      'type' => MENU_CALLBACK,
    );
    $items['transcoader/get_publish_status'] = array(
     'type' => MENU_CALLBACK,
     'page callback' => 'itg_videogallery_get_publish_status',
     'access arguments' => array('access content'),
     'file' => 'includes/itg_dailymotion_video_dashboard.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info()
 * {@inheritdoc}
 */
function itg_videogallery_block_info() {
  $blocks['videogallery_tab_form_block'] = array(
    'info' => t('Video Gallery Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['videogallery_menu_video_block'] = array(
    'info' => t('Video landing page menu'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['itg_videogallery_tab_realted'] = array(
    'info' => t('Video header related content'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['itg_videogallery_menu_content'] = array(
    'info' => t('Video landing Link page menu'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['itg_other_videogallery_section'] = array(
    'info' => t('Other Video Gallery from primary Category'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['itg_trending_videos_widget_tab'] = array(
    'info' => t('Trending videos for video tab'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_videogallery_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'videogallery_tab_form_block':
      $block['content'] = theme('videogallery_tab_form_block', array('data' => $data));
      break;
    case 'videogallery_menu_video_block':
      $block['content'] = theme('videogallery_menu_video_block', array('data' => $data));
      break;
    case 'itg_videogallery_tab_realted':
      $block['content'] = get_header_tab_related_video_block_content();
      break;
    case 'itg_videogallery_menu_content':
      if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
        $node = menu_get_object();
        if ($node->type == 'videogallery') {
          $block['content'] = theme('itg_videogallery_menu_content_theme', array('data' => $data));
        }
        else {
          $block['content'] = '';
        }
      }
      else {
        $block['content'] = '';
      }
      break;
    case 'itg_other_videogallery_section':
      if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
        $node = menu_get_object();
        if ($node->type == 'videogallery') {
          drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/itg_videogallery_front.js', array('weight' => 1, 'scope' => 'footer'));
          $block['content'] = _get_other_videos_from_primary_category();
        }
        else {
          $block['content'] = '';
        }
      }
      else {
        $block['content'] = '';
      }
      break;
    // Trending videos ordering reordering widget case
    case 'itg_trending_videos_widget_tab':
      $info['widget'] = 'trending_videos_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = 3;
      $info['min_limit'] = 3;
      $data = itg_widget_get_widget_data_data($info);
      $block['content'] = theme("trending_videos_tab", array("data" => $data));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_videogallery_theme($existing, $type, $theme, $path) {
  $themes = array(
    'videogallery_tab_form_block' => array(
      'template' => 'videogallery-form-tab-template',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'videogallery_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'videogallery-node-form',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'render element' => 'form',
    ),
    'itg_videogallery_browse_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'videogallery-file-form',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'render element' => 'form',
    ),
    'videogallery_menu_video_block' => array(
      'template' => 'videogallery-menu-landing-template',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_dailymotion_ftp_template' => array(
      'template' => 'itg-dailymotion-ftp-template',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_videogallery_dm_embed' => array(
      'template' => 'itg-dailymotion-dm-embeded',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_videogallery_dailymotion_video_play' => array(
      'template' => 'itg-dailymotion-dailymotion-video-play',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_videogallery_internal_video_play' => array(
      'template' => 'itg-dailymotion-internal-video-play',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_videogallery_getvideoplayer' => array(
      'template' => 'itg-dailymotion-getvideoplayer',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_videogallery_menu_content_theme' => array(
      'template' => 'videogallery-link-menu-landing-template',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'trending_videos_tab' => array(
      'template' => 'trending-videos-tab',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates'
    )
  );
  return $themes;
}

/**
 * Implemets hook_form_alter().
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_videogallery_form_alter(&$form, &$form_state, $form_id) {
  global $user, $base_url;
  switch ($form_id) {
    case 'itg_widgets_custom_variables':
      $form['tid_videos'] = array(
        '#type' => 'textfield',
        '#title' => 'Tid of video section',
        '#default_value' => variable_get('tid_videos'),
        '#size' => 20,
        '#maxlength' => 20,
      );
      $form['mail_template_emails'] = array(
        '#type' => 'textarea',
        '#title' => 'Story/Photo Publish Email alert',
        '#default_value' => variable_get('mail_template_emails'),
        '#size' => 10,
      );
      break;
    case 'videogallery_node_form':
      $arg = arg(2);
      global $conf;
      $conf['preprocess_js'] = 0;
      $form['field_story_expert_description']['und'][0]['#format'] = 'full_html';
      drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/jwplayer.min.js', array('weight' => 1, 'scope' => 'footer'));
      // checked comment box by default
      if (!isset($form['#node']->nid)) {
        $form['field_video_configurations'][LANGUAGE_NONE]['#default_value'] = array('comment_box');
      }
      
      if(isset($form['#entity']->field_story_source_type)) {
        if ($form['#entity']->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
          foreach ($form['field_video_upload']['und'] as $delta => $field) {
            if (is_numeric($delta)) {
              if ($arg == 'edit') {
                $video_fid = $form['field_video_upload']['und'][$delta]['field_videogallery_video_upload']['und'][0]['#default_value']['fid'];
                $file_exist = itg_videogallery_check_file_manage_fid($video_fid);
                if (empty($file_exist) || $video_fid < 1) {
                  unset($form['field_video_upload']['und'][$delta]);
                }
              }
              $video_fid = $form['field_video_upload']['und'][$delta]['field_videogallery_video_upload']['und'][0]['#default_value']['fid'];
             
            }
          }
         }
      }
      if ($user->uid != 1) {
        unset($form['field_video_configurations']['und']['#options']['comment']);
      }
      unset($form['actions']['preview_changes']);
      $form['field_story_expert_name']['#access'] = FALSE;
      $form['field_story_syndication']['und']['#title'] = NULL;
      if (arg(1) == 'add') {
        drupal_set_title(t('Upload Video'));
      }
      else {
        drupal_set_title(t('Edit Upload Video'));
      }
      $form['#after_build'][] = 'itg_videogallery_after_build';
      $form['#validate'][] = 'itg_videogallery_custom_validate';
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'manage-videogallery', array('attributes' => array('class' => 'button'))),
        '#weight' => 20,
      );
      $form['field_video_duration']['#attributes'] = array('style' => 'display:none;');
      $form['field_video_upload'][LANGUAGE_NONE][0]['#upload_validators']['itg_custom_field_validate'] = array(1, 2);
      $form['field_video_upload']['#prefix'] = '<div class="ftp_browse_field"><label for="edit-field-upload-video-und-0-upload">Video <span title="This field is required." class="form-required">*</span></label><span class="browse-ftp-click">' . l(t('Browse Video'), 'dailymotion-ftp-template', array('query' => array('width' => '80%', 'height' => '80%', 'iframe' => TRUE, 'input_filed' => 'edit-field-upload-video-und-0-upload', 'file_filed_name' => 'field_upload_video[und][0][fid]'), 'attributes' => array('class' => array('colorbox-load', 'browse-ftp-click')))) . '</span><div class="description">Allowed file extension MP4.</div></div>';
      $form['actions']['submit']['#submit'][] = 'itg_videogallery_submit_status_message';
      array_unshift($form['actions']['submit']['#submit'], 'itg_videogallery_custom_submit');

      $form['field_video_upload'][LANGUAGE_NONE][0]['#process'][] = 'itg_videogallery_managed_file_process_accept_attribute';
      break;
  }
}

/**
 * Processes a filed_video upload element to add the accept attribute.
 *
 * Add the allowed extensions as an 'accept' attribute to the file_managed element.
 */
function itg_videogallery_managed_file_process_accept_attribute($element, &$form_state, $form) {

  if ($form['#form_id'] == 'videogallery_node_form') {
    if (!empty($element['#upload_validators']['file_validate_extensions']) && !isset($element['upload']['#attributes']['accept'])) {
      $extensions = explode(' ', $element['#upload_validators']['file_validate_extensions'][0]);
      $element['upload']['#attributes']['accept'] = '.' . implode(',.', $extensions);
    }
  }
  return $element;
}

/**
 * impliment hook node insert
 */
function itg_videogallery_node_insert($node) {
  if ($node->type == 'story') {
    itg_videogallery_save_story_video_data($node->body['und'][0]['value'], $node->nid);
  }

  // Here Check node type not migrated
  if ($node->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
    switch ($node->type) {
      case 'videogallery':
        $node_id = $node->nid;
        foreach ($node->field_story_itg_tags[LANGUAGE_NONE] as $tags) {
          $tag[] = $tags['name'];
        }
        $tag_value = implode(', ', $tag);
        $tags_value = trim($tag_value, ",");
        // get Extra large image fid for update on DM
        $extralarge_image_fid = $node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'];
        $draft_msg_flag = 0;
        $video_desc = strip_tags($node->field_story_expert_description[LANGUAGE_NONE][0]['value']);
        foreach ($node->field_video_upload['und'] as $keys => $videofields) {
          $video_details = entity_load('field_collection_item', array($videofields['value']));
          $priv_status = $video_details[$videofields['value']]->field_video_private[LANGUAGE_NONE][0]['value'];
          $video_title = $video_details[$videofields['value']]->field_video_title[LANGUAGE_NONE][0]['value'];
          $video_thumb_fid = $video_details[$videofields['value']]->field_video_thumbnail[LANGUAGE_NONE][0]['fid'];
          $exclude_ads = $video_details[$videofields['value']]->field_video_private[LANGUAGE_NONE][0]['value'];
          if ($video_thumb_fid == 0 || empty($video_thumb_fid)) {
            $video_thumb_fid = $extralarge_image_fid;
          }
          foreach ($video_details[$videofields['value']]->field_videogallery_video_upload as $filed_val) {

            $fids = $filed_val[0]['fid'];
          }

          if ((int) $fids != 0) {
            $video_image = itg_videogallery_get_video_info_by_fid($fids);
            if (empty($video_image)) {
              $video_fid = $fids;
              $file_details = file_load($fids);
              $real_path = drupal_realpath($file_details->uri);
              if (file_exists($file_details->uri)) {
                if ($real_path == "") {
                  $real_path = file_create_url($file_details->uri);
                }
                $draft_msg_flag = 1;
                // use for upload local video to DM
                itg_videogallery_send_local_video_to_dailymotion($real_path, $file_details, $video_fid, $tags_value, $node_id, 'is_draft', $priv_status);
                if ($node->field_op_flag[LANGUAGE_NONE][0]['value'] == 'draft') {
                  $file_video = itg_videogallery_get_video_info_by_fid($fids);
                  $num_updated = db_update('dailymotion_response_details') // Table name no longer needs {}
                      ->fields(array(
                        'dailymotion_published' => 1,
                        'is_replace' => 0,
                        'node_is_save_draft' => 1,
                      ))
                      ->condition('video_id', $file_video[0]->solr_video_id, '=')
                      ->execute();
                }
              }
            }
            else {
              $file_video = $video_image;
              if($file_video[0]->video_repo_type != 'INTERNAL') {
                if ($file_video[0]->property == VIDEO_PROPERTY) {
                  // Upadte image ,tags,title On DM 
                  itg_videogallery_update_tags_video_private($tag_value, $file_video[0]->solr_video_id, $priv_status, $video_desc, $video_title, $video_thumb_fid, $exclude_ads);
                }
                // Update embed code for this vidoe in table
                itg_videogallery_update_embedcode_url($file_video[0]->solr_video_id);
              }
              if ($node->status != 0) {
                  $num_updated = db_update('dailymotion_response_details') // Table name no longer needs {}
                    ->fields(array(
                      'dailymotion_published' => 1,
                      'is_replace' => 0,
                      'node_is_save_draft' => 0
                    ))
                    ->condition('video_id', $file_video[0]->solr_video_id, '=')
                    ->execute();
                // Upadte video is publish on solr
                itg_videogallery_update_video_info_solr($file_video[0]->solr_video_id);
              }

              $getnode = itg_videogallery_get_node_by_title($file_video[0]->solr_video_id);
              if (!empty($getnode)) {
                node_delete($getnode[0]->nid);
              }

              $is_node_draft = 0;
              if ($node->status == 0 && $draft_msg_flag == 1) {
                $is_node_draft = 1;
              }
              $num_updated = db_update('itg_solr_video_info') // Table name no longer needs {}
                  ->fields(array(
                    'nid' => $node_id,
                    'is_node_draft' => $is_node_draft,
                  ))
                  ->condition('fid', $fids, '=')
                  ->execute();
            }
          }
          
           if ($node->status == 0 && $draft_msg_flag == 1 && $node->field_op_flag[LANGUAGE_NONE][0]['value'] != 'draft') {
                   $num_updated = db_update('dailymotion_response_details') // Table name no longer needs {}
                    ->fields(array(
                      'dailymotion_published' => 0,
                      'is_draft' => 1,
                      'nid' => $node_id,
                      'node_is_save_draft' => 1
                    ))
                    ->condition('video_id', $file_video[0]->solr_video_id, '=')
                    ->execute();
                // Upadte video is publish on solr
                itg_videogallery_update_video_info_solr($file_video[0]->solr_video_id);
          }
        }
        if ($node->status == 0 && $draft_msg_flag == 1 && $node->field_op_flag[LANGUAGE_NONE][0]['value'] != 'draft') {
          drupal_set_message(t('The video is not published. It will auto published once it published on Daily motion.'));
        }
        if ($node->field_story_facebook_video[LANGUAGE_NONE][0]['fid'] != 0) {
          itg_videogallery_update_node_id_for_video_fid($node_id, $node->field_story_facebook_video[LANGUAGE_NONE][0]['fid'], $is_node_draft);
        }
        if ($node->field_story_twitter_video[LANGUAGE_NONE][0]['fid'] != 0) {
          itg_videogallery_update_node_id_for_video_fid($node_id, $node->field_story_twitter_video[LANGUAGE_NONE][0]['fid'], $is_node_draft);
        }
        break;
    }
  }

  if ($node->field_story_source_type[LANGUAGE_NONE][0]['value'] == 'UGC') {
    $_REQUEST['destination'] = 'ugc-inqueue-content';
  }
}


/**
 * Function use for upload local video to dailymotion
 */
function itg_videogallery_send_local_video_to_dailymotion($real_path, $file_details, $video_fid, $tags_value, $node_id, $is_draft = NULL, $is_private = NULL) {

  $response = itg_videogallery_dailymotion($real_path, $file_details->uri, $video_fid, $tags_value, $node_id, $is_private);
// Perform playlist and tags when new video create.
  $response_result['video_id'] = $response['id'];
  $response_result['fid'] = $response['fid'];
  if (!empty($response_result['video_id'])) {
    $duration = "";
    if ($response['duration'] < 3600) {
      $duration = gmdate("i:s", $response['duration']);
    }
    else {
      $duration = gmdate("H:i:s", $response['duration']);
    }
    $nid = db_insert('dailymotion_response_details')
        ->fields(array(
          'title' => $response['title'],
          'channel' => $response['channel'],
          'video_type' => 'DM',
          'fid' => $response['fid'],
          'tags' => $response['tags'],
          'video_id' => $response['id'],
          'nid' => $node_id,
          'upload_time' => REQUEST_TIME,
          'video_duration' => $duration,
          'dailymotion_published' => 1,
          'video_size' => $file_details->filesize,
          'is_draft' => ($is_draft) ? 1 : 0,
          'type' => 'local',
          'name' => $file_details->filename,
        ))
        ->execute();
    db_insert('itg_solr_video_info')
        ->fields(array(
          'fid' => $response['fid'],
          'solr_video_id' => $response['id'],
          'nid' => $node_id,
          'property' => VIDEO_PROPERTY,
          'content_type' => 'video_gallery',
          'solr_video_duration' => $duration,
          'solr_video_size' => $file_details->filesize,
          'solr_video_thumb' => "",
        ))
        ->execute();
    itg_videogallery_update_embedcode_url($response['id']);
  }
}

/**
 * Function itg_videogallery_clean_string
 * @param 
 * @param
 */
function itg_videogallery_clean_string($string) {
  $string = str_replace(' ', ' ', $string);
  $string = preg_replace('/[^A-Za-z0-9\-ığşçöüÖÇŞİıĞ]/', ' ', $string);
  return preg_replace('/-+/', '-', $string);
}

/**
 * Function use update dailymotion_response_details data by video id
 * @param array $data
 * @param sting $video_id
 */
function itg_videogallery_update_dailymotion_table_by_videoid($data,$video_id) {
    $num_updated = db_update('dailymotion_response_details') 
           ->fields($data)
           ->condition('video_id', $video_id, '=')
           ->execute();
}

/**
 * Implements dailymotion video edit function
 * @param array $vid_res_result
 * @param array $playlist_name
 * @param array $tags_value
 * @param int $node_id
 */
function itg_videogallery_edit_dailymotion($vid_res_result, $playlist_name, $node_id) {
  $video_id = $vid_res_result['video_id'];
  $fid = $vid_res_result['fid'];
  $api = itg_videogallery_dailymotion_api();
  // create playlist
  foreach ($playlist_name as $name) {
    // local saved playlist check
    $exist_playlist = itg_videogallery_get_playlist_id($name);
    if ($exist_playlist[0]->pid == '') {
      try {
        $result = $api->post(
            '/me/playlists', array(
          'name' => $name,
            )
        );
        // Insert data in dailymotion_playlist_details table
        db_insert('dailymotion_playlist_details')
            ->fields(array(
              'pid' => $result['id'],
              'playlist_name' => $result['name'],
              'node_id' => $node_id,
              'video_id' => $video_id,
            ))->execute();
        $api->post('/playlist/' . $result['id'] . '/videos/' . $video_id);
      }
      catch (Exception $e) {
        if ($e->getCode() == 500) {
          $playlists = $api->get(
              '/me/playlists', array('limit' => 100, 'fields' => array('id', 'name'))
          );
          foreach ($playlists['list'] as $p_value) {
            $play[$p_value['name']] = $p_value['id'];
          }
          db_insert('dailymotion_playlist_details')
              ->fields(array(
                'pid' => $play[$name],
                'playlist_name' => $name,
                'node_id' => $node_id,
                'video_id' => $video_id,
              ))->execute();
          $playlist_id = itg_videogallery_get_playlist_id($name);
          $api->post('/playlist/' . $playlist_id[0]->pid . '/videos/' . $video_id);
        }
      }
    }
    else {
      $playlist_id = itg_videogallery_get_playlist_id($name);
      $api->post('/playlist/' . $playlist_id[0]->pid . '/videos/' . $video_id);
    }
  }
}

/**
 * This function use for chane video privat or public
 */
function itg_videogallery_video_private_public($videid, $status) {
  $api = itg_videogallery_dailymotion_api();
  $api->post('/video/' . $videid . '?private=' . $status);
  itg_videogallery_update_embedcode_url($videid);
}


/**
 * Implement dailymotion api call
 * @param string $real_path
 * @param int $key
 * @param string $uri
 * @param int $fid
 * @return array
 */
function itg_videogallery_dailymotion($real_path, $uri, $fid, $tags_value, $node_id, $is_private = NULL) {
  $api = itg_videogallery_dailymotion_api();
  if ($is_private == 'Yes') {
    $is_private = 'true';
  }
  else {
    $is_private = 'false';
  }
  try {
    if (itg_videogallery_check_ftp_video($fid)) {
      $ftp_file = explode('/' . LOCAL_VIDEO_DIR . '/' . date('Ym') . '/', $real_path);
      $uri = 'public://dailymotion-ftp/' . $ftp_file[1];
      $url = FTP_URL_VIDEO . $ftp_file[1];
    }
    elseif (strpos($real_path, '/s3fs') === FALSE) {

      $url = $api->uploadFile($real_path);
    }
    else {
      $url = $real_path;
    }
    $file_name = $ftp_file[1];
    if ($ftp_file[1] == "") {
      $file_name = file_load($fid);
      $file_name = $file_name->filename;
    }

    $result = $api->post(
        '/me/videos', array(
      'url' => $url,
      'title' => $file_name,
      'tags' => $tags_value,
      'channel' => 'tv',
      'private' => $is_private,
      'published' => TRUE,
        )
    );
    itg_videogallery_update_embedcode_url($result['id']);
    $playlist_id = variable_get('video_property');

    $dur = $api->get(
        '/video/' . $result['id'], array('fields' => array('duration'))
    );
    
    $result['duration'] = $dur['duration'];
    ftp_close($connection_id);
    $a = new Dailymotion();
    $a->logout();
    $result['fid'] = $fid;
    $result['tags'] = $tags_value;
  }
  catch (Exception $e) {

    if ($e->getMessage() == "This `client_id' doesn't exist.") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('API Key is wrong.'), 'error');
      drupal_goto('dailymotion/config');
    }
    elseif ($e->getMessage() == "Invalid `client_secret'") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('Secret Key is wrong.'), 'error');
      drupal_goto('dailymotion/config');
    }
    elseif ($e->getCode() == 6) {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('There is some issue with internet connection.'), 'error');
      drupal_goto('node/' . $node_id . '/edit', array('query' => array('destination' => 'manage-videogallery')));
    }
    elseif ($e->getCode() == 400) {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_get_messages();
      drupal_set_message(t('Do not use space in FTP filename. Please remove and again upload file without space in file name.'), 'error');
      drupal_goto('node/' . $node_id . '/edit', array('query' => array('destination' => 'manage-videogallery')));
    }
    else {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
  return $result;
}

/**
 * After build for story form.
 * {@inheritdoc}
 */
function itg_videogallery_after_build($form, &$form_state) {
  $arg = arg(2);
  global $user, $base_url;
  // apply button for editor and siteadmin role
  if (array_key_exists(EDITOR, $user->roles) || array_key_exists(SITE_ADMIN, $user->roles) || array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) || array_key_exists(COPY_EDITOR, $user->roles)) {
    if (!empty($form['nid']['#value']) && arg(2) == 'edit' && $form['#node']->type == 'videogallery' && $form['#node']->status == '1') {
      $form['actions']['itg_custom_apply_video_button'] = array(
        '#type' => 'submit',
        '#value' => t('Apply'),
        '#id' => 'btn-apply',
        '#submit' => array('node_form_submit', 'itg_videogallery_submit_status_message'),
        '#weight' => -8,
      );
    }
  }
  $form['field_itg_content_publish_date']["#attributes"]['class'][] = 'element-invisible';
  $form['field_story_extra_data']["#attributes"]['class'][] = 'element-invisible';

  if ($form_state['values']['field_story_source_type'][LANGUAGE_NONE][0]['value'] != 'migrated') {
    foreach ($form['field_video_upload']['und'] as $delta => $field) {
      if (is_numeric($delta)) {
        unset($form['field_video_upload']['und'][$delta]['field_migrated_video_url']);
        unset($form['field_multi_bitrate']);
        unset($form['field_noindex_nofollow']);
        $video_fid = $form['field_video_upload']['und'][$delta]['field_videogallery_video_upload']['und'][0]['#default_value']['fid'];

      }
    }
  }

  if ($form_state['values']['field_story_source_type'][LANGUAGE_NONE][0]['value'] == 'migrated') {
    foreach ($form['field_video_upload']['und'] as $delta => $field) {
      if (is_numeric($delta)) {
        $video_url = $form['field_video_upload']['und'][$delta]['field_migrated_video_url']['und'][0]['value']['#default_value'];
        $video_fid = $form['field_video_upload']['und'][$delta]['field_videogallery_video_upload']['und'][0]['#default_value']['fid'];
        if (!empty($video_url)) {
          unset($form['field_video_upload']['und'][$delta]['field_include_ads']);
          unset($form['field_video_upload']['und'][$delta]['field_video_private']);
          unset($form['field_video_upload']['und'][$delta]['field_video_title']);
          unset($form['field_video_upload']['und'][$delta]['field_videogallery_video_upload']);
          unset($form['field_video_upload']['und'][$delta]['field_video_thumbnail']);
        }
        
        if ($video_fid != "") {
          unset($form['field_video_upload']['und'][$delta]['field_migrated_video_url']);
        }
      }
    }
  }
  
  $form['original_image_fids'] = array(
    '#type' => 'hidden',
    '#value' => isset($form_state['input']['original_image_fids']) ? $form_state['input']['original_image_fids'] : '',
    '#attributes' => array('id' => 'original_image_fids', 'name' => 'original_image_fids'),
  );
  if (!isset($form['#node']->nid)) {
// hide remove button of first field on add form 
    drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-field-story-reporter-und-0-remove-button").hide();              
              jQuery("#edit-field-video-anchor-und-0-remove-button").hide();
            });', array('type' => 'inline', 'scope' => 'footer'));
  }

  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_videogallery' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/itg_videogallery.js', array('weight' => 1, 'scope' => 'footer'));
  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_videogallery_form_videogallery_node_form_alter(&$form, &$form_state, $form_id) {
  global $base_url, $user;
// code for story expiry date field show and hide
  $form['field_story_expiry_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_expires[und][Yes]"]' => array('checked' => TRUE),
    )
  );

// code for Comment Question field hide and show
  $form['field_story_comment_question']['#states'] = array(
    'visible' => array(
      ':input[name="field_video_configurations[und][comment_box]"]' => array('checked' => TRUE),
    )
  );

  $form['field_story_posted_by_twitter']['#default_value'] = $user->mail;
  $form['field_story_posted_by_instagram']['#default_value'] = $user->mail;
}

/**
 * Implement hook_form_FORM_ID_alter().
 * {@inheritdoc}
 */
function itg_videogallery_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  $form_id_arr = array('views-exposed-form-manage-videogallery-page', 'views-exposed-form-videogallery-management-page', 'views-exposed-form-videogallery-management-page-1', 'views-exposed-form-videogallery-management-page-2', 'views-exposed-form-videogallery-management-page-3', 'views-exposed-form-videogallery-management-page-5', 'views-exposed-form-videogallery-management-page-6', 'views-exposed-form-videogallery-management-page-7', 'views-exposed-form-videogallery-management-page-4', 'views-exposed-form-videogallery-management-page-10');
  if (in_array($form['#id'], $form_id_arr)) {
    $form['title']['#autocomplete_path'] = 'content-title-list/videogallery/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
    $form['nid']['#autocomplete_path'] = 'content-nid-list/videogallery/autocomplete';
    $form['nid']['#attributes'] = array('placeholder' => t('Video Id'));
  }
}

/**
 * Implement hook_views_pre_render().
 * {@inheritdoc}
 */
function itg_videogallery_views_pre_render(&$view) {
  if ($view->name == "manage_videogallery" || $view->name == "videogallery_management") {
    if (!isset($_POST['views_bulk_operations'])) {
      $header_content_video = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
      $header_content_video .= l(t('Upload Video'), 'node/add/videogallery', array('query' => array('destination' => arg(0))));
      $view->attachment_before = $header_content_video;
    }
  }
  if ($view->name == "video_list_of_category" && $view->current_display == 'block_4') {
    if (isset($view->args[0])) {
      $cat_name = itg_videogallery_get_tname($view->args[0]);
      $header_content_video = '<div class="other_video_category"><h3><span>Other Videos from ' . $cat_name . '</span></h3></div>';
      $view->attachment_before = $header_content_video;
    }else{
      $header_content_video = '<div class="other_video_category"><h3><span>Other Videos from category</span></h3></div>';
      $view->attachment_before = $header_content_video;
    }
  }
}

/**
 * Implements submit function for bolt video title in msg.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_submit_status_message(&$form, $form_state) {
  if ($form_state['input']['op'] == 'Apply') {
    if ($form_state['node']->status == '1') {
      /* Assign video to widget */
      if (is_array($form['#node']->field_video_assign_to_widget[LANGUAGE_NONE])) {
        $previous_video_assign = $form['#node']->field_video_assign_to_widget[LANGUAGE_NONE];
      }
      else {
        $previous_video_assign = '';
      }

      // for story assign to widget
      if (function_exists('itg_video_assign_to_widget')) {
        $video_widget = $form_state['input']['field_video_assign_to_widget'][LANGUAGE_NONE];
        $primary_category = $form_state['input']['itg_primary_category'];
        if (is_array($video_widget) && count($video_widget) > 0) {
          itg_video_assign_to_widget($form_state['values']['nid'], $video_widget, $primary_category, $previous_video_assign);
        }
      }
      /* Assign video to widget */
      $redirect_path = 'node/' . $form_state['values']['nid'] . '/edit?destination=' . $_GET['destination'];
      $_GET['destination'] = $redirect_path;
      drupal_goto('node/' . $form_state['values']['nid'] . '/edit');
    }
  }
  $workbench_current_state = $form_state['node']->workbench_moderation_state_new;
  $node_type = ucfirst($form_state['node']->type);
  $node_type = str_replace("_", " ", $node_type);
  $title = ucfirst($form_state['node']->title);

  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  $request_destination = $_REQUEST['destination'];
  $redirect_path = $_REQUEST['destination'];

  if ($request_destination == 'published-video') {
    $redirect_path .= "?field_story_syndication_value_op=all";
    itg_custom_message($node_type, $workbench_current_state, arg(1), $title, $redirect_path);
  }

  if ($form_state['input']['op'] != 'Save as Draft') {
    itg_custom_message($node_type, $workbench_current_state, arg(1), $title, $redirect_path);
  }
}

/**
 * Impelements form for configuration.
 * {@inheritdoc}
 */
function itg_videogallery_configuration_form($form) {
  $form['dailymotion_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion Username'),
    '#default_value' => variable_get('dailymotion_username'),
    '#required' => TRUE,
  );
  $form['dailymotion_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion Password'),
    '#default_value' => variable_get('dailymotion_password', ''),
    '#required' => TRUE,
  );
  $form['dailymotion_playlist_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion Playlist Id'),
    '#default_value' => variable_get('dailymotion_playlist_id', ''),
    '#required' => TRUE,
  );
  $form['dailymotion_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('Api Key'),
    '#default_value' => variable_get('dailymotion_apikey', ''),
    '#required' => TRUE,
  );
  $form['dailymotion_secretkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#default_value' => variable_get('dailymotion_secretkey', ''),
    '#required' => TRUE,
  );

  $form['video_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Property'),
    '#default_value' => variable_get('video_property'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * This function use for remove video iframe form story body
 */
function itg_videogallery_save_story_video_data($story_body, $nid) {
  global $base_url;
  preg_match_all('/src="([^"]+)"/', $story_body, $match);
  $video_url = $match[1];
  if (!empty($video_url)) {
    // Here delete videos from table
    db_delete('itg_story_body_videos')
        ->condition('nid', $nid)
        ->execute();
    foreach ($video_url as $video_value) {
      $post_check = strpos($video_value, '/embeded-video/');
      $post_video_node = strpos($video_value, '/embed/');
      $post_video_node_video = strpos($video_value, '/video/');
      if ($post_check !== FALSE) {
        $vid_id = end(explode('/', $video_value));
        $vid_id = explode('?', $vid_id);
        db_insert('itg_story_body_videos')
            ->fields(array(
              'is_node' => 0,
              'video_id' => $vid_id[0],
              'url' => $video_value,
              'nid' => $nid,
            ))->execute();
      }
      if ($post_video_node !== FALSE && $post_video_node_video !== FALSE) {
        $vid_id = end(explode('/', $video_value));
        $node_id = base64_decode($vid_id);
        db_insert('itg_story_body_videos')
            ->fields(array(
              'is_node' => 1,
              'video_id' => $vid_id,
              'url' => $video_value,
              'nid' => $nid,
            ))->execute();
      }
    }
  }
}

/**
 * This function use for remove video iframe form story body
 */
function itg_videogallery_remove_delete_video_form_body_html_body($story_body) {
  global $base_url;
  preg_match_all('/src="([^"]+)"/', $story_body, $match);
  $video_url = $match[1];
  if (!empty($video_url)) {
    foreach ($video_url as $video_value) {
      $post_check = strpos($video_value, $base_url . '/embeded-video/');
      $post_video_node = strpos($video_value, '/embed/');
      $post_video_node_video = strpos($video_value, '/video/');
      if ($post_check !== FALSE) {
        $vid_id = end(explode('/', $video_value));
        $vid_id = explode('?', $vid_id);
        $check_video = itg_videogallery_check_video_url($vid_id[0]);
        if ($check_video) {
          drupal_add_js('jQuery(document).ready(function() {                  
            jQuery("#video_frame_' . $vid_id[0] . '").remove();
          });', array('type' => 'inline', 'scope' => 'footer'));
        }
      }
      if ($post_video_node !== FALSE && $post_video_node_video !== FALSE) {
        $vid_id = end(explode('/', $video_value));
        $node_id = base64_decode($vid_id);
        $node_data = itg_videogallery_get_node_status($node_id);
        if ($node_data == 0) {
          drupal_add_js('jQuery(document).ready(function() {                  
            jQuery(".video_node_' . $vid_id . '").remove();
          });', array('type' => 'inline', 'scope' => 'footer'));
        }
      }
    }
  }
}

/**
 * This function check this video is delete or note 
 */
function itg_videogallery_check_video_url($vid) {
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('is_delete'));
  $query->condition('solr_video_id', $vid, '=');
  $video_data = $query->execute()->fetchAll();
  if (empty($video_data)) {
    return TRUE;
  }
  elseif (!empty($video_data)) {
    foreach ($video_data as $dvideo) {
      if ($dvideo->is_delete == 1) {
        return TRUE;
        break;
      }
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Implement itg_clone_story_data
 * @param int $keyword
 * @param string $type
 */
function itg_videogallery_getsolr_data_publish($all_property = NULL) {
  if (function_exists('apachesolr_server_status')) {
    $ping = apachesolr_server_status(variable_get('solr_server_url'));
  }
  if ($ping) {
    $solr = apachesolr_get_solr();
    if (function_exists('itg_apache_solr_get_site_hash')) {
      $hash = itg_apache_solr_get_site_hash();
    }
    $hashvalue = implode(' OR ', array_keys($hash));
    $str = 'hash:(' . $hashvalue . ')';
    $str_pub = 'sm_field_video_used:(0)';
    $str = $str . ' AND ' . $str_pub;
    $query = apachesolr_drupal_query("custom");
    $query->addParam('rows', '100000'); // How many rows of result to display default it is 10.
    $query->addParam('qf', 'label'); // Only search in title
//The bundle which you want to search
    $query->replaceParam("fq", '(' . $str . ')');
    $query->addFilter("bundle", "itg_solr_video");
    $query->setSolrsort('sort_label', 'asc');
    $resp_search = $query->search();

    $all_data = $resp_search->response->docs;
    if (!empty($all_data)) {
      foreach ($all_data as $datasolr) {
        if ($all_property == 'ALL') {
          $all_video_ids[] = $datasolr->sm_field_video_id[0];
        }
        else {
          if ($datasolr->sm_field_property[0] != VIDEO_PROPERTY) {
            $all_video_ids[] = $datasolr->sm_field_video_id[0];
          }
        }
      }
    }
    return $all_video_ids;
  }
}

/*
 * This function use for itg_delete_solr_video node delete
 */

function itg_videogallery_delele_node_reuse_video($vide_id) {
  $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('title', $vide_id, ' = ')
      ->execute()
      ->fetchAssoc();
  if (!empty($result['nid'])) {
    node_delete($result['nid']);
  }
}

/**
 * function use delete delete solr index.
 * @param type $nid
 * @return boolean
 */
function itg_node_exclude($nid) {
  if (!empty($nid)) {
    $node = node_load($nid);
    $env_id = apachesolr_default_environment();
// Get field value (respecting the fild language).
    $node_wrapper = entity_metadata_wrapper('node', $node);
// Delete node from Index, in case it was indexed before.
    apachesolr_remove_entity($env_id, 'node', $nid);
// Return TRUE to exclude node from indexing.
    return TRUE;
    
  }
}


/**
 * this function use for reset dailymotion dashboard filter
 * @param type $form
 * @param type $form_state
 */
function itg_videogallery_daily_motion_video_reset($form, $form_state) {
  $form_state['rebuild'] = FALSE;
  drupal_goto('daily-motion-video-dashboard');
}

/**
 * Implements hook_permission.
 */
function itg_videogallery_permission() {
  return array(
    'authorized user dailymotion credin' => array(
      'title' => t('Dailymotion credintial permission'),
      'description' => t('Dailymotion credintial configuration permission'),
    ),
    'authorized user ftp credin' => array(
      'title' => t('Dailymotion FTP config permission'),
      'description' => t('Dailymotion FTP configuration permission'),
    ),
    'daily motion video dashboard perm' => array(
      'title' => t('Daily motion video dashboard permission'),
      'description' => t('Daily motion video dashboard permission'),
    ),
  );
}


/**
 * Implement function get dailymotion video id by fid
 * @param int $fid
 * @return type string
 */
function itg_videogallery_get_video_all($fid) {
  $query = db_select('dailymotion_response_details', 'dm')
      ->fields('dm', array('is_draft'))
      ->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implement function get dailymotion video id by fid
 * @param int $fid
 * @return type string
 */
function itg_videogallery_get_video($fid) {
  $query = db_select('dailymotion_response_details', 'dm')
      ->fields('dm', array('video_id'))
      ->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements hook_node_access().
 * {@inheritdoc}
 */
function itg_videogallery_node_access($node, $op, $account) {
  if (!empty($account) && !empty($node)) {
    if ($account->uid == 0 && !empty($node->type) && $node->type == 'videogallery') {//shravan
      $current_time = time();
      $video_schedule_date = "";
      $video_expire_date = "";
      if (!empty($node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'])) {
        $video_schedule_date = strtotime($node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value']);
      }
      if (!empty($node->field_story_expiry_date[LANGUAGE_NONE][0]['value'])) {
        $video_expire_date = strtotime($node->field_story_expiry_date[LANGUAGE_NONE][0]['value']);
      }
      if (($current_time > $video_schedule_date) && ($current_time < $video_expire_date) && ($node->type == 'videogallery' && $op == 'view')) {
        return NODE_ACCESS_ALLOW;
      }
      elseif (($current_time > $video_expire_date) && ($node->type == 'videogallery') && ($op == 'view')) {
        return NODE_ACCESS_DENY;
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_videogallery_node_validate($node, $form, &$form_state) {

// Code for redirection url validation
  if ($node->type == 'videogallery') {
// Code for category validation.
    if (empty($node->field_story_category[LANGUAGE_NONE][0]['tid'])) {
      form_set_error('edit-field-story-category-und-hierarchical-select-selects-0', t("Section field is required."));
    }
  }
}

/**
 * Implements function return playlist id
 * @param string $tname
 * @return array
 */
function itg_videogallery_get_playlist_id($tname) {
  $query = db_select('dailymotion_playlist_details', 'dpt');
  $query->fields('dpt', array('pid', 'playlist_name'));
  $query->condition('dpt.playlist_name', $tname, '=');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * Implements function for get old playlist for remove video
 * @param int $nid
 * @return array
 */
function itg_videogallery_get_old_playlist($nid) {
  $query = db_select('field_data_field_dailymotion_playlist', 'fdp');
  $query->fields('fdp', array('field_dailymotion_playlist_tid', 'entity_id'));
  $query->join('taxonomy_term_data', 'ttd', 'fdp.field_dailymotion_playlist_tid = ttd.tid');
  $query->fields('ttd', array('name', 'tid'));
  $query->condition('fdp.bundle', 'videogallery', '=');
  $query->condition('fdp.entity_id', $nid, '=');
  $result = $query->execute();
  foreach ($result as $value) {
    $output[$value->field_dailymotion_playlist_tid] = $value->name;
  }
  return $output;
}

/**
 * This function use for unpublish cideo content delete video
 */
function itg_videogallery_unpublish_content_delete_video($fid) {
  $query = db_update('itg_solr_video_info')
      ->fields(array('is_delete' => 1));
  $query->condition('fid', $fid);
  $query->condition('content_type', 'video_gallery', '=');
  $query->execute();

  $deleted = db_delete('file_managed')
      ->condition('fid', $fid)
      ->execute();
  global $user;
  $query = db_select('itg_solr_video_info', 'drd')
      ->fields('drd', array('solr_video_id', 'property'));
  $query->condition('fid', $fid);
  $result = $query->execute()->fetchAll();
  if ($result[0]->property == VIDEO_PROPERTY) {
    $num_updated = db_update('dailymotion_response_details') // Table name no longer needs {}
        ->fields(array(
          'dailymotion_published' => 0,
          'is_replace' => 0,
          'is_draft' => 0,
        ))
        ->condition('video_id', $result[0]->solr_video_id, '=')
        ->execute();
    itg_videogallery_update_video_info_solr($result[0]->solr_video_id);
  }
}

/**
 * Implements hook_node_presave()
 * {@inheritdoc}
 */
function itg_videogallery_node_presave($node) {

//set custom path alias  
  if (itg_workflow_stop_node_update_batch_for_widgets()) {
    return;
  }
  if ($node->type == 'videogallery' && !empty($node->field_dailymotion_playlist[LANGUAGE_NONE])) {
    foreach ($node->field_dailymotion_playlist[LANGUAGE_NONE] as $playlist_val) {
      $playlist[$playlist_val['tid']] = $playlist_val['name'];
    }

    $node->field_story_source_id = $playlist;
    $_SESSION['old_playlist'] = itg_videogallery_get_old_playlist($node->nid);
  }

// condition for source type field
  if ($node->type == 'videogallery' && empty($node->field_story_source_type[LANGUAGE_NONE][0]['value'])) {
    $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'videogallery';
  }
}

/**
 * Implements function for get term name by tid
 * @param int $tid
 * @return string
 */
function itg_videogallery_get_tname($tid) {
  $query = db_select('taxonomy_term_data', 'ttd');
  $query->fields('ttd', array('name'));
  $query->condition('tid', $tid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_videogallery_cronapi($op, $job = NULL) {

  $items['video_thumb_assign'] = array(
    'description' => 'Thumbnail image assign to node from dailymotion.',
    'callback' => 'itg_videogallery_thumb_assign',
    'file' => 'includes/itg_video_dailymotion.inc',
  );
  $items['ftp_file_save'] = array(
    'description' => 'Ftp file save in file managed table.',
    'callback' => 'itg_videogallery_ftp_file_insert',
    'file' => 'includes/itg_videogallery_cron.inc',
  );
  $items['thumb_url_dailymotion'] = array(
    'description' => 'Video Thumbnail Url save in custom dailymotion response table',
    'callback' => 'itg_videogallery_thumb_url',
    'file' => 'includes/itg_video_dailymotion.inc',
  );

// This is the callback for uploading FTP video to Daily motion server in unpublished mode

  $items['itg_videogallery_ftp_file_insert_cron'] = array(
    'description' => 'This is the callback for uploading FTP video to Daily motion server in unpublished mode',
    'callback' => 'itg_videogallery_ftp_file_insert_cron',
    'file' => 'includes/itg_videogallery_cron.inc',
  );
  $items['itg-videogallery-s3-file-to-dm'] = array(
    'description' => 'This is the callback for uploading S3 video to Daily motion server in unpublished mode',
    'callback' => 'itg_videogallery_s3_file_to_dm',
    'file' => 'includes/itg_videogallery_solr.inc',
  );
  $items['itg-videogallery-dm-to-s3'] = array(
    'description' => 'This is the callback for store dm file to s3',
    'callback' => 'itg_videogallery_dm_to_s3',
    'file' => 'includes/itg_videogallery_solr.inc',
  );
  $items['itg-videogallery-move-ftp-videos'] = array(
    'description' => 'This is the callback for move DM used video',
    'callback' => 'itg_videogallery_move_ftp_videos',
    'file' => 'includes/itg_videogallery.inc',
  );

  $items['save-video-bitrates'] = array(
    'description' => 'This is use for store video birates urls',
    'callback' => 'itg_videogallery_video_bitrate',
    'file' => 'includes/itg_video_dailymotion.inc',
  );


  $items['video-update-embed-video-id'] = array(
    'description' => 'This crone use for Update video id embeded.',
    'callback' => 'itg_videogallery_video_update_embeded_url',
    'file' => 'includes/itg_videogallery_cron.inc',
  );


  return $items;
}


/**
 * Implement function for remove files
 */
function itg_videogallery_remove_video() {
  $files = glob('sites/default/files/' . LOCAL_VIDEO_DIR . '/' . date('Ym') . '/*');
  foreach ($files as $file) {
    if (is_file($file))
      unlink($file);
  }
}


/**
 * This function use to get filed collection of video data
 */
function get_video_filed_collection_by_its_id($entity_fid) {
  $query = db_select('field_data_field_videogallery_video_upload', 'fvd');
  $query->fields('fvd', array('field_videogallery_video_upload_fid', 'field_videogallery_video_upload_description'));
  $query->leftJoin('field_data_field_include_ads', 'ads_inc', 'ads_inc.entity_id = fvd.entity_id');
  $query->leftJoin('`field_data_field_video_private', 'private_vid', 'private_vid.entity_id = fvd.entity_id');
  $query->leftJoin('field_data_field_videogallery_description', 'desc_inc', 'desc_inc.entity_id = fvd.entity_id');
  $query->fields('ads_inc', array('field_include_ads_value'));
  $query->fields('private_vid', array('field_video_private_value'));
  $query->fields('desc_inc', array('field_videogallery_description_value'));
  $query->condition('fvd.entity_id', $entity_fid);
  $result_video = $query->execute()->fetchAll();

  return $result_video;
}


/**
 * This function use for get bitrates info,
 * 
 */
function itg_videogallery_url_with_bitates() {
  $bitrates = array();
  $bitrates['framesize']['stream_h264_l1_url'] = '176x144';
  $bitrates['framesize']['stream_h264_l2_url'] = '176x144';
  $bitrates['framesize']['stream_h264_ld_url'] = '320x240';
  $bitrates['framesize']['stream_h264_url'] = '512x384';
  $bitrates['framesize']['stream_h264_hq_url'] = '848x480';
  $bitrates['framesize']['stream_h264_hd_url'] = '1280x720';
  $bitrates['framesize']['stream_h264_hd1080_url'] = '1920x1080';
  $bitrates['framesize']['stream_h264_qhd_url'] = '2560x1440';
  $bitrates['framesize']['stream_h264_uhd_url'] = '3840x2160';

  $bitrates['bitrate']['stream_h264_l1_url'] = '60';
  $bitrates['bitrate']['stream_h264_l2_url'] = '106';
  $bitrates['bitrate']['stream_h264_ld_url'] = '256';
  $bitrates['bitrate']['stream_h264_url'] = '460';
  $bitrates['bitrate']['stream_h264_hq_url'] = '845';
  $bitrates['bitrate']['stream_h264_hd_url'] = '2100';
  $bitrates['bitrate']['stream_h264_hd1080_url'] = '6200';
  $bitrates['bitrate']['stream_h264_qhd_url'] = '10400';
  $bitrates['bitrate']['stream_h264_uhd_url'] = '16500';
  return $bitrates;
}

/**
 * This is temp function use for test dailymotion video resploce no we will 
 */
function itg_videogallery_video_update_embeded_url_by_fid($fid) {
  $api = itg_videogallery_dailymotion_api();
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('solr_video_id', 'video_embedded_url'));
  $query->condition('fid', $fid);
  $result = $query->execute()->fetchall();
  foreach ($result as $vid) {
    if ($vid->video_embedded_url != "") {
      itg_videogallery_update_embedcode_url($vid->solr_video_id);
    }
  }
}

/**
 * This function use for get field colloction data by nid
 * 
 */
function get_video_in_fieldcollection_by_nid($nid) {
  $query = db_select('field_data_field_video_upload', 'up_video');
  $query->join('field_data_field_videogallery_video_upload', 'fvu', 'up_video.field_video_upload_value = fvu.entity_id');
  $query->leftJoin('dailymotion_response_details', 'drd', 'drd.fid = fvu.field_videogallery_video_upload_fid');
  $query->Join('itg_solr_video_info', 'isvi', 'isvi.fid = fvu.field_videogallery_video_upload_fid');
  $query->leftJoin('field_data_field_include_ads', 'ads_inc', 'ads_inc.entity_id = fvu.entity_id');
  $query->leftJoin('field_data_field_include_ads', 'ads_inc', 'ads_inc.entity_id = fvu.entity_id');
  $query->leftJoin('field_data_field_video_thumbnail', 'thumb_img', 'thumb_img.entity_id = fvu.entity_id');
  $query->leftJoin('field_data_field_video_title', 'desc_inc', 'desc_inc.entity_id = fvu.entity_id');
  $query->fields('drd', array('video_id', 'dailymotion_thumb_url', 'is_draft'));
  $query->fields('isvi', array('fid', 'solr_video_id', 'solr_video_thumb', 'video_embedded_url', 'property','video_repo_type','video_xml_data'));
  $query->fields('up_video', array('entity_id'));
  $query->fields('ads_inc', array('field_include_ads_value'));
  $query->fields('thumb_img', array('field_video_thumbnail_fid' , 'field_video_thumbnail_alt', 'field_video_thumbnail_title'));
  $query->fields('desc_inc', array('field_video_title_value'));
  $query->condition('up_video.entity_id', $nid);
  $query->groupBy('isvi.solr_video_id');
  $query->orderBy('up_video.delta', 'ASC');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * This function use for get field colloction data by nid
 * 
 */
function get_video_in_fieldcollection_by_nid_mirtaed($nid) {
  $query = db_select('field_data_field_video_upload', 'up_video');
  $query->join('field_data_field_migrated_video_url', 'fvu', 'up_video.field_video_upload_value = fvu.entity_id');
  $query->leftJoin('field_data_field_include_ads', 'ads_inc', 'ads_inc.entity_id = fvu.entity_id');
  $query->leftJoin('field_data_field_videogallery_description', 'desc_inc', 'desc_inc.entity_id = fvu.entity_id');
  $query->fields('up_video', array('entity_id'));
  $query->fields('fvu', array('field_migrated_video_url_value'));
  $query->fields('ads_inc', array('field_include_ads_value'));
  $query->fields('desc_inc', array('field_videogallery_description_value'));
  $query->condition('up_video.entity_id', $nid);
  $query->orderBy('field_video_upload_value', 'ASC');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * This function use for get field colloction data by nid
 * 
 */
function get_video_kicker_by_nid($nid) {
  $query = db_select('field_data_field_video_kicker', 'itg_video_kicker');
  $query->fields('itg_video_kicker', array('field_video_kicker_value'));
  $query->condition('itg_video_kicker.entity_id', $nid);
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * Implements function for get videoid by file id
 * @param int $fid
 */
function itg_videogallery_get_videoid($fid) {
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd', array('video_id'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for get videoid by file id
 * @param int $fid
 */
function itg_videogallery_get_video_info_video_id($video_id) {
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd', array('fid'));
  $query->condition('video_id', $video_id, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for get videoid by file id
 * @param int $fid
 */
function itg_videogallery_get_videoid_new_private($fid) {
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('video_embedded_url'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for get videoid by file id
 * @param int $fid
 */
function itg_videogallery_get_videoid_new($fid) {
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('solr_video_id'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for get all files from directory
 * @param string $dir
 * @param array $results
 *
 * @return array
 */
function itg_videogallery_dir_content($dir, &$results = array()) {
  $files = scandir($dir);
  foreach ($files as $key => $value) {
    $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
    if (!is_dir($path)) {
      $results[] = $path;
    }
    elseif ($value != "." && $value != "..") {
      get_dir_content($path, $results);
      $results[] = $path;
    }
  }

  return $results;
}

/**
 * Implements function for get check ftp video
 * @param int $fid
 * @return array
 */
function itg_videogallery_check_ftp_video($fid) {
  $query = db_select('itg_dailymotion_ftp_video', 'ftp');
  $query->fields('ftp', array('fid'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implement function for tid from layout_tpl_manager
 */
function itg_videogallery_ftp_video_post($sid, $template, $widget_name) {
  $query = db_select('itg_layout_tpl', 'ilt');
  $query->join('itg_layout_manager', 'ilm', 'ilt.id = ilm.layout_id');
  $query->join('taxonomy_term_data', 'ttd', 'ttd.tid = ilm.filter_url');
  $query->fields('ilm', array('filter_url'));
  $query->fields('ttd', array('name'));
  $query->condition('ilm.widget_name', $widget_name, '=');
  $query->condition('ilt.template_name', $template, '=');
  $query->condition('ilt.section_name', $sid, '=');
  $query->condition('ilt.status', 1, '=');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 *Implement hook_node_view().
 * {@inheritdoc}
 */
function itg_videogallery_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'videogallery' && !empty(variable_get('photo_block_refresh'))) {
    $settings = array();
    $settings['video_nid'] = $node->nid;
    drupal_add_js(array('itg_videogallery' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/itg_videogallery_watchlater_refresh.js', array('scope' => 'footer'));
  }
  if(($node->type == 'videogallery') && ($node->field_video_repo_type[LANGUAGE_NONE][0]['value'] == 'INTERNAL' || $node->field_story_source_type[LANGUAGE_NONE][0]['value'] == 'migrated')) {
    drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/jwplayer.min.js', array('scope' => 'header'));
    drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/jwplayer.gaevent.js', array('scope' => 'header'));
  }
}

/**
 * Implements hook_views_query_alter()
 * {@inheritdoc}
 */
function itg_videogallery_views_query_alter(&$view, &$query) {
  if ($view->name == 'video_landing_header' && $view->current_display == 'block_1') {
    if (isset($_GET['category']) && is_numeric($_GET['category'])) {
      $parent = taxonomy_get_parents($_GET['category']);
      $key = key($parent);

      if (!empty($parent[$key]->name) && $parent[$key]->name == 'program' && empty($_GET['sid']) && empty($_GET['category'])) {
        $query->where[0]['conditions'][0]['value'][':field_data_field_story_category_field_story_category_tid'] = NULL;
      }
    }
  }
// Handle filter for videogallery views
  if ($view->name == 'videogallery_management' && $view->current_display == 'page_1') {
    if (isset($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == 'migrated') {
      $query->add_where(1, 'field_data_field_story_source_type.field_story_source_type_value', 'migrated', '=');
    }
    if (isset($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == 'videogallery') {
      $query->add_where(1, 'field_data_field_story_source_type.field_story_source_type_value', 'migrated', '!=');
    }
  }

// Handle filter for photogallery views
  if ($view->name == 'photo_gallery_management' && $view->current_display == 'page_1') {
    if (isset($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == 'migrated') {
      $query->add_where(1, 'field_data_field_story_source_type.field_story_source_type_value', 'migrated', '=');
    }
    if (isset($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == 'photogallery') {
      $query->add_where(1, 'field_data_field_story_source_type.field_story_source_type_value', 'migrated', '!=');
    }
  }

// video loading issue resolve
  if ($view->name == "video_list_of_category" && $view->current_display == 'block') {
    if (!empty($query->where[1]['conditions'][2]['value']) && isset($query->where[1]['conditions'][2])) {
      unset($query->where[0]);
    }
  }
  if ($view->name == "video_list_of_category" && $view->current_display == 'block_1') {
      if (!empty($query->where[1]['conditions'][2]['value']) && isset($query->where[1]['conditions'][2])) {
        unset($query->where[0]);
      }
  }
}

/**
 * Implements function for check tid parent program
 * @param type int
 * @return boolean
 */
function itg_videogallery_get_categoryparent($tid) {
  $parent = taxonomy_get_parents($tid);
  $parent_tid = key($parent);
  $program_tid = variable_get('program_category_id_for_programmes');

  if ($program_tid == $parent_tid) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements function for check tid parent program
 * @param type int
 * @return boolean
 */
function itg_videogallery_get_term($nid) {
  $return = array();
  $query = db_select('field_data_field_story_category', 'iwo');
  $query->condition('iwo.entity_id', $nid)
      ->fields('iwo', array('field_story_category_tid'));
  $result = $query->execute();
  foreach ($result as $key => $value) {
    $return[] = $value->field_story_category_tid;
  }
  return $return;
}

/**
 * Implements function for get tid by nid
 * @param int $nid
 * @return int
 */
function itg_videogallery_get_tid_nid($nid) {
  $node = node_load($nid);
  return $node->field_story_category[LANGUAGE_NONE][0]['tid'];
}

/**
 * Implement function for get term name
 * @param int $tid
 */
function itg_videogallery_get_term_name($tid) {
  $query = db_select('taxonomy_term_data', 'ttd');
  $query->fields('ttd', array('name'));
  $query->condition('ttd.tid', $tid, '=');
  $result = $query->execute()->fetchField();
  return strtoupper($result);
}

/**
 * Implements hook_field_attach_form().
 * {@inheritdoc}
 */
function itg_videogallery_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $options = array('language' => field_valid_language($langcode));
// Merge default options.
  $default_options = array(
    'default' => FALSE,
    'deleted' => FALSE,
    'language' => NULL,
  );
  $options += $default_options;
  list($a, $b, $bundle) = entity_extract_ids($entity_type, $entity);

  $instances = _field_invoke_get_instances($entity_type, $bundle, $options);
  // Iterate through the instances.
  $return = array();
  foreach ($instances as $instance) {
    $field = field_info_field_by_id($instance['field_id']);
    $field_name = $field['field_name'];
    //If we are looking at our field type and specific widget type, and we are multiple entries
    if (($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) && ($field['type'] == "field_collection")) {
      if ($field['bundles']['node'][0] == "videogallery") {
    // Check just in case the button is here, and add another #submit function
        if (isset($form[$field['field_name']]['und']['add_more'])) {
    // add a simple select list, this defaults to numb 3
          $form[$field['field_name']]['add_more_number'] = array(
            '#type' => 'select',
            '#options' => drupal_map_assoc(range(0, 20)),
            '#default_value' => 1,
            '#attributes' => array('style' => 'display:none;'),
          );

          $form[$field['field_name']]['file_entity_holder_nums'] = array(
            '#type' => 'textfield',
            '#default_value' => '',
            '#attributes' => array('style' => 'display:none;'),
          );

          $form[$field['field_name']]['und']['add_more']['#submit'][] = 'itg_videogallery_field_add_more_submit';
        }
      }
    }
  }
}

/**
 * Implements hook_form_submit().
 * @global object $user
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_field_add_more_submit($form, &$form_state) {
  global $user;

  $button = $form_state['triggering_element'];
// Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];

// Alter the number of widgets to show. items_count = 0 means 1.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
//get the number from the select
  $numbtoadd = $form[$field_name]['add_more_number']['#value'];
  $file_entity_holder_nums = $form[$field_name]['file_entity_holder_nums']['#value'];

  if ($numbtoadd) {
    $field_state['items_count'] += $numbtoadd - 1;
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
    $form_state['rebuild'] = TRUE;
  }
  $node = drupal_rebuild_form('videogallery_node_form', $form_state, $old_form = NULL);
  $fids = array();
  $mydir = 'public://' . LOCAL_VIDEO_DIR . '/' . date('Ym');
  file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
  foreach ($node['upload']['#value'] as $audio) {
    $scheme = variable_get('file_default_scheme', 'public') . '://' . LOCAL_VIDEO_DIR . '/' . date('Ym') . '/';
    $source = $audio['tmppath'];
    $uri = itg_audio_check_exist_file($audio['name']);
    $newuri = explode('//' . LOCAL_VIDEO_DIR . '/' . date('Ym') . '/', $uri);
    $directory = '';
    $destination = file_stream_wrapper_uri_normalize($scheme . $directory . $newuri[1]);
    $destination = file_unmanaged_move($source, $destination);
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $file = new StdClass;
    $file->uid = $user->uid;
    $file->filename = $audio['name'];
    $file->uri = $uri;
    $file->filemime = file_get_mimetype($uri);
    $file->filesize = @filesize($uri);
    $file->timestamp = REQUEST_TIME;
    $file->is_new = TRUE;
    $file->status = 0;
    $fids[] = file_save($file);
  }
  $key_val = 0;
  foreach ($fids as $file_id) {
    $file_ids[$key_val]['fid'] = $file_id->fid;
    $file_ids[$key_val]['filename'] = $file_id->filename;
    $key_val++;
  }
  $i = 0;
  $videogallery_popup_data_fids_array = array();
  if (isset($file_entity_holder_nums) && !empty($file_entity_holder_nums)) {
    $videogallery_popup_data_fids_array = explode(',', $file_entity_holder_nums);
  }

  if (isset($videogallery_popup_data_fids_array) && count($videogallery_popup_data_fids_array) > 0) {

    foreach ($form_state['field']['field_video_upload']['und']['entity'] as $key => $filed_collection) {
      if (!isset($filed_collection->field_videogallery_video_upload['und'])) {
        $form_state['field']['field_video_upload']['und']['entity'][$key]->field_videogallery_video_upload['und'][0]['fid'] = $videogallery_popup_data_fids_array[$i];
        $form_state['field']['field_video_upload']['und']['entity'][$key]->field_video_title['und'][0]['value'] = $_POST['title'];

        $i++;
      }
    }
  }
}

/**
 * Creating a form for uploading single video using FTP popup.
 * @param array $form
 * @param array $form_state
 */
function videogallery_new_fileupload_form($form, &$form_state) {

  $form['videogallery_new_file'] = array(
    '#type' => 'managed_file',
    '#title' => 'Browse file',
    '#description' => t('Allowed extensions: MP4'),
    '#process' => array('file_managed_file_process', 'itg_video_file_managed_file_process'),
    '#upload_location' => 'public://indiatoday/videos/local_upload_video/' . date('Ym') . '/',
    '#upload_validators' => array('file_validate_name' => array(),
      'file_validate_extensions' => array('mp4'),
      'file_validate_size' => array(MAX_FILE_SIZE * 1024 * 1024),
    ),
  );


  return $form;
}

/**
 * This function use for rename the local browse video
 * @param file obj $file
 */
function file_validate_name(stdClass $file) {
  $errors = array();
//generate file name 
  $new_filename = $file->filename;
  $new_filename = preg_replace('/\s+/', '_', $new_filename);
  $file->filename = $new_filename;

//changing file location 
  $destination_dir = "public://" . LOCAL_VIDEO_DIR . '/' . date('Ym') . "/";

//check if file exists. if exists rename it append incremental number  until the filename is unique

  $file->destination = file_destination($destination_dir . $file->filename, FILE_EXISTS_RENAME);

// If file_destination() returns FALSE then $replace == FILE_EXISTS_ERROR and
// there's an existing file so we need to bail.
  if ($file->destination === FALSE) {
    $errors[] = t('The file %source could not be uploaded because a file by that name already exists in the destination %directory.', array('%source' => $file->source, '%directory' => $destination_dir));
  }

  return $errors;
}

/**
 * This function use for allow file extension .
 */
function itg_video_file_managed_file_process($element) {
  $element['upload']['#attributes']['accept'] = '.mp4';
  return $element;
}

/**
 * function for get publish date from content
 * @param int $nid
 */ 
function get_content_publish_date ($nid) {
  $query = db_select('field_data_field_itg_content_publish_date', 'cbd');
  $query->condition('cbd.entity_id', $nid);
  $query->fields('cbd', array('field_itg_content_publish_date_value'));
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $result;
}
