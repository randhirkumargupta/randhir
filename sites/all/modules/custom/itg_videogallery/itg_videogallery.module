<?php

/**
 * @file
 * ITG Videogallery module.
 *
 * Provides customizations and functions for Video Gallery.
 *
 */
define('FTP_URL_VIDEO', variable_get('dailymotion_ftp_url'));

/**
 * Implements hook_menu().
 * {@inheritdoc}
 */
function itg_videogallery_menu() {
  $items['dailymotion/config'] = array(
    'title' => 'Dailymotion Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_videogallery_configuration_form'),
    'access arguments' => array('authorized user dailymotion credin'),
    'type' => MENU_CALLBACK,
  );

  $items['dailymotion/ftp/config'] = array(
    'title' => 'Ftp Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_videogallery_ftp_video_form'),
    'access arguments' => array('authorized user ftp credin'),
    'file' => 'includes/itg_videogallery.inc',
  );

  $items['dailymotion/s3/config'] = array(
    'title' => 'AWS S3 For Dailymotion Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_videogallery_s3_video_form'),
    'access arguments' => array('authorized user ftp credin'),
    'file' => 'includes/itg_videogallery.inc',
  );

  $items['dailymotion-ftp-videos-post'] = array(
    'page callback' => 'itg_videogallery_ajax_ftp_video',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['dailymotion-video-time-filter'] = array(
    'page callback' => 'itg_videogallery_ajax_time_filter_video',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['dailymotion-video-search-filter'] = array(
    'page callback' => 'itg_videogallery_ajax_time_search_video',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['dailymotion-ftp-template'] = array(
    'page callback' => 'itg_videogallery_ftp_template',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['dailymotion-img'] = array(
    'page callback' => 'itg_videogallery_thumb_url',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['dailymotion-image'] = array(
    'page callback' => 'itg_videogallery_thumb_assign',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['embeded-video/%'] = array(
    'page callback' => 'itg_videogallery_dm_embed',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['solr-video-make-fid'] = array(
    'page callback' => 'itg_videogallery_solr_video_insert_in_for_fid',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['dailymotion-bitrate'] = array(
    'page callback' => 'itg_videogallery_video_bitrate',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );


  $items['check-s3'] = array(
    'page callback' => 'itg_videogallery_s3_file_to_dm',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['move-ftp'] = array(
    'page callback' => 'itg_videogallery_move_ftp_videos',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['video-delete-parent'] = array(
    'page callback' => 'itg_videogallery_remove_video_id_parent_site_delete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );


  $items['daily-motion-video-dashboard'] = array(
    'title' => 'Daily Motion Video Dashboard',
    'description' => 'Daily Motion Video Dashboard',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('daily_motion_video_dashboard'),
    'access arguments' => array('access content'),
      //'access arguments' => array('daily motion video dashboard perm')
  );


  $items['delete_daily_motion_video/%'] = array(
    'title' => 'Daily Motion Video Dashboard Video Delete',
    'description' => 'Daily Motion Video Dashboard Video Delete',
    'page callback' => 'delete_daily_motion_video_callback',
    'access arguments' => array('access content'),
  );

  $items['get-file-details'] = array(
    'page callback' => 'itg_videogallery_get_file_details',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );


  return $items;
}

/**
 * Implements hook_block_info()
 * {@inheritdoc}
 */
function itg_videogallery_block_info() {
  $blocks['videogallery_tab_form_block'] = array(
    'info' => t('Video Gallery Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['videogallery_menu_video_block'] = array(
    'info' => t('Video landing page menu'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_videogallery_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'videogallery_tab_form_block':
      $block['content'] = theme('videogallery_tab_form_block', array('data' => $data));
      break;
    case 'videogallery_menu_video_block':
      $block['content'] = theme('videogallery_menu_video_block', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_videogallery_theme($existing, $type, $theme, $path) {
  $themes = array(
    'videogallery_tab_form_block' => array(
      'template' => 'videogallery-form-tab-template',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'videogallery_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'videogallery-node-form',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'render element' => 'form',
    ),
    'itg_videogallery_browse_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'videogallery-file-form',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'render element' => 'form',
    ),
    'videogallery_menu_video_block' => array(
      'template' => 'videogallery-menu-landing-template',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_dailymotion_ftp_template' => array(
      'template' => 'itg-dailymotion-ftp-template',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_videogallery_dm_embed' => array(
      'template' => 'itg-dailymotion-dm-embeded',
      'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
  );
  return $themes;
}

/**
 * Implemets hook_form_alter().
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_videogallery_form_alter(&$form, &$form_state, $form_id) {
  global $user, $base_url;
  switch ($form_id) {
    case 'videogallery_node_form':
      $arg = arg(2);
      $form['field_story_expert_description']['und'][0]['#format'] = 'icon_format';
// checked comment box by default
      if (!isset($form['#node']->nid)) {
        $form['field_video_configurations'][LANGUAGE_NONE]['#default_value'] = array('comment_box');
      }
      if ($form['#entity']->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
        foreach ($form['field_video_upload']['und'] as $delta => $field) {
          if (is_numeric($delta)) {
            if ($arg == 'edit') {
              $video_fid = $form['field_video_upload']['und'][$delta]['field_videogallery_video_upload']['und'][0]['#default_value']['fid'];
              $file_exist = itg_videogallery_check_file_manage_fid($video_fid);
              if (empty($file_exist) || $video_fid < 1) {
                unset($form['field_video_upload']['und'][$delta]);
              }
            }
          }
        }
      }
      if ($user->uid != 1) {
        unset($form['field_video_configurations']['und']['#options']['comment']);
      }
      unset($form['actions']['preview_changes']);
      $form['field_story_expert_name']['#access'] = FALSE;
      $form['field_story_syndication']['und']['#title'] = NULL;
      if (arg(1) == 'add') {
        drupal_set_title('Upload Video');
      }
      else {
        drupal_set_title('Edit Upload Video');
      }
      $form['#after_build'][] = 'itg_videogallery_after_build';
      $form['#validate'][] = 'itg_videogallery_custom_validate';
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'manage-videogallery', array('attributes' => array('class' => 'button'))),
        '#weight' => 20,
      );
      $form['field_video_duration']['#attributes'] = array('style' => 'display:none;');
      $form['field_video_upload'][LANGUAGE_NONE][0]['#upload_validators']['itg_custom_field_validate'] = array(1, 2);
      $form['field_video_upload']['#prefix'] = '<div class="ftp_browse_field"><label for="edit-field-upload-video-und-0-upload">Video <span title="This field is required." class="form-required">*</span></label><span class="browse-ftp-click">' . l(t('Browse Video'), 'dailymotion-ftp-template', array('query' => array('width' => '80%', 'height' => '80%', 'iframe' => true, 'input_filed' => 'edit-field-upload-video-und-0-upload', 'file_filed_name' => 'field_upload_video[und][0][fid]'), 'attributes' => array('class' => array('colorbox-load', 'browse-ftp-click')))) . '</span><div class="description">Allowed file extension MP4.</div></div>';
      $form['actions']['submit']['#submit'][] = 'itg_videogallery_submit_status_message';
      array_unshift($form['actions']['submit']['#submit'], 'itg_videogallery_custom_submit');
// Add accept file
      $form['field_video_upload'][LANGUAGE_NONE][0]['#process'][] = 'itg_videogallery_managed_file_process_accept_attribute';
      break;
  }
}

/**
 * Processes a filed_video upload element to add the accept attribute.
 *
 * Add the allowed extensions as an 'accept' attribute to the file_managed element.
 */
function itg_videogallery_managed_file_process_accept_attribute($element, &$form_state, $form) {

  if ($form['#form_id'] == 'videogallery_node_form') {
    if (!empty($element['#upload_validators']['file_validate_extensions']) && !isset($element['upload']['#attributes']['accept'])) {
      $extensions = explode(' ', $element['#upload_validators']['file_validate_extensions'][0]);
      $element['upload']['#attributes']['accept'] = '.' . implode(',.', $extensions);
    }
  }
  return $element;
}

/**
 * Implements function for validate image
 * @param array $field
 * @return array
 */
function itg_custom_field_validate($field) {
  $val = itg_video_check_exist_file($field->filename);
  $field->destination = $val;
  $errors = array();
  return $errors;
}

/**
 * This function use for if file exist or not in file_manage
 * * Implements function for validate image
 * @param int $fid
 * @return array
 */
function itg_videogallery_check_file_manage_fid($fid) {
  $query = db_select('file_managed', 'fm');
  $query->fields('fm');
  $query->condition('fid', $fid, '=');
  $results = $query->execute()->fetchAll();
  return $results;
}

/**
 * Implements function check exist filename
 * @param array $form
 * @param array $form_state
 * @return string
 */
function itg_video_check_exist_file($filename) {
  $query = db_select('file_managed', 'fm');
  $query->condition('filename', $filename, '=');
  $query->fields('fm');
  $query->orderBy('fm.fid', 'DESC');
  $query->range(0, 1);
  $results = $query->execute()->fetchAll();

  if (!isset($results[0])) {
    $res = 'public://dailymotion_video_dir/' . $filename;
    return $res;
  }
  else {
    $result = explode('public://dailymotion_video_dir/', $results[0]->uri);
    $path_info = pathinfo($results[0]->filename);
    $extension = $path_info['extension'];
    $file_name = $path_info['filename'];
    $result_num = explode($file_name . '_', $result[1]);
    $num_file_id = explode('.' . $extension, $result_num[1]);
    if (is_numeric($num_file_id[0]) && isset($num_file_id[0])) {
      $value = $num_file_id[0] + 1;
      $value = '_' . $value;
    }
    else {
      $value = '_0';
    }
    $file_info = pathinfo($filename);
    $res = 'public://dailymotion_video_dir/' . $file_info['filename'] . $value . '.' . $extension;
    return $res;
  }
}

/**
 * Implements custom submit for move video on dailymotion.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_custom_submit($form, &$form_state) {
  global $user;
  $filedir = ITG_IMAGE_FOLDER . 'video/' . date('Ym');
  if (!file_exists(file_default_scheme() . '://' . $filedir)) {
    mkdir(file_default_scheme() . '://' . $filedir, 0777, TRUE);
  }
  chmod(file_default_scheme() . '://' . $filedir, 0777, TRUE);
  foreach ($form_state['values']['field_story_itg_tags'][LANGUAGE_NONE] as $tags) {
    $tag[] = $tags['name'];
  }
  $request_destination = $_REQUEST['destination'];

  if ($request_destination == 'published-video') {
    $redirect_path .= "?field_story_syndication_value_op=all";
    $form_state['redirect'] = $redirect_path;
  }
// code insert image in custom table
  $node_id = $form_state['node']->nid;
  if ($form_state['input']['original_image_fids'] != "") {
    $image_ids = explode('#', $form_state['input']['original_image_fids']);

    if (!empty($image_ids)) {
      if (function_exists('itg_photogallery_insert_image_data'))
        itg_photogallery_insert_image_data($image_ids, $node_id);
    }
  }

  $fids = array();
  $thumg_to_crop = "";
  foreach ($form_state['values']['field_video_upload']['und'] as $videofields) {
    if ((int) $videofields['field_videogallery_video_upload']['und'][0]['fid'] != 0) {
      $query = db_select('itg_solr_video_info', 'drd');
      $query->fields('drd', array('solr_video_thumb', 'solr_video_duration'));
      $query->condition('fid', $videofields['field_videogallery_video_upload']['und'][0]['fid'], '=');
      $video_image = $query->execute()->fetchAll();
      if (!empty($video_image[0]->solr_video_thumb)) {
        $thumg_to_crop = $video_image[0]->solr_video_thumb;
        $slor_video_duration = $video_image[0]->solr_video_duration;
        break;
      }
    }
  }
  $tag_value = implode(', ', $tag);
  $tags_value = trim($tag_value, ",");

// assign image in field after resize
  if ($form_state['values']['field_story_extra_large_image'][LANGUAGE_NONE][0]['fid'] == 0 || $form_state['values']['field_story_large_image'][LANGUAGE_NONE][0]['fid'] == 0 || $form_state['values']['field_story_medium_image'][LANGUAGE_NONE][0]['fid'] == 0 || $form_state['values']['field_story_small_image'][LANGUAGE_NONE][0]['fid'] == 0 || $form_state['values']['field_story_extra_small_image'][LANGUAGE_NONE][0]['fid'] == 0) {
    $image_url = $thumg_to_crop;

    if (!empty($image_url)) {

      $imagedata = file_get_contents($image_url);
      $image_url = 'itg' . time() . end(explode('/', $image_url));
      $image_extension = end(explode('.', $image_url));
      $file_data_temp = file_save_data($imagedata, file_default_scheme() . '://' . $image_url);
    }
    if (!empty($file_data_temp)) {
// This code for resize all images 
      if ($form_state['values']['field_story_extra_large_image'][LANGUAGE_NONE][0]['fid'] == 0) {
        $file_image = file_load($file_data_temp->fid);
        $image = image_load($file_image->uri);
        $filepath = file_default_scheme() . '://' . $filedir;
        $scaled = image_scale_and_crop($image, EXTRA_LARGE_IMAGE_WIDTH, EXTRA_LARGE_IMAGE_HEIGHT);
        $image_name = $image_name . time();
        $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
        $uri = $filepath . '/' . $image_name . '.' . $image_extension;
        $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
        $file = new StdClass;
        $file->uid = $user->uid;
        $file->filename = basename($uri);
        $file->uri = $uri;
        $file->filemime = file_get_mimetype($uri);
        $file->filesize = @filesize($uri);
        $file->timestamp = REQUEST_TIME;
        $file->is_new = TRUE;
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
        $form_state['values']['field_story_extra_large_image'][LANGUAGE_NONE][0]['fid'] = $file->fid;
      }

      if ($form_state['values']['field_story_large_image'][LANGUAGE_NONE][0]['fid'] == 0) {
        $file_image = file_load($file_data_temp->fid);
        $image = image_load($file_image->uri);
        $filepath = file_default_scheme() . '://' . $filedir;
        $scaled = image_scale_and_crop($image, LARGE_IMAGE_WIDTH, LARGE_IMAGE_HEIGHT);
        $image_name = $image_name . time();
        $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
        $uri = $filepath . '/' . $image_name . '.' . $image_extension;
        $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
        $file = new StdClass;
        $file->uid = $user->uid;
        $file->filename = basename($uri);
        $file->uri = $uri;
        $file->filemime = file_get_mimetype($uri);
        $file->filesize = @filesize($uri);
        $file->timestamp = REQUEST_TIME;
        $file->is_new = TRUE;
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
        $form_state['values']['field_story_large_image'][LANGUAGE_NONE][0]['fid'] = $file->fid;
      }

      if ($form_state['values']['field_story_large_image'][LANGUAGE_NONE][0]['fid'] == 0) {
        $file_image = file_load($file_data_temp->fid);
        $image = image_load($file_image->uri);
        $filepath = file_default_scheme() . '://' . $filedir;
        $scaled = image_scale_and_crop($image, LARGE_IMAGE_WIDTH, LARGE_IMAGE_HEIGHT);
        $image_name = $image_name . time();
        $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
        $uri = $filepath . '/' . $image_name . '.' . $image_extension;
        $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
        $file = new StdClass;
        $file->uid = $user->uid;
        $file->filename = basename($uri);
        $file->uri = $uri;
        $file->filemime = file_get_mimetype($uri);
        $file->filesize = @filesize($uri);
        $file->timestamp = REQUEST_TIME;
        $file->is_new = TRUE;
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
        $form_state['values']['field_story_large_image'][LANGUAGE_NONE][0]['fid'] = $file->fid;
      }
      if ($form_state['values']['field_story_medium_image'][LANGUAGE_NONE][0]['fid'] == 0) {
        $file_image = file_load($file_data_temp->fid);
        $image = image_load($file_image->uri);
        $filepath = file_default_scheme() . '://' . $filedir;
        $scaled = image_scale_and_crop($image, MEDIUM_IMAGE_WIDTH, MEDIUM_IMAGE_HEIGHT);
        $image_name = $image_name . time();
        $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
        $uri = $filepath . '/' . $image_name . '.' . $image_extension;
        $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
        $file = new StdClass;
        $file->uid = $user->uid;
        $file->filename = basename($uri);
        $file->uri = $uri;
        $file->filemime = file_get_mimetype($uri);
        $file->filesize = @filesize($uri);
        $file->timestamp = REQUEST_TIME;
        $file->is_new = TRUE;
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
        $form_state['values']['field_story_medium_image'][LANGUAGE_NONE][0]['fid'] = $file->fid;
      }
      if ($form_state['values']['field_story_small_image'][LANGUAGE_NONE][0]['fid'] == 0) {
        $file_image = file_load($file_data_temp->fid);
        $image = image_load($file_image->uri);
        $filepath = file_default_scheme() . '://' . $filedir;
        $scaled = image_scale_and_crop($image, SMALL_IMAGE_WIDTH, SMALL_IMAGE_HEIGHT);
        $image_name = $image_name . time();
        $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
        $uri = $filepath . '/' . $image_name . '.' . $image_extension;
        $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
        $file = new StdClass;
        $file->uid = $user->uid;
        $file->filename = basename($uri);
        $file->uri = $uri;
        $file->filemime = file_get_mimetype($uri);
        $file->filesize = @filesize($uri);
        $file->timestamp = REQUEST_TIME;
        $file->is_new = TRUE;
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
        $form_state['values']['field_story_small_image'][LANGUAGE_NONE][0]['fid'] = $file->fid;
      }
      if ($form_state['values']['field_story_extra_small_image'][LANGUAGE_NONE][0]['fid'] == 0) {
        $file_image = file_load($file_data_temp->fid);
        $image = image_load($file_image->uri);
        $filepath = file_default_scheme() . '://' . $filedir;
        $scaled = image_scale_and_crop($image, EXTRA_SMALL_IMAGE_WIDTH, EXTRA_SMALL_IMAGE_HEIGHT);
        $image_name = $image_name . time();
        $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
        $uri = $filepath . '/' . $image_name . '.' . $image_extension;
        $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
        $file = new StdClass;
        $file->uid = $user->uid;
        $file->filename = basename($uri);
        $file->uri = $uri;
        $file->filemime = file_get_mimetype($uri);
        $file->filesize = @filesize($uri);
        $file->timestamp = REQUEST_TIME;
        $file->is_new = TRUE;
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
        $form_state['values']['field_story_extra_small_image'][LANGUAGE_NONE][0]['fid'] = $file->fid;
      }
    }
  }
  if ($_GET['destination'] == 'published-video') {
    unset($_GET['destination']);
    $redirect_path = 'published-video?field_story_syndication_value_op=all';
    $_GET['destination'] = $redirect_path;
  }
// here first video duration assign
  if (empty($form_state['values']['field_video_duration'][LANGUAGE_NONE][0]['value'])) {

    if ($vid_result['video_duration'] != '0') {
      $form_state['values']['field_video_duration'][LANGUAGE_NONE][0]['value'] = $slor_video_duration;
    }
  }
  if ($node_id != "") {
// for update on DM
    $extralarge_image_fid = $form_state['values']['field_story_extra_large_image'][LANGUAGE_NONE][0]['fid'];
    $main_fids = array();
    $draft_msg_flag = 0;
    $video_desc = strip_tags($form_state['values']['field_story_expert_description'][LANGUAGE_NONE][0]['value']);
// start loop of videos field collection
    foreach ($form_state['values']['field_video_upload']['und'] as $keys => $videofields) {

      if ((int) $videofields['field_videogallery_video_upload']['und'][0]['fid'] != 0) {

        $video_image = itg_videogallery_get_video_info_by_fid($videofields['field_videogallery_video_upload']['und'][0]['fid']);
        $main_fids[] = $videofields['field_videogallery_video_upload']['und'][0]['fid'];
        if (!empty($video_image)) {
          if ($video_image[0]->property == VIDEO_PROPERTY) {
            $private_status = $videofields['field_video_private']['und'][0]['value'];

            $video_title = $videofields['field_video_title']['und'][0]['value'];
            $video_thumb_fid = $videofields['field_video_thumbnail']['und'][0]['fid'];
            if ($video_thumb_fid == 0 || empty($video_thumb_fid)) {
              $video_thumb_fid = $extralarge_image_fid;
            }
            itg_videogallery_update_tags_video_private($tag_value, $video_image[0]->solr_video_id, $private_status, $video_desc, $video_title, $video_thumb_fid);
          }
          itg_videogallery_update_embedcode_url($video_image[0]->solr_video_id);
          $file_video = itg_videogallery_get_video_info_by_fid($videofields['field_videogallery_video_upload']['und'][0]['fid']);
// this function use for delete itg_solr_delete_vide nid
          itg_videogallery_delele_node_reuse_video($file_video[0]->solr_video_id);
          if ($form_state['node']->status == 1) {
            $num_updated = db_update('dailymotion_response_details') // Table name no longer needs {}
                ->fields(array(
                  'dailymotion_published' => 1,
                ))
                ->condition('video_id', $file_video[0]->solr_video_id, '=')
                ->execute();
            itg_videogallery_update_video_info_solr($file_video[0]->solr_video_id);
          }

// update nid in video
          $is_node_draft = 0;
          if ($form_state['node']->status == 0) {
            $is_node_draft = 1;
          }
          $num_updated = db_update('itg_solr_video_info') // Table name no longer needs {}
              ->fields(array(
                'nid' => $node_id,
                'is_node_draft' => $is_node_draft,
              ))
              ->condition('fid', $videofields['field_videogallery_video_upload']['und'][0]['fid'], '=')
              ->execute();
        }
      }
    }

//    if ($form_state['node']->status == 0) {
//      
//      drupal_set_message('The video is not published. It will auto published once it published on Daily motion.');
//    }
// check loavl upaod file
    $is_loacl = 0;
    try {
      if ($form_state['values']['field_story_facebook_video'][LANGUAGE_NONE][0]['fid'] != 0) {
        itg_videogallery_update_node_id_for_video_fid($node_id, $form_state['values']['field_story_facebook_video'][LANGUAGE_NONE][0]['fid']);
      }
      if ($form_state['values']['field_story_twitter_video'][LANGUAGE_NONE][0]['fid'] != 0) {
        itg_videogallery_update_node_id_for_video_fid($node_id, $form_state['values']['field_story_twitter_video'][LANGUAGE_NONE][0]['fid']);
      }
      itg_videogallery_node_publish_video_to_unpublish($node_id, $main_fids);
    }
    catch (Exception $e) {
      watchdog_exception('video fid delete', $e);
    }
  }
}

/**
 * This function use for mark node remove video unpublish
 */
function itg_videogallery_node_publish_video_to_unpublish($nid, $main_fids) {
  $unp_videos = array();

// delete deleted video info form itg_solr_video_info
  $query = db_update('itg_solr_video_info')
      ->fields(array('is_delete' => 1));
  $query->condition('fid', $main_fids, 'NOT IN');
  $query->condition('nid', $nid);
  $query->condition('content_type', 'video_gallery', '=');
  $query->execute();
  $query = db_select('itg_solr_video_info', 'drd')
      ->fields('drd', array('solr_video_id', 'property'));
  $query->condition('fid', $main_fids, 'NOT IN');
  $query->condition('nid', $nid);
  $result = $query->execute()->fetchAll();

  foreach ($result as $un_video) {
    if ($unp_videos->property == VIDEO_PROPERTY) {
      $api = itg_videogallery_dailymotion_api();
      $api->post('/video/' . $un_video->solr_video_id . '?private=true');
    }
    $unp_videos[] = $un_video->solr_video_id;
  }
  if (!empty($unp_videos)) {

    try {
      db_update('dailymotion_response_details') // Table name no longer needs {}
          ->fields(array(
            'dailymotion_published' => 0,
          ))
          ->condition('video_id', $unp_videos, 'IN')
          ->execute();
    }
    catch (Exception $e) {
      watchdog_exception('video fid delete', $e);
    }
  }
  foreach ($result as $un_video) {
    if ($unp_videos->property == VIDEO_PROPERTY) {
      itg_videogallery_update_video_info_solr($un_video->solr_video_id);
    }
  }
}

/**
 * impliment hook node insert
 */
function itg_videogallery_node_insert($node) {
  if ($node->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
    switch ($node->type) {
      case 'videogallery':
        $node_id = $node->nid;
        foreach ($node->field_story_itg_tags[LANGUAGE_NONE] as $tags) {
          $tag[] = $tags['name'];
        }
        $tag_value = implode(', ', $tag);
        $tags_value = trim($tag_value, ",");
        $extralarge_image_fid = $node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'];
        $draft_msg_flag = 0;
        $video_desc = strip_tags($node->field_story_expert_description[LANGUAGE_NONE][0]['value']);

        foreach ($node->field_video_upload['und'] as $keys => $videofields) {
          $video_details = entity_load('field_collection_item', array($videofields['value']));

          $priv_status = $video_details[$videofields['value']]->field_video_private[LANGUAGE_NONE][0]['value'];
//$video_desc = $video_details[$videofields['value']]->field_videogallery_description[LANGUAGE_NONE][0]['value'];
          $video_title = $video_details[$videofields['value']]->field_video_title[LANGUAGE_NONE][0]['value'];
          $video_thumb_fid = $video_details[$videofields['value']]->field_video_thumbnail[LANGUAGE_NONE][0]['fid'];
          if ($video_thumb_fid == 0 || empty($video_thumb_fid)) {
            $video_thumb_fid = $extralarge_image_fid;
          }
          foreach ($video_details[$videofields['value']]->field_videogallery_video_upload as $filed_val) {

            $fids = $filed_val[0]['fid'];
          }

          if ((int) $fids != 0) {

            $video_image = itg_videogallery_get_video_info_by_fid($fids);

            if (empty($video_image)) {
              $video_fid = $fids;
              $file_details = file_load($fids);
              $real_path = drupal_realpath($file_details->uri);
              if (file_exists($file_details->uri)) {
                if ($real_path == "") {
                  $real_path = file_create_url($file_details->uri);
                }
                $draft_msg_flag = 1;
// use for upload local video to DM
                itg_videogallery_send_local_video_to_dailymotion($real_path, $file_details, $video_fid, $tags_value, $node_id, 'is_draft', $priv_status);
              }
            }
            else {
              $file_video = itg_videogallery_get_video_info_by_fid($fids);
              if ($file_video[0]->property == VIDEO_PROPERTY) {
                itg_videogallery_update_tags_video_private($tag_value, $file_video[0]->solr_video_id, $priv_status, $video_desc, $video_title, $video_thumb_fid);
              }
              itg_videogallery_update_embedcode_url($file_video[0]->solr_video_id);
              if ($node->status != 0) {
                $num_updated = db_update('dailymotion_response_details') // Table name no longer needs {}
                    ->fields(array(
                      'dailymotion_published' => 1,
                    ))
                    ->condition('video_id', $file_video[0]->solr_video_id, '=')
                    ->execute();
                itg_videogallery_update_video_info_solr($file_video[0]->solr_video_id);
              }
              $getnode = itg_videogallery_get_node_by_title($file_video[0]->solr_video_id);
              if (!empty($getnode)) {
                node_delete($getnode[0]->nid);
              }

// update nid in video
              $is_node_draft = 0;
              if ($node->status == 0 && $draft_msg_flag == 1) {
                $is_node_draft = 1;
              }
              $num_updated = db_update('itg_solr_video_info') // Table name no longer needs {}
                  ->fields(array(
                    'nid' => $node_id,
                    'is_node_draft' => $is_node_draft,
                  ))
                  ->condition('fid', $fids, '=')
                  ->execute();
            }
          }
        }
        if ($node->status == 0 && $draft_msg_flag == 1) {

          drupal_set_message('The video is not published. It will auto published once it published on Daily motion.');
        }
        if ($node->field_story_facebook_video[LANGUAGE_NONE][0]['fid'] != 0) {
          itg_videogallery_update_node_id_for_video_fid($node_id, $node->field_story_facebook_video[LANGUAGE_NONE][0]['fid'], $is_node_draft);
        }
        if ($node->field_story_twitter_video[LANGUAGE_NONE][0]['fid'] != 0) {
          itg_videogallery_update_node_id_for_video_fid($node_id, $node->field_story_twitter_video[LANGUAGE_NONE][0]['fid'], $is_node_draft);
        }
        break;
    }
  }
}

/**
 * This function use for upadet node id in itg_solr_video_info table after by fid when node is update and insert
 */
function itg_videogallery_update_node_id_for_video_fid($node_id, $fids, $is_node_draft) {
  $num_updated = db_update('itg_solr_video_info') // Table name no longer needs {}
      ->fields(array(
        'nid' => $node_id,
        'is_node_draft' => $is_node_draft,
      ))
      ->condition('fid', $fids, '=')
      ->execute();
}

/**
 * Function use for upload local video to dailymotion
 */
function itg_videogallery_send_local_video_to_dailymotion($real_path, $file_details, $video_fid, $tags_value, $node_id, $is_draft = null, $is_private = null) {

  $response = itg_videogallery_dailymotion($real_path, $file_details->uri, $video_fid, $tags_value, $node_id, $is_private);
// Perform playlist and tags when new video create.
  $response_result['video_id'] = $response['id'];
  $response_result['fid'] = $response['fid'];
  if (!empty($response_result['video_id'])) {
    $duration = "";
    if ($response['duration'] < 3600) {
      $duration = gmdate("i:s", $response['duration']);
    }
    else {
      $duration = gmdate("H:i:s", $response['duration']);
    }
    $nid = db_insert('dailymotion_response_details')
        ->fields(array(
          'title' => $response['title'],
          'channel' => $response['channel'],
          'fid' => $response['fid'],
          'tags' => $response['tags'],
          'video_id' => $response['id'],
          'nid' => $node_id,
          'upload_time' => REQUEST_TIME,
          'video_duration' => $duration,
          'dailymotion_published' => 1,
          'video_size' => $file_details->filesize,
          'is_draft' => ($is_draft) ? 1 : 0,
          'type' => 'local',
          'name' => $file_details->filename,
        ))
        ->execute();
    db_insert('itg_solr_video_info')
        ->fields(array(
          'fid' => $response['fid'],
          'solr_video_id' => $response['id'],
          'nid' => $node_id,
          'property' => VIDEO_PROPERTY,
          'content_type' => 'video_gallery',
          'solr_video_duration' => $duration,
          'solr_video_size' => $file_details->filesize,
          'solr_video_thumb' => "",
        ))
        ->execute();
  }
}

/**
 * Implements function for dailymotion api
 * @return object
 */
function itg_videogallery_dailymotion_api() {
  require_once 'includes/Dailymotion.php';
  $user_name = variable_get('dailymotion_username', '');
  $password = variable_get('dailymotion_password', '');
  $api_key = variable_get('dailymotion_apikey', '');
  $api_secret = variable_get('dailymotion_secretkey', '');

  try {
    $api = new Dailymotion();
    $scopes = array(
      'userinfo',
      'feed',
      'manage_videos',
      'manage_subtitles',
      'read',
      'write',
      'delete',
    );
    $api->setGrantType(
        Dailymotion::GRANT_TYPE_PASSWORD, $api_key, $api_secret, $scopes, array(
      'username' => $user_name,
      'password' => $password,
        )
    );
  }
  catch (Exception $e) {
    if ($e->getMessage() == "Missing API key") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('Please enter API Key.'), 'error');
      drupal_goto('dailymotion/config');
    }
    else {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
  return $api;
}

/**
 * Implements function for remove video from playlist
 */
function itg_videogallery_update_tags_video_private($tags_value, $video_id, $private, $video_desc = "", $video_title = "", $video_thumb_fid = "") {
  if ($video_thumb_fid) {
    $image_load = file_load($video_thumb_fid);
    $image_url = file_create_url($image_load->uri);
  }
  if ($private == 'Yes') {
    $private = 'true';
  }
  else {
    $private = 'false';
  }
  $api = itg_videogallery_dailymotion_api();
// Tags assign to node and thumbnail
  if (!empty($tags_value) && !empty($video_title)) {
    $api->post('/video/' . $video_id . '?tags=' . $tags_value . '&private=' . $private . '&title=' . $video_title . '&description=' . $video_desc . '&thumbnail_url=' . $image_url);
  }
  else if (empty($tags_value) && !empty($video_title)) {
    $api->post('/video/' . $video_id . '?private=' . $private . '&title=' . $video_title . '&description=' . $video_desc . '&thumbnail_url=' . $image_url);
  }
  else if (!empty($tags_value) && empty($video_title)) {
    $api->post('/video/' . $video_id . '?tags=' . $tags_value . '&private=' . $private . '&description=' . $video_desc . '&thumbnail_url=' . $image_url);
  }
  else {
    $api->post('/video/' . $video_id . '?private=' . $private);
  }
}

/**
 * Implements dailymotion video edit function
 * @param array $vid_res_result
 * @param array $playlist_name
 * @param array $tags_value
 * @param int $node_id
 */
function itg_videogallery_edit_dailymotion($vid_res_result, $playlist_name, $node_id) {
  $video_id = $vid_res_result['video_id'];
  $fid = $vid_res_result['fid'];
  $api = itg_videogallery_dailymotion_api();
// create playlist
  foreach ($playlist_name as $name) {
// local saved playlist check
    $exist_playlist = itg_videogallery_get_playlist_id($name);
    if ($exist_playlist[0]->pid == '') {
      try {
        $result = $api->post(
            '/me/playlists', array(
          'name' => $name,
            )
        );
// Insert data in dailymotion_playlist_details table
        db_insert('dailymotion_playlist_details')
            ->fields(array(
              'pid' => $result['id'],
              'playlist_name' => $result['name'],
              'node_id' => $node_id,
              'video_id' => $video_id,
            ))->execute();
        $api->post('/playlist/' . $result['id'] . '/videos/' . $video_id);
      }
      catch (Exception $e) {
        if ($e->getCode() == 500) {
          $playlists = $api->get(
              '/me/playlists', array('limit' => 100, 'fields' => array('id', 'name'))
          );
          foreach ($playlists['list'] as $p_value) {
            $play[$p_value['name']] = $p_value['id'];
          }
          db_insert('dailymotion_playlist_details')
              ->fields(array(
                'pid' => $play[$name],
                'playlist_name' => $name,
                'node_id' => $node_id,
                'video_id' => $video_id,
              ))->execute();
          $playlist_id = itg_videogallery_get_playlist_id($name);
          $api->post('/playlist/' . $playlist_id[0]->pid . '/videos/' . $video_id);
        }
      }
    }
    else {
      $playlist_id = itg_videogallery_get_playlist_id($name);
      $api->post('/playlist/' . $playlist_id[0]->pid . '/videos/' . $video_id);
    }
  }
}

/**
 * This function use for chane video privat or public
 */
function itg_videogallery_video_private_public($videid, $status) {
  $api = itg_videogallery_dailymotion_api();
  $api->post('/video/' . $videid . '?private=' . $status);
  itg_videogallery_update_embedcode_url($videid);
}

/**
 * This function use for update embed url
 */
function itg_videogallery_update_embedcode_url($video_id) {
  $api = itg_videogallery_dailymotion_api();
  $thumb_url = $api->get(
      '/video/' . $video_id, array('fields' => array('embed_url'))
  );
  $embed_id = "";
  if ($thumb_url['embed_url']) {
    $embed_id = end(explode('/', $thumb_url['embed_url']));
  }
  $query = db_update('itg_solr_video_info')
      ->fields(array('video_embedded_url' => $embed_id));
  $query->condition('solr_video_id', $video_id);
  $query->execute();
}

/**
 * Implement dailymotion api call
 * @param string $real_path
 * @param int $key
 * @param string $uri
 * @param int $fid
 * @return array
 */
function itg_videogallery_dailymotion($real_path, $uri, $fid, $tags_value, $node_id, $is_private = null) {
  $api = itg_videogallery_dailymotion_api();
  if ($is_private == 'Yes') {
    $is_private = 'true';
  }
  else {
    $is_private = 'false';
  }
  try {
    if (itg_videogallery_check_ftp_video($fid)) {
      $ftp_file = explode('/dailymotion_video_dir/', $real_path);
      $uri = 'public://dailymotion-ftp/' . $ftp_file[1];
      $url = FTP_URL_VIDEO . $ftp_file[1];
    }
    else if (strpos($real_path, '/s3fs') === FALSE) {

      $url = $api->uploadFile($real_path);
    }
    else {
      $url = $real_path;
    }
    $file_name = $ftp_file[1];
    if ($ftp_file[1] == "") {
      $file_name = file_load($fid);
      $file_name = $file_name->filename;
    }
// $url = $real_path;
    $result = $api->post(
        '/me/videos', array(
      'url' => $url,
      'title' => $file_name,
      'tags' => $tags_value,
      'channel' => 'tv',
      'private' => $is_private,
      'published' => TRUE,
        )
    );
    itg_videogallery_update_embedcode_url($result['id']);
    $playlist_id = variable_get('video_property');
//  $resp = $api->post('/playlist/' . $playlist_id . '/videos/' . $result['id']);
    $dur = $api->get(
        '/video/' . $result['id'], array('fields' => array('duration'))
    );
    $result['duration'] = $dur['duration'];
    ftp_close($connection_id);
    $a = new Dailymotion();
    $a->logout();
    $result['fid'] = $fid;
    $result['tags'] = $tags_value;
  }
  catch (Exception $e) {

    if ($e->getMessage() == "This `client_id' doesn't exist.") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('API Key is wrong.'), 'error');
      drupal_goto('dailymotion/config');
    }
    elseif ($e->getMessage() == "Invalid `client_secret'") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('Secret Key is wrong.'), 'error');
      drupal_goto('dailymotion/config');
    }
    elseif ($e->getCode() == 6) {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('There is some issue with internet connection.'), 'error');
      drupal_goto('node/' . $node_id . '/edit', array('query' => array('destination' => 'manage-videogallery')));
    }
    elseif ($e->getCode() == 400) {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_get_messages();
      drupal_set_message(t('Do not use space in FTP filename. Please remove and again upload file without space in file name.'), 'error');
      drupal_goto('node/' . $node_id . '/edit', array('query' => array('destination' => 'manage-videogallery')));
    }
    else {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
  return $result;
}

/**
 * Implements function for custom validate.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_custom_validate($form, &$form_state) {
//schedule date & expiry date validation
  $is_migrate_validate = 0;
  $schedule_date = strtotime($form_state['values']['field_story_schedule_date_time'][LANGUAGE_NONE][0]['value']);
  $expiry_date = strtotime($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value']);
  if (isset($expiry_date) && ($schedule_date > $expiry_date)) {
    form_set_error('field_story_expiry_date', t("Expiry date should be greater then schedule start date"));
  }
  foreach ($form_state['values']['field_video_upload']['und'] as $videofields) {

    if ((int) $videofields['field_videogallery_video_upload']['und'][0]['fid'] != 0) {
      $fids[] = (int) $videofields['field_videogallery_video_upload']['und'][0]['fid'];
    }
  }

  foreach ($form_state['values']['field_video_upload']['und'] as $videofields) {
    if ($videofields['field_migrated_video_url']['und'][0]['value'] != "" && $videofields != 'Add another item') {

      $is_migrate_validate = 1;
    }
  }
  if ($form_state['values']['field_story_source_type'][LANGUAGE_NONE][0]['value'] != 'migrated') {
    if (empty($fids)) {
      form_set_error('field_video_upload', t("Please select video."));
    }
  }

  if ($is_migrate_validate == 1 && !empty($fids)) {
    form_set_error('field_video_upload', t("Please Remove Migrated Video Url."));
  }
  if ($is_migrate_validate == 0) {
    $form_state['values']['field_story_source_type'][LANGUAGE_NONE][0]['value'] = "videogallery";
  }
}

/**
 * After build for story form.
 * {@inheritdoc}
 */
function itg_videogallery_after_build($form, &$form_state) {
  $arg = arg(2);
  global $user, $base_url;
  if ($form_state['values']['field_story_source_type'][LANGUAGE_NONE][0]['value'] != 'migrated') {
    foreach ($form['field_video_upload']['und'] as $delta => $field) {
      if (is_numeric($delta)) {
        unset($form['field_video_upload']['und'][$delta]['field_migrated_video_url']);
        unset($form['field_multi_bitrate']);
        unset($form['field_noindex_nofollow']);
      }
    }
  }

  if ($form_state['values']['field_story_source_type'][LANGUAGE_NONE][0]['value'] == 'migrated') {
    foreach ($form['field_video_upload']['und'] as $delta => $field) {
      if (is_numeric($delta)) {

        $video_url = $form['field_video_upload']['und'][$delta]['field_migrated_video_url']['und'][0]['value']['#default_value'];
        $video_fid = $form['field_video_upload']['und'][$delta]['field_videogallery_video_upload']['und'][0]['#default_value']['fid'];
        if (!empty($video_url)) {
          unset($form['field_video_upload']['und'][$delta]['field_include_ads']);
          unset($form['field_video_upload']['und'][$delta]['field_video_private']);
          unset($form['field_video_upload']['und'][$delta]['field_video_title']);
          unset($form['field_video_upload']['und'][$delta]['field_videogallery_video_upload']);
          unset($form['field_video_upload']['und'][$delta]['field_video_thumbnail']);
        }
        else if ($video_fid == "" && $video_url == "") {
          unset($form['field_video_upload']['und'][$delta]);
        }
        if ($video_fid != "") {
          unset($form['field_video_upload']['und'][$delta]['field_migrated_video_url']);
        }
      }
    }
  }
  else {
    foreach ($form['field_video_upload']['und'] as $delta => $field) {
      if (is_numeric($delta)) {
        if ($arg == 'edit') {
          $video_fid = $form['field_video_upload']['und'][$delta]['field_videogallery_video_upload']['und'][0]['#default_value']['fid'];
          $file_exist = itg_videogallery_check_file_manage_fid($video_fid);
          if (empty($file_exist) || $video_fid < 1) {
            unset($form['field_video_upload']['und'][$delta]);
          }
        }
      }
    }
  }
  $form['original_image_fids'] = array(
    '#type' => 'hidden',
    '#value' => isset($form_state['input']['original_image_fids']) ? $form_state['input']['original_image_fids'] : '',
    '#attributes' => array('id' => 'original_image_fids', 'name' => 'original_image_fids'),
  );
  if (!isset($form['#node']->nid)) {
// hide remove button of first field on add form 
    drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-field-story-reporter-und-0-remove-button").hide();              
              jQuery("#edit-field-video-anchor-und-0-remove-button").hide();
            });', array('type' => 'inline', 'scope' => 'footer'));
  }


  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_videogallery' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/itg_videogallery.js', array('weight' => 1, 'scope' => 'footer'));
  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_videogallery_form_videogallery_node_form_alter(&$form, &$form_state, $form_id) {
  global $base_url, $user;
// code for story expiry date field show and hide
  $form['field_story_expiry_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_expires[und][Yes]"]' => array('checked' => TRUE),
    )
  );

// code for Comment Question field hide and show
  $form['field_story_comment_question']['#states'] = array(
    'visible' => array(
      ':input[name="field_video_configurations[und][comment_box]"]' => array('checked' => TRUE),
    )
  );

  $form['field_story_posted_by_twitter']['#default_value'] = $user->mail;
  $form['field_story_posted_by_instagram']['#default_value'] = $user->mail;
}

/**
 * Implement hook_form_FORM_ID_alter().
 * {@inheritdoc}
 */
function itg_videogallery_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  $form_id_arr = array('views-exposed-form-manage-videogallery-page', 'views-exposed-form-videogallery-management-page', 'views-exposed-form-videogallery-management-page-1', 'views-exposed-form-videogallery-management-page-2', 'views-exposed-form-videogallery-management-page-3', 'views-exposed-form-videogallery-management-page-5', 'views-exposed-form-videogallery-management-page-6', 'views-exposed-form-videogallery-management-page-7', 'views-exposed-form-videogallery-management-page-4', 'views-exposed-form-videogallery-management-page-10');
  if (in_array($form['#id'], $form_id_arr)) {
    $form['title']['#autocomplete_path'] = 'content-title-list/videogallery/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
    $form['nid']['#autocomplete_path'] = 'content-nid-list/videogallery/autocomplete';
    $form['nid']['#attributes'] = array('placeholder' => t('Video Id'));
  }
}

/**
 * Implement hook_views_pre_render().
 * {@inheritdoc}
 */
function itg_videogallery_views_pre_render(&$view) {
  if ($view->name == "manage_videogallery" || $view->name == "videogallery_management") {
    if (!isset($_POST['views_bulk_operations'])) {
      $header_content_video = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
      $header_content_video .= l(t('Upload Video'), 'node/add/videogallery', array('query' => array('destination' => arg(0))));
      $view->attachment_before = $header_content_video;
    }
  }
}

/**
 * Implements submit function for bolt video title in msg.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_submit_status_message(&$form, $form_state) {

  $workbench_current_state = $form_state['node']->workbench_moderation_state_new;
  $node_type = ucfirst($form_state['node']->type);
  $node_type = str_replace("_", " ", $node_type);
  $title = ucfirst($form_state['node']->title);

  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  $request_destination = $_REQUEST['destination'];
  $redirect_path = $_REQUEST['destination'];

  if ($request_destination == 'published-video') {
    $redirect_path .= "?field_story_syndication_value_op=all";
    itg_custom_message($node_type, $workbench_current_state, arg(1), $title, $redirect_path);
  }

  if ($form_state['input']['op'] != 'Save as Draft') {
    itg_custom_message($node_type, $workbench_current_state, arg(1), $title, $redirect_path);
  }
}

/**
 * Impelements form for configuration.
 * {@inheritdoc}
 */
function itg_videogallery_configuration_form($form) {
  $form['dailymotion_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion Username'),
    '#default_value' => variable_get('dailymotion_username'),
    '#required' => TRUE,
  );
  $form['dailymotion_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion Password'),
    '#default_value' => variable_get('dailymotion_password', ''),
    '#required' => TRUE,
  );
  $form['dailymotion_playlist_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Dailymotion Playlist Id'),
    '#default_value' => variable_get('dailymotion_playlist_id', ''),
    '#required' => TRUE,
  );
  $form['dailymotion_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('Api Key'),
    '#default_value' => variable_get('dailymotion_apikey', ''),
    '#required' => TRUE,
  );
  $form['dailymotion_secretkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#default_value' => variable_get('dailymotion_secretkey', ''),
    '#required' => TRUE,
  );

  $form['video_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Property'),
    '#default_value' => variable_get('video_property'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * This function use for remove video iframe form story body
 */
function itg_videogallery_remove_delete_video_form_body_html_body($story_body) {
  global $base_url;
  preg_match_all('/src="([^"]+)"/', $story_body, $match);
  $video_url = $match[1];
  if (!empty($video_url)) {

    foreach ($video_url as $video_value) {

      $post_check = strpos($video_value, $base_url . '/embeded-video/');
      $post_video_node = strpos($video_value, $base_url . '/embed-video/');

      if ($post_check !== FALSE) {
        $vid_id = end(explode('/', $video_value));
        $vid_id = explode('?', $vid_id);
        $check_video = itg_videogallery_check_video_url($vid_id[0]);
        if ($check_video) {
          drupal_add_js('jQuery(document).ready(function() {                  
            jQuery("#video_frame_' . $vid_id[0] . '").remove();
          });', array('type' => 'inline', 'scope' => 'footer'));
        }
      }
      if ($post_video_node !== FALSE) {

        $vid_id = end(explode('/', $video_value));
        $node_id = base64_decode($vid_id);
        $node_data = itg_videogallery_get_node_status($node_id);

        if ($node_data == 0) {
          drupal_add_js('jQuery(document).ready(function() {                  
            jQuery(".video_node_' . $vid_id . '").remove();
          });', array('type' => 'inline', 'scope' => 'footer'));
        }
      }
    }
  }
}

/**
 * This function check this video is delete or note 
 */
function itg_videogallery_check_video_url($vid) {

  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('is_delete'));
  $query->condition('solr_video_id', $vid, '=');
  $db_or = db_or();
  $db_or->condition('video_embedded_url', $vid, '=');
  $query->condition($db_or);
  $video_data = $query->execute()->fetchAll();
  if (empty($video_data)) {
    return true;
  }
  else if (!empty($video_data)) {
    foreach ($video_data as $dvideo) {
      if ($dvideo->is_delete == 1) {
        return true;
        break;
      }
    }
  }
  else {
    return false;
  }
}

/**
 * Implement itg_clone_story_data
 * @param int $keyword
 * @param string $type
 */
function itg_videogallery_getsolr_data() {
  $solr = apachesolr_get_solr();

  if (function_exists('itg_apache_solr_get_site_hash')) {
    $hash = itg_apache_solr_get_site_hash();
  }
  $all_video_ids = array();
  $hashvalue = implode(' OR ', array_keys($hash));
  $str = 'hash:(' . $hashvalue . ')';
  $query = apachesolr_drupal_query("custom");
  $query->addParam('rows', '10000'); // How many rows of result to display default it is 10.
  $query->addParam('qf', 'label'); // Only search in title
//The bundle which you want to search
  $query->replaceParam("fq", '(' . $str . ')');
  $query->addFilter("bundle", "itg_delete_solr_video");
  $query->setSolrsort('sort_label', 'asc');
  $resp_search = $query->search();
  $allData = $resp_search->response->docs;
  if (!empty($allData)) {
    foreach ($allData as $datasolr) {
      $all_video_ids[] = $datasolr->label;
    }
  }
  return $all_video_ids;
}

/**
 * This function use for removed parent deleted video
 * 
 */
function itg_videogallery_remove_video_id_parent_site_delete() {
  $solr_data = itg_videogallery_getsolr_data();
  $video_data = "";
  global $user;
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('fid', 'nid', 'solr_video_id', 'id', 'property', 'content_type'));
  $query->condition('property', VIDEO_PROPERTY, '!=');
  $query->condition('solr_video_id', $solr_data, 'IN');
  $video_data = $query->execute()->fetchAll();

  $node_by_video = array();
  foreach ($video_data as $data_delete) {
    $node_by_videop['fid'][$data_delete->nid][] = $data_delete->fid;

    $node_by_videop['video_id'][$data_delete->nid][] = $data_delete->solr_video_id;
    if ($data_delete->content_type == 'video_gallery') {
      $node_by_videop['nid'][$data_delete->nid][] = $data_delete->nid;

      $node_by_videop['content_type'][$data_delete->nid] = $data_delete->content_type;
    }
  }

  foreach ($node_by_videop['fid'] as $nkey => $fids) {
    foreach ($fids as $nky => $vide_fid) {
      try {
        $deleted = db_delete('file_managed')
            ->condition('fid', $vide_fid)
            ->execute();
        $deleted = db_delete('itg_solr_video_info')
            ->condition('fid', $vide_fid, '=')
            ->execute();
      }
      catch (Exception $e) {
        watchdog_exception('file manage delete', $e);
      }
    }
  }
  foreach ($node_by_videop['nid'] as $key => $nids) {

    $query = db_select('itg_solr_video_info', 'drd');
    $query->fields('drd', array('fid'));
    $query->condition('nid', $nids, 'IN');
    $video_data = $query->execute()->fetchAll();

    if (count($nids) == count($video_data)) {
      $node = node_load($nids[0]);
      if (!empty($node)) {
        $node->status = 0;
        node_save($node);
      }
    }
  }
}

/*
 * This function use for itg_delete_solr_video node delete
 */

function itg_videogallery_delele_node() {
  $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', 'story', '=')
      ->execute()
      ->fetchAll();
  foreach ($result as $key => $val) {
    pr($key);

    if (!empty($val->nid)) {
      node_delete($val->nid);
    }
  }
}

/*
 * This function use for itg_delete_solr_video node delete
 */

function itg_videogallery_delele_node_reuse_video($vide_id) {
  $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('title', $vide_id, '=')
      ->execute()
      ->fetchAssoc();
  if (!empty($result['nid'])) {
    node_delete($result['nid']);
  }
}

/**
 * This function use for removed or replaced video from other content
 * 
 */
function itg_videogallery_remove_video_with_child() {
  $video_data = "";
  global $user;
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('fid', 'nid', 'solr_video_id', 'id', 'property'));
  $query->condition('is_delete', '1', '=');
  $video_data = $query->execute()->fetchAll();

  foreach ($video_data as $data_delete) {

    if ($data_delete->fid != "") {
      //Getting all fids of this video id
      $query = db_select('itg_solr_video_info', 'drd');
      $query->fields('drd', array('fid'));
      $query->condition('solr_video_id', $data_delete->solr_video_id, '=');
      $video_data1 = $query->execute()->fetchAll();
      foreach ($video_data1 as $viddata) {

        try {
          $deleted = db_delete('file_managed')
              ->condition('fid', $viddata->fid)
              ->execute();
        }
        catch (Exception $e) {
          watchdog_exception('file manage delete', $e);
        }
      }


      if ($data_delete->property == VIDEO_PROPERTY) {

// $is_video_exist = itg_videogallery_get_video_info_video_id($data_delete->solr_video_id);
        $query = db_update('dailymotion_response_details');
        $query->fields(array('dailymotion_published' => 0));
        $query->condition('video_id', $data_delete->solr_video_id, '=');
        $query->execute();
        itg_videogallery_update_video_info_solr($data_delete->solr_video_id);
        itg_videogallery_video_private_public($data_delete->solr_video_id, false);
      }

// delete from itg_solr_video_info table
      $deleted = db_delete('itg_solr_video_info')
          ->condition('solr_video_id', $data_delete->solr_video_id, '=')
          ->condition('property', VIDEO_PROPERTY, '=')
          ->execute();
    }
  }
}

/**
 * This function use for get video bitrate url
 * 
 */
function itg_videogallery_get_video_bitrate($nid) {
  $query = db_select('itg_video_transcoding', 'ivt');
  $query->fields('ivt');
  $query->condition('nid', $nid, '=');
  $query->orderby('bitrate_ordering', 'ASC');
  $video_data1 = $query->execute()->fetchAll();
  foreach ($video_data1 as $key => $vid) {
    $bitrate[] = $vid->bitrate;
  }

  $hls = $vid->hls_domain;
}

/**
 * This function use for make video bitrate url:
 */
function itg_videogallery_make_bitrate_url($video_url, $bitrates) {

  $firestparet_replace = str_replace(VIDEO_MAIN_URL, VIDEO_BITRATE_URL, $video_url);

  $withoutExt = preg_replace('/\\.[^.\\s]{3,4}$/', '', $firestparet_replace);
  if (strpos($withoutExt, '1024_512')) {
    $returnstring = substr($withoutExt, 0, strpos($withoutExt, '1024_512'));
  }
  else {
    $returnstring = substr($withoutExt, 0, strpos($withoutExt, '512'));
  }
  $returnstring = $returnstring . '1024_,' . $bitrates . ',.mp4.csmil/master.m3u8';
  return $returnstring;
}

/**
 * function use for insert solr video in file_manage for fid
 * @global object $user
 * 
 */
function itg_videogallery_solr_video_insert_in_for_fid() {
  global $user;
  $videos_data = $_POST['checkvalue'];
  $return_fid = array();

  if (!empty($videos_data)) {
    foreach ($videos_data as $video_info) {
      $expode_video_info = explode('#', $video_info);
      $videourl = 'public://dailymotion_video_dir/' . time() . '/' . $expode_video_info[0] . '.mp4';
      $fid = db_insert('file_managed')
          ->fields(array(
            'uid' => $user->uid,
            'filename' => $expode_video_info[2],
            'uri' => $videourl,
            'filemime' => 'video/mp4',
            'filesize' => $expode_video_info[1],
            'status' => 1,
            'timestamp' => REQUEST_TIME,
          ))
          ->execute();
      $file = file_load($fid);
      file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
      $is_used = 0;
      if (isset($expode_video_info[7])) {
        $is_used = 1;
      }
      $fid = db_insert('itg_solr_video_info')
          ->fields(array(
            'fid' => $file->fid,
            'solr_video_id' => $expode_video_info[0],
            'solr_video_duration' => $expode_video_info[4],
            'solr_video_size' => $expode_video_info[1],
            'property' => $expode_video_info[5],
            'content_type' => $expode_video_info[6],
            'is_alredy_used' => $is_used,
            'solr_video_thumb' => $expode_video_info[3],
          ))
          ->execute();
      $return_fid[] = $file->fid;
    }
//}
  }
  exit(json_encode($return_fid));
}

/*
 * This callback use for delete video from local and daily motion
 */

function delete_daily_motion_video_callback() {
  $video_id = arg(1);
  $query = db_delete('dailymotion_response_details');
  $query->condition('video_id', $video_id);
  if ($query->execute()) {
    $video_info = itg_videogallery_get_video_solrcontent($video_id);
    if (!empty($video_info[0]->nid)) {

      itg_videogallery_apachesolr_node_exclude($video_info[0]->nid);

      node_delete($video_info[0]->nid);
    }
// insert delete video in content type
    global $user;
    $node = new stdClass();
    $node->title = $video_id;
    $node->type = "itg_delete_solr_video";
    node_object_prepare($node); //Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE;
    $node->uid = $user->uid;
    $node->field_video_is_delete[LANGUAGE_NONE][0]['value'] = 1;
    $node->status = 1; //(1 or 0): Published or not
    $node->promote = 0; //(1 or 0): Promoted to front page
    $node->comment = 0; // 0 = Comments disabled, 1 = read only, 2 = read/write

    $getnode = itg_videogallery_get_node_by_title($video_id);
    if (!empty($getnode)) {
      $node->nid = $getnode[0]->nid;
    }
    node_save($node);
    drupal_set_message('Video has been deleted successfully');
    drupal_goto('daily-motion-video-dashboard');
  }
}

/**
 * function use delete delete solr index.
 * @param type $nid
 * @return boolean
 */
function itg_videogallery_apachesolr_node_exclude($nid) {
  $node = node_load($nid);
// Get field value (respecting the fild language).
  $node_wrapper = entity_metadata_wrapper('node', $node);
// Delete node from Index, in case it was indexed before.
  apachesolr_remove_entity($env_id, 'node', $nid);
// Return TRUE to exclude node from indexing.
  return TRUE;


  return FALSE;
}

/**
 * Custom form defination for Daily motion dashboard.
 * @param array $form
 * @param array $form_state
 */
function daily_motion_video_dashboard($form, &$form_state) {

  $form['fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => 'Daily Motion Video Dashboard',
  );
  $form['fieldset']['video_title'] = array(
    '#type' => 'textfield',
    '#title' => 'Title',
    '#attributes' => array(
      'placeholder' => t('Title'),
    ),
    '#default_value' => isset($_GET['video_title']) ? $_GET['video_title'] : '',
  );
  $form['fieldset']['channel'] = array(
    '#type' => 'select',
    '#title' => 'Channel',
    '#options' => array('' => '-All-', 'ftp' => 'FTP', 'LOCAL' => 'LOCAL', 'S3' => 'S3'),
    '#default_value' => isset($_GET['channel']) ? $_GET['channel'] : '',
  );

  $form['fieldset']['from_time'] = array(
    '#type' => 'date_popup',
    '#title' => t("From"),
    '#date_format' => 'd/m/Y H:i',
    '#attributes' => array('autocomplete' => 'off', 'readonly' => 'readonly', 'placeholder' => 'From Date'),
    '#default_value' => isset($_GET['from_time']) ? $_GET['from_time'] : format_date(REQUEST_TIME, 'custom', 'd/m/Y H:i'),
    '#date_timezone' => date_default_timezone(),
  );
// Facebook video schdule time.
  $form['fieldset']['to_time'] = array(
    '#type' => 'date_popup',
    '#title' => t("To"),
    '#date_format' => 'd/m/Y H:i',
    '#attributes' => array('autocomplete' => 'off', 'readonly' => 'readonly', 'placeholder' => 'To Date'),
    '#default_value' => isset($_GET['to_time']) ? $_GET['to_time'] : format_date(REQUEST_TIME, 'custom', 'd/m/Y H:i'),
    '#date_timezone' => date_default_timezone(),
  );
  $form['fieldset']['video_id'] = array(
    '#type' => 'textfield',
    '#title' => 'Daily motion video ID',
    '#attributes' => array(
      'placeholder' => t('Video ID'),
    ),
    '#default_value' => isset($_GET['video_id']) ? $_GET['video_id'] : '',
  );

  $form['fieldset']['filtertype'] = array(
    '#type' => 'select',
    '#title' => 'Status',
    '#options' => array('' => '-Select-', '1' => 'Publish', '0' => 'Unpublish'),
    '#submit' => array('ge_custom_search_report_search_submit_dis'),
    '#default_value' => isset($_GET['filtertype']) ? $_GET['filtertype'] : '',
  );

  $form['fieldset']['display_button'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => array('daily_motion_video_dashboard_submit'),
  );
  $form['filters']['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset'), '#submit' => array('itg_videogallery_daily_motion_video_reset'),);


  $form['markup'] = array(
    '#markup' => daily_motion_video_dashboard_rows(),
  );

  return $form;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function daily_motion_video_dashboard_validate($form, &$form_state, $form_id) {
  $flag = 0;
  if (!empty($form_state['values']['from_time']['date']) && empty($form_state['values']['from_time']['time'])) {

    $arrayError['from_time[time]'] = t("Please Enter From Time.");
    $flag = 1;
  }
  if (!empty($form_state['values']['to_time']['date']) && empty($form_state['values']['to_time']['time'])) {
    $arrayError['to_time[time]'] = t("Please Enter To Time.");
    $flag = 1;
  }
  if ($flag == 1) {
    drupal_get_messages('error');
    foreach ($arrayError as $key => $msgs) {
      form_set_error($key, $msgs);
    }
  }
}

/**
 * this function use for reset dailymotion dashboard filter
 * @param type $form
 * @param type $form_state
 */
function itg_videogallery_daily_motion_video_reset($form, $form_state) {

  drupal_goto('daily-motion-video-dashboard');
}

/*
 * Submit handler for ITG dailymotion dashboard
 */

function daily_motion_video_dashboard_submit($form, &$form_state) {

  $video_id = $form_state['values']['video_id'];
  $filtertype = $form_state['values']['filtertype'];
  $video_title = $form_state['values']['video_title'];
  $channel = $form_state['values']['channel'];
  $video_title = $form_state['values']['video_title'];
  $channel = $form_state['values']['channel'];
  $totime = $form_state['values']['to_time'];
  $fromtime = $form_state['values']['from_time'];
  drupal_goto('daily-motion-video-dashboard', array('query' => array(
      'video_title' => $video_title,
      'channel' => $channel,
      'filtertype' => $filtertype,
      'video_id' => $video_id,
      'from_time' => $fromtime,
      'to_time' => $totime,
  )));
}

/**
 * This method returns the number of rows
 */
function daily_motion_video_dashboard_rows() {
  global $base_url;
  drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/itg_videogallery_dashbord.js', array('weight' => 1, 'scope' => 'footer'));
  $filtertype = isset($_GET['filtertype']) ? $_GET['filtertype'] : '';
  $video_id = isset($_GET['video_id']) ? $_GET['video_id'] : '';
  $video_title = isset($_GET['video_title']) ? $_GET['video_title'] : '';
  $channel = isset($_GET['channel']) ? $_GET['channel'] : '';
  $to_time = isset($_GET['to_time']) ? $_GET['to_time'] : '';
  $from_time = isset($_GET['from_time']) ? $_GET['from_time'] : '';
  $to_time = strtotime($to_time);
  $from_time = strtotime($from_time);
  $data = array();
  $html = '';
  $rows = array();
  $header = array(
    t('Sn no.'),
    t('Title'),
    t('Channel'),
    t('Uploaded Time'),
    t('Video Id'),
    t('Video Status'),
    t('DM Status'),
    t('Action'),
  );

  $query = db_select('dailymotion_response_details', 'n');
  $query->fields('n');
  $all_used_video = itg_videogallery_get_all_publish_video_of_video_content();
  if (isset($filtertype) && $filtertype != "") {
    $query->condition('n.dailymotion_published', $filtertype, '=');
  }
  if (isset($video_id) && !empty($video_id)) {
    $query->condition('n.video_id', $video_id, '=');
  }

  if (isset($video_title) && !empty($video_title)) {

    $query->condition('n.title', '%' . db_like($video_title) . '%', 'LIKE');
  }
  if (isset($channel) && !empty($channel)) {

    $query->condition('n.type', $channel, '=');
  }
  if (isset($from_time) && !empty($from_time)) {

    $query->condition('n.upload_time', $from_time, '>=');
  }
  if (isset($to_time) && !empty($to_time)) {

    $query->condition('n.upload_time', $to_time, '<=');
  }

//print strtr((string) $query, $query->arguments());die;
  $query = $query->extend('PagerDefault')->limit(50);
  $query->orderBy('n.eid', 'DESC');


  $result = $query->execute();
  $num_of_results = $result->rowCount();
  $sn = 0;
  while ($record = $result->fetchObject()) {
    if ($record->dailymotion_published == 1) {
      $status_flag = '<span class="used-video">Used</span>';
      $delete_link = '';
    }
    else {
      if ($record->encoding_progress == '100') {
        $status_flag = '<span class="ready-to-use-video">Ready To Use</span>';
        if (strtoupper($record->type) != 'LOCAL') {
          $delete_link = "<a  class='dalymotion-video-delete' href='" . $base_url . "/delete_daily_motion_video/" . $record->video_id . "' > Delete </a>";
        }
      }
      if ($record->encoding_progress != '100' && $record->publishing_progress != '100') {

        $status_flag = '<span class="under-precess">Publishing Processing (' . $record->publishing_progress . ')%</span>';
        if (strtoupper($record->type) != 'LOCAL') {
          $delete_link = "<a  class='dalymotion-video-delete' href='" . $base_url . "/delete_daily_motion_video/" . $record->video_id . "' > Delete </a>";
        }
      }
      if ($record->encoding_progress != '100' && $record->publishing_progress == '100') {

        $status_flag = '<span class="under-precess">Ready to Use</span>';

        if (strtoupper($record->type) != 'LOCAL') {
          $delete_link = "<a  class='dalymotion-video-delete' href='" . $base_url . "/delete_daily_motion_video/" . $record->video_id . "' > Delete </a>";
        }
      }
      if ($record->encoding_progress == '100' && $record->publishing_progress == '100') {
        if (in_array($record->video_id, $all_used_video)) {
          $status_flag = '<span class="under-precess">Draft</span>';
          $delete_link = "";
        }
        else {
          $status_flag = '<span class="under-precess">Completed</span>';
          if ($record->dailymotion_published == 0) {
            $delete_link = "<a  class='dalymotion-video-delete' href='" . $base_url . "/delete_daily_motion_video/" . $record->video_id . "' > Delete </a>";
          }
        }
      }
    }
    if ($record->dailymotion_published == 1) {
      $video_status = 'Publish';
    }
    else {
      $video_status = 'Unpublish';
    }
    $rows[] = array(
      ++$sn,
      $record->name,
      strtoupper($record->type),
      date('d-M-Y H:i:s', $record->upload_time),
      $record->video_id,
      $video_status,
      $status_flag,
      $delete_link
    );
  }

  $html .= theme('table', array('header' => $header, 'rows' => $rows));
  $html .= theme('pager');


  return $html;
}

/*
 * Submit handler for ITG video  Repo
 */

function itg_videogallery_ftp_template() {

  $field_id = $_GET['input_filed'];
  $file_field_name = $_GET['file_filed_name'];

  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['video_field_id'] = $field_id;
  $settings['video_field_file'] = $file_field_name;
  drupal_add_js(array('itg_dailymotion' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/itg_dailymotion.js', array('weig
ht' => 1));
  return theme('itg_dailymotion_ftp_template');
}

/**
 * Implements hook_permission.
 */
function itg_videogallery_permission() {
  return array(
    'authorized user dailymotion credin' => array(
      'title' => t('Dailymotion credintial permission'),
      'description' => t('Dailymotion credintial configuration permission'),
    ),
    'authorized user ftp credin' => array(
      'title' => t('Dailymotion FTP config permission'),
      'description' => t('Dailymotion FTP configuration permission'),
    ),
    'daily motion video dashboard perm' => array(
      'title' => t('Daily motion video dashboard permission'),
      'description' => t('Daily motion video dashboard permission'),
    ),
  );
}

/**
 * This function use for get file daily motion file details.
 */
function itg_videogallery_get_file_details() {
  $getids = $_POST['checkvalue'];
  global $base_url;
  $responce = "";
  foreach ($getids as $key => $file_value) {
    $video_id = explode('#', $file_value);
    $api = itg_videogallery_dailymotion_api();
    $thumb_url = $api->get(
        '/video/' . $video_id[0], array('fields' => array('embed_url'))
    );

    if ($thumb_url['embed_url']) {
      $video_id = end(explode('/', $thumb_url['embed_url']));
      $query = db_update('itg_solr_video_info')
          ->fields(array('video_embedded_url' => $video_id));
      $query->condition('solr_video_id', $video_id[0]);
      $query->execute();
    }
    $responce.=' <iframe frameborder="0" scrolling="no" class="video_data" id="video_frame_' . $video_id . '" frameborder="0" src="' . $base_url . '/embeded-video/' . $video_id . '" allowfullscreen></iframe>';
  }
  exit($responce);
}

/**
 * This function use for get file daily motion file details.
 */
function itg_videogallery_dm_embed() {
  $video_id = arg(1);
  $api = itg_videogallery_dailymotion_api();
  $thumb_url = $api->get(
      '/video/' . $video_id, array('fields' => array('embed_url'))
  );
  $embed_id = "";
  if ($thumb_url['embed_url']) {
    $embed_id = end(explode('/', $thumb_url['embed_url']));
  }
  return theme('itg_videogallery_dm_embed', array('video_id' => $embed_id));
}

/**
 * Implement function get dailymotion video id by fid
 * @param int $fid
 * @return type string
 */
function itg_videogallery_get_video_all($fid) {
  $query = db_select('dailymotion_response_details', 'dm')
      ->fields('dm', array('is_draft'))
      ->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implement function get dailymotion video id by fid
 * @param int $fid
 * @return type string
 */
function itg_videogallery_get_video($fid) {
  $query = db_select('dailymotion_response_details', 'dm')
      ->fields('dm', array('video_id'))
      ->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements hook_node_access().
 * {@inheritdoc}
 */
function itg_videogallery_node_access($node, $op, $account) {
  if (!empty($account) && !empty($node)) {
    if ($account->uid == 0 && !empty($node->type) && $node->type == 'videogallery') {//shravan
      $current_time = time();
      $video_schedule_date = "";
      $video_expire_date = "";
      if (!empty($node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'])) {
        $video_schedule_date = strtotime($node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value']);
      }
      if (!empty($node->field_story_expiry_date[LANGUAGE_NONE][0]['value'])) {
        $video_expire_date = strtotime($node->field_story_expiry_date[LANGUAGE_NONE][0]['value']);
      }
      if (($current_time > $video_schedule_date) && ($current_time < $video_expire_date) && ($node->type == 'videogallery' && $op == 'view')) {
        return NODE_ACCESS_ALLOW;
      }
      elseif (($current_time > $video_expire_date) && ($node->type == 'videogallery') && ($op == 'view')) {
        return NODE_ACCESS_DENY;
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_videogallery_node_validate($node, $form, &$form_state) {

// Code for redirection url validation
  if ($node->type == 'videogallery') {
// Code for category validation.
    if (empty($node->field_story_category[LANGUAGE_NONE][0]['tid'])) {
      form_set_error('edit-field-story-category-und-hierarchical-select-selects-0', t("Section field is required."));
    }
  }
}

/**
 * Implements function return playlist id
 * @param string $tname
 * @return array
 */
function itg_videogallery_get_playlist_id($tname) {
  $query = db_select('dailymotion_playlist_details', 'dpt');
  $query->fields('dpt', array('pid', 'playlist_name'));
  $query->condition('dpt.playlist_name', $tname, '=');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * Implements function for get old playlist for remove video
 * @param int $nid
 * @return array
 */
function itg_videogallery_get_old_playlist($nid) {
  $query = db_select('field_data_field_dailymotion_playlist', 'fdp');
  $query->fields('fdp', array('field_dailymotion_playlist_tid', 'entity_id'));
  $query->join('taxonomy_term_data', 'ttd', 'fdp.field_dailymotion_playlist_tid = ttd.tid');
  $query->fields('ttd', array('name', 'tid'));
  $query->condition('fdp.bundle', 'videogallery', '=');
  $query->condition('fdp.entity_id', $nid, '=');
  $result = $query->execute();
  foreach ($result as $value) {
    $output[$value->field_dailymotion_playlist_tid] = $value->name;
  }
  return $output;
}

/**
 * This function use for unpublish cideo content delete video
 */
function itg_videogallery_unpublish_content_delete_video($fid) {

  $query = db_update('itg_solr_video_info')
      ->fields(array('is_delete' => 1));
  $query->condition('fid', $fid);
  $query->condition('content_type', 'video_gallery', '=');
  $query->execute();
  $deleted = db_delete('file_managed')
      ->condition('fid', $fid)
      ->execute();
  global $user;
  $query = db_select('itg_solr_video_info', 'drd')
      ->fields('drd', array('solr_video_id', 'property'));
  $query->condition('fid', $fid);
  $result = $query->execute()->fetchAll();
  if ($result[0]->property == VIDEO_PROPERTY) {
    $num_updated = db_update('dailymotion_response_details') // Table name no longer needs {}
        ->fields(array(
          'dailymotion_published' => 1,
        ))
        ->condition('video_id', $result[0]->solr_video_id, '=')
        ->execute();
    itg_videogallery_update_video_info_solr($result[0]->solr_video_id);
    $node = new stdClass();
    $node->title = $result[0]->solr_video_id;
    $node->type = "itg_delete_solr_video";
    node_object_prepare($node); //Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE;
    $node->uid = $user->uid;
    $node->field_video_is_delete[LANGUAGE_NONE][0]['value'] = 1;
    $node->status = 1; //(1 or 0): Published or not
    $node->promote = 0; //(1 or 0): Promoted to front page
    $node->comment = 0; // 0 = Comments disabled, 1 = read only, 2 = read/write
    $getnode = itg_videogallery_get_node_by_title($result[0]->solr_video_id);
    if (!empty($getnode)) {
      $node->nid = $getnode[0]->nid;
    }
    node_save($node);
  }
}

/**
 * Implements hook_node_presave()
 * {@inheritdoc}
 */
function itg_videogallery_node_presave($node) {
//set custom path alias  
  if (itg_workflow_stop_node_update_batch_for_widgets()) {
    return;
  }
  if ($node->type == 'videogallery' && !empty($node->field_dailymotion_playlist[LANGUAGE_NONE])) {
    foreach ($node->field_dailymotion_playlist[LANGUAGE_NONE] as $playlist_val) {
      $playlist[$playlist_val['tid']] = $playlist_val['name'];
    }

    $node->field_story_source_id = $playlist;
    $_SESSION['old_playlist'] = itg_videogallery_get_old_playlist($node->nid);
  }

// condition for source type field
  if ($node->type == 'videogallery' && empty($node->field_story_source_type[LANGUAGE_NONE][0]['value'])) {
    $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'videogallery';
  }
}

/**
 * Implements function for get term name by tid
 * @param int $tid
 * @return string
 */
function itg_videogallery_get_tname($tid) {
  $query = db_select('taxonomy_term_data', 'ttd');
  $query->fields('ttd', array('name'));
  $query->condition('tid', $tid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_videogallery_cronapi($op, $job = NULL) {
  $items['video_file_delete'] = array(
    'description' => 'video file delete in files folder.',
    'callback' => 'itg_videogallery_remove_video',
  );
  $items['video_thumb_assign'] = array(
    'description' => 'Thumbnail image assign to node from dailymotion.',
    'callback' => 'itg_videogallery_thumb_assign',
  );
//  $items['draft-video-publish-after-local-video-readytouse'] = array(
//    'description' => 'Cron use for make publish node after check video status ready to play.',
//    'callback' => 'itg_videogallery_publish_node_after_video_ready_by_dm',
//  );
  $items['ftp_file_save'] = array(
    'description' => 'Ftp file save in file managed table.',
    'callback' => 'itg_videogallery_ftp_file_insert',
  );
  $items['thumb_url_dailymotion'] = array(
    'description' => 'Video Thumbnail Url save in custom dailymotion response table',
    'callback' => 'itg_videogallery_thumb_url',
  );

// This is the callback for uploading FTP video to Daily motion server in unpublished mode

  $items['itg_videogallery_ftp_file_insert_cron'] = array(
    'description' => 'This is the callback for uploading FTP video to Daily motion server in unpublished mode',
    'callback' => 'itg_videogallery_ftp_file_insert_cron',
  );
  $items['itg-videogallery-s3-file-to-dm'] = array(
    'description' => 'This is the callback for uploading S3 video to Daily motion server in unpublished mode',
    'callback' => 'itg_videogallery_s3_file_to_dm',
  );
  $items['itg-videogallery-dm-to-s3'] = array(
    'description' => 'This is the callback for store dm file to s3',
    'callback' => 'itg_videogallery_dm_to_s3',
  );
  $items['itg-videogallery-move-ftp-videos'] = array(
    'description' => 'This is the callback for move DM used video',
    'callback' => 'itg_videogallery_move_ftp_videos',
  );

  $items['save-video-bitrates'] = array(
    'description' => 'This is use for store video birates urls',
    'callback' => 'itg_videogallery_video_bitrate',
  );
//  $items['content-remove-video-with-child'] = array(
//    'description' => 'This crone use for replaced video remove from other content type.',
//    'callback' => 'itg_videogallery_remove_video_with_child',
//  );
//  $items['remove-video-if-parent-site-delete'] = array(
//    'description' => 'This crone use for remove video if parent site remove this video from video article.',
//    'callback' => 'itg_videogallery_remove_video_id_parent_site_delete',
//  );
  $items['video-update-embed-video-id'] = array(
    'description' => 'This crone use for Update video id embeded.',
    'callback' => 'itg_videogallery_video_update_embeded_url',
  );
//  $items['video-draft-video-check'] = array(
//    'description' => 'This crone use for Update video id embeded.',
//    'callback' => 'itg_videogallery_video_draft_node_check',
//  );
  return $items;
}

/**
 * Implements cron function for get thumburl in dailymotion custom table
 */
function itg_videogallery_thumb_url() {

  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd');
  $db_or = db_or();
  $db_or->condition('encoding_progress', '100', '!=');
  $db_or->condition('drd.publishing_progress', '100', '!=');
  $db_or->isNull('drd.publishing_progress');
  $db_or->isNull('drd.encoding_progress');
  $query->condition($db_or);
  $result = $query->execute()->fetchAll();
  $api = itg_videogallery_dailymotion_api();
  foreach ($result as $val) {
    try {
      if ($val->encoding_progress != "100" || $val->publishing_progress != "100") {
        $thumb_url = $api->get(
            '/video/' . $val->video_id, array('fields' => array('thumbnail_720_url', 'duration', 'encoding_progress', 'publishing_progress'))
        );

        $duration = '';
        if ($thumb_url['duration'] < 3600) {
          $duration = gmdate("i:s", $thumb_url['duration']);
        }
        else {
          $duration = gmdate("H:i:s", $thumb_url['duration']);
        }

        $image_url = $thumb_url['thumbnail_720_url'];
        db_update('dailymotion_response_details')
            ->fields(array(
              'dailymotion_thumb_url' => $image_url,
              'encoding_progress' => $thumb_url['encoding_progress'],
              'publishing_progress' => $thumb_url['publishing_progress'],
              'video_duration' => $duration
            ))
            ->condition('eid', $val->eid, '=')
            ->execute();
      }
    }
    catch (Exception $e) {
      
    }
  }
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd');
  $query->condition('publishing_progress', '100', '=');
  $result_new = $query->execute()->fetchAll();
  $api = itg_videogallery_dailymotion_api();
  foreach ($result_new as $val) {
    global $user;
    $node = new stdClass();
    $node->title = $val->name;
    $node->type = "itg_solr_video";
    node_object_prepare($node); //Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE;
    $node->field_video_id[LANGUAGE_NONE][0]['value'] = $val->video_id;
    $node->field_property [LANGUAGE_NONE][0]['value'] = VIDEO_PROPERTY;
    $node->field_video_duration [LANGUAGE_NONE][0]['value'] = $val->video_duration;
    $node->field_video_used [LANGUAGE_NONE][0]['value'] = $val->dailymotion_published;
    $node->field_video_thumb_url[LANGUAGE_NONE][0]['value'] = $val->dailymotion_thumb_url;
    $node->field_video_size[LANGUAGE_NONE][0]['value'] = $val->video_size;
    $node->uid = $user->uid;
    $node->field_video_time[LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i:s', $val->upload_time);
    $node->status = 1; //(1 or 0): Published or not
    $node->promote = 0; //(1 or 0): Promoted to front page
    $node->comment = 0; // 0 = Comments disabled, 1 = read only, 2 = read/write
    $video_exist_innode = itg_videogallery_get_video_solrcontent($val->video_id);

    if (!empty($video_exist_innode)) {
      $node->nid = $video_exist_innode[0]->nid;
      node_save($node);
    }
    node_save($node);
  }

// Here deleted video
  itg_videogallery_remove_video_with_child();
// This crone use for remove video if parent site remove this video from video article
  itg_videogallery_remove_video_id_parent_site_delete();
// This crone use for if node is publish.
  itg_videogallery_video_draft_node_check();
//Cron use for make publish node after check video status ready to play
  itg_videogallery_publish_node_after_video_ready_by_dm();
}

/* * solr action on node updaet and insert
 * 
 * 
 */

function itg_videogallery_update_video_info_solr($videoid) {
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd');
  $query->condition('video_id', $videoid, '=');
  $result_new = $query->execute()->fetchAll();
  foreach ($result_new as $val) {
    global $user;
    $node = new stdClass();
    $node->title = $val->name;
    $node->type = "itg_solr_video";
    node_object_prepare($node); //Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE;
    $node->field_video_id[LANGUAGE_NONE][0]['value'] = $val->video_id;
    $node->field_property [LANGUAGE_NONE][0]['value'] = VIDEO_PROPERTY;
    $node->field_video_duration [LANGUAGE_NONE][0]['value'] = $val->video_duration;
    $node->field_video_used [LANGUAGE_NONE][0]['value'] = $val->dailymotion_published;
    $node->field_video_thumb_url[LANGUAGE_NONE][0]['value'] = $val->dailymotion_thumb_url;
    $node->field_video_size[LANGUAGE_NONE][0]['value'] = $val->video_size;
    $node->uid = $user->uid;
    $node->field_video_time[LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i:s', $val->upload_time);
    $node->status = 1; //(1 or 0): Published or not
    $node->promote = 0; //(1 or 0): Promoted to front page
    $node->comment = 0; // 0 = Comments disabled, 1 = read only, 2 = read/write
    $video_exist_innode = itg_videogallery_get_video_solrcontent($val->video_id);
    if (!empty($video_exist_innode)) {
      $node->nid = $video_exist_innode[0]->nid;
      node_save($node);
    }
    // need to chane with solr
    node_save($node);
  }
}

/**
 * This function check video id insert in solr video content
 */
function itg_videogallery_get_video_solrcontent($video_id = null) {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->Join('field_data_field_video_id', 'fvd', 'n.nid = fvd.entity_id');
  $query->condition('fvd.field_video_id_value', $video_id, '=');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * This function check video id insert in solr video content
 */
function itg_videogallery_get_node_by_title($title = null) {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->condition('title', $title, '=');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * Implement function for remove files
 */
function itg_videogallery_remove_video() {
  $files = glob('sites/default/files/dailymotion_video_dir/*');
  foreach ($files as $file) {
    if (is_file($file))
      unlink($file);
  }
}

/**
 * Implement function make  node publish after check video status ready to play.
 */
function itg_videogallery_publish_node_after_video_ready_by_dm() {

  $node_video_id = array();
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd', array('nid'));
  $query->addExpression('GROUP_CONCAT(video_id)', 'video_ids');
  $query->condition('drd.is_draft', '1', '=');
  $query->condition('drd.nid', 'null', '!=');
  $query->groupBy('nid');
  $result = $query->execute()->fetchAll();
  $video_ids = array();
  foreach ($result as $key => $video_id) {
    $node_flag = 0;
    $exception_flag = 0;
    $all_vid = explode(',', $video_id->video_ids);

    foreach ($all_vid as $keyof => $dmvid_id) {
      $api = itg_videogallery_dailymotion_api();

      try {
        if ($dmvid_id) {
          $dm_data = $api->get(
              '/video/' . $dmvid_id, array('fields' => array('thumbnail_720_url', 'duration', 'encoding_progress', 'publishing_progress'))
          );
          if ($dm_data['encoding_progress'] == 100 && $dm_data['publishing_progress'] == 100) {
            $query = db_update('dailymotion_response_details');
            $query->fields(array('is_draft' => 0));
            $query->condition('video_id', $dmvid_id, '=');
            $query->execute();
          }
          else {
            $node_flag = 1;
          }
        }
      }
      catch (Exception $e) {

        $exception_flag = 1;
        $video_ids[] = $dmvid_id;
      }
    }
    $node_ids = $video_id->nid;
    if ($exception_flag == 1) {
      if (!empty($video_ids)) {
        $query = db_select('dailymotion_response_details', 'drd');
        $query->fields('drd', array('nid'));
        $query->condition('drd.is_notify', '0', '=');
        $query->condition('video_id', $video_ids, 'IN');
        $result = $query->execute()->fetchAll();
        if (!empty($result)) {
          itg_videogallery_send_video_exception_notification($node_ids, $video_ids);
        }
      }
    }


    if ($node_flag == 0) {
      $node = node_load($node_ids);
      $node->workbench_moderation_state_new = 'published';
      $node->status = 1;

      node_save($node);
    }
  }
}

function itg_videogallery_send_video_exception_notification($nid, $video_ids) {
  global $base_url;
  $node = node_load($nid);
  $node_url = $base_url . '/node/' . $node->nid . '/edit';
  $to_mail = $to;
  $getuserInf = user_load($node->uid);
  $name = ucfirst($getuserInf->field_first_name[LANGUAGE_NONE][0]['value']) . ' ' . ucfirst($getuserInf->field_last_name[LANGUAGE_NONE][0]['value']);
  $email = $getuserInf->email;

  $subject = 'A new ' . $content_type . ' has been unpublished, please find details below.';
  $mail_content = '<div style="max-width: 502px; margin: 0 auto; font-family: sans-serif; color: #000;">
                      <table style="border-collapse: collapse; border: 1px solid #ececec;"> 
                          <tr>
                              <td style="background-color:#ececec;">
                                  <img src="template_logo.png" alt="Indiatoday" />
                              </td>
                          </tr>
                          <tr>
                              <td style="padding: 10px 20px;">
                                  <h2 style="font-size: 18px; margin: 20px 0 30px;">Draft Video Notification :</h2>
                                  <strong style="font-size: 16px;">Dear ' . $name . ',</strong>
                                  <p style="font-size: 16px; color: #595959; margin: 20px 0;"> ' . mb_strimwidth(strip_tags($node->title), 0, 55, "..") . '<strong style="color: #000;">title.</strong></p>
                                  <p style="font-size: 16px; color: #595959; margin: 20px 0;">Geting Some Error from dailymotion while publishing.</p>
                                  <p style="font-size: 16px; color: #595959; margin: 20px 0;"><a href="' . $node_url . '"><span class="btn">Click Here</span> </a>To view this node</p>
                                 <p style="font-size: 16px; color: #595959; margin: 20px 0;"><strong style="color: #000;">Thanks,</strong><br>India Today Team</p>
                              </td>
                          </tr>
                          <tr>
                              <td style="background-color: #000; font-size: 11px; color: #7c7c7c; padding: 10px; text-align: center; font-weight: bold;">COPYRIGHT &copy; 2017 LIVING MEDIA INDIA LIMITED. ALL RIGHT RESERVED.</td>
                          </tr>
                      </table>
                  </div>';

  $mail_content = preg_replace("/\[([^\[\]]++|(?R))*+\]/", "", $mail_node_author);
  $content = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
              <html xmlns:v="urn:schemas-microsoft-com:vml">
                <head><title></title></head>
                <body style="margin:0; padding:0;">';
  $content .= $mail_content;
  $content .= '</body>';
  $content .= '</html>';
  $params = array(
    'body' => $content,
    'subject' => $subject,
  );
  $mail = drupal_mail('itg_workflow', 'send_mail_to_task', $email, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
  if ($mail['result']) {
    $query = db_update('dailymotion_response_details');
    $query->fields(array('is_notify' => '1'));
    $query->condition('video_id', $video_ids, 'IN');
    $query->execute();
  }
}

/**
 * Implement cron function for add video thumb from dailymotion
 */
function itg_videogallery_thumb_assign() {
  $filedir = ITG_IMAGE_FOLDER . 'video/' . date('Ym');
  if (!file_exists(file_default_scheme() . '://' . $filedir)) {
    mkdir(file_default_scheme() . '://' . $filedir, 0777, TRUE);
  }
  chmod(file_default_scheme() . '://' . $filedir, 0777, TRUE);
  $mainresult = array();
  $query = db_select('field_data_field_videogallery_video_upload', 'up_video');
  $query->fields('up_video', array('entity_id'));
  $query->join('dailymotion_response_details', 'drd', 'drd.fid = up_video.field_videogallery_video_upload_fid');
  $query->join('field_data_field_video_upload', 'fvd', 'fvd.field_video_upload_value = up_video.entity_id');
  $query->fields('fvd', array('entity_id'));
  $query->fields('drd', array('fid', 'video_id', 'dailymotion_thumb_url'));
  $query->fields('up_video', array('entity_id'));
  $query->orderBy('entity_id', 'desc');
  $query->distinct('fvd.entity_id');
  $result = $query->execute()->fetchAll();
  foreach ($result as $data_reslut) {
    $mainresult[$data_reslut->fvd_entity_id] = $data_reslut;
  }

  if (isset($mainresult) && !empty($mainresult)) {

    $api = itg_videogallery_dailymotion_api();
    foreach ($mainresult as $val) {

      $thumb_url = $api->get(
          '/video/' . $val->video_id, array('fields' => array('thumbnail_720_url', 'duration'))
      );

      $node = node_load($val->fvd_entity_id);
      if ($thumb_url['duration'] > 0) {
        $duration = '';
        if ($thumb_url['duration'] < 3600) {
          $duration = gmdate("i:s", $thumb_url['duration']);
        }
        else {
          $duration = gmdate("H:i:s", $thumb_url['duration']);
        }
        $node->field_video_duration[LANGUAGE_NONE][0]['value'] = $duration;
        field_attach_update('node', $node);
      }

// assign image in field after resize
      if ($node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'] == 0 || $node->field_story_large_image[LANGUAGE_NONE][0]['fid'] == 0 || $node->field_story_medium_image[LANGUAGE_NONE][0]['fid'] == 0 || $node->field_story_small_image[LANGUAGE_NONE][0]['fid'] == 0 || $node->field_story_extra_small_image[LANGUAGE_NONE][0]['fid'] == 0 || $node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'] == "" || $node->field_story_large_image[LANGUAGE_NONE][0]['fid'] == "" || $node->field_story_medium_image[LANGUAGE_NONE][0]['fid'] == "" || $node->field_story_small_image[LANGUAGE_NONE][0]['fid'] == "" || $node->field_story_extra_small_image[LANGUAGE_NONE][0]['fid'] == "") {
        $image_url = $thumb_url['thumbnail_720_url'];
        $imagedata = file_get_contents($image_url);
        $image_url = 'itg' . time() . end(explode('/', $image_url));
        $image_extension = end(explode('.', $image_url));
        $file_data_temp = file_save_data($imagedata, file_default_scheme() . '://' . $image_url);

// This code for resize all images 
        if ($node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'] == 0 || $node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'] == "") {
          $file_image = file_load($file_data_temp->fid);
          $image = image_load($file_image->uri);
          $filepath = file_default_scheme() . '://' . $filedir;
          $scaled = image_scale_and_crop($image, EXTRA_LARGE_IMAGE_WIDTH, EXTRA_LARGE_IMAGE_HEIGHT);
          $image_name = $image_name . time();
          $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
          $uri = $filepath . '/' . $image_name . '.' . $image_extension;
          $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
          $file = new StdClass;
          $file->uid = $user->uid;
          $file->filename = basename($uri);
          $file->uri = $uri;
          $file->filemime = file_get_mimetype($uri);
          $file->filesize = @filesize($uri);
          $file->timestamp = REQUEST_TIME;
          $file->is_new = TRUE;
          $file->status = FILE_STATUS_PERMANENT;
          $file = file_save($file);
          file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
          $node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'] = $file->fid;
          field_attach_update('node', $node);
        }

        if ($node->field_story_large_image[LANGUAGE_NONE][0]['fid'] == 0 || $node->field_story_large_image[LANGUAGE_NONE][0]['fid'] == "") {
          $file_image = file_load($file_data_temp->fid);
          $image = image_load($file_image->uri);
          $filepath = file_default_scheme() . '://' . $filedir;
          $scaled = image_scale_and_crop($image, LARGE_IMAGE_WIDTH, LARGE_IMAGE_HEIGHT);
          $image_name = $image_name . time();
          $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
          $uri = $filepath . '/' . $image_name . '.' . $image_extension;
          $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
          $file = new StdClass;
          $file->uid = $user->uid;
          $file->filename = basename($uri);
          $file->uri = $uri;
          $file->filemime = file_get_mimetype($uri);
          $file->filesize = @filesize($uri);
          $file->timestamp = REQUEST_TIME;
          $file->is_new = TRUE;
          $file->status = FILE_STATUS_PERMANENT;
          $file = file_save($file);
          file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
          $node->field_story_large_image[LANGUAGE_NONE][0]['fid'] = $file->fid;
          field_attach_update('node', $node);
        }
        if ($node->field_story_medium_image[LANGUAGE_NONE][0]['fid'] == 0 || $node->field_story_medium_image[LANGUAGE_NONE][0]['fid'] == "") {
          $file_image = file_load($file_data_temp->fid);
          $image = image_load($file_image->uri);
          $filepath = file_default_scheme() . '://' . $filedir;
          $scaled = image_scale_and_crop($image, MEDIUM_IMAGE_WIDTH, MEDIUM_IMAGE_HEIGHT);
          $image_name = $image_name . time();
          $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
          $uri = $filepath . '/' . $image_name . '.' . $image_extension;
          $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
          $file = new StdClass;
          $file->uid = $user->uid;
          $file->filename = basename($uri);
          $file->uri = $uri;
          $file->filemime = file_get_mimetype($uri);
          $file->filesize = @filesize($uri);
          $file->timestamp = REQUEST_TIME;
          $file->is_new = TRUE;
          $file->status = FILE_STATUS_PERMANENT;
          $file = file_save($file);
          file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
          $node->field_story_medium_image[LANGUAGE_NONE][0]['fid'] = $file->fid;
          field_attach_update('node', $node);
        }

        if ($node->field_story_small_image[LANGUAGE_NONE][0]['fid'] == 0 || $node->field_story_small_image[LANGUAGE_NONE][0]['fid'] == "") {
          $file_image = file_load($file_data_temp->fid);
          $image = image_load($file_image->uri);
          $filepath = file_default_scheme() . '://' . $filedir;
          $scaled = image_scale_and_crop($image, SMALL_IMAGE_WIDTH, SMALL_IMAGE_HEIGHT);
          $image_name = $image_name . time();
          $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
          $uri = $filepath . '/' . $image_name . '.' . $image_extension;
          $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
          $file = new StdClass;
          $file->uid = $user->uid;
          $file->filename = basename($uri);
          $file->uri = $uri;
          $file->filemime = file_get_mimetype($uri);
          $file->filesize = @filesize($uri);
          $file->timestamp = REQUEST_TIME;
          $file->is_new = TRUE;
          $file->status = FILE_STATUS_PERMANENT;
          $file = file_save($file);
          file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
          $node->field_story_small_image[LANGUAGE_NONE][0]['fid'] = $file->fid;
          field_attach_update('node', $node);
        }
        if ($node->field_story_extra_small_image[LANGUAGE_NONE][0]['fid'] == 0 || $node->field_story_extra_small_image[LANGUAGE_NONE][0]['fid'] == "") {
          $file_image = file_load($file_data_temp->fid);
          $image = image_load($file_image->uri);
          $filepath = file_default_scheme() . '://' . $filedir;
          $scaled = image_scale_and_crop($image, EXTRA_SMALL_IMAGE_WIDTH, EXTRA_SMALL_IMAGE_HEIGHT);
          $image_name = $image_name . time();
          $sav = image_save($image, $filepath . '/' . $image_name . '.' . $image_extension);
          $uri = $filepath . '/' . $image_name . '.' . $image_extension;
          $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
          $file = new StdClass;
          $file->uid = $user->uid;
          $file->filename = basename($uri);
          $file->uri = $uri;
          $file->filemime = file_get_mimetype($uri);
          $file->filesize = @filesize($uri);
          $file->timestamp = REQUEST_TIME;
          $file->is_new = TRUE;
          $file->status = FILE_STATUS_PERMANENT;
          $file = file_save($file);
          file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
          $node->field_story_extra_small_image[LANGUAGE_NONE][0]['fid'] = $file->fid;
          field_attach_update('node', $node);
        }
      }
    }
  }
}

/**
 * This function use to get filed collection of video data
 */
function get_video_filed_collection_by_its_id($entity_fid) {
  $query = db_select('field_data_field_videogallery_video_upload', 'fvd');
  $query->fields('fvd', array('field_videogallery_video_upload_fid', 'field_videogallery_video_upload_description'));
  $query->leftJoin('field_data_field_include_ads', 'ads_inc', 'ads_inc.entity_id = fvd.entity_id');
  $query->leftJoin('`field_data_field_video_private', 'private_vid', 'private_vid.entity_id = fvd.entity_id');
  $query->leftJoin('field_data_field_videogallery_description', 'desc_inc', 'desc_inc.entity_id = fvd.entity_id');
  $query->fields('ads_inc', array('field_include_ads_value'));
  $query->fields('private_vid', array('field_video_private_value'));
  $query->fields('desc_inc', array('field_videogallery_description_value'));
  $query->condition('fvd.entity_id', $entity_fid);
  $result_video = $query->execute()->fetchAll();

  return $result_video;
}

/**
 * This is temp function use for move Dailymotion send video to ftv Archive
 */
function itg_videogallery_move_ftp_videos() {
  global $user;
  module_load_include('inc', 'itg_videogallery', 'includes/itg_videogallery_aws_s3');
  $api = itg_videogallery_dailymotion_api();
  $totime = strtotime('-2 days', time());
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd');
  $query->condition('upload_time', $totime, '>=');
  $result = $query->execute()->fetchall();
  $connection_id = itg_videogallery_ftp_video_list();
  ftp_pasv($connection_id, true);
  $ftp_video_folder = variable_get('ftp_upload_video_folder', '');
  $ftp_move_archive = variable_get('ftp_move_archive', '');
  foreach ($result as $ke => $vid) {

    if ($vid->type == 'ftp') {
      $datefolder = date('Y-m', $vid->upload_time);
      $file_name = '/public_html/' . $ftp_video_folder . '/' . $vid->name;
      $file_name_to_folder = '/public_html/' . $ftp_move_archive . '/' . $datefolder . '/';
      $file_name_to_folder_file = '/public_html/' . $ftp_move_archive . '/' . $datefolder . '/' . $vid->name;
      $ftp_exist = ftp_chdir($connection_id, $file_name_to_folder);

      if (!$ftp_exist) {
        ftp_mkdir($connection_id, $file_name_to_folder);
      }
      if (ftp_rename($connection_id, $file_name, $file_name_to_folder_file)) {
//ftp_delete($connection_id, $file_name);
      }
    }

    if ($vid->type == 'S3') {
      $datefolder = date('Y-m', $vid->upload_time);

      $pav = itg_video_copy_onfile_to_anoter($vid->name, $datefolder);
    }
  }
}

/**
 * This function use for get bitrates info,
 * 
 */
function itg_videogallery_url_with_bitates() {
  $bitrates = array();
  $bitrates['framesize']['stream_h264_l1_url'] = '176x144';
  $bitrates['framesize']['stream_h264_l2_url'] = '176x144';
  $bitrates['framesize']['stream_h264_ld_url'] = '320x240';
  $bitrates['framesize']['stream_h264_url'] = '512x384';
  $bitrates['framesize']['stream_h264_hq_url'] = '848x480';
  $bitrates['framesize']['stream_h264_hd_url'] = '1280x720';
  $bitrates['framesize']['stream_h264_hd1080_url'] = '1920x1080';
  $bitrates['framesize']['stream_h264_qhd_url'] = '2560x1440';
  $bitrates['framesize']['stream_h264_uhd_url'] = '3840x2160';

  $bitrates['bitrate']['stream_h264_l1_url'] = '60';
  $bitrates['bitrate']['stream_h264_l2_url'] = '106';
  $bitrates['bitrate']['stream_h264_ld_url'] = '256';
  $bitrates['bitrate']['stream_h264_url'] = '460';
  $bitrates['bitrate']['stream_h264_hq_url'] = '845';
  $bitrates['bitrate']['stream_h264_hd_url'] = '2100';
  $bitrates['bitrate']['stream_h264_hd1080_url'] = '6200';
  $bitrates['bitrate']['stream_h264_qhd_url'] = '10400';
  $bitrates['bitrate']['stream_h264_uhd_url'] = '16500';
  return $bitrates;
}

/**
 * This is temp function use for test dailymotion video resploce no we will 
 */
function itg_videogallery_video_bitrate() {
  $api = itg_videogallery_dailymotion_api();
  $totime = strtotime('-2 days', time());
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd', array('video_id', 'encoding_progress', 'name', 'video_duration'));
  $query->condition('encoding_progress', '100', '=');
  $query->condition('upload_time', $totime, '>=');
  $result = $query->execute()->fetchall();
  $bitrates_info = itg_videogallery_url_with_bitates();

  foreach ($result as $ke => $vid) {
    itg_videogallery_update_embedcode_url($vid->video_id);
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "http://www.dailymotion.com/json/video/" . $vid->video_id . "?fields=stream_h264_hd1080_url,stream_h264_hd_url,stream_h264_hq_url,stream_h264_ld_url,stream_h264_url");
    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.9) Gecko/20071025 Firefox/2.0.0.9');
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, false);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $content = curl_exec($ch);
    $decode_json = json_decode($content);
    curl_close($ch);
    if (!empty($content)) {
      foreach ($decode_json as $keys => $json_url) {
        if ($json_url != "") {
          $query = db_select('itg_video_bitrates_data', 'ivbd');
          $query->fields('ivbd');
          $query->condition('video_id', $vid->video_id);
          $query->condition('bitates_field', $keys);
          $result = $query->execute()->fetchall();
          if (!empty($result)) {
            if ($result[0]->is_download != 1) {
              db_update('itg_video_bitrates_data')
                  ->fields(array(
                    'video_id' => $vid->video_id,
                    'bitate_url' => $json_url,
                    'duration' => $vid->video_duration,
                    'framesize' => $bitrates_info['framesize'][$keys],
                    'bitrate' => $bitrates_info['bitrate'][$keys],
                    'video_name' => $vid->name,
                    'bitates_field' => $keys,
                    'is_download' => 0,
                  ))->condition('id', $result[0]->id)
                  ->execute();
            }
          }
          else {
            db_insert('itg_video_bitrates_data')
                ->fields(array(
                  'video_id' => $vid->video_id,
                  'bitate_url' => $json_url,
                  'framesize' => $bitrates_info['framesize'][$keys],
                  'bitrate' => $bitrates_info['bitrate'][$keys],
                  'bitates_field' => $keys,
                  'duration' => $vid->video_duration,
                  'video_name' => $vid->name,
                  'is_download' => 0,
                ))
                ->execute();
          }
        }
      }
    }
  }
}

/**
 * This is temp function use for test dailymotion video resploce no we will 
 */
function itg_videogallery_video_update_embeded_url() {
  $api = itg_videogallery_dailymotion_api();
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('solr_video_id', 'video_embedded_url'));
  $result = $query->execute()->fetchall();
  foreach ($result as $vid) {
    if ($vid->video_embedded_url != "") {
      itg_videogallery_update_embedcode_url($vid->solr_video_id);
    }
  }
}

/**
 * This is temp function use for test dailymotion video resploce no we will 
 */
function itg_videogallery_video_update_embeded_url_by_fid($fid) {
  $api = itg_videogallery_dailymotion_api();
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('solr_video_id', 'video_embedded_url'));
  $query->condition('fid', $fid);
  $result = $query->execute()->fetchall();
  foreach ($result as $vid) {
    if ($vid->video_embedded_url != "") {
      itg_videogallery_update_embedcode_url($vid->solr_video_id);
    }
  }
}

/**
 * This is temp function use for test dailymotion video resploce no we will 
 */
function itg_videogallery_video_draft_node_check() {
  $api = itg_videogallery_dailymotion_api();
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('id', 'nid'));
  $query->condition('is_node_draft', 1);
  $query->groupBy('nid');
  $result = $query->execute()->fetchall();
  foreach ($result as $vid) {
    $check_node_status = itg_videogallery_get_node_status($vid->nid);
    if ($check_node_status == 1) {
      $query = db_update('itg_solr_video_info')
          ->fields(array('is_node_draft' => 0));
      $query->condition('nid', $vid->nid);
      $query->execute();
    }
  }
}

/**
 * This function use for get node status
 */
function itg_videogallery_get_node_status($nid) {
  $query = db_select('node', 'n')
      ->fields('n', array('status'))
      ->condition('n.nid', $nid)
      ->execute();
  $result = $query->fetchObject();
  $is_published = $result ? $result->status : FALSE;
  return $is_published;
}

/**
 * This function use for get field colloction data by nid
 * 
 */
function get_video_in_fieldcollection_by_nid($nid) {
  $query = db_select('field_data_field_video_upload', 'up_video');
  $query->join('field_data_field_videogallery_video_upload', 'fvu', 'up_video.field_video_upload_value = fvu.entity_id');
  $query->leftJoin('dailymotion_response_details', 'drd', 'drd.fid = fvu.field_videogallery_video_upload_fid');
  $query->Join('itg_solr_video_info', 'isvi', 'isvi.fid = fvu.field_videogallery_video_upload_fid');
  $query->leftJoin('field_data_field_include_ads', 'ads_inc', 'ads_inc.entity_id = fvu.entity_id');
// $query->leftJoin('field_data_field_videogallery_description', 'desc_inc', 'desc_inc.entity_id = fvu.entity_id');
  $query->leftJoin('field_data_field_video_title', 'desc_inc', 'desc_inc.entity_id = fvu.entity_id');
  $query->fields('drd', array('fid', 'video_id', 'dailymotion_thumb_url'));
  $query->fields('isvi', array('fid', 'solr_video_id', 'solr_video_thumb', 'video_embedded_url'));
  $query->fields('up_video', array('entity_id'));
  $query->fields('ads_inc', array('field_include_ads_value'));
  $query->fields('desc_inc', array('field_video_title_value'));
  $query->condition('up_video.entity_id', $nid);
  $query->orderBy('up_video.delta', 'ASC');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * This function use for get field colloction data by nid
 * 
 */
function get_video_in_fieldcollection_by_nid_mirtaed($nid) {
  $query = db_select('field_data_field_video_upload', 'up_video');
  $query->join('field_data_field_migrated_video_url', 'fvu', 'up_video.field_video_upload_value = fvu.entity_id');
  $query->leftJoin('field_data_field_include_ads', 'ads_inc', 'ads_inc.entity_id = fvu.entity_id');
  $query->leftJoin('field_data_field_videogallery_description', 'desc_inc', 'desc_inc.entity_id = fvu.entity_id');
  $query->fields('up_video', array('entity_id'));
  $query->fields('fvu', array('field_migrated_video_url_value'));
  $query->fields('ads_inc', array('field_include_ads_value'));
  $query->fields('desc_inc', array('field_videogallery_description_value'));
  $query->condition('up_video.entity_id', $nid);
  $query->orderBy('field_video_upload_value', 'ASC');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * Implements function for get videoid by file id
 * @param int $fid
 */
function itg_videogallery_get_videoid($fid) {
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd', array('video_id'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for get videoid by file id
 * @param int $fid
 */
function itg_videogallery_get_video_info_video_id($video_id) {
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd', array('fid'));
  $query->condition('video_id', $video_id, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for get videoid by file id
 * @param int $fid
 */
function itg_videogallery_get_videoid_new_private($fid) {
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('video_embedded_url'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for get videoid by file id
 * @param int $fid
 */
function itg_videogallery_get_videoid_new($fid) {
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('solr_video_id'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for get options for FTP file list
 * @return array
 */
function itg_videogallery_ftp_file_insert() {
  $file_path = drupal_realpath('public://');
  $connection_id = itg_videogallery_ftp_video_list();
  ftp_pasv($connection_id, true);
  $ftp_video_folder = variable_get('ftp_upload_video_folder', '');
  $ftp_files = ftp_nlist($connection_id, "/public_html/" . $ftp_video_folder . "/");

  ftp_close($connection_id);
  foreach ($ftp_files as $files) {
    $file_array = explode('/public_html/' . $ftp_video_folder . '/', $files);
    $path_info = pathinfo($file_array[1]);
    $extension = $path_info['extension'];
    if (isset($extension) && $extension == 'mp4') {
      itg_video_check_exist_file_browse($file_array[1]);
    }
  }
}

/**
 * Implements function for get all files from directory
 * @param string $dir
 * @param array $results
 *
 * @return array
 */
function itg_videogallery_dir_content($dir, &$results = array()) {
  $files = scandir($dir);
  foreach ($files as $key => $value) {
    $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
    if (!is_dir($path)) {
      $results[] = $path;
    }
    elseif ($value != "." && $value != "..") {
      get_dir_content($path, $results);
      $results[] = $path;
    }
  }

  return $results;
}

/**
 * Implements function check exist filename
 * @param array $form
 * @param array $form_state
 * @return string
 */
function itg_video_check_exist_file_browse($filename) {
  global $user;
  $connection_id = itg_videogallery_ftp_video_list();
  $ftp_video_folder = variable_get('ftp_upload_video_folder', '');
  ftp_pasv($connection_id, true);
  $ftp_files = ftp_nlist($connection_id, "/public_html/" . $ftp_video_folder . "/");
  $results = itg_videogallery_getfile_details($filename);
  if ($results == '' && empty($results)) {
    $file_size = ftp_size($connection_id, '/public_html/' . $ftp_video_folder . '/' . $filename);
    if ($res != -1) {
      $path_info = pathinfo($filename);
      $extension = $path_info['extension'];
      if (isset($extension) && $extension == 'mp4') {
        $uri = 'public://dailymotion_video_dir/' . $filename;
        $fid = db_insert('file_managed')
            ->fields(array(
              'uid' => $user->uid,
              'filename' => $filename,
              'uri' => $uri,
              'filemime' => file_get_mimetype($uri),
              'filesize' => $file_size,
              'status' => 1,
              'timestamp' => REQUEST_TIME,
            ))
            ->execute();
        $file = file_load($fid);
        file_usage_add($file, 'itg_videogallery', 'file', $file->fid);

// Entry for FTP Video
        db_insert('itg_dailymotion_ftp_video')
            ->fields(array(
              'fid' => $fid,
            ))
            ->execute();
      }
    }
  }
  ftp_close($connection_id);
  return $results;
}

/**
 * Implements function for get FTP exist file
 * @param string $filename
 * @return array
 */
function itg_videogallery_getfile_details($filename) {
  $uri = 'public://dailymotion_video_dir/' . $filename;
  $query = db_select('file_managed', 'fm');
  $query->condition('filename', $filename, '=');
  $query->condition('uri', $uri, '=');
  $query->fields('fm');
  $query->orderBy('fm.fid', 'DESC');
  $query->range(0, 1);
  $results = $query->execute()->fetchAssoc();
  return $results;
}

/**
 * Implements function for get check ftp video
 * @param int $fid
 * @return array
 */
function itg_videogallery_check_ftp_video($fid) {
  $query = db_select('itg_dailymotion_ftp_video', 'ftp');
  $query->fields('ftp', array('fid'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for ftp connection.
 */
function itg_videogallery_ftp_video_list() {
  $ftp_server = variable_get('dailymotion_ftp_host', '');
  $ftp_user_name = variable_get('dailymotion_ftp_username', '');
  $ftp_user_pass = variable_get('dailymotion_ftp_password', '');
  $conn_id = ftp_connect($ftp_server);
  $login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);
  if ((!$conn_id) || (!$login_result)) {
    watchdog("WATCHDOG_INFO_video", "FTP connection has failed");
  }
  return $conn_id;
}

/**
 * Implement function for tid from layout_tpl_manager
 */
function itg_videogallery_ftp_video_post($sid, $template, $widget_name) {
  $query = db_select('itg_layout_tpl', 'ilt');
  $query->join('itg_layout_manager', 'ilm', 'ilt.id = ilm.layout_id');
  $query->join('taxonomy_term_data', 'ttd', 'ttd.tid = ilm.filter_url');
  $query->fields('ilm', array('filter_url'));
  $query->fields('ttd', array('name'));
  $query->condition('ilm.widget_name', $widget_name, '=');
  $query->condition('ilt.template_name', $template, '=');
  $query->condition('ilt.section_name', $sid, '=');
  $query->condition('ilt.status', 1, '=');
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * {@inheritdoc}
 */
function itg_videogallery_node_view($node, $view_mode, $langcode) {
  $os = array("search_index", "amp");
  if ($node->type == 'videogallery' && !in_array($view_mode, $os)) {
// Category view on landing page
    drupal_add_js("jQuery('#block-itg-videogallery-videogallery-menu-video-block ul li').live('click', function(){
var section_id = jQuery(this).val();
jQuery('#block-itg-videogallery-videogallery-menu-video-block ul li a').removeClass('active');
jQuery('#edit-field-story-category-tid').val(section_id); 
jQuery('#edit-field-story-category-tid').trigger('change');
jQuery(this).find('a').addClass('active');
});", array('type' => 'inline', 'scope' => 'footer'));
    if (!empty($_GET['category'])) {

      drupal_add_js("jQuery(document).ready(function(){
jQuery('#block-itg-videogallery-videogallery-menu-video-block ul li').each(function() {
if(jQuery(this).val() == " . $_GET['category'] . "){
jQuery(this).find('a').addClass('active');
}
});
});", array('type' => 'inline', 'scope' => 'footer'));
    }

// Views render on video template
    if (itg_videogallery_get_categoryparent(@$_GET['category']) == TRUE && empty($_GET['sid'])) {
      $view_output = views_embed_view('video_list_of_category', 'block_3', $_GET['category']);
    }
//elseif ((itg_videogallery_get_categoryparent(@$_GET['category']) == FALSE || itg_videogallery_get_categoryparent($_GET['category']) == TRUE) && isset($_GET['category']) && isset($_GET['sid'])) {
    elseif (isset($_GET['category']) && isset($_GET['sid'])) {
      $view_output = views_embed_view('video_list_of_category', 'block');
    }
    elseif (empty($_GET['sid'])) {
      if (isset($_GET['category']) && itg_videogallery_get_categoryparent($_GET['category']) != TRUE) {
        $view_output = views_embed_view('video_list_of_category', 'block_3', $_GET['category']);
      }
      elseif (empty($_GET['category'])) {
        $tid = itg_videogallery_get_tid_nid(arg(1));
        $view_output = views_embed_view('video_list_of_category', 'block_3', $tid);
      }
    }
    $node->view_output = $view_output;
  }
}

/**
 * Get used video
 */
function itg_videogallery_ajax_ftp_video() {
  $case = $_POST['case'];
  $val = '';
  if ($case == 'used') {
    
  }
  elseif ($case == 'unused') {
    $unused_video = itg_videogallery_ftp_unused_video();
    foreach ($unused_video as $key => $un_video) {
      $video_image = "";
      if ($un_video['thumb_url'] != "") {
        $video_image = '<img src="' . $un_video['thumb_url'] . '" alt="" />';
      }
      if ($_POST['value_type'] == '1') {
        $val .= '<span class="ftp_video_radio"><input id = "video_id_' . $key . '" type="radio" name="video-form" class="form-radio" value="' . $key . '"/><label for = "video_id_' . $key . '">' . $video_image . $un_video['filename'] . '<span class="file_size">' . $un_video['filesize'] . ' MB</span></label></span>';
      }
      else {
        $val .= '<span class="ftp_video_radio"><input id = "video_id_' . $key . '" type="checkbox" name="video-form" class="form-radio" value="' . $key . '"/><label for = "video_id_' . $key . '">' . $video_image . $un_video['filename'] . '<span class="file_size">' . $un_video['filesize'] . ' MB</span></label></span>';
      }
    }
  }
  if (empty($val)) {
    $val = "Result not found.";
  }

  echo '<div id="edit-video-browse-select">' . $val . '</div><script>jQuery("#edit-video-browse-select").easyPaginate({
    paginateElement: ".ftp_video_radio",
    elementsPerPage: 21,
    effect: "climb"
  });</script>';
}

/**
 * Implements function for time filter ajax
 */
function itg_videogallery_ajax_time_filter_video() {
  $ajax_data = $_POST['back_time'];
  $filters = explode('@', $ajax_data);
  $back_time = $filters[0];
  $searh_key = $filters[1];
  $val = '';
  if ($back_time) {
    if (is_numeric($back_time)) {
      $before_time = time() - (60 * 60 * $back_time);
    }
    elseif ($before_time == '-all-') {
      $before_time = '-all-';
    }
    $used_video = itg_videogallery_ftp_used_video($before_time, $searh_key);
    foreach ($used_video as $key => $u_video) {

      $val .= '<span class="ftp_video_radio"><input id = "video_id_' . $key . '" type="checkbox" name="video-form" class="form-radio" value="' . $key . '"/><label for = "video_id_' . $key . '">' . '<img src="' . $u_video['thumb_url'] . '" alt="" />' . $u_video['filename'] . '<span class="file_size">' . $u_video['filesize'] . ' MB</span></label></span>';
    }
  }
  if (empty($val)) {
    $val = "Result not found.";
  }

  echo '<div id="edit-video-browse-select">' . $val . '</div><script>jQuery("#edit-video-browse-select").easyPaginate({
    paginateElement: ".ftp_video_radio",
    elementsPerPage: 21,
    effect: "climb"
  });</script>';
}

/**
 * Implements function for video search filter ajax
 */
function itg_videogallery_ajax_time_search_video() {
  $ajax_data = $_POST['back_time'];
  $filters = explode('@', $ajax_data);
  $search_key = $filters[1];
  if ($filters[0] == 'used') {
    $back_time = $filters[2];
    $val = '';
    if ($back_time) {
      if (is_numeric($back_time)) {
        $before_time = time() - (60 * 60 * $back_time);
      }
      elseif ($back_time == '-all-') {
        $before_time = '-all-';
      }
      $used_video = itg_videogallery_ftp_used_video($before_time, $search_key);
      foreach ($used_video as $key => $u_video) {
        $val .= '<span class="ftp_video_radio"><input id = "video_id_' . $key . '" type="checkbox" name="video-form" class="form-radio" value="' . $key . '"/><label for = "video_id_' . $key . '">' . '<img src="' . $u_video['thumb_url'] . '" alt="" />' . $u_video['filename'] . '<span class="file_size">' . $u_video['filesize'] . ' MB</span></label></span>';
      }
    }
  }
  elseif ($filters[0] == 'unused') {
    $unused_video = itg_videogallery_ftp_unused_video($search_key);
    foreach ($unused_video as $key => $un_video) {
      if ($un_video['thumb_url'] != "") {
        $video_image = '<img src="' . $un_video['thumb_url'] . '" alt="" />';
      }
      if ($_POST['value_type'] == '1') {
        $val .= '<span class="ftp_video_radio"><input id = "video_id_' . $key . '" type="radio" name="video-form" class="form-radio" value="' . $key . '"/><label for = "video_id_' . $key . '">' . $video_image . $un_video['filename'] . '<span class="file_size">' . $un_video['filesize'] . ' MB</span></label></span>';
      }
      else {
        $val .= '<span class="ftp_video_radio"><input id = "video_id_' . $key . '" type="checkbox" name="video-form" class="form-radio" value="' . $key . '"/><label for = "video_id_' . $key . '">' . $video_image . $un_video['filename'] . '<span class="file_size">' . $un_video['filesize'] . ' MB</span></label></span>';
      }
    }
  }
  if (empty($val)) {
    $val = "Result not found.";
  }

  echo '<div id="edit-video-browse-select">' . $val . '</div><script>jQuery("#edit-video-browse-select").easyPaginate({
      paginateElement: ".ftp_video_radio",
      elementsPerPage: 21,
      effect: "climb"
    });</script>';
}

/**
 * Implement function for get used video on FTP
 * @return array new function
 */
function itg_videogallery_ftp_used_video($before_time = NULL, $searh_key = NULL) {
  $query = db_select('file_managed', 'fm');
  $query->fields('fm', array('fid', 'filesize', 'filename'));
  $query->Join('file_usage', 'fu', 'fu.fid = fm.fid');
  $query->join('dailymotion_response_details', 'drd', 'drd.fid = fm.fid');
  $query->fields('drd', array('dailymotion_thumb_url'));
  $query->distinct();
  $query->condition('fu.type', 'node', '=');
  $query->condition('uri', db_like('public://dailymotion_video_dir/') . '%', LIKE);
  $db_or = db_or();
  $db_or->condition('drd.dailymotion_thumb_url', 'deleted_video_dailymotion', '!=');
  $db_or->condition(db_or()->isNull('drd.dailymotion_thumb_url'));
  $query->condition($db_or);
  if (!empty($before_time) && is_numeric($before_time)) {
    $query->condition('drd.upload_time', $before_time, '>');
  }
  if (!empty($searh_key)) {
    $query->condition('fm.filename', '%' . db_like($searh_key) . '%', LIKE);
  }
  $results = $query->execute();

  foreach ($results as $result) {
    $used_video[$result->fid]['filename'] = $result->filename;
    $used_video[$result->fid]['filesize'] = number_format($result->filesize / (1024 * 1024), 2);
    $used_video[$result->fid]['thumb_url'] = $result->dailymotion_thumb_url;
  }
  return $used_video;
}

/**
 * Implement function for get unused video on FTP
 * @return array
 */
function itg_videogallery_ftp_unused_video($search_key = NULL) {

  $query = db_select('file_managed', 'fm');
  $query->fields('fm', array('fid', 'filesize', 'filename'));
  $query->join('dailymotion_response_details', 'drd', 'drd.fid = fm.fid');
  $query->fields('drd');
  $query->distinct();
  $query->condition('drd.type', 'ftp', '=');
  $query->condition('drd.dailymotion_published', 0, '=');
  $query->isNotNull('drd.dailymotion_thumb_url');
  $query->condition('drd.video_duration', 0, '!=');
  if ($search_key != "") {
    $query->condition('drd.name', '%' . db_like($search_key) . '%', LIKE);
  }
  $query->orderBy('eid', 'DESC');
  $results = $query->execute();
  foreach ($results as $result) {
    $unused_video[$result->fid]['filename'] = $result->name;
    $unused_video[$result->fid]['thumb_url'] = $result->dailymotion_thumb_url;
    $unused_video[$result->fid]['filesize'] = number_format($result->filesize / (1024 * 1024), 2);
  }
  return $unused_video;
}

/**
 * Implements function for get unused files.
 * @param string $filename
 * @return array
 */
function itg_videogallery_ftp_unused_file($filename, $search_key = NULL) {
  $query = db_select('file_managed', 'fm');
  $query->fields('fm', array('fid'));
  $query->Join('file_usage', 'fu', 'fu.fid = fm.fid');
  $query->join('dailymotion_response_details', 'drd', 'drd.fid = fm.fid');
  $query->fields('fu', array('fid'));
  $query->distinct();
  $query->condition('fu.type', 'node', '=');
  $query->condition('uri', db_like('public://dailymotion_video_dir/') . '%', LIKE);
  $result = $query->execute();
  foreach ($result as $rel) {
    $used_fid[] = $rel->fid;
  }
  $query = db_select('file_managed', 'fm');
  $query->fields('fm', array('fid'));
  $query->Join('file_usage', 'fu', 'fu.fid = fm.fid');
  $query->fields('fm', array('fid', 'filename', 'filesize'));
  $query->distinct();
  $query->condition('fu.type', 'file', '=');
  $query->condition('fm.fid', $used_fid, 'NOT IN');
  $query->condition('fm.uri', $filename, 'IN');
  if (!empty($search_key)) {
    $query->condition('fm.filename', '%' . db_like($search_key) . '%', LIKE);
  }
  $result_unused = $query->execute()->fetchAll();
  return $result_unused;
}

/**
 * Implements hook_views_query_alter()
 * {@inheritdoc}
 */
function itg_videogallery_views_query_alter(&$view, &$query) {
  if ($view->name == 'video_landing_header' && $view->current_display == 'block_1') {
    if (isset($_GET['category']) && is_numeric($_GET['category'])) {
      $parent = taxonomy_get_parents($_GET['category']);
      $key = key($parent);
//$parent_name = $parent[$key]->name;
      if (!empty($parent[$key]->name) && $parent[$key]->name == 'program' && empty($_GET['sid']) && empty($_GET['category'])) {
        $query->where[0]['conditions'][0]['value'][':field_data_field_story_category_field_story_category_tid'] = NULL;
      }
    }
  }
// Handle filter for videogallery views
  if ($view->name == 'videogallery_management' && $view->current_display == 'page_1') {
    if (isset($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == 'migrated') {
      $query->add_where(1, 'field_data_field_story_source_type.field_story_source_type_value', 'migrated', '=');
    }
    if (isset($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == 'videogallery') {
      $query->add_where(1, 'field_data_field_story_source_type.field_story_source_type_value', 'migrated', '!=');
    }
  }

// Handle filter for photogallery views
  if ($view->name == 'photo_gallery_management' && $view->current_display == 'page_1') {
    if (isset($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == 'migrated') {
      $query->add_where(1, 'field_data_field_story_source_type.field_story_source_type_value', 'migrated', '=');
    }
    if (isset($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == 'photogallery') {
      $query->add_where(1, 'field_data_field_story_source_type.field_story_source_type_value', 'migrated', '!=');
    }
  }

// video loading issue resolve
  if ($view->name == "video_list_of_category" && $view->current_display == 'block') {
    if (!empty($query->where[1]['conditions'][2]['value']) && isset($query->where[1]['conditions'][2])) {
      unset($query->where[0]);
    }
  }
}

/**
 * Implements function for check tid parent program
 * @param type int
 * @return boolean
 */
function itg_videogallery_get_categoryparent($tid) {
  $parent = taxonomy_get_parents($tid);
  $parent_tid = key($parent);
  $program_tid = variable_get('program_category_id_for_programmes');
//$key = key($parent);
// $parent_name = $parent[$key]->name;
  if ($program_tid == $parent_tid) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements function for check tid parent program
 * @param type int
 * @return boolean
 */
function itg_videogallery_get_term($nid) {
  $return = array();
  $query = db_select('field_data_field_story_category', 'iwo');
  $query->condition('iwo.entity_id', $nid)
      ->fields('iwo', array('field_story_category_tid'));
  $result = $query->execute();
  foreach ($result as $key => $value) {
    $return[] = $value->field_story_category_tid;
  }
  return $return;
}

/**
 * Implements function for get tid by nid
 * @param int $nid
 * @return int
 */
function itg_videogallery_get_tid_nid($nid) {
  $node = node_load($nid);
  return $node->field_story_category[LANGUAGE_NONE][0]['tid'];
}

/**
 * Implement function for get term name
 * @param int $tid
 */
function itg_videogallery_get_term_name($tid) {
  $query = db_select('taxonomy_term_data', 'ttd');
  $query->fields('ttd', array('name'));
  $query->condition('ttd.tid', $tid, '=');
  $result = $query->execute()->fetchField();
  return strtoupper($result);
}

/**
 * Implements hook_field_attach_form().
 * {@inheritdoc}
 */
function itg_videogallery_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $options = array('language' => field_valid_language($langcode));
// Merge default options.
  $default_options = array(
    'default' => FALSE,
    'deleted' => FALSE,
    'language' => NULL,
  );
  $options += $default_options;
  list($a, $b, $bundle) = entity_extract_ids($entity_type, $entity);

  $instances = _field_invoke_get_instances($entity_type, $bundle, $options);
// Iterate through the instances.
  $return = array();
  foreach ($instances as $instance) {
    $field = field_info_field_by_id($instance['field_id']);
    $field_name = $field['field_name'];
//If we are looking at our field type and specific widget type, and we are multiple entries
    if (($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) && ($field['type'] == "field_collection")) {
      if ($field['bundles']['node'][0] == "videogallery") {
//  drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/upload.js', array('weight' => 2));
// Check just in case the button is here, and add another #submit function
        if (isset($form[$field['field_name']]['und']['add_more'])) {
// add a simple select list, this defaults to numb 3
          $form[$field['field_name']]['add_more_number'] = array(
            '#type' => 'select',
            '#options' => drupal_map_assoc(range(0, 20)),
            '#default_value' => 1,
            '#attributes' => array('style' => 'display:none;'),
          );

          $form[$field['field_name']]['file_entity_holder_nums'] = array(
            '#type' => 'textfield',
            '#default_value' => '',
            '#attributes' => array('style' => 'display:none;'),
          );


          $form[$field['field_name']]['und']['add_more']['#submit'][] = 'itg_videogallery_field_add_more_submit';
        }
      }
    }
  }
}

/**
 * Implements hook_form_submit().
 * @global object $user
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_field_add_more_submit($form, &$form_state) {
  global $user;

  $button = $form_state['triggering_element'];
// Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];

// Alter the number of widgets to show. items_count = 0 means 1.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
//get the number from the select
  $numbtoadd = $form[$field_name]['add_more_number']['#value'];
  $file_entity_holder_nums = $form[$field_name]['file_entity_holder_nums']['#value'];

  if ($numbtoadd) {
    $field_state['items_count'] += $numbtoadd - 1;
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
    $form_state['rebuild'] = TRUE;
  }
  $node = drupal_rebuild_form('videogallery_node_form', $form_state, $old_form = NULL);
  $fids = array();
  $mydir = 'public://dailymotion_video_dir';
  file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
  foreach ($node['upload']['#value'] as $audio) {
    $scheme = variable_get('file_default_scheme', 'public') . '://dailymotion_video_dir/';
    $source = $audio['tmppath'];
    $uri = itg_audio_check_exist_file($audio['name']);
    $newuri = explode('//dailymotion_video_dir/', $uri);
    $directory = '';
    $destination = file_stream_wrapper_uri_normalize($scheme . $directory . $newuri[1]);
    $destination = file_unmanaged_move($source, $destination);
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $file = new StdClass;
    $file->uid = $user->uid;
    $file->filename = $audio['name'];
    $file->uri = $uri;
    $file->filemime = file_get_mimetype($uri);
    $file->filesize = @filesize($uri);
    $file->timestamp = REQUEST_TIME;
    $file->is_new = TRUE;
    $file->status = 0;
    $fids[] = file_save($file);
  }
  $key_val = 0;
  foreach ($fids as $file_id) {
    $file_ids[$key_val]['fid'] = $file_id->fid;
    $file_ids[$key_val]['filename'] = $file_id->filename;
    $key_val++;
  }
  $i = 0;
  $videogallery_popup_data_fids_array = array();
  if (isset($file_entity_holder_nums) && !empty($file_entity_holder_nums)) {
    $videogallery_popup_data_fids_array = explode(',', $file_entity_holder_nums);
  }

  if (isset($videogallery_popup_data_fids_array) && count($videogallery_popup_data_fids_array) > 0) {

    foreach ($form_state['field']['field_video_upload']['und']['entity'] as $key => $filed_collection) {

      if (!isset($filed_collection->field_videogallery_video_upload['und'])) {

        $form_state['field']['field_video_upload']['und']['entity'][$key]->field_videogallery_video_upload['und'][0]['fid'] = $videogallery_popup_data_fids_array[$i];
        $form_state['field']['field_video_upload']['und']['entity'][$key]->field_video_title['und'][0]['value'] = $_POST['title'];

        $i++;
      }
    }
  }
}

/**
 * Creating a form for uploading single video using FTP popup.
 * @param array $form
 * @param array $form_state
 */
function videogallery_new_fileupload_form($form, &$form_state) {

  $form['videogallery_new_file'] = array(
    '#type' => 'managed_file',
    '#title' => 'Browse file',
    '#description' => t('Allowed extensions: MP4'),
    '#process' => array('file_managed_file_process', 'itg_video_file_managed_file_process'),
    '#upload_location' => 'public://indiatoday/videos/local_upload_video/' . date('Ym') . '/',
    '#upload_validators' => array('file_validate_name' => array(),
      'file_validate_extensions' => array('mp4'),
      'file_validate_size' => array(MAX_FILE_SIZE * 1024 * 1024),
    ),
  );


  return $form;
}

/**
 * This function use for rename the local browse video
 * @param file obj $file
 */
function file_validate_name(stdClass $file) {
  $errors = array();
//generate file name 
  $new_filename = time() . $file->filename;
  $new_filename = preg_replace('/\s+/', '_', $new_filename);
  $file->filename = $new_filename;

//changing file location 
  $destination_dir = "public://dailymotion_video_dir/";

//check if file exists. if exists rename it append incremental number  until the filename is unique

  $file->destination = file_destination($destination_dir . $file->filename, FILE_EXISTS_RENAME);

// If file_destination() returns FALSE then $replace == FILE_EXISTS_ERROR and
// there's an existing file so we need to bail.
  if ($file->destination === FALSE) {
    $errors[] = t('The file %source could not be uploaded because a file by that name already exists in the destination %directory.', array('%source' => $file->source, '%directory' => $destination_dir));
  }

  return $errors;
}

/**
 * This function use for allow file extension .
 */
function itg_video_file_managed_file_process($element) {
  $element['upload']['#attributes']['accept'] = '.mp4';
  return $element;
}

/**
 * itg_videogallery_dailymotion_check_alredy_send() .
 */
function itg_videogallery_dailymotion_check_alredy_send($id) {
  $query = db_select('dailymotion_response_details', 'drd');
  $query->fields('drd');
  $query->condition('title', $id, '=');
  $query->condition('type', 'S3', '=');
  $result_new = $query->execute()->fetchAll();
  return $result_new;
}

/**
 * This method is used to add the video for daily motion from FTP
 * @return array
 */
function itg_videogallery_dailymotion_send_video($real_path) {

  $api = itg_videogallery_dailymotion_api();

  $url = $real_path;
  $file_name = basename($real_path);
  $chek_alredy_insert = itg_videogallery_dailymotion_check_alredy_send($file_name);
  if (empty($chek_alredy_insert)) {

    try {

      $ftp_file = explode('public://dailymotion_video_dir/', $real_path);
      $uri = 'public://dailymotion-ftp/' . $realfilename;
      $url = $real_path;

      $result = $api->post(
          '/me/videos', array(
        'url' => $url,
        'title' => $file_name,
        'channel' => 'tv',
        'private' => 'true',
        'published' => TRUE,
          )
      );
      $dur = $api->get(
          '/video/' . $result['id'], array('fields' => array('duration', 'embed_url', 'encoding_progress', 'publishing_progress'))
      );
      //$result['id'] = end(explode('/', $dur['embed_url']));
      $playlist_id = variable_get('dailymotion_playlist_id');
//  $resp = $api->post('/playlist/'.$playlist_id.'/videos/' . $result['id']);
      $result['duration'] = $dur['duration'];
      $result['name'] = $file_name;

      $result['encoding_progress'] = $dur['encoding_progress'];
      $result['publishing_progress'] = $dur['publishing_progress'];

      $a = new Dailymotion();
      $a->logout();
    }
    catch (Exception $e) {
      if ($e->getMessage() == "This `client_id' doesn't exist.") {
        if (isset($_GET['destination'])) {
          unset($_GET['destination']);
        }
        drupal_set_message(t('API Key is wrong.'), 'error');
      }
      elseif ($e->getMessage() == "Invalid `client_secret'") {
        if (isset($_GET['destination'])) {
          unset($_GET['destination']);
        }
        drupal_set_message(t('Secret Key is wrong.'), 'error');
      }
      elseif ($e->getCode() == 6) {
        if (isset($_GET['destination'])) {
          unset($_GET['destination']);
        }
        drupal_set_message(t('There is some issue with internet connection.'), 'error');
      }
      elseif ($e->getCode() == 400) {
        if (isset($_GET['destination'])) {
          unset($_GET['destination']);
        }
        drupal_get_messages();
        drupal_set_message(t('Do not use space in FTP filename. Please remove and again upload file without space in file name.'), 'error');
      }
      else {
        drupal_set_message($e->getMessage(), 'error');
      }
    }
  }

  return $result;
}

/**
 * Implements function for get options for Local FTP file list and used
 * @return array
 */
function itg_videogallery_dm_to_s3() {
  module_load_include('inc', 'itg_videogallery', 'includes/itg_videogallery_aws_s3');
  global $user;

  $query = db_select('itg_video_bitrates_data', 'ivbd');
  $query->fields('ivbd');
  $query->condition('is_download', '0', '=');
  $result = $query->execute()->fetchall();
  foreach ($result as $key => $value) {
    if (!empty($value->bitate_url)) {
      $video_urlsdata = $value->video_id . '_' . $value->bitrate . '.mp4';
      $senddata = itg_video_send_dm_to_s3($value->bitate_url, $video_urlsdata);
      if (!empty($senddata)) {
        $node = new stdClass();
        $node->title = $value->video_name;
        $node->type = "itg_bitrates_video";
        node_object_prepare($node); //Invokes hook_prepare() and hook_node_prepare().
        $node->language = LANGUAGE_NONE;
        $node->field_bitrate_video_id[LANGUAGE_NONE][0]['value'] = $value->video_id;
        $node->field_video_url [LANGUAGE_NONE][0]['value'] = $senddata;
        $node->field_video_bitrate [LANGUAGE_NONE][0]['value'] = $value->bitrate;
        $node->field_resolution [LANGUAGE_NONE][0]['value'] = $value->framesize;
        $node->field_bitrate_video_duration [LANGUAGE_NONE][0]['value'] = $value->duration;
        $node->uid = $user->uid;
        $node->status = 1; //(1 or 0): Published or not
        $node->promote = 0; //(1 or 0): Promoted to front page
        node_save($node);
        $query = db_update('itg_video_bitrates_data');
        $query->fields(array('is_download' => 1));
        $query->condition('id', $value->id, '=');
        $query->execute();
      }
    }
  }

// Use the high-level iterators (returns ALL of your objects).
}

/**
 * Implements function for get options for Local FTP file list and used
 * @return array
 */
function itg_videogallery_s3_file_to_dm() {
  global $user;
  module_load_include('inc', 'itg_videogallery', 'includes/itg_videogallery_aws_s3');
  $data_video = itg_video_get_s3_video();

  foreach ($data_video['video'] as $key => $s3_video_url) {


    $response = itg_videogallery_dailymotion_send_video($s3_video_url);

// Perform playlist and tags when new video create.
    if (!empty($response)) {
      $response_result['video_id'] = $response['id'];
      $response_result['fid'] = 0;

      try {

        $nid = db_insert('dailymotion_response_details')
            ->fields(array(
              'title' => $response['title'],
              'channel' => $response['channel'],
              'fid' => $response['fid'],
              'tags' => ' ',
              'video_id' => $response['id'],
              'nid' => 0,
              'video_size' => $data_video['size'][$key],
              'encoding_progress' => $response['encoding_progress'],
              'publishing_progress' => $response['publishing_progress'],
              'upload_time' => REQUEST_TIME,
              'video_duration' => $response['duration'],
              'dailymotion_published' => 0,
              'type' => 'S3',
              'name' => $response['name'],
            ))
            ->execute();

// data insert into node
      }
      catch (Exception $e) {
        die($e->getMessage());
      }
// Code start for Adding  video in daily motion 
    }
  }
// Use the high-level iterators (returns ALL of your objects).
}

/**
 * Implements function for get options for Local FTP file list and used
 * @return array
 */
function itg_videogallery_ftp_file_insert_cron() {

  global $user;
  $file_path = drupal_realpath('public://');
  $connection_id = itg_videogallery_ftp_video_list();
  ftp_pasv($connection_id, true);
  $ftp_video_folder = variable_get('ftp_upload_video_folder', '');
  $ftp_filess = ftp_nlist($connection_id, "/public_html/" . $ftp_video_folder . "/");

  foreach ($ftp_filess as $files_n) {

    $file_data_array = explode('/public_html/' . $ftp_video_folder . '/', $files_n);
    $path_info_data = pathinfo($file_data_array[1]);
    $filename = $path_info_data['filename'];
    $extension = $path_info_data['extension'];
    $exist_space = preg_match('/\s/', $filename);
    if ($exist_space) {
      $newfile = str_replace(' ', '_', $filename);
      ftp_rename($connection_id, $files_n, '/public_html/' . $ftp_video_folder . '/' . $newfile . '.' . $extension);
    }
  }

  $ftp_files = ftp_nlist($connection_id, "/public_html/" . $ftp_video_folder . "/");
  foreach ($ftp_files as $files) {
    $file_array = explode('/public_html/' . $ftp_video_folder . '/', $files);

    $path_info = pathinfo($file_array[1]);
    $extension = $path_info['extension'];
    $filename = $path_info['filename'];
    if (isset($extension) && $extension == 'mp4') {
      $file_size = ftp_size($connection_id, $files);
      $url_to_check = FTP_URL_VIDEO . $file_array[1];
      $fileresize = ftp_size($connection_id, $files);


      if ($fileresize == $file_size) {
        $existfile = check_file_already_exist_or_not_by_ftp($file_array[1]);
        if (empty($existfile)) {

          $realfilename = check_file_already_exist_or_not($file_array[1]);

// Adding managed file
          $uri = 'public://dailymotion_video_dir/' . $realfilename;
          try {

            $fid = db_insert('file_managed')
                ->fields(array(
                  'uid' => $user->uid,
                  'filename' => $realfilename,
                  'uri' => $uri,
                  'filemime' => file_get_mimetype($uri),
                  'filesize' => $file_size,
                  'status' => 1,
                  'timestamp' => REQUEST_TIME,
                ))
                ->execute();
            $file = file_load($fid);
            file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
          }
          catch (Exception $e) {
//die($e->getMessage());
          }

          $file_details = file_load($fid);
          $real_path = drupal_realpath($file_details->uri);
          $response = itg_videogallery_dailymotion_add_video($real_path, $file_array[1], $realfilename, $fid);
// Perform playlist and tags when new video create.

          if (!empty($response)) {
            $response_result['video_id'] = $response['id'];
            $response_result['fid'] = $response['fid'];
            try {

              $nid = db_insert('dailymotion_response_details')
                  ->fields(array(
                    'title' => $response['title'],
                    'channel' => $response['channel'],
                    'fid' => $response['fid'],
                    'tags' => ' ',
                    'video_id' => $response['id'],
                    'nid' => 0,
                    'video_size' => $file_size,
                    'encoding_progress' => $response['encoding_progress'],
                    'publishing_progress' => $response['publishing_progress'],
                    'upload_time' => REQUEST_TIME,
                    'video_duration' => $response['duration'],
                    'dailymotion_published' => 0,
                    'type' => 'ftp',
                    'name' => $file_array[1],
                  ))
                  ->execute();
              $title = $_POST['title'];
// data insert into node
            }
            catch (Exception $e) {
              die($e->getMessage());
            }
// Code start for Adding  video in daily motion 
          }
        }
      }
    }
  }

  ftp_close($connection_id);
}

/**
 * This method is used to add the video for daily motion from FTP
 * @return array
 */
function itg_videogallery_dailymotion_add_video($real_path, $name, $realfilename, $fid) {

  $api = itg_videogallery_dailymotion_api();
  try {

    $ftp_file = explode('public://dailymotion_video_dir/', $real_path);
    $uri = 'public://dailymotion-ftp/' . $realfilename;
    $url = FTP_URL_VIDEO . $name;

    $result = $api->post(
        '/me/videos', array(
      'url' => $url,
      'title' => $realfilename,
      'channel' => 'tv',
      'private' => 'true',
      'published' => TRUE,
        )
    );

    $dur = $api->get(
        '/video/' . $result['id'], array('fields' => array('duration', 'encoding_progress', 'publishing_progress'))
    );
    //$result['id'] = end(explode('/', $dur['embed_url']));
    $playlist_id = variable_get('dailymotion_playlist_id');
//$resp = $api->post('/playlist/' . $playlist_id . '/videos/' . $result['id']);
    $result['duration'] = $dur['duration'];
    $result['encoding_progress'] = $dur['encoding_progress'];
    $result['publishing_progress'] = $dur['publishing_progress'];

    $a = new Dailymotion();
    $a->logout();
    $result['fid'] = $fid;
    $result['tags'] = $tags_value;
  }
  catch (Exception $e) {
    if ($e->getMessage() == "This `client_id' doesn't exist.") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('API Key is wrong.'), 'error');
    }
    elseif ($e->getMessage() == "Invalid `client_secret'") {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('Secret Key is wrong.'), 'error');
    }
    elseif ($e->getCode() == 6) {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_set_message(t('There is some issue with internet connection.'), 'error');
    }
    elseif ($e->getCode() == 400) {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
      }
      drupal_get_messages();
      drupal_set_message(t('Do not use space in FTP filename. Please remove and again upload file without space in file name.'), 'error');
    }
    else {
      drupal_set_message($e->getMessage(), 'error');
    }
  }

  return $result;
}

/**
 * Checking whether file is already exist or not
 * @return string
 */
function check_file_already_exist_or_not_by_ftp($filename) {
  $query = db_select('dailymotion_response_details', 'drd');
  $query->condition('name', $filename, '=');
  $query->fields('drd');
  $query->range(0, 1);
  $results = $query->execute()->fetchAll();
  return$results[0];
}

/**
 * Checking whether file is already exist or not
 * @return string
 */
function check_file_already_exist_or_not($filename) {

  $query = db_select('file_managed', 'fm');
  $query->condition('filename', $filename, '=');
  $query->fields('fm');
  $query->orderBy('fm.fid', 'DESC');
  $query->range(0, 1);
  $results = $query->execute()->fetchAll();

  if (!isset($results[0])) {
    return $filename;
  }
  else {
    $result = explode('public://dailymotion_video_dir/', $results[0]->uri);
    $path_info = pathinfo($results[0]->filename);
    $extension = $path_info['extension'];
    $file_name = $path_info['filename'];
    $result_num = explode($file_name . '_', $result[1]);
    $num_file_id = explode('.' . $extension, $result_num[1]);
    if (is_numeric($num_file_id[0]) && isset($num_file_id[0])) {
      $value = $num_file_id[0] + time();
      $value = '_' . $value;
    }
    else {
      $value = '_' . time();
    }
    $file_info = pathinfo($filename);
    $res = $file_info['filename'] . $value . '.' . $extension;
    return $res;
  }
}

/**
 * Function use for get video info by fid
 */
function itg_videogallery_get_video_info_by_fid($fid) {
  $video_data = "";
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd');
  $query->condition('fid', $fid, '=');
  $video_data = $query->execute()->fetchAll();
  return $video_data;
}

/**
 * Function use for get all used video 
 */
function itg_videogallery_get_all_publish_video_of_video_content() {
  $video_data = "";
  $all_video_id = array();
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('solr_video_id'));
  $query->isNotNull('nid')->condition('content_type', 'video_gallery', '=');
  $video_data = $query->execute()->fetchAll();
  foreach ($video_data as $vid_data) {
    $all_video_id[] = $vid_data->solr_video_id;
  }
  return $all_video_id;
}

/**
 * Function use for get all draft video 
 */
function itg_videogallery_get_all_draft_video_of_video_content() {
  $video_data = "";
  $all_video_id = array();
  $query = db_select('itg_solr_video_info', 'drd');
  $query->fields('drd', array('solr_video_id'));
  $query->isNotNull('nid')->condition('content_type', 'video_gallery', '=');
  $query->condition('is_node_draft', '1', '=');
  $video_data = $query->execute()->fetchAll();
  foreach ($video_data as $vid_data) {
    $all_video_id[] = $vid_data->solr_video_id;
  }
  return $all_video_id;
}
