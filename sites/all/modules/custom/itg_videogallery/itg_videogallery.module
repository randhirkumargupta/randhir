<?php

/**
 * @file
 * ITG Videogallery module.
 *
 * Provides customizations and functions for Video Gallery.
 *
 */
define('FTP_URL_VIDEO', 'http://test.kelltontech.net/ftptest1/');

/**
 * Implements hook_block_info()
 * {@inheritdoc}
 */
function itg_videogallery_block_info() {
    $blocks['videogallery_tab_form_block'] = array(
        'info' => t('Video Gallery Form Tab Block'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    $blocks['videogallery_menu_video_block'] = array(
        'info' => t('Video landing page menu'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );

    return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_videogallery_block_view($delta = '') {
    global $user;
    $block = array();
    $data = '';
    switch ($delta) {
        case 'videogallery_tab_form_block':
            $block['content'] = theme('videogallery_tab_form_block', array('data' => $data));
            break;
        case 'videogallery_menu_video_block':
            $block['content'] = theme('videogallery_menu_video_block', array('data' => $data));
            break;
    }

    return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_videogallery_theme($existing, $type, $theme, $path) {
    $themes = array(
        'videogallery_tab_form_block' => array(
            'template' => 'videogallery-form-tab-template',
            'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
            'variables' => array('data' => NULL),
        ),
        'videogallery_node_form' => array(
            'arguments' => array('form' => NULL),
            'template' => 'videogallery-node-form',
            'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
            'render element' => 'form',
        ),
        'itg_videogallery_browse_form' => array(
            'arguments' => array('form' => NULL),
            'template' => 'videogallery-file-form',
            'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
            'render element' => 'form',
        ),
        'videogallery_menu_video_block' => array(
            'template' => 'videogallery-menu-landing-template',
            'path' => drupal_get_path('module', 'itg_videogallery') . '/templates',
            'variables' => array('data' => NULL),
        ),
    );
    return $themes;
}

/**
 * Implemets hook_form_alter().
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_videogallery_form_alter(&$form, &$form_state, $form_id) {
    global $user, $base_url;

    switch ($form_id) {
        case 'videogallery_node_form':
            unset($form['actions']['preview_changes']);
            $form['#after_build'][] = 'itg_videogallery_after_build';
            $form['#validate'][] = 'itg_videogallery_custom_validate';
            $form['actions']['cancel'] = array(
                '#markup' => l(t('Cancel'), 'manage-videogallery', array('attributes' => array('class' => 'button'))),
                '#weight' => 20,
            );
            $form['field_video_duration']['#attributes'] = array('style' => 'display:none;');
            $form['field_upload_video'][LANGUAGE_NONE][0]['#upload_validators']['itg_custom_field_validate'] = array(1, 2);
            $form['actions']['submit']['#submit'][] = 'itg_videogallery_submit_status_message';
            $form['actions']['submit']['#submit'][] = 'itg_videogallery_custom_submit';
            break;
    }
}

/**
 * Implements function for validate image
 * @param array $field
 * @return array
 */
function itg_custom_field_validate($field) {
    $val = itg_video_check_exist_file($field->filename);
    $field->destination = $val;
    $errors = array();
    return $errors;
}

/**
 * Implements function check exist filename
 * @param array $form
 * @param array $form_state
 * @return string
 */
function itg_video_check_exist_file($filename) {
    $query = db_select('file_managed', 'fm');
    $query->condition('filename', $filename, '=');
    $query->fields('fm');
    $query->orderBy('fm.fid', 'DESC');
    $query->range(0, 1);
    $results = $query->execute()->fetchAll();

    if (!isset($results[0])) {
        $res = 'public://dailymotion_video_dir/' . $filename;
        return $res;
    } else {
        $result = explode('public://dailymotion_video_dir/', $results[0]->uri);
        $path_info = pathinfo($results[0]->filename);
        $extension = $path_info['extension'];
        $file_name = $path_info['filename'];
        $result_num = explode($file_name . '_', $result[1]);
        $num_file_id = explode('.' . $extension, $result_num[1]);
        if (is_numeric($num_file_id[0]) && isset($num_file_id[0])) {
            $value = $num_file_id[0] + 1;
            $value = '_' . $value;
        } else {
            $value = '_0';
        }
        $file_info = pathinfo($filename);
        $res = 'public://dailymotion_video_dir/' . $file_info['filename'] . $value . '.' . $extension;
        return $res;
    }
}

/**
 * Implements custom submit for move video on dailymotion.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_custom_submit($form, &$form_state) {
    foreach ($form_state['values']['field_story_itg_tags'][LANGUAGE_NONE] as $tags) {
        $tag[] = $tags['name'];
    }
    $tag_value = implode(', ', $tag);
    $tags_value = trim($tag_value, ",");
    $node_id = $form_state['values']['nid'];
    foreach ($form_state['values']['field_dailymotion_playlist'][LANGUAGE_NONE] as $playlist_term) {
        $playlist_name[] = $playlist_term['name'];
//    $term_load = taxonomy_term_load($playlist_term['tid']);
//    $playlist_name[] = $term_load->name;
    }
    $video_fid = $form_state['values']['field_upload_video'][LANGUAGE_NONE][0]['fid'];
    if ($video_fid != '' && is_numeric($video_fid)) {
        $query = db_select('dailymotion_response_details', 'drd');
        $query->fields('drd', array('fid', 'video_id'));
        $query->condition('fid', $video_fid, '=');
        $dailymotion_video_result = $query->execute()->fetchAssoc();
        if (empty($dailymotion_video_result['fid'])) {
            // Video not uploaded on dailymotion
            $file_details = file_load($video_fid);
            $real_path = drupal_realpath($file_details->uri);
            $response = itg_videogallery_dailymotion($real_path, $file_details->uri, $video_fid, $tags_value, $node_id);
            // Perform playlist and tags when new video create.
            $response_result['video_id'] = $response['id'];
            $response_result['fid'] = $response['fid'];
            $nid = db_insert('dailymotion_response_details')
                    ->fields(array(
                        'title' => $response['title'],
                        'channel' => $response['channel'],
                        'fid' => $response['fid'],
                        'tags' => $response['tags'],
                        'video_id' => $response['id'],
                        'nid' => $node_id,
                        'upload_time' => REQUEST_TIME,
                        'video_duration' => $response['duration'],
                    ))
                    ->execute();
            itg_videogallery_unlink_video_playlist($response_result, $playlist_name, $tags_value);
            itg_videogallery_edit_dailymotion($response_result, $playlist_name, $node_id);
        } else {
            // Video uploaded on dailymotion
            itg_videogallery_unlink_video_playlist($dailymotion_video_result, $playlist_name, $tags_value);
            itg_videogallery_edit_dailymotion($dailymotion_video_result, $playlist_name, $node_id);
        }
    }
}

/**
 * Implements function for dailymotion api
 * @return object
 */
function itg_videogallery_dailymotion_api() {
    require_once 'includes/Dailymotion.php';
    $user_name = variable_get('dailymotion_username', '');
    $password = variable_get('dailymotion_password', '');
    $api_key = variable_get('dailymotion_apikey', '');
    $api_secret = variable_get('dailymotion_secretkey', '');

    try {
        $api = new Dailymotion();
        $scopes = array(
            'userinfo',
            'feed',
            'manage_videos',
            'manage_subtitles',
            'read',
            'write',
            'delete',
        );
        $api->setGrantType(
                Dailymotion::GRANT_TYPE_PASSWORD, $api_key, $api_secret, $scopes, array(
            'username' => $user_name,
            'password' => $password,
                )
        );
    } catch (Exception $e) {
        if ($e->getMessage() == "Missing API key") {
            if (isset($_GET['destination'])) {
                unset($_GET['destination']);
            }
            drupal_set_message(t('Please enter API Key.'), 'error');
            drupal_goto('dailymotion/config');
        } else {
            drupal_set_message($e->getMessage(), 'error');
        }
    }
    return $api;
}

/**
 * Implements function for remove video from playlist
 */
function itg_videogallery_unlink_video_playlist($vid_res_result, $playlist_name, $tags_value) {
    $thumbnail = file_load($thumbnail_fid);
    $thumb_real_path = drupal_realpath($thumbnail->uri);
    $video_id = $vid_res_result['video_id'];
    $api = itg_videogallery_dailymotion_api();
    // Tags assign to node and thumbnail
    $api->post('/video/' . $video_id . '?tags=' . $tags_value);
//  $thumb_url = $api->uploadFile($thumb_real_path);
//  $api->post('/video/' . $video_id . '?thumbnail_url=' . $thumb_url . '&tags='. $tags_value);
    $old_playlist = array_diff($_SESSION['old_playlist'], $playlist_name);
    // Delete playlist with video
    if (isset($old_playlist)) {
        foreach ($old_playlist as $old_play) {
            $del_play_id = itg_videogallery_get_playlist_id($old_play);
            if ($del_play_id[0]->pid != '') {
                $api->delete('/playlist/' . $del_play_id[0]->pid . '/videos/' . $video_id);
            }
        }
    }
}

/**
 * Implements dailymotion video edit function
 * @param array $vid_res_result
 * @param array $playlist_name
 * @param array $tags_value
 * @param int $node_id
 */
function itg_videogallery_edit_dailymotion($vid_res_result, $playlist_name, $node_id) {
    $video_id = $vid_res_result['video_id'];
    $fid = $vid_res_result['fid'];
    $api = itg_videogallery_dailymotion_api();
    // create playlist
    foreach ($playlist_name as $name) {
        // local saved playlist check
        $exist_playlist = itg_videogallery_get_playlist_id($name);
        if ($exist_playlist[0]->pid == '') {
            try {
                $result = $api->post(
                        '/me/playlists', array(
                    'name' => $name,
                        )
                );
                // Insert data in dailymotion_playlist_details table
                db_insert('dailymotion_playlist_details')
                        ->fields(array(
                            'pid' => $result['id'],
                            'playlist_name' => $result['name'],
                            'node_id' => $node_id,
                            'video_id' => $video_id,
                        ))->execute();
                $api->post('/playlist/' . $result['id'] . '/videos/' . $video_id);
            } catch (Exception $e) {
                if ($e->getCode() == 500) {
                    $playlists = $api->get(
                            '/me/playlists', array('limit' => 100, 'fields' => array('id', 'name'))
                    );
                    foreach ($playlists['list'] as $p_value) {
                        $play[$p_value['name']] = $p_value['id'];
                    }
                    db_insert('dailymotion_playlist_details')
                            ->fields(array(
                                'pid' => $play[$name],
                                'playlist_name' => $name,
                                'node_id' => $node_id,
                                'video_id' => $video_id,
                            ))->execute();
                    $playlist_id = itg_videogallery_get_playlist_id($name);
                    $api->post('/playlist/' . $playlist_id[0]->pid . '/videos/' . $video_id);
                }
            }
        } else {
            $playlist_id = itg_videogallery_get_playlist_id($name);
            $api->post('/playlist/' . $playlist_id[0]->pid . '/videos/' . $video_id);
        }
    }
}

/**
 * Implement dailymotion api call
 * @param string $real_path
 * @param int $key
 * @param string $uri
 * @param int $fid
 * @return array
 */
function itg_videogallery_dailymotion($real_path, $uri, $fid, $tags_value, $node_id) {
    $api = itg_videogallery_dailymotion_api();
    try {
        if (itg_videogallery_check_ftp_video($fid)) {
            $ftp_file = explode('/dailymotion_video_dir/', $real_path);
            $uri = 'public://dailymotion-ftp/' . $ftp_file[1];
            $url = FTP_URL_VIDEO . $ftp_file[1];
        } else {
            $url = $api->uploadFile($real_path);
        }
        $result = $api->post(
                '/me/videos', array(
            'url' => $url,
            'title' => $uri,
            'tags' => $tags_value,
            'channel' => 'tv',
            'published' => TRUE,
                )
        );
        $dur = $api->get(
                '/video/' . $result['id'], array('fields' => array('duration'))
        );
        $result['duration'] = $dur['duration'];
        ftp_close($connection_id);
        $a = new Dailymotion();
        $a->logout();
        $result['fid'] = $fid;
        $result['tags'] = $tags_value;
    } catch (Exception $e) {
        if ($e->getMessage() == "This `client_id' doesn't exist.") {
            if (isset($_GET['destination'])) {
                unset($_GET['destination']);
            }
            drupal_set_message(t('API Key is wrong.'), 'error');
            drupal_goto('dailymotion/config');
        } elseif ($e->getMessage() == "Invalid `client_secret'") {
            if (isset($_GET['destination'])) {
                unset($_GET['destination']);
            }
            drupal_set_message(t('Secret Key is wrong.'), 'error');
            drupal_goto('dailymotion/config');
        } elseif ($e->getCode() == 6) {
            if (isset($_GET['destination'])) {
                unset($_GET['destination']);
            }
            drupal_set_message(t('There is some issue with internet connection.'), 'error');
            drupal_goto('node/' . $node_id . '/edit', array('query' => array('destination' => 'manage-videogallery')));
        } elseif ($e->getCode() == 400) {
            if (isset($_GET['destination'])) {
                unset($_GET['destination']);
            }
            drupal_get_messages();
            drupal_set_message(t('Do not use space in FTP filename. Please remove and again upload file without space in file name.'), 'error');
            drupal_goto('node/' . $node_id . '/edit', array('query' => array('destination' => 'manage-videogallery')));
        } else {
            drupal_set_message($e->getMessage(), 'error');
        }
    }
    return $result;
}

/**
 * Implements function for custom validate.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_custom_validate($form, &$form_state) {
    //schedule date & expiry date validation
    $schedule_date = strtotime($form_state['values']['field_story_schedule_date_time'][LANGUAGE_NONE][0]['value']);
    $expiry_date = strtotime($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value']);
    if (isset($expiry_date) && ($schedule_date > $expiry_date)) {
        form_set_error('field_story_expiry_date', t("Expiry date should be greater then schedule start date"));
    }
    //comment question validation
    $comment_checkbox = $form_state['values']['field_video_configurations'][LANGUAGE_NONE][0]['value'];
    if (isset($comment_checkbox) && $form_state['values']['field_story_comment_question'][LANGUAGE_NONE][0]['value'] == '') {
        foreach ($form_state['values']['field_video_configurations'][LANGUAGE_NONE] as $key => $val) {
            if ($val['value'] == 'comment') {
                form_set_error('field_story_comment_question', t("Please enter the comment question."));
            }
        }
    }
}

/**
 * After build for story form.
 * {@inheritdoc}
 */
function itg_videogallery_after_build($form, &$form_state) {

    global $user, $base_url;
    
    if (!isset($form['#node']->nid)) {
    // hide remove button of first field on add form 
    drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-field-story-reporter-und-0-remove-button").hide();              
            });', array('type' => 'inline', 'scope' => 'footer'));
  }
  
    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;
    drupal_add_js(array('itg_videogallery' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_videogallery') . '/js/itg_videogallery.js', array('weight' => 1));
    return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_videogallery_form_videogallery_node_form_alter(&$form, &$form_state, $form_id) {
    global $base_url, $user;
    // code for story expiry date field show and hide
    $form['field_story_expiry_date']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_expires[und][Yes]"]' => array('checked' => TRUE),
        )
    );

    // code for Comment Question field hide and show
    $form['field_story_comment_question']['#states'] = array(
        'visible' => array(
            ':input[name="field_video_configurations[und][comment]"]' => array('checked' => TRUE),
        ),
        'required' => array(
            ':input[name="field_video_configurations[und][comment]"]' => array('checked' => TRUE),
        )
    );


    $form['field_story_posted_by_twitter']['#default_value'] = $user->mail;
    $form['field_story_posted_by_instagram']['#default_value'] = $user->mail;
}

/**
 * Implement hook_form_FORM_ID_alter().
 * {@inheritdoc}
 */
function itg_videogallery_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
    $form_id_arr = array('views-exposed-form-manage-videogallery-page', 'views-exposed-form-videogallery-management-page', 'views-exposed-form-videogallery-management-page-1', 'views-exposed-form-videogallery-management-page-2', 'views-exposed-form-videogallery-management-page-3', 'views-exposed-form-videogallery-management-page-5', 'views-exposed-form-videogallery-management-page-6', 'views-exposed-form-videogallery-management-page-7', 'views-exposed-form-videogallery-management-page-4', 'views-exposed-form-videogallery-management-page-10');
    if (in_array($form['#id'], $form_id_arr)) {
        $form['title']['#autocomplete_path'] = 'content-title-list/videogallery/autocomplete';
        $form['title']['#attributes'] = array('placeholder' => t('Title'));
        $form['nid']['#autocomplete_path'] = 'content-nid-list/videogallery/autocomplete';
        $form['nid']['#attributes'] = array('placeholder' => t('Video Id'));
    }
}

/**
 * Implement hook_views_pre_render().
 * {@inheritdoc}
 */
function itg_videogallery_views_pre_render(&$view) {
    if ($view->name == "manage_videogallery" || $view->name == "videogallery_management") {
        if (!isset($_POST['views_bulk_operations'])) {
            $header_content_video = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
            $header_content_video .= l(t('Upload Video'), 'node/add/videogallery', array('query' => array('destination' => arg(0))));
            $view->attachment_before = $header_content_video;
        }
    }
}

/**
 * Implements submit function for bolt video title in msg.
 * @param array $form
 * @param array $form_state
 */
function itg_videogallery_submit_status_message(&$form, $form_state) {

    $workbench_current_state = $form_state['node']->workbench_moderation_state_new;
    $node_type = ucfirst($form_state['node']->type);
    $node_type = str_replace("_", " ", $node_type);
    $title = ucfirst($form_state['node']->title);

    if (isset($_SESSION['messages']['status'])) {
        unset($_SESSION['messages']['status']);
    }
    $request_destination = $_REQUEST['destination'];
    $redirect_path = $_REQUEST['destination'];

    if ($request_destination == 'published-video') {
        $redirect_path .= "?field_story_syndication_value_op=all";
    }

    itg_custom_message($node_type, $workbench_current_state, arg(1), $title, $redirect_path);
}

/**
 * Impelements form for configuration.
 * {@inheritdoc}
 */
function itg_videogallery_configuration_form($form) {
    $form['dailymotion_username'] = array(
        '#type' => 'textfield',
        '#title' => t('Dailymotion Username'),
        '#default_value' => variable_get('dailymotion_username'),
        '#required' => TRUE,
    );
    $form['dailymotion_password'] = array(
        '#type' => 'textfield',
        '#title' => t('Dailymotion Password'),
        '#default_value' => variable_get('dailymotion_password', ''),
        '#required' => TRUE,
    );
    $form['dailymotion_apikey'] = array(
        '#type' => 'textfield',
        '#title' => t('Api Key'),
        '#default_value' => variable_get('dailymotion_apikey', ''),
        '#required' => TRUE,
    );
    $form['dailymotion_secretkey'] = array(
        '#type' => 'textfield',
        '#title' => t('Secret Key'),
        '#default_value' => variable_get('dailymotion_secretkey', ''),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * Implements hook_menu().
 * {@inheritdoc}
 */
function itg_videogallery_menu() {
    $items['dailymotion/config'] = array(
        'title' => 'Dailymotion Configuration',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('itg_videogallery_configuration_form'),
        'access arguments' => array('authorized user dailymotion credin'),
        'type' => MENU_CALLBACK,
    );
    $items['dailymotion/ftp/config'] = array(
        'title' => 'Ftp Configuration',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('itg_videogallery_ftp_video_form'),
        'access arguments' => array('authorized user ftp credin'),
        'file' => 'includes/itg_videogallery.inc',
    );
    $items['dailymotion-ftp-videos-post'] = array(
        'page callback' => 'itg_videogallery_ajax_ftp_video',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['dailymotion-video-time-filter'] = array(
        'page callback' => 'itg_videogallery_ajax_time_filter_video',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
 * Implements hook_permission.
 */
function itg_videogallery_permission() {
    return array(
        'authorized user dailymotion credin' => array(
            'title' => t('Dailymotion credintial permission'),
            'description' => t('Dailymotion credintial configuration permission'),
        ),
        'authorized user ftp credin' => array(
            'title' => t('Dailymotion FTP config permission'),
            'description' => t('Dailymotion FTP configuration permission'),
        ),
    );
}

/**
 * Implement function get dailymotion video id by fid
 * @param int $fid
 * @return type string
 */
function itg_videogallery_get_video($fid) {
    $query = db_select('dailymotion_response_details', 'dm')
            ->fields('dm', array('video_id'))
            ->condition('fid', $fid, '=');
    $result = $query->execute()->fetchField();
    return $result;
}

/**
 * Implements hook_node_access().
 * {@inheritdoc}
 */
function itg_videogallery_node_access($node, $op, $account) {
    if ($account->uid == 0) {
        $current_time = time();
        $video_schedule_date = strtotime($node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value']);
        $video_expire_date = strtotime($node->field_story_expiry_date[LANGUAGE_NONE][0]['value']);
        if (($current_time > $video_schedule_date) && ($current_time < $video_expire_date) && ($node->type == 'videogallery' && $op == 'view')) {
            return NODE_ACCESS_ALLOW;
        } elseif (($current_time > $video_expire_date || $current_time < $video_schedule_date) && ($node->type == 'videogallery') && ($op == 'view')) {
            return NODE_ACCESS_DENY;
        }
    }
    return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_videogallery_node_validate($node, $form, &$form_state) {

    // Code for redirection url validation
    if ($node->type == 'videogallery') {
        // Code for category validation.
        if (empty($node->field_story_category[LANGUAGE_NONE][0]['tid'])) {
            form_set_error('edit-field-story-category-und-hierarchical-select-selects-0', t("Section field is required."));
        }
    }
}

/**
 * Implements function return playlist id
 * @param string $tname
 * @return array
 */
function itg_videogallery_get_playlist_id($tname) {
    $query = db_select('dailymotion_playlist_details', 'dpt');
    $query->fields('dpt', array('pid', 'playlist_name'));
    $query->condition('dpt.playlist_name', $tname, '=');
    $result = $query->execute()->fetchAll();
    return $result;
}

/**
 * Implements function for get old playlist for remove video
 * @param int $nid
 * @return array
 */
function itg_videogallery_get_old_playlist($nid) {
    $query = db_select('field_data_field_dailymotion_playlist', 'fdp');
    $query->fields('fdp', array('field_dailymotion_playlist_tid', 'entity_id'));
    $query->join('taxonomy_term_data', 'ttd', 'fdp.field_dailymotion_playlist_tid = ttd.tid');
    $query->fields('ttd', array('name', 'tid'));
    $query->condition('fdp.bundle', 'videogallery', '=');
    $query->condition('fdp.entity_id', $nid, '=');
    $result = $query->execute();
    foreach ($result as $value) {
        $output[$value->field_dailymotion_playlist_tid] = $value->name;
    }
    return $output;
}

/**
 * Implements hook_node_presave()
 * {@inheritdoc}
 */
function itg_videogallery_node_presave($node) {
    if ($node->type == 'videogallery' && !empty($node->field_dailymotion_playlist[LANGUAGE_NONE])) {
        foreach ($node->field_dailymotion_playlist[LANGUAGE_NONE] as $playlist_val) {
            $playlist[$playlist_val['tid']] = $playlist_val['name'];
        }
        $node->field_story_source_id = $playlist;
        $_SESSION['old_playlist'] = itg_videogallery_get_old_playlist($node->nid);
    }
}

/**
 * Implements function for get term name by tid
 * @param int $tid
 * @return string
 */
function itg_videogallery_get_tname($tid) {
    $query = db_select('taxonomy_term_data', 'ttd');
    $query->fields('ttd', array('name'));
    $query->condition('tid', $tid, '=');
    $result = $query->execute()->fetchField();
    return $result;
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_videogallery_cronapi($op, $job = NULL) {
    $items['video_file_delete'] = array(
        'description' => 'video file delete in files folder.',
        'callback' => 'itg_videogallery_remove_video',
    );
    $items['video_thumb_assign'] = array(
        'description' => 'Thumbnail image assign to node from dailymotion.',
        'callback' => 'itg_videogallery_thumb_assign',
    );
    $items['video_duration'] = array(
        'description' => 'Video duration assign get from dailymotion.',
        'callback' => 'itg_videogallery_duration_time',
    );
    $items['ftp_file_save'] = array(
        'description' => 'Ftp file save in file managed table.',
        'callback' => 'itg_videogallery_ftp_file_insert',
    );
    return $items;
}

/**
 * Implement function for remove files
 */
function itg_videogallery_remove_video() {
    $files = glob('sites/default/files/dailymotion_video_dir/*');
    foreach ($files as $file) {
        if (is_file($file))
            unlink($file);
    }
}

/**
 * Implement function for add videoduration from dailymotion.
 */
function itg_videogallery_duration_time() {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->leftJoin('field_data_field_video_duration', 'fvd', 'n.nid = fvd.entity_id');
    $query->fields('fvd', array('entity_id'));
    $query->condition(db_or()->isNull('fvd.field_video_duration_value'));
    $query->condition('n.type', 'videogallery', '=');
    $result = $query->execute()->fetchAll();
    if (isset($result) && !empty($result)) {
        $api = itg_videogallery_dailymotion_api();
        foreach ($result as $value) {
            $node = node_load($value->nid);
            $video_fid = $node->field_upload_video[LANGUAGE_NONE][0]['fid'];
            $video_id = itg_videogallery_get_videoid($video_fid);
            if (!empty($video_id)) {
                $dur = $api->get(
                        '/video/' . $video_id, array('fields' => array('duration'))
                );
                $duration = '';
                if ($dur['duration'] < 3600) {
                    $duration = gmdate("i:s", $dur['duration']);
                } else {
                    $duration = gmdate("H:i:s", $dur['duration']);
                }
                $node->field_video_duration[LANGUAGE_NONE][0]['value'] = $duration;
                field_attach_update('node', $node);
            }
        }
    }
}

/**
 * Implement cron function for add video thumb from dailymotion
 */
function itg_videogallery_thumb_assign() {
    $subquery = db_select('field_data_field_upload_video', 'upload_video');
    $subquery->fields('upload_video', array('entity_id'));
    $subquery->join('field_data_field_story_extra_large_image', 'large_image', 'large_image.entity_id = upload_video.entity_id');
    //$subquery->condition('large_image.bundle', 'videogallery', '=')->execute()->fetchAll();
    $subt = $subquery->execute()->fetchAll();
    foreach ($subt as $sub) {
        $subquery_data[] = $sub->entity_id;
    }
    $query = db_select('field_data_field_upload_video', 'up_video');
    $query->fields('up_video', array('entity_id'));
    if (isset($subquery_data) && !empty($subquery_data)) {
        $subcondition = $query->condition('up_video.entity_id', $subquery_data, 'NOT IN');
    }
    $query->join('dailymotion_response_details', 'drd', 'drd.fid = up_video.field_upload_video_fid');
    $query->fields('drd', array('fid', 'video_id'));
    $result = $query->execute()->fetchAll();
    if (isset($result) && !empty($result)) {
        $api = itg_videogallery_dailymotion_api();
        foreach ($result as $val) {
            $thumb_url = $api->get(
                    '/video/' . $val->video_id, array('fields' => array('thumbnail_url'))
            );
            $image_url = $thumb_url['thumbnail_url'];
            $imagedata = file_get_contents($image_url);
            $file = file_save_data($imagedata, file_default_scheme() . '://' . end(explode('/', $image_url)));
            file_usage_add($file, 'itg_videogallery', 'file', $file->fid);
            $node = node_load($val->entity_id);
            $node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'] = $file->fid;
            field_attach_update('node', $node);
        }
    }
}

/**
 * Implements function for get videoid by file id
 * @param int $fid
 */
function itg_videogallery_get_videoid($fid) {
    $query = db_select('dailymotion_response_details', 'drd');
    $query->fields('drd', array('video_id'));
    $query->condition('fid', $fid, '=');
    $result = $query->execute()->fetchField();
    return $result;
}

/**
 * Implements function for get options for FTP file list
 * @return array
 */
function itg_videogallery_ftp_file_insert() {
    $file_path = drupal_realpath('public://');
    $connection_id = itg_videogallery_ftp_video_list();
    ftp_pasv($connection_id, true);
    $ftp_files = ftp_nlist($connection_id, "/public_html/videos/");

    ftp_close($connection_id);
    foreach ($ftp_files as $files) {
        $file_array = explode('/public_html/videos/', $files);
        $path_info = pathinfo($file_array[1]);
        $extension = $path_info['extension'];
        if (isset($extension) && $extension == 'mp4') {
            itg_video_check_exist_file_browse($file_array[1]);
        }
    }
}

/**
 * Implements function for get all files from directory
 * @param string $dir
 * @param array $results
 *
 * @return array
 */
function itg_videogallery_dir_content($dir, &$results = array()) {
    $files = scandir($dir);

    foreach ($files as $key => $value) {
        $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
        if (!is_dir($path)) {
            $results[] = $path;
        } elseif ($value != "." && $value != "..") {
            get_dir_content($path, $results);
            $results[] = $path;
        }
    }

    return $results;
}

/**
 * Implements function check exist filename
 * @param array $form
 * @param array $form_state
 * @return string
 */
function itg_video_check_exist_file_browse($filename) {
    global $user;
    $connection_id = itg_videogallery_ftp_video_list();
    ftp_pasv($connection_id, true);
    $ftp_files = ftp_nlist($connection_id, "/public_html/videos/");
    $results = itg_videogallery_getfile_details($filename);
    if ($results == '' && empty($results)) {
        $file_size = ftp_size($connection_id, '/public_html/videos/' . $filename);
        if ($res != -1) {
            $path_info = pathinfo($filename);
            $extension = $path_info['extension'];
            if (isset($extension) && $extension == 'mp4') {
                $uri = 'public://dailymotion_video_dir/' . $filename;
                $fid = db_insert('file_managed')
                        ->fields(array(
                            'uid' => $user->uid,
                            'filename' => $filename,
                            'uri' => $uri,
                            'filemime' => file_get_mimetype($uri),
                            'filesize' => $file_size,
                            'status' => 1,
                            'timestamp' => REQUEST_TIME,
                        ))
                        ->execute();
                $file = file_load($fid);
                file_usage_add($file, 'itg_videogallery', 'file', $file->fid);

                // Entry for FTP Video
                db_insert('itg_dailymotion_ftp_video')
                        ->fields(array(
                            'fid' => $fid,
                        ))
                        ->execute();
            }
        }
    }
    ftp_close($connection_id);
    return $results;
}

/**
 * Implements function for get FTP exist file
 * @param string $filename
 * @return array
 */
function itg_videogallery_getfile_details($filename) {
    $uri = 'public://dailymotion_video_dir/' . $filename;
    $query = db_select('file_managed', 'fm');
    $query->condition('filename', $filename, '=');
    $query->condition('uri', $uri, '=');
    $query->fields('fm');
    $query->orderBy('fm.fid', 'DESC');
    $query->range(0, 1);
    $results = $query->execute()->fetchAssoc();
    return $results;
}

/**
 * Implements function for get check ftp video
 * @param int $fid
 * @return array
 */
function itg_videogallery_check_ftp_video($fid) {
    $query = db_select('itg_dailymotion_ftp_video', 'ftp');
    $query->fields('ftp', array('fid'));
    $query->condition('fid', $fid, '=');
    $result = $query->execute()->fetchField();
    return $result;
}

/**
 * Implements function for ftp connection.
 */
function itg_videogallery_ftp_video_list() {
    $ftp_server = variable_get('dailymotion_ftp_host', '');
    $ftp_user_name = variable_get('dailymotion_ftp_username', '');
    $ftp_user_pass = variable_get('dailymotion_ftp_password', '');
    $conn_id = ftp_connect($ftp_server);
    $login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);
    if ((!$conn_id) || (!$login_result)) {
        watchdog("WATCHDOG_INFO_video", "FTP connection has failed");
    }
    return $conn_id;
}

/**
 * Implement function for tid from layout_tpl_manager
 */
function itg_videogallery_ftp_video_post($sid, $template, $widget_name) {
    $query = db_select('itg_layout_tpl', 'ilt');
    $query->join('itg_layout_manager', 'ilm', 'ilt.id = ilm.layout_id');
    $query->join('taxonomy_term_data', 'ttd', 'ttd.tid = ilm.filter_url');
    $query->fields('ilm', array('filter_url'));
    $query->fields('ttd', array('name'));
    $query->condition('ilm.widget_name', $widget_name, '=');
    $query->condition('ilt.template_name', $template, '=');
    $query->condition('ilt.section_name', $sid, '=');
    $query->condition('ilt.status', 1, '=');
    $result = $query->execute()->fetchAll();
    return $result;
}

/**
 * {@inheritdoc}
 */
function itg_videogallery_node_view($node, $view_mode, $langcode) {
    if ($node->type == 'videogallery') {
        //drupal_add_js(drupal_get_path('theme', 'itg') . '/js/jquery-1.11.0.min', array('scope' => 'footer'));
        drupal_add_css(drupal_get_path('theme', 'itg') . '/css/jquery.mCustomScrollbar.min.css', array('scope' => 'footer'));
        drupal_add_js(drupal_get_path('theme', 'itg') . '/js/jquery.mCustomScrollbar.concat.min.js', array('scope' => 'footer'));
        $classnext = "<i class='fa fa-chevron-down'></i>";
        $classprev = "<i class='fa fa-chevron-up'></i>";
        drupal_add_js('                    
 jQuery(document).ready(function(){    
     var winWidth = window.innerWidth;
      if(winWidth > 680){
      var getLength = jQuery("#block-views-video-landing-header-block-1 ul.photo-list li").length;    
    jQuery("#block-views-video-landing-header-block-1 ul.photo-list").css("width", getLength*190 +"px");
    jQuery(".defalt-bar").mCustomScrollbar({
                    axis:"x",                    
                });
    }else{
    jQuery("#block-views-video-landing-header-block-1 ul.photo-list").slick({
                    vertical: true,
                    slidesToShow: 4,
                    dots: false,
                    nextArrow:"' . $classnext . '",
                    prevArrow:"' . $classprev . '" 
                });
    }
});', array('type' => 'inline', 'scope' => 'footer'));

        // Category view on landing page
        drupal_add_js("jQuery('#block-itg-videogallery-videogallery-menu-video-block ul li').live('click', function(){
               var section_id = jQuery(this).val();
               jQuery('#block-itg-videogallery-videogallery-menu-video-block ul li a').removeClass('active');
               jQuery('#edit-field-story-category-tid').val(section_id); 
               jQuery('#edit-field-story-category-tid').trigger('change');
               jQuery(this).find('a').addClass('active');
           });", array('type' => 'inline', 'scope' => 'footer'));
        drupal_add_js("jQuery(document).ready(function(){
               jQuery('#edit-field-story-category-tid').val(" . $_GET['category'] . "); 
               jQuery('#edit-field-story-category-tid').trigger('change');
               jQuery('#block-itg-videogallery-videogallery-menu-video-block ul li').each(function() {
                  if(jQuery(this).val() == " . $_GET['category'] . "){
                      jQuery(this).find('a').addClass('active');
                    }
              });
           });", array('type' => 'inline', 'scope' => 'footer'));
        // Views render on video template
        if (itg_videogallery_get_categoryparent($_GET['category']) == TRUE && empty($_GET['sid'])) {
            $view_output = views_embed_view('video_list_of_category', 'block_3', $_GET['category']);
        } elseif ((itg_videogallery_get_categoryparent($_GET['category']) == FALSE || itg_videogallery_get_categoryparent($_GET['category']) == TRUE) && isset($_GET['category']) && isset($_GET['sid'])) {
            $view_output = views_embed_view('video_list_of_category', 'block');
        } elseif (empty($_GET['sid'])) {
            if (isset($_GET['category']) && itg_videogallery_get_categoryparent($_GET['category']) == FALSE) {
                $view_output = views_embed_view('video_list_of_category', 'block_3', $_GET['category']);
            } elseif (empty($_GET['category'])) {
                $tid = itg_videogallery_get_tid_nid(arg(1));
                $view_output = views_embed_view('video_list_of_category', 'block_3', $tid);
            }
        }
        $node->view_output = $view_output;
    }
}

/**
 * Get used video
 */
function itg_videogallery_ajax_ftp_video() {
    $case = $_POST['case'];
    $val = '';
    if ($case == 'used') {
        $used_video = itg_videogallery_ftp_used_video();
        foreach ($used_video as $key => $u_video) {
            $val .= '<span class="ftp_video_radio"><input type="radio" name="video-form" class="form-radio" value="' . $key . '">' . $u_video['filename'] . '</input><span class="file_size">' . $u_video['filesize'] . ' MB</span></span>';
        }
    } elseif ($case == 'unused') {
        $unused_video = itg_videogallery_ftp_unused_video();
        foreach ($unused_video as $key => $un_video) {
            $val .= '<span class="ftp_video_radio"><input type="radio" name="video-form" class="form-radio" value="' . $key . '">' . $un_video['filename'] . '</input><span class="file_size">' . $un_video['filesize'] . ' MB</span></span>';
        }
    }
    if (empty($val)) {
        $val = "Result not found.";
    }
    echo '<div id="edit-video-browse-select">' . $val . '</div>';
}

/**
 * Implements function for time filter ajax
 */
function itg_videogallery_ajax_time_filter_video() {
    $back_time = $_POST['back_time'];
    $val = '';
    if ($back_time) {
        if (is_numeric($back_time)) {
            $before_time = time() - (60 * 60 * $back_time);
        } elseif ($before_time == '-all-') {
            $before_time = '-all-';
        }
        $used_video = itg_videogallery_ftp_used_video($before_time);
        foreach ($used_video as $key => $u_video) {
            $val .= '<span class="ftp_video_radio"><input type="radio" name="video-form" class="form-radio" value="' . $key . '">' . $u_video['filename'] . '</input><span class="file_size">' . $u_video['filesize'] . ' MB</span></span>';
        }
    }
    if (empty($val)) {
        $val = "Result not found.";
    }
    echo '<div id="edit-video-browse-select">' . $val . '</div>';
}

/**
 * Implement function for get used video on FTP
 * @return array
 */
function itg_videogallery_ftp_used_video($before_time) {
    $query = db_select('field_data_field_upload_video', 'f_video');
    $query->fields('f_video', array('field_upload_video_fid'));
    $query->distinct();
    $query->join('itg_dailymotion_ftp_video', 'itg_ftp_video', 'itg_ftp_video.fid = f_video.field_upload_video_fid');
    $query->fields('itg_ftp_video', array('fid'));
    $query->join('file_managed', 'fm', 'fm.fid = f_video.field_upload_video_fid');
    $query->join('dailymotion_response_details', 'drd', 'drd.fid = f_video.field_upload_video_fid');
    $query->fields('fm', array('filename', 'filesize'));
    if (!empty($before_time) && is_numeric($before_time)) {
        $query->condition('drd.upload_time', $before_time, '>');
    }
    $results = $query->execute();
    foreach ($results as $result) {
        $used_video[$result->field_upload_video_fid]['filename'] = $result->filename;
        $used_video[$result->field_upload_video_fid]['filesize'] = number_format($result->filesize / (1024 * 1024), 2);
    }
    return $used_video;
}

/**
 * Implement function for get unused video on FTP
 * @return array
 */
function itg_videogallery_ftp_unused_video() {
    $connection_id = itg_videogallery_ftp_video_list();
    ftp_pasv($connection_id, true);
    $ftp_files = ftp_nlist($connection_id, "/public_html/videos/");
    ftp_close($connection_id);
    foreach ($ftp_files as $files) {
        $file_array = explode('/public_html/videos/', $files);
        $path_info = pathinfo($file_array[1]);
        $extension = $path_info['extension'];
        if (isset($extension) && $extension == 'mp4') {
            $new_file[] = itg_videogallery_ftp_unused_file($file_array[1]);
        }
    }
    foreach ($new_file as $final_file) {
        if (!empty($final_file['filename'])) {
            $options[$final_file['fid']]['filename'] = $final_file['filename'];
            $options[$final_file['fid']]['filesize'] = number_format($final_file['filesize'] / (1024 * 1024), 2);
        }
    }
    return $options;
}

/**
 * Implements function for get unused files.
 * @param string $filename
 * @return array
 */
function itg_videogallery_ftp_unused_file($filename) {
    $uri = 'public://dailymotion_video_dir/' . $filename;
    $query = db_select('file_managed', 'fm');
    $query->condition('filename', $filename, '=');
    $query->condition('uri', $uri, '=');
    $query->fields('fm', array('fid', 'filename', 'filesize'));
    $query->leftJoin('field_data_field_upload_video', 'f_video', 'f_video.field_upload_video_fid = fm.fid');
    $query->condition(db_or()->isNull('f_video.field_upload_video_fid'));
    $query->fields('f_video', array('field_upload_video_fid'));
    $query->orderBy('fm.fid', 'DESC');
    $query->range(0, 1);
    $results = $query->execute()->fetchAssoc();
    return $results;
}

/**
 * Implements hook_views_query_alter()
 * {@inheritdoc}
 */
function itg_videogallery_views_query_alter(&$view, &$query) {
    if ($view->name == 'video_landing_header' && $view->current_display == 'block_1') {
        if (isset($_GET['category']) && is_numeric($_GET['category'])) {
            $parent = taxonomy_get_parents($_GET['category']);
            $key = key($parent);
            $parent_name = $parent[$key]->name;
            if ($parent[$key]->name == 'program' && empty($_GET['sid']) && empty($_GET['category'])) {
                $query->where[0]['conditions'][0]['value'][':field_data_field_story_category_field_story_category_tid'] = NULL;
            }
        }
    }
}

/**
 * Implements function for check tid parent program
 * @param type int
 * @return boolean
 */
function itg_videogallery_get_categoryparent($tid) {
    $parent = taxonomy_get_parents($tid);
    $parent_tid = key($parent);
    $program_tid = variable_get('program_category_id_for_programmes');
    //$key = key($parent);
    // $parent_name = $parent[$key]->name;
    if ($program_tid == $parent_tid) {
        return TRUE;
    } else {
        return FALSE;
    }
}

/**
 * Implements function for check tid parent program
 * @param type int
 * @return boolean
 */
function itg_videogallery_get_term($nid) {

    $query = db_select('field_data_field_story_category', 'iwo');
    $query->condition('iwo.entity_id', $nid)
            ->fields('iwo', array('field_story_category_tid'));
   $result = $query->execute();

   foreach ($result as $key => $value) {
      
       $return[]=$value->field_story_category_tid;
       
   }
   return $return;
}

/**
 * Implements function for get tid by nid
 * @param type int
 * @return int
 */
function itg_videogallery_get_tid_nid($nid) {
    $node = node_load($nid);
    return $node->field_story_category[LANGUAGE_NONE][0]['tid'];
}
