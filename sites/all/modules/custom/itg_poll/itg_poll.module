<?php

/**
 * @file
 * ITG Poll module.
 *
 * Provides customizations and functions for Poll.
 *
 */

/**
 * Implementation of hook_form_alter().
 * @param array $form 
 * @param array reference $form_state
 * @param type $form_id
 * @return array $form
 */
function itg_poll_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "poll_node_form") {
      $form['actions']['submit']['#submit'][] = 'alter_submit_status_message';
      $form['field_poll_question_text']['#states'] = array(
      'visible' => array(
        ':input[name="field_poll_question[und]"]' => array('value' => '1'),
      ),
      'required' => array(
        ':input[name="field_poll_question[und]"]' => array('value' => '1'),
      ),
    );
    $form['field_poll_question_image']['#states'] = array(
      'visible' => array(
        ':input[name="field_poll_question[und]"]' => array('value' => '2'),
      ),
      'required' => array(
        ':input[name="field_poll_question[und]"]' => array('value' => '2'),
      ),
    );
    $form['field_poll_question_video']['#states'] = array(
      'visible' => array(
        ':input[name="field_poll_question[und]"]' => array('value' => '3'),
      ),
      'required' => array(
        ':input[name="field_poll_question[und]"]' => array('value' => '3'),
      ),
    );

    //Disable when question is not selected
    $form['field_poll_answer_option']['#states'] = array(
      'disabled' => array(
        ':input[name="field_poll_question[und]"]' => array('value' => '_none'),
      )
    );
    $form['field_poll_end_date']['#states'] = array(
      'visible' => array(
        ':input[name="field_show_end_date[und][1]"]' => array('checked' => TRUE),
      ),
      'disable' => array(
        ':input[name="field_show_end_date[und][1]"]' => array('checked' => TRUE),
      )
    );
    if ((arg(0) == 'node' && arg(1) == "add" && arg(2) == 'poll') && (isset($form_state['build_info']['args'][0]) && $form_state['build_info']['args'][0]->preview != 'Preview')) {
      drupal_add_js("jQuery(document).ready(function(){ jQuery('input[name=field_poll_answer_add_more]').mousedown();});", 'inline');
    }
    $form['#after_build'][] = 'itg_poll_after_build';
    $form['#validate'][] = 'itg_poll_node_form_validate';
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'manage-poll', array('attributes' => array('class' => 'button'))),
      '#weight' => 20,
    );
  }
}
function alter_submit_status_message(&$form, $form_state) {
   if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);}
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'poll') {
    $op = 'created';
  }
  else {
    $op = 'updated';}
  $poll_title = $form_state['node']->title;
  drupal_set_message(t('Poll <b>' . $poll_title . '</b> has been ' . $op.'.' ));
  $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * After build for pollform.
 * @param array $form
 * @param array $form_state
 */
function itg_poll_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'itg_poll') . '/js/itg_pollnew.js', array('weight' => 3));
  global $user, $base_url;
  unset($form['metatags']['intro_text']['#markup']);
  $form['title']['#title'] = 'Poll Question';
  $form['path']['pathauto']['#title'] = t('Generate automatic Sef URL');
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_poll' => array('settings' => $settings)), array('type' => 'setting'));
  
  global $user;
    foreach ($form['field_poll_answer'][LANGUAGE_NONE] as $key => $item) {
            if(is_numeric($key)){
              if(!in_array('Site Admin', $user->roles)){
                $form['field_poll_answer'][LANGUAGE_NONE][$key]['field_poll_manipulate_value']['#access'] = FALSE;
               }
               $form['field_poll_answer'][LANGUAGE_NONE][$key]['field_ans_caption'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = "Caption";
             }
         
    }
  //poll disable after create
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
    $result = itg_poll_getTotalPoll(arg(1));
    if($result > 0){
      foreach ($form['field_poll_answer'][LANGUAGE_NONE] as $key => $item) {
            if(is_numeric($key)){
              $form['field_poll_answer'][LANGUAGE_NONE][$key]['remove_button']['#access'] = FALSE;
             }
          }
        $form['field_poll_answer'][LANGUAGE_NONE]['add_more']['#access'] = FALSE; // Disable Add more button
        if(!in_array('Site Admin', $user->roles)){
        $form['field_poll_question_text'][LANGUAGE_NONE][0]['value']['#attributes'] = array('readonly' => 'readonly');
        $form['title']['#attributes'] = array('readonly' => 'readonly');
        drupal_add_js(drupal_get_path('module', 'itg_poll') . '/js/itg_pollnew_disable.js', array('weight' => 4,  'scope' => 'footer'));
        }
        drupal_add_js("jQuery('document').ready(function(){  jQuery('#edit-field-poll-answer-option').remove();
            jQuery('#edit-field-poll-question').remove(); });", "inline");
    }
  }
  
  return $form;
}

/**
 * Implements custom validate of node add form for poll.
 * @param array $form 
 * @param array reference $form_state
 */
function itg_poll_node_form_validate($form, &$form_state) {
  $que_type = $form_state['values']['field_poll_answer_option'][LANGUAGE_NONE][0]['value'];
  $cnt = count($form_state['values']['field_poll_answer'][LANGUAGE_NONE]);
  if ($que_type == 1) { //1 = Text Question
    $field = 'field_poll_answer_text';
    $msg = 'Required Poll Answer Text';
  }
  elseif ($que_type == 2) { //2 == Image Type Question
    $field = 'field_poll_answer_image';
    $msg = 'Required Poll Answer Image';
  }
  if ($que_type) {
    itg_poll_validate_answer($cnt, $form_state, $que_type, $field, $msg);
  }
  if(isset($form_state['values']['field_poll_start_date'][LANGUAGE_NONE]) && isset($form_state['values']['field_poll_end_date'][LANGUAGE_NONE])){
   $s_date = $form_state['values']['field_poll_start_date'][LANGUAGE_NONE][0]['value'];
   if(isset($form_state['values']['field_poll_end_date'][LANGUAGE_NONE][0]['value'])){
     $e_date = $form_state['values']['field_poll_end_date'][LANGUAGE_NONE][0]['value'];
     $stime = strtotime($s_date);
     $etime = strtotime($e_date);
     if($stime > $etime){
       form_set_error('field_poll_end_date', 'End Date must greater then start date.');
     }
   }
  }
  
  $question = $form_state['values']['field_poll_question'][LANGUAGE_NONE][0]['value'];
  if($question == 1){ //Text
    $question_text = $form_state['values']['field_poll_question_text'][LANGUAGE_NONE][0]['value'];
    if(empty($question_text)){
      //form_set_error('field_poll_question_text', 'Poll Question Text is required.');
    }
  }elseif($question == 2){ //Image
    $question_image = $form_state['values']['field_poll_question_image'][LANGUAGE_NONE][0]['fid'];
    if($question_image == 0){
      form_set_error('field_poll_question_image', 'Poll Question Image is required.');
    }
  }elseif ($question == 3) { //Video
    $question_video = $form_state['values']['field_poll_question_video'][LANGUAGE_NONE][0]['fid'];
    if($question_video == 0){
      form_set_error('field_poll_question_video', 'Poll Question Video is required.');
    }
  }
 
  //associate poll INCORRECT validateion
  if(isset($form_state['values']['field_associate_poll'][LANGUAGE_NONE][0]) && $form_state['values']['field_associate_poll'][LANGUAGE_NONE][0]['target_id'] == ''){
    form_set_error('field_associate_poll', 'Please associate correct title with poll.');
  }
  
}

/**
 * validate poll answer form (option)
 * @param int $cnt: The total rows from poll answer option.  
 * @param array reference $form_state
 * @param int $type: 1=> text, 2=> image, 3=> video
 * @param string $field: validate fields
 * @param string $err_msg: show error message with fields
 */
function itg_poll_validate_answer($cnt, $form_state, $type, $field, $err_msg) {
  $count = ($cnt <= 2 ) ? $cnt : $cnt - 1;
  $err_msg = ($count == 2 ) ? 'Required Minimum Two Poll Answer' : $err_msg;

  for ($i = 0; $i < 2; $i++) {
    $poll_answer = isset($form_state['values']['field_poll_answer'][LANGUAGE_NONE]) ? $form_state['values']['field_poll_answer'][LANGUAGE_NONE][$i] : '';
    if ($type == 1) {
      $poll_answer_value = isset($poll_answer[$field][LANGUAGE_NONE]) ? $poll_answer[$field][LANGUAGE_NONE][0]['value'] : '';
    }
    elseif ($type == 2) {
      $poll_answer_value = isset($poll_answer[$field][LANGUAGE_NONE]) ? $poll_answer[$field][LANGUAGE_NONE][0]['fid'] : '';
    }
    if (empty($poll_answer_value)) {
      form_set_error($field, t($err_msg));
    }
  }
}

/**
 * Implement function for check cookie
 * @param int $nid
 * @return string
 */
function itg_poll_isCookies($nid) {
  $is_cookies = '';
  // get poll cookie
  if (isset($_COOKIE['visitedPoll'])) {

    $pollArr = explode('_', $_COOKIE['visitedPoll']);

    if ($nid === $pollArr[1]) {
      $is_cookies = 'yes';
    }
  }
  return $is_cookies;
}

/**
 * get all data it fetched from itg_polls custom table
 * @param int $this_nid
 * @return array
 */
function itg_poll_getPollResult($this_nid) {

  if (empty($this_nid)) {
    return false;
  }

  $query = db_select('itg_polls', 'p')
      ->fields('p', array('ansId', 'uid'))
      ->condition('p.nid', $this_nid)
      ->groupBy('p.ansId');


  // Add the COUNT expression
  $query->addExpression('COUNT(p.ansId)', 'optionCnt');
  $results = $query->execute()->fetchAll();

  foreach ($results as $row) {
    $optionArr[$row->ansId] = $row;
  }
  return $optionArr;
}

/**
 * get total count it featched from itg_polls custom table
 * @param int $this_nid
 * @return numbers
 */
function itg_poll_getTotalPoll($this_nid) {

  if (empty($this_nid)) {
    return false;
  }
  return $total = db_select('itg_polls', 'p')
          ->fields('p', array('Id'))
          ->condition('p.nid', $this_nid)->execute()->rowCount();
}

/**
 * Implements function for check user
 */
function itg_poll_getcurrent_userpoll($nid, $uid) {
  return $total = db_select('itg_polls', 'p')
          ->fields('p', array('uid'))
          ->condition('p.nid', $nid)
          ->condition('p.uId', $uid, '=')->execute()->fetchField();
}

/**
 * Implements function for check user
 */
function itg_poll_poll_data() {
  return $total = db_select('itg_polls', 'p')
          ->fields('p')
          ->condition('p.mail_flag', '1', '!=')
          ->condition('p.display_result', '2', '=')
          ->condition('p.uId', '0', '!=' )->execute()->fetchAll();
}

/**
 * Implementation of hook_form().
 * @param array $form 
 * @param array reference $form_state
 * @param array $parms 
 * @return array $form
 */
function itg_poll_form($form, &$form_state, $parms) {
  $form = array();
  $form['#id'] = 'subsPollForm';
  $form["wrapper"] = array(
    "#markup" => "<div class='inline-messages'></div>",
  );

  foreach ($parms as $item):
    $nid = $item->nid;
    foreach ($item->_field_data['nid']['entity']->field_poll_answer['und'] as $row) {
      $item_id[] = $row['value']; //fieldcollection id
    }
    // instant or after complete
    $display_result = isset($item->_field_data['nid']['entity']->field_display_result[LANGUAGE_NONE]) ? $item->_field_data['nid']['entity']->field_display_result[LANGUAGE_NONE][0]['value'] : '';

    $fieldcollect = entity_load('field_collection_item', $item_id);
    if (is_array($fieldcollect) && count($fieldcollect) > 0) {

      foreach ($fieldcollect as $key => $temp_ent) {

        $poll_answer_text = isset($temp_ent->field_poll_answer_text[LANGUAGE_NONE]) ? $temp_ent->field_poll_answer_text[LANGUAGE_NONE][0]['value'] : '';
        $poll_answer_image = isset($temp_ent->field_poll_answer_image[LANGUAGE_NONE]) ? $temp_ent->field_poll_answer_image[LANGUAGE_NONE][0]['fid'] : '';
        
        $poll_caption_text = isset($temp_ent->field_ans_caption[LANGUAGE_NONE]) ? $temp_ent->field_ans_caption[LANGUAGE_NONE][0]['value'] : '';
        
        if (isset($poll_answer_image) && $poll_answer_image > 0) {
          $poll_image = theme('image_style', array('style_name' => 'thumbnail', 'path' => file_load($poll_answer_image)->uri)).'<br /><span class="poll-ans-caption">'.$poll_caption_text.'</span>';
          $pollAnswer[$key] = isset($poll_image) ? $poll_image : '';
        }
        else {
          $pollAnswer[$key] = isset($poll_answer_text) ? $poll_answer_text.'<br /><span class="poll-ans-caption">'.$poll_caption_text.'</span>' : '';
        }
      }
    }
  endforeach;
  $val = array_keys($pollAnswer);
  $form['pole_answer'] = array(
    '#type' => 'radios',
    '#options' => $pollAnswer,
    //'#default_value' => $val[0],
    '#prefix' => '<div class="poll-main-wrap">',
    '#suffix' => '</div><span class="poll-ans-error"></span>',
  );

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );
  
  $form['argument_current_nid'] = array(
    '#type' => 'hidden',
    '#value' => arg(1),
  );

  $form['display_result'] = array(
    '#type' => 'hidden',
    '#value' => $display_result,
  );

  $form['captcha'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'recaptcha/reCAPTCHA',
    '#prefix' => '<span class="poll-ajax-error"></span>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
     '#ajax' => array(
        'callback' => 'itg_poll_form_ajax_submit',
        'effect' => 'fade',
        'progress' => array('type' => 'throbber', 'message' => ''),
        'validate_first' => TRUE,
      ),  
  );

  return $form;
}

/**
 * Implements function poll ajax submit().
 * @global type $user
 * @param array $form
 * @param array $form_state
 * @return type
 */
function itg_poll_form_ajax_submit($form, &$form_state){
   if(!isset($form_state['values']['pole_answer']) && empty($form_state['values']['pole_answer'])){
    $commands[] = ajax_command_replace('.poll-ans-error', '<span class="poll-ans-error error">Please select at least one option.</span>');
    drupal_get_messages();
     return array('#type' => 'ajax', '#commands' => $commands);
  }
   if (form_get_errors()) {
     $error = form_get_errors();
     $error = '<span class="poll-ajax-error error">'.$error['captcha_response'].'</span>';
     $commands[] = ajax_command_replace('.poll-ajax-error', $error);
     $commands[] = ajax_command_replace('.poll-ans-error', '');
     drupal_get_messages();
     return array('#type' => 'ajax', '#commands' => $commands);
  }
  $commands = array();
	global $user;
	//$commands[] = ajax_command_remove('section .inner-wrap .commerce-add-to-cart-confirmation');
  $_SESSION['first_submit_anomoyous'] = 'yes';
  $poll_answer = views_embed_view('poll_listing', 'block_2', $form_state['values']['argument_current_nid']);
  $commands[] = ajax_command_replace('#block-views-poll-listing-block-1', $poll_answer);

	return array('#type' => 'ajax', '#commands' => $commands);
    
}

/**
 * Implementation of hook_form_submit().
 * @param array $form 
 * @param array reference $form_state
 * @return array $element
 */
function itg_poll_form_submit($form, &$form_state) {
  if(!isset($form_state['values']['pole_answer']) && empty($form_state['values']['pole_answer'])){
    $commands[] = ajax_command_replace('.poll-ans-error', '<span class="poll-ans-error error">Please select at least one option.</span>');
    drupal_get_messages();
     return array('#type' => 'ajax', '#commands' => $commands);
  }
  global $user;
  $nId = $form_state['values']['nid'];
  $display_result = $form_state['values']['display_result'];
  $pole_answer = $form_state['values']['pole_answer'];


  // Get display result
  $dsp_result = itg_poll_get_display_result($nId);
  /**
   * Insert poll information in the database.
   */
  $created = date('Y-m-d H:i:s');
  db_insert('itg_polls')->fields(array(
    'nId' => $nId,
    'ansId' => $pole_answer,
    'uId' => $user->uid,
    'display_result' => $dsp_result,
    'created' => $created))->execute();

 
  $nId = $form_state['values']['nid'];
  $expire = time() + 60 * 60 * 24 * 30; // expires in one month
  $value = 'yes_' . $nId;
  setcookie('visitedPoll', $value, $expire, '/');
}

/**
 * Implement function for get display result in poll.
 */
function itg_poll_get_display_result($nid){
    $result = db_select('field_data_field_display_result', 'fdr')
          ->fields('fdr', array('field_display_result_value'))
          ->condition('fdr.entity_id', $nid, '=')
          ->condition('fdr.bundle', 'poll', '=' )->execute()->fetchField();
    return $result;
}

/**
 * Implements hook_block_info().
 */
function itg_poll_block_info() {
  $blocks['poll_tab_form_block'] = array(
    'info' => t('poll Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function itg_poll_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'poll_tab_form_block':
      $block['content'] = theme('itg_poll_tab_form_display_block', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function itg_poll_theme($existing, $type, $theme, $path) {
  $themes = array(
    'itg_poll_tab_form_display_block' => array(
      'template' => 'itg-poll-form-tab-template',
      'path' => drupal_get_path('module', 'itg_poll') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'poll_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'poll-node-form',
      'path' => drupal_get_path('module', 'itg_poll') . '/templates',
      'render element' => 'form',
    ),
  );
  return $themes;
}

/**
 * Implements views header link 
 *
 */
function itg_poll_views_pre_render(&$view) {
  if ($view->name == "poll_listing" && $view->current_display == 'page') {
    global $user; // Get user information
    $poll_content = '';
    $poll_content = '<a href ="./node/add/poll?destination=manage-poll">Create Poll</a>';
    $view->attachment_before = $poll_content;
  }
}
/**
 * Implement hook_form_FORM_ID_alter().
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_poll_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  //Get the Form Id
  if ($form["#id"] == 'views-exposed-form-poll-listing-page') {
    $form['title']['#autocomplete_path'] = 'content-title-list/poll/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
    $form['nid']['#autocomplete_path'] = 'content-nid-list/poll/autocomplete';
    $form['nid']['#attributes'] = array('placeholder' => t('Poll ID'));
  }
}

/**
 * Imlements hook_views_query_alter().
 * @param type $view
 * @param type $query
 */
function itg_poll_views_query_alter(&$view, &$query) {
  if ($view->name == "autocomplete_for_poll") {
    $join = new views_join();
    $join->table = 'field_data_field_associate_poll';
    $join->field = 'field_associate_poll_target_id';
    $join->left_table = 'node';
    $join->left_field = 'nid';
    $join->type = 'left';
    $query->add_relationship('dname', $join, 'node');
    if (arg(4) == 'node' && arg(5) == 'poll' && arg(6) == "NULL") {
      $query->where[1]['conditions'][2]['field'] = 'dname.field_associate_poll_target_id';
      $query->where[1]['conditions'][2]['operator'] = 'IS NULL';
      $query->where[1]['conditions'][2]['field'] = 'dname.field_associate_poll_target_id';
    }
    elseif (arg(4) == 'node' && is_numeric(arg(6)) && arg(5) == 'poll') {
      if (is_numeric(arg(6))) {
        $node = node_load(arg(6));
        if (isset($node->field_associate_poll[LANGUAGE_NONE])) {
         foreach ($node->field_associate_poll[LANGUAGE_NONE] as $value) {
            $nid_array[] = $value['target_id'];
          }
          // watchdog('vedpareek', '<pre>' . print_r($nid_array, TRUE) . '</pre>');
          $query->where[2]['conditions'][0]['field'] = 'dname.field_associate_poll_target_id';
          $query->where[2]['conditions'][0]['operator'] = 'IS NULL';
          $query->where[2]['conditions'][0]['field'] = 'dname.field_associate_poll_target_id';
          $query->where[2]['conditions'][1]['field'] = 'dname.field_associate_poll_target_id';
          $query->where[2]['conditions'][1]['value'] = $nid_array;
          $query->where[2]['conditions'][1]['operator'] = 'IN';
          $query->where[2]['type'] = 'OR';
        }else {
          $query->where[1]['conditions'][2]['field'] = 'dname.field_associate_poll_target_id';
          $query->where[1]['conditions'][2]['operator'] = 'IS NULL';
          $query->where[1]['conditions'][2]['field'] = 'dname.field_associate_poll_target_id';
        }
        
      }
    }
  }
}

/**
 * Implements hook__cronapi().
 */
function itg_poll_cronapi($op, $job = NULL) {
  $items['poll_complete_mail'] = array(
    'description' => 'Mail shoot after poll completion.',
    'weight' => 5,
    'callback' => 'itg_poll_complete_time_mail', 
  );
  return $items;
}
/**
 * Implement cron function for send mail.
 */
function itg_poll_complete_time_mail() {
  $poll_user_value = itg_poll_poll_data();
  if (isset($poll_user_value)) {
    foreach ($poll_user_value as $p_user_val) {
      $poll_user_id = $p_user_val->uId;
      $poll_nid = $p_user_val->nId;
      $mail_flag = $p_user_val->mail_flag;
      $user = user_load($poll_user_id);
      $node = node_load($poll_nid);
      if (isset($node->field_poll_end_date) && isset($node->field_show_end_date)) {
        $end_date = $node->field_poll_end_date[LANGUAGE_NONE][0]['value'];
        $etime = strtotime($end_date);
        $endtime = mktime(23, 59, 59, date("m", $etime), date("d", $etime), date("Y", $etime));
        $display_format = $node->field_display_result[LANGUAGE_NONE][0]['value']; // After Poll Completion 
        if ($display_format == 2 && $endtime <= time() && $mail_flag == 0) {
          $url_nid = $node->field_associate_poll[LANGUAGE_NONE][0]['target_id'];
          $message_body = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
      <html xmlns:v="urn:schemas-microsoft-com:vml">
      <head>
          <title></title>
      </head>
      <body style="margin:0; padding:0;">
            <table cellpadding="0" cellspacing="0" width="760" align="center"><tr><td>Hi ' . $user->name . ',</td></tr>
            <tr><td></td></tr>
            <tr><td>Please check your poll result on '.l("Click Here", "user/login", array("query" => array("destination" => "node/".$url_nid))).'</td></tr>
            <tr><td></td></tr>
            <tr><td></td></tr>
            <tr><td>Thanks,</td></tr>
            <tr><td>India Today Team</td></tr></table>
      </body></html>';
          $params = array(
            'body' => $message_body,
            'subject' => 'India Today | poll!',
          );
          $mail = drupal_mail('itg_poll', 'send_mail_to_poll_submit_user', $user->mail, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
          if ($mail['result']) {
            db_update('itg_polls')
                ->fields(array(
                  'mail_flag' => 1,
                ))
                ->condition('nId', $poll_nid, '=')
                ->condition('uId', $poll_user_id, '=')
                ->execute();
            return TRUE;
          }
          else {
            $error_msg = 'Failed to send the email!';
            watchdog('poll-email', $error_msg, array(), WATCHDOG_ALERT);
            return FALSE;
          }
        }
      }
    }
  }
}

/**
 * Send mail to expert, when query is received
 * @global String $base_url
 * @param String $key
 * @param String $message
 * @param Array $entity
 */
function itg_poll_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_mail_to_poll_submit_user':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Implements hook_node_presave().
 * @param type $node
 */
function itg_poll_node_presave($node){
  if($node->type == 'poll'){
    $poll_question = $node->field_poll_question[LANGUAGE_NONE][0]['value'];
    if ($poll_question == 1) { //1 = text
      $node->field_poll_question_image = '';
    } elseif ($poll_question == 2) { // Image
      $node->field_poll_question_text = '';
    }elseif ($poll_question == 3) { // video
      
    }

    if($node->field_poll_question[LANGUAGE_NONE][0]['value'] == 1){ //1 = text
      $node->field_poll_question_text[LANGUAGE_NONE][0]['value'] = $node->title;
    }
  }
}