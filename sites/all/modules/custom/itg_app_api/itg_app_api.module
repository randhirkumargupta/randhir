<?php

/**
 * @file
 * Module file for APP API Schemes Services.
 * Contains the resource declarations for the service APIs
 * and other commons functions/hooks. if necessary
 */

/**
 * Implements hook_init(). 
 */
function itg_app_api_init() {
  module_load_include('inc', 'itg_app_api', 'inc/helper');
  
}

/**
 * Implements hook_services_resources().
 * Create service resource for APIs to return the necessary json data.
 */
function itg_app_api_services_resources() {

  $resources = array();

  //Include the necessary inc files.
  module_load_include('inc', 'itg_app_api', 'itg_app_api.services');

  //Service Apis for contents.
  $resources += itg_app_api_resource();

  return $resources;
}

/**
 * Implements hook_menu().
 */
function itg_app_api_menu() {

  $items = array();

  $items['admin/api-configuration'] = array(
    'title' => 'API Configuration',
    'description' => 'API Configuration',
    'weight' => 80,
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/api-configuration/feed-api'] = array(
    'title' => 'Feed API',
    'description' => 'Feed API Configuration',
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/api-configuration/rest-api'] = array(
    'title' => 'REST API',
    'description' => 'REST API Configuration',
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  // menu for set update webservice token
  $items['admin/api-configuration/rest-api/mobile-service-token'] = array(
    'title' => 'Mobile web service token',
    'description' => 'Mobile web service token',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mobile_service_token'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  // menu for update config_update_status json
  $items['admin/api-configuration/rest-api/config-update-status-json'] = array(
    'title' => 'Update config_update_status json',
    'description' => 'Update config_update_status json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('config_update_status_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  // menu for update datanotexist_api json
  $items['admin/api-configuration/rest-api/datanotexist-api-json'] = array(
    'title' => 'update datanotexist_api json',
    'description' => 'update datanotexist_api json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datanotexist_api_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  // menu for update hamburger_menu json
  $items['admin/api-configuration/rest-api/hamburger-menu-json'] = array(
    'title' => 'update hamburger_menu json',
    'description' => 'update hamburger_menu json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hamburger_menu_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  // menu for update horizontal_menu json
  $items['admin/api-configuration/rest-api/horizontal-menu-json'] = array(
    'title' => 'update horizontal_menu json',
    'description' => 'update horizontal_menu json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('horizontal_menu_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  // menu for update master_config json
  $items['admin/api-configuration/rest-api/master-config-json'] = array(
    'title' => 'update master_config json',
    'description' => 'update master_config json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_config_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  // menu for update server_error_master json
  $items['admin/api-configuration/rest-api/server-error-master-json'] = array(
    'title' => 'update server_error_master json',
    'description' => 'update server_error_master json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('server_error_master_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  //sprint 2 seting menu,  admin/structure/services

  $items['admin/api-configuration/rest-api/ad-config-json'] = array(
    'title' => 'update ad config json',
    'description' => 'ad_config_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ad_config_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/api-configuration/rest-api/livetv-channellist-json'] = array(
    'title' => 'update livetv channellist json',
    'description' => 'livetv_channellist_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livetv_channellist_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/api-configuration/rest-api/livetv-aajtak'] = array(
    'title' => 'update livetv aajtak',
    'description' => 'livetv_aajtak',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livetv_aajtak'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/api-configuration/rest-api/livetv-indiatoday'] = array(
    'title' => 'update livetv indiatoday',
    'description' => 'livetv_indiatoday',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livetv_indiatoday'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/api-configuration/rest-api/livetv-delhiaajtak'] = array(
    'title' => 'update livetv delhiaajtak',
    'description' => 'livetv_delhiaajtak',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livetv_delhiaajtak'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/api-configuration/rest-api/livetv-tej'] = array(
    'title' => 'update livetv tej',
    'description' => 'livetv_tej',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livetv_tej'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/api-configuration/rest-api/otherapps-ios-json'] = array(
    'title' => 'update otherapps ios json',
    'description' => 'otherapps_ios_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('otherapps_ios_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/api-configuration/rest-api/otherapps-android-json'] = array(
    'title' => 'update otherapps android json',
    'description' => 'otherapps_android_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('otherapps_android_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  // for static other device

  $items['admin/api-configuration/rest-api/adconfig-android'] = array(
    'title' => 'update adconfig android json',
    //'description' => 'otherapps_android_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adconfig_android'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/api-configuration/rest-api/adconfig-ipad'] = array(
    'title' => 'update adconfig ipad json',
    //'description' => 'otherapps_android_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adconfig_ipad'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/api-configuration/rest-api/adconfig-iphone'] = array(
    'title' => 'update adconfig iphone json',
    //'description' => 'otherapps_android_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adconfig_iphone'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/api-configuration/rest-api/adconfig-tab'] = array(
    'title' => 'update adconfig tab json',
    //'description' => 'otherapps_android_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adconfig_tab'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
  );


  return $items;
}

/*
 * mobile_service_token form decalation
 */
function mobile_service_token() {
  $form = array();

  $form['mobile_service_token'] = array(
    '#type' => 'textfield',
    '#title' => t('web service token'),
    '#default_value' => variable_get('mobile_service_token'),
    '#description' => t("Token for web service API."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * mobile_service_token form validation
 */
function mobile_service_token_validate($form, &$form_state) {}

/*
 * config_update_status_json form decalation
 * 
 */
function config_update_status_json() {
  $form = array();

  $form['config_update_status_json'] = array(
    '#type' => 'textarea',
    '#title' => t('config update status json'),
    '#default_value' => variable_get('config_update_status_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * datanotexist_api_json form decalation
 */
function datanotexist_api_json() {
  $form = array();

  $form['datanotexist_api_json'] = array(
    '#type' => 'textarea',
    '#title' => t('datanotexist api json'),
    '#default_value' => variable_get('datanotexist_api_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * hamburger_menu_json form decalation
 */
function hamburger_menu_json() {
  $form = array();

  $form['hamburger_menu_json'] = array(
    '#type' => 'textarea',
    '#title' => t('hamburger menu json'),
    '#default_value' => variable_get('hamburger_menu_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// horizontal_menu_json form decalation
function horizontal_menu_json() {
  $form = array();

  $form['horizontal_menu_json'] = array(
    '#type' => 'textarea',
    '#title' => t('horizontal menu json'),
    '#default_value' => variable_get('horizontal_menu_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// master_config_json form decalation
function master_config_json() {
  $form = array();

  $form['master_config_json'] = array(
    '#type' => 'textarea',
    '#title' => t('master config json'),
    '#default_value' => variable_get('master_config_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// server_error_master_json form decalation
function server_error_master_json() {
  $form = array();

  $form['server_error_master_json'] = array(
    '#type' => 'textarea',
    '#title' => t('server error master json'),
    '#default_value' => variable_get('server_error_master_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * function to getCommentsCount of node
 *
 * @return int $count
 * @pram int $nid
 */
function getCommentsCount($nid) {

  $node_anyalytics = analytics_node_data($nid, 'array');
  $nc_count = $node_anyalytics['data_count_node_comment'];
  return $nc_count;
}

/**
 * function for return node published date
 * @arg int $nid 
 * @return datetime $published_datetime
 */
function getNodePublishedDate($nid) {
  $query = db_select('workbench_moderation_node_history', 'nh');
  $query->fields('nh', array('stamp'));
  $query->condition('nh.nid', $nid);
  $query->condition('nh.from_state', 'draft');
  $query->condition('nh.state', 'published');
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $published_statp = $result[0]['stamp'];
  if ($published_statp) {
    $published_datetime = date("Y-m-d H:i:s", $published_statp);
  }
  else {
    $published_datetime = "";
  }
  return $published_datetime;
}

// sprint2 seting function
// ad_config_json form decalation
function ad_config_json() {
  $form = array();

  $form['ad_config_json'] = array(
    '#type' => 'textarea',
    '#title' => t('ad config json'),
    '#default_value' => variable_get('ad_config_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// livetv_channellist_json form decalation
function livetv_channellist_json() {
  $form = array();

  $form['livetv_channellist_json'] = array(
    '#type' => 'textarea',
    '#title' => t('livetv channellist json'),
    '#default_value' => variable_get('livetv_channellist_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// livetv_json form decalation
function livetv_aajtak() {
  $form = array();

  $form['livetv_aajtak'] = array(
    '#type' => 'textarea',
    '#title' => t('livetv aajtak'),
    '#default_value' => variable_get('livetv_aajtak'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}
// livetv_indiatoday form decalation
function livetv_indiatoday() {
  $form = array();

  $form['livetv_indiatoday'] = array(
    '#type' => 'textarea',
    '#title' => t('livetv indiatoday'),
    '#default_value' => variable_get('livetv_indiatoday'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}
// livetv_delhiaajtak form decalation
function livetv_delhiaajtak() {
  $form = array();

  $form['livetv_delhiaajtak'] = array(
    '#type' => 'textarea',
    '#title' => t('livetv delhiaajtak'),
    '#default_value' => variable_get('livetv_delhiaajtak'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}
// livetv_tej form decalation
function livetv_tej() {
  $form = array();

  $form['livetv_tej'] = array(
    '#type' => 'textarea',
    '#title' => t('livetv tej'),
    '#default_value' => variable_get('livetv_tej'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// otherapps_ios_json form decalation
function otherapps_ios_json() {
  $form = array();

  $form['otherapps_ios_json'] = array(
    '#type' => 'textarea',
    '#title' => t('otherapps ios json'),
    '#default_value' => variable_get('otherapps_ios_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// otherapps_android_json form decalation
function otherapps_android_json() {
  $form = array();

  $form['otherapps_android_json'] = array(
    '#type' => 'textarea',
    '#title' => t('otherapps android json'),
    '#default_value' => variable_get('otherapps_android_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_url_inbound_alter().
 */
function itg_app_api_url_inbound_alter(&$result, $path, $path_language) {
  $u_agent = $_SERVER['HTTP_USER_AGENT'];
  $flag = 0;

  // user agent for browser
  if (preg_match('/MSIE/i', $u_agent) && !preg_match('/Opera/i', $u_agent)) {
    $flag = 1;
    // this condition is for IE11
  }
  // this condition is for IE11
  elseif (preg_match('/Trident/i', $u_agent)) {
    $flag = 1;
  }
  elseif (preg_match('/Firefox/i', $u_agent)) {
    $flag = 1;
  }
  elseif (preg_match('/Chrome/i', $u_agent)) {
    $flag = 1;
  }
  elseif (preg_match('/Safari/i', $u_agent)) {
    $flag = 1;
  }
  elseif (preg_match('/Opera/i', $u_agent)) {
    $flag = 1;
  }
  elseif (preg_match('/Netscape/i', $u_agent)) {
    $flag = 1;
  }

  // user agent for mobile device

  $iphone = strpos($_SERVER['HTTP_USER_AGENT'], "iPhone");
  $android = strpos($_SERVER['HTTP_USER_AGENT'], "Android");
  $palmpre = strpos($_SERVER['HTTP_USER_AGENT'], "webOS");
  $berry = strpos($_SERVER['HTTP_USER_AGENT'], "BlackBerry");
  $ipod = strpos($_SERVER['HTTP_USER_AGENT'], "iPod");

  if ($iphone || $android || $palmpre || $ipod || $berry == TRUE) {
    $flag = 1;
  }
  $post_res = array("signup", "login_request", "forgot_password", "otp_verification", "resend_otp", "change_password", "log_out", "get_login_user_detail", "edit_profile", "cast_polls", "bookmark_set", "bookmark_delete", "bookmark_get", "get_preference", "edit_user_image", "update_preference", "reset_password", "authtoken_verification");
  if (arg(0) == "appapi" && count(arg()) == 2) {
    if (!in_array(arg(1), $post_res)) {
      $result = $path . "/it";
    }
  }
}

/*
 * Function to get Story type on behalf of Node nid i.e. photostory or normal story
 * @param int $nid
 * @return String $type
 */
function getStoryType($nid) {
  $query = db_select('node', 'n');
  $query->Join('field_data_field_story_type', 'st', 'st.entity_id = n.nid');
  $query->fields('st', array('field_story_type_value'));
  $query->condition('st.entity_id', $nid);
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $type = 'story';
  if ($result[0]['field_story_type_value'] == 'photo_story') {
    $type = 'photostory';
  }
  return $type;
}



/**
 * Implements hook_boot().
 */
function itg_app_api_boot() {}



// adconfig_android form decalation
function adconfig_android() {
  $form = array();

  $form['adconfig_android'] = array(
    '#type' => 'textarea',
    '#title' => t('adconfig android'),
    '#default_value' => variable_get('adconfig_android'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * adconfig_ipad form decalation
 */
function adconfig_ipad() {
  $form = array();

  $form['adconfig_ipad'] = array(
    '#type' => 'textarea',
    '#title' => t('adconfig ipad'),
    '#default_value' => variable_get('adconfig_ipad'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * adconfig_iphone form decalation
 */
function adconfig_iphone() {
  $form = array();

  $form['adconfig_iphone'] = array(
    '#type' => 'textarea',
    '#title' => t('adconfig iphone'),
    '#default_value' => variable_get('adconfig_iphone'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * adconfig_tab form decalation
 */
function adconfig_tab() {
  $form = array();

  $form['adconfig_tab'] = array(
    '#type' => 'textarea',
    '#title' => t('adconfig tab'),
    '#default_value' => variable_get('adconfig_tab'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}



/**
 * Function to get total number of nodes in taxonomy.
 *
 * @param int $tid
 *
 * @return int
 */
function count_node_under_tid_service($tid) {
  $query = db_select('taxonomy_index', 'ti');
  $query->leftJoin('node', 'n', 'n.nid=ti.nid');
  $query->addField('ti', 'nid');
  $query->condition('ti.tid', $tid);
  $query->condition('n.status', 1);
  $query->condition('n.type', array('story', 'videogallery', 'photogallery'), 'IN');
  $query->orderBy('n.created', 'DESC');
  return $query->execute()->rowCount();
}



/**
 * Call back function for nody body token filter .
 *
 * @param string $n_body
 *
 * @return string $n_body
 */
function formateNodeBodyToken($n_body) {
  include 'simple_html_dom.php';
  $token_list = array('div[class=quiz]', 'div[class=poll]', 'div[class=survey]', 'div[class=listicle]', 'div[class=itgimage]', 'iframe', '<p>[ITG:TECH-PHOTOS]</p>', '<p>[ITG:EXPERT-CHUNK]</p>', '<p>[ITG:FACTOIDS]</p>');
  $data = array();
  $poll_id = 0;

  $str_html = str_get_html($n_body);
  // loop on token array
  foreach ($token_list as $tkey => $tvalue) {
    if ($tvalue == '<p>[ITG:TECH-PHOTOS]</p>' || $tvalue == '<p>[ITG:EXPERT-CHUNK]</p>' || $tvalue == '<p>[ITG:FACTOIDS]</p>') {
      $tvalue_replave = "<ITG-NATIVEAPP>" . $tvalue . "<ITG-NATIVEAPP>";
      $n_body = str_replace($tvalue, $tvalue_replave, $n_body);
    }
    else {
      $node_str = "";
      $node_ar = array();
      foreach ($str_html->find($tvalue) as $element) {
        $node_str .= $element . "$$$$$";
        // get poll id
        if ($tvalue == "div[class=poll]") {
          $poll_id = filter_var($element, FILTER_SANITIZE_NUMBER_INT);
        }
      }
      $node_str = rtrim($node_str, "$$$$$");
      $node_ar = explode("$$$$$", $node_str);


      foreach ($node_ar as $key => $value) {
        $replace = "<ITG-NATIVEAPP>" . $value . "<ITG-NATIVEAPP>";
        $n_body = str_replace($value, $replace, $n_body);
      }
    }
  }
  // add AD block after 1st <p> start
  $start = strpos($n_body, '<p>');
  $end = strpos($n_body, '</p>', $start);
  $paragraph = substr($n_body, $start, $end - $start + 4);
  $paragraph_rep = $paragraph . "<ITG-NATIVEAPP>ADS<ITG-NATIVEAPP>";
  $n_body = str_replace($paragraph, $paragraph_rep, $n_body);
  // add AD block after 1st <p> end
  $data['n_body'] = $n_body;
  $data['poll_id'] = $poll_id;
  return $data;
}

/**
 * function for  getTechPros
 * @pram $content_org
 *
 * @return array
 */
function getTechProsImg($content_org) {
  //include 'simple_html_dom.php';
  $src = "";
  if ($content_org) {
    $str_html = str_get_html($content_org);
    $img_str = "";
    foreach ($str_html->find('ul[class="pron-cons-img]') as $element) {
      $img_str = $element;
    }
    $str_html2 = str_get_html($img_str);
    foreach ($str_html2->find('img') as $element) {
      $img_str_img = $element;
    }
    $xpath = new DOMXPath(@DOMDocument::loadHTML($img_str_img));
    $src = $xpath->evaluate("string(//img/@src)");
    //echo $src; die();
  }
  return $src;
}

/**
 * function for  getTechPros
 * @pram $content_org
 *
 * @return array
 */
function getTechProsh2($content_org) {
  //include 'simple_html_dom.php';
  $h2 = "";
  if ($content_org) {
    $str_html = str_get_html($content_org);
    $h2 = "";
    foreach ($str_html->find('h2') as $element) {
      $h2 = $element;
    }
    $h2 = ltrim($h2, "<h2>");
    $h2 = rtrim($h2, "</h2>");
  }

  return $h2;
}

