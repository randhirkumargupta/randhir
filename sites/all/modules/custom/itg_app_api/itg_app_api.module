<?php

/**
 * @file
 * Module file for APP API Schemes Services.
 * Contains the resource declarations for the service APIs 
 * and other commons functions/hooks. if necessary
 */

/**
 * Implements hook_init().
 */
function itg_app_api_init() {
    module_load_include('inc', 'itg_app_api', 'inc/helper');
    module_load_include('inc', 'itg_app_api', 'inc/simple_html_dom');
}

/**
 * Implements hook_services_resources().
 * Create service resource for APIs to return the necessary json data.
 */
function itg_app_api_services_resources() {

    $resources = array();

    //Include the necessary inc files.
    module_load_include('inc', 'itg_app_api', 'itg_app_api.services');

    //Service Apis for contents.
    $resources += itg_app_api_resource();

    return $resources;
}

/**
 * Implements hook_menu().
 */
function itg_app_api_menu() {
    $items = array();
    $items['admin/api-configuration'] = array(
        'title' => 'API Configuration',
        'description' => 'API Configuration',
        'weight' => 80,
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/feed-api'] = array(
        'title' => 'Feed API',
        'description' => 'Feed API Configuration',
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api'] = array(
        'title' => 'REST API',
        'description' => 'REST API Configuration',
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for set update webservice token
    $items['admin/api-configuration/rest-api/mobile-service-token'] = array(
        'title' => 'Mobile web service token',
        'description' => 'Mobile web service token',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mobile_service_token'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update config_update_status json
    $items['admin/api-configuration/rest-api/config-update-status-json'] = array(
        'title' => 'Update config_update_status json',
        'description' => 'Update config_update_status json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('config_update_status_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update datanotexist_api json
    $items['admin/api-configuration/rest-api/datanotexist-api-json'] = array(
        'title' => 'update datanotexist_api json',
        'description' => 'update datanotexist_api json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('datanotexist_api_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update hamburger_menu json
    $items['admin/api-configuration/rest-api/hamburger-menu-json'] = array(
        'title' => 'update hamburger_menu json',
        'description' => 'update hamburger_menu json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('hamburger_menu_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update horizontal_menu json
    $items['admin/api-configuration/rest-api/horizontal-menu-json'] = array(
        'title' => 'update horizontal_menu json',
        'description' => 'update horizontal_menu json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('horizontal_menu_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update master_config json
    $items['admin/api-configuration/rest-api/master-config-json'] = array(
        'title' => 'update master_config json',
        'description' => 'update master_config json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('master_config_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update server_error_master json
    $items['admin/api-configuration/rest-api/server-error-master-json'] = array(
        'title' => 'update server_error_master json',
        'description' => 'update server_error_master json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('server_error_master_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    //sprint 2 seting menu,  admin/structure/services
    $items['admin/api-configuration/rest-api/ad-config-json'] = array(
        'title' => 'update ad config json',
        'description' => 'ad_config_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ad_config_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/livetv-channellist-json'] = array(
        'title' => 'update livetv channellist json',
        'description' => 'livetv_channellist_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('livetv_channellist_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/livetv-aajtak'] = array(
        'title' => 'update livetv aajtak',
        'description' => 'livetv_aajtak',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('livetv_aajtak'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/livetv-indiatoday'] = array(
        'title' => 'update livetv indiatoday',
        'description' => 'livetv_indiatoday',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('livetv_indiatoday'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/livetv-delhiaajtak'] = array(
        'title' => 'update livetv delhiaajtak',
        'description' => 'livetv_delhiaajtak',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('livetv_delhiaajtak'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/api-configuration/rest-api/livetv-tej'] = array(
        'title' => 'update livetv tej',
        'description' => 'livetv_tej',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('livetv_tej'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/otherapps-ios-json'] = array(
        'title' => 'update otherapps ios json',
        'description' => 'otherapps_ios_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('otherapps_ios_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/otherapps-android-json'] = array(
        'title' => 'update otherapps android json',
        'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('otherapps_android_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // for static other device

    $items['admin/api-configuration/rest-api/adconfig-android'] = array(
        'title' => 'update adconfig android json',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('adconfig_android'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/adconfig-ipad'] = array(
        'title' => 'update adconfig ipad json',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('adconfig_ipad'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/api-configuration/rest-api/adconfig-iphone'] = array(
        'title' => 'update adconfig iphone json',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('adconfig_iphone'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/api-configuration/rest-api/adconfig-tab'] = array(
        'title' => 'update adconfig tab json',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('adconfig_tab'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/api-configuration/rest-api/cube-widget'] = array(
        'title' => 'update cube widget json',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cube_widget'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // for redish ttl

    $items['admin/api-configuration/rest-api/redish-ttl'] = array(
        'title' => 'update Rest API redish TTL',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('redish_ttl'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/api-configuration/rest-api/time-interval'] = array(
        'title' => 'update Rest API redish TTL',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('time_interval'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['test-to-live/home-api'] = array(
        'title' => 'Test to live: home-api',
        'page callback' => 'testtolive_homeapi',
        'access arguments' => array('administer app manager'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'inc/itg_app_api_homePage.inc',
    );
    // menu for update config_update_status json
    $items['admin/api-configuration/rest-api/hamburger-menu-tv-json'] = array(
        'title' => 'Update hamburger_menu_tv json',
        'description' => 'Update hamburger_menu_tv json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('hamburger_menu_tv_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );
    // menu for update config_update_status json
    $items['admin/api-configuration/rest-api/popular-search-tv-json'] = array(
        'title' => 'Update popular_search_tv json',
        'description' => 'Update popular_search_tv json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('popular_search_tv_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

/**
 * mobile_service_token form decalation
 *
 * @return type
 */
function mobile_service_token() {
    $form = array();
    $form['mobile_service_token'] = array(
        '#type' => 'textfield',
        '#title' => t('web service token'),
        '#default_value' => variable_get('mobile_service_token'),
        '#description' => t("Token for web service API."),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

/**
 * config_update_status_json form decalation
 *
 * @return type
 */
function config_update_status_json() {
    $form = array();
    $form['config_update_status_json'] = array(
        '#type' => 'textarea',
        '#title' => t('config update status json'),
        '#default_value' => variable_get('config_update_status_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * datanotexist_api_json form decalation
 *
 * @return type
 */
function datanotexist_api_json() {
    $form = array();

    $form['datanotexist_api_json'] = array(
        '#type' => 'textarea',
        '#title' => t('datanotexist api json'),
        '#default_value' => variable_get('datanotexist_api_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * hamburger_menu_json form decalation
 *
 * @return type
 */
function hamburger_menu_json() {
    $form = array();

    $form['hamburger_menu_json'] = array(
        '#type' => 'textarea',
        '#title' => t('hamburger menu json'),
        '#default_value' => variable_get('hamburger_menu_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * horizontal_menu_json form decalation
 *
 * @return type
 */
function horizontal_menu_json() {
    $form = array();

    $form['horizontal_menu_json'] = array(
        '#type' => 'textarea',
        '#title' => t('horizontal menu json'),
        '#default_value' => variable_get('horizontal_menu_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * master_config_json form decalation
 *
 * @return type
 */
function master_config_json() {
    $form = array();

    $form['master_config_json'] = array(
        '#type' => 'textarea',
        '#title' => t('master config json'),
        '#default_value' => variable_get('master_config_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * server_error_master_json form decalation
 *
 * @return type
 */
function server_error_master_json() {
    $form = array();

    $form['server_error_master_json'] = array(
        '#type' => 'textarea',
        '#title' => t('server error master json'),
        '#default_value' => variable_get('server_error_master_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * function to getCommentsCount of node
 *
 * @return int $nid
 * @pram int $nc_count
 */
function getCommentsCount($nid) {
    $cont = 0;
    return $cont;
    $node_anyalytics = analytics_node_data($nid, 'total', 'commentcont');
    $nc_count = $node_anyalytics['data_count_node_comment'];
    return $nc_count;
}

/**
 * function for return node published date
 * @arg int $nid
 *
 * @return datetime $published_datetime
 */
function getNodePublishedDate($nid) {
    $query = db_select('workbench_moderation_node_history', 'nh');
    $query->fields('nh', array('stamp'));
    $query->condition('nh.nid', $nid);
    $query->condition('nh.from_state', 'draft');
    $query->condition('nh.state', 'published');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $published_statp = $result[0]['stamp'];
    if ($published_statp) {
        $published_datetime = date("Y-m-d H:i:s", $published_statp);
    } else {
        $published_datetime = "";
    }
    return $published_datetime;
}

// sprint2 seting function

/**
 * ad_config_json form decalation
 *
 * @return type
 */
function ad_config_json() {
    $form = array();
    $form['ad_config_json'] = array(
        '#type' => 'textarea',
        '#title' => t('ad config json'),
        '#default_value' => variable_get('ad_config_json'),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

/**
 * livetv_channellist_json form decalation
 *
 * @return type
 */
function livetv_channellist_json() {
    $form = array();
    $form['livetv_channellist_json'] = array(
        '#type' => 'textarea',
        '#title' => t('livetv channellist json'),
        '#default_value' => variable_get('livetv_channellist_json'),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

/**
 * livetv aajtak form decalations
 *
 * @return type
 */
function livetv_aajtak() {
    $form = array();

    $form['livetv_aajtak'] = array(
        '#type' => 'textarea',
        '#title' => t('livetv aajtak'),
        '#default_value' => variable_get('livetv_aajtak'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * livetv_indiatoday form decalations
 *
 * @return type
 */
function livetv_indiatoday() {
    $form = array();

    $form['livetv_indiatoday'] = array(
        '#type' => 'textarea',
        '#title' => t('livetv indiatoday'),
        '#default_value' => variable_get('livetv_indiatoday'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * livetv_delhiaajtak form decalation
 *
 * @return type
 */
function livetv_delhiaajtak() {
    $form = array();

    $form['livetv_delhiaajtak'] = array(
        '#type' => 'textarea',
        '#title' => t('livetv delhiaajtak'),
        '#default_value' => variable_get('livetv_delhiaajtak'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * livetv_tej form decalation
 *
 * @return type
 */
function livetv_tej() {
    $form = array();

    $form['livetv_tej'] = array(
        '#type' => 'textarea',
        '#title' => t('livetv tej'),
        '#default_value' => variable_get('livetv_tej'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * otherapps_ios_json form decalation
 *
 * @return type
 */
function otherapps_ios_json() {
    $form = array();

    $form['otherapps_ios_json'] = array(
        '#type' => 'textarea',
        '#title' => t('otherapps ios json'),
        '#default_value' => variable_get('otherapps_ios_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * otherapps_android_json form decalation
 *
 * @return type
 */
function otherapps_android_json() {
    $form = array();
    $form['otherapps_android_json'] = array(
        '#type' => 'textarea',
        '#title' => t('otherapps android json'),
        '#default_value' => variable_get('otherapps_android_json'),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

/**
 * Implements hook_url_inbound_alter().
 */
function itg_app_api_url_inbound_alter(&$result, $path, $path_language) {
    $u_agent = $_SERVER['HTTP_USER_AGENT'];
    $flag = 0;

    // user agent for browser
    if (preg_match('/MSIE/i', $u_agent) && !preg_match('/Opera/i', $u_agent)) {
        $flag = 1;
    }
    // this condition is for IE11
    elseif (preg_match('/Trident/i', $u_agent)) {
        $flag = 1;
    } elseif (preg_match('/Firefox/i', $u_agent)) {
        $flag = 1;
    } elseif (preg_match('/Chrome/i', $u_agent)) {
        $flag = 1;
    } elseif (preg_match('/Safari/i', $u_agent)) {
        $flag = 1;
    } elseif (preg_match('/Opera/i', $u_agent)) {
        $flag = 1;
    } elseif (preg_match('/Netscape/i', $u_agent)) {
        $flag = 1;
    }

    // user agent for mobile device

    $iphone = strpos($_SERVER['HTTP_USER_AGENT'], "iPhone");
    $android = strpos($_SERVER['HTTP_USER_AGENT'], "Android");
    $palmpre = strpos($_SERVER['HTTP_USER_AGENT'], "webOS");
    $berry = strpos($_SERVER['HTTP_USER_AGENT'], "BlackBerry");
    $ipod = strpos($_SERVER['HTTP_USER_AGENT'], "iPod");

    if ($iphone || $android || $palmpre || $ipod || $berry == TRUE) {
        $flag = 1;
    }
    $post_res = array("signup", "login_request", "forgot_password", "otp_verification", "resend_otp", "change_password", "log_out", "get_login_user_detail", "edit_profile", "cast_polls", "bookmark_set", "bookmark_delete", "bookmark_get", "get_preference", "edit_user_image", "update_preference", "reset_password", "authtoken_verification", "follow_anchor", "follow_author", "anchor_follow_list", "author_follow_list", "author_list", "anchor_list", "get_the_user_follow_status", "follow_topic", "get_the_user_follow_status", "user_follow_topic_list", "social_share_save_it", "insert_video", "fba_update");
    if (arg(0) == "appapi" && count(arg()) == 2) {
        if (!in_array(arg(1), $post_res)) {
            $result = $path . "/it";
        }
    }
}

/*
 * Function to get Story type on behalf of Node nid i.e. photostory or normal story
 * @param int $nid
 * @return String $type
 */

function getStoryType($nid) {
    $query = db_select('node', 'n');
    $query->Join('field_data_field_story_type', 'st', 'st.entity_id = n.nid');
    $query->fields('st', array('field_story_type_value'));
    $query->condition('st.entity_id', $nid);
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $type = 'story';
    if ($result[0]['field_story_type_value'] == 'photo_story') {
        $type = 'photostory';
    }
    return $type;
}

/*
 * Function to call login api
 * @param array
 * @return array 
 */

function callAPI($method, $url, $data = FALSE) {
    $curl = curl_init();
    switch ($method) {
        case "POST":
            curl_setopt($curl, CURLOPT_POST, 1);
            if ($data) {
                curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
            }
            break;

        case "PUT":
            curl_setopt($curl, CURLOPT_PUT, 1);
            break;

        default:
            if ($data) {
                $url = sprintf("%s?%s", $url, http_build_query($data));
            }
    }

    // Optional Authentication:
    curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($curl, CURLOPT_USERPWD, "itgddev:itgd@789");

    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

    $result = curl_exec($curl);

    curl_close($curl);

    return $result;
}

/**
 * Implements hook_boot().
 * for url inbond alter.
 */
function itg_app_api_boot() {
    // delection function required for inbond alter,
}

/**
 * code for check POST method only start
 *
 * @return int
 */
function checkReqMethod() {
    $req_method = $_SERVER['REQUEST_METHOD'];
    $flag = 1;
    if ($req_method != "POST") {
        $flag = 0;
    } else {
        $flag = 1;
    }
    return $flag;
}

/**
 * adconfig_android form decalation
 *
 * @return type
 */
function adconfig_android() {
    $form = array();

    $form['adconfig_android'] = array(
        '#type' => 'textarea',
        '#title' => t('adconfig android'),
        '#default_value' => variable_get('adconfig_android'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/*
 * adconfig_ipad form decalation
 */

function adconfig_ipad() {
    $form = array();

    $form['adconfig_ipad'] = array(
        '#type' => 'textarea',
        '#title' => t('adconfig ipad'),
        '#default_value' => variable_get('adconfig_ipad'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * adconfig_iphone form decalation
 *
 * @return type
 */
function adconfig_iphone() {
    $form = array();

    $form['adconfig_iphone'] = array(
        '#type' => 'textarea',
        '#title' => t('adconfig iphone'),
        '#default_value' => variable_get('adconfig_iphone'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * adconfig_tab form decalation
 *
 * @return type
 */
function adconfig_tab() {
    $form = array();

    $form['adconfig_tab'] = array(
        '#type' => 'textarea',
        '#title' => t('adconfig tab'),
        '#default_value' => variable_get('adconfig_tab'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * Function for get_personalization_front_data_service.
 *
 * @param obj $user
 *
 * @return int
 */
function get_personalization_front_data_service($user) {
    global $user;
    $weight_count_loop = FALSE;
    // As in table itg_widget_order tid is saved in nid colom.
    // So join field_story_category_tid join is applied on nid.
    $query = db_select('itg_widget_order', 'iwo');
    // Orderby weight or taxonomyterm id.
    $query->fields('iwo', array('weight', 'nid'))->condition('iwo.widget', "personalization_widget")->condition('iwo.extra', $user->uid)->orderBy('iwo.weight', 'DESC')->orderBy('iwo.nid', 'DESC')->range(0, 30);
    $result = $query->execute()->fetchAllAssoc('nid');
    $new_array_of_terms = array_keys($result);
    // case handled if perferences is not saved.
    if (count($result) == 0) {
        $weight_count_loop = TRUE;
        $query = db_select('itg_widget_order', 'iwo');
        $query->leftJoin('field_data_field_set_as_featured_cate', 'fc', 'fc.entity_id=iwo.cat_id');
        $query->fields('iwo', array('cat_id'))->condition('iwo.widget', "section_wise_widget")->condition('fc.field_set_as_featured_cate_value', 'Yes')->groupBy('iwo.cat_id')->range(0, 30);
        $result = $query->execute()->fetchAllAssoc('cat_id');
    }
    if ($weight_count_loop) {
        $new_array_of_terms = array();
        // Get only tids.
        $tids_array = array_keys($result);
        foreach ($tids_array as $term_id) {
            $new_array_of_terms[$term_id] = count_node_under_tid_service($term_id);
        }
        krsort($new_array_of_terms);
    }
    return ($weight_count_loop) ? array_keys($new_array_of_terms) : $new_array_of_terms;
}

/**
 * Function to get total number of nodes in taxonomy.
 *
 * @param int $tid
 *
 * @return int
 */
function count_node_under_tid_service($tid) {
    $query = db_select('taxonomy_index', 'ti');
    $query->leftJoin('node', 'n', 'n.nid=ti.nid');
    $query->addField('ti', 'nid');
    $query->condition('ti.tid', $tid);
    $query->condition('n.status', 1);
    $query->condition('n.type', array('story', 'videogallery', 'photogallery'), 'IN');
    $query->orderBy('n.created', 'DESC');
    return $query->execute()->rowCount();
}

/**
 * function for save_itg_widget_personalization_data_service
 *
 * @param array $updates
 */
function save_itg_widget_personalization_data_service($updates) {
    global $user;
    $widget_name = "personalization_widget";

    $nids = array_keys($updates);
    // Delete all the tids from table if they are not in $updates variable
    // unsued tid should be delete
    db_delete('itg_widget_order')->condition('widget', $widget_name)->condition('nid', $nids, "NOT IN")->condition('extra', $user->uid)->execute();
    // Update the weight of tids if exists or insert if dont exists.
    foreach ($updates as $term_id => $weight) {
        db_merge('itg_widget_order')->key(array('nid' => $term_id, 'widget' => $widget_name, 'extra' => $user->uid))->fields(array(
            'nid' => $term_id,
            'widget' => $widget_name,
            'weight' => $weight,
            'extra' => $user->uid,
        ))->execute();
    }
    drupal_set_message(t("My Preferences Has Been Save."));
}

/**
 * Function to check old/new pass.
 *
 * @param array
 *
 * @return array
 */
function validateServicePass($params) {
    module_load_include('inc', 'content', 'includes/password');
    $pass_vld_msg = array();
    $old_pass = trim($params['old_pass']);
    $new_pass = trim($params['new_pass']);
    $user_id = trim($params['user_id']);
    $account = user_load_by_name($user_id);
    if ($new_pass == "") {
        $pass_vld_msg['success_flag'] = 0;
        $pass_vld_msg['msg'] = "Please enter new password.";
        return $pass_vld_msg;
    }
    if ($old_pass == $new_pass) {
        $pass_vld_msg['success_flag'] = 0;
        $pass_vld_msg['msg'] = "New Password can't be same as Old.";
        return $pass_vld_msg;
    }
    if ($old_pass != "") {
        $flag = user_check_password($old_pass, $account);
        if (!$flag) {
            $pass_vld_msg['success_flag'] = 0;
            $pass_vld_msg['msg'] = "Your new password cannot be accepted because the old password provided is not correct. Please Try again.";
            return $pass_vld_msg;
        }
    }
    $pass_vld_msg['success_flag'] = 1;
    $pass_vld_msg['msg'] = "Go Ahead.";
    return $pass_vld_msg;
}

/**
 * function for get_personalization_saved_value_service .
 *
 * @param int
 *
 * @return array
 */
function get_personalization_saved_value_service($uid) {
    $query = db_select('itg_widget_order', 'iwo');
    $query->addField('iwo', 'weight');
    $query->addField('iwo', 'nid');
    $query->condition('iwo.widget', 'personalization_widget');
    $query->condition('iwo.extra', $uid);
    return $query->execute()->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * Call back function for sign up raw data validation .
 *
 * @param array
 *
 * @return array
 */
function signupValidation_rapid($params) {

    $first_name = trim($params['first_name']);
    $last_name = trim($params['last_name']);
    $user_id = trim($params['user_id']);
    $password = trim($params['password']);
    $cpassword = trim($params['confirm_password']);
    $login_type = trim($params['login_type']);
    $email_id = trim($params['email_id']);
    $phone_number = trim($params['phone_number']);
    $location = trim($params['location']);
    $profile_image = trim($params['profile_image']);
    $gender = trim($params['gender']);
    $date_of_birth = trim($params['date_of_birth']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);
    $error = array();
    $userid_is_numeric = 0;

    $userid_is_numeric = is_numeric($user_id);

    if (!$userid_is_numeric) {
        if (function_exists('itg_sso_user_email_check')) {
            $get_user_check_email = itg_sso_user_email_check($user_id);
        }
        if (function_exists('itg_sso_user_email_domain')) {
            $get_user_check_domain = itg_sso_user_email_domain($user_id);
        }
    } else {
        if (function_exists('itg_sso_user_mobile_check')) {
            $get_user_check_mobile = itg_sso_user_mobile_check($mobile);
        }
    }


    // fname validation
    if (empty($first_name)) {
        $error['fname'] = t('Please enter first name');
    } else {
        if (!preg_match("/^[a-zA-Z. ]*$/", $first_name)) {
            $error['fname'] = t('Cannot validate Fname');
        } else {
            if (strlen($first_name) > 25) {
                $error['fname'] = t('Cannot validate Fname');
            }
        }
    }
    // lname validation
    if ($last_name) {
        if (!preg_match("/^[a-zA-Z. ]*$/", $last_name)) {
            $error['lname'] = t('Cannot validate Lname');
        } else {
            if (strlen($last_name) > 25) {
                $error['lname'] = t('Cannot validate Lname');
            }
        }
    }
    // user_id validation

    if (empty($user_id)) {
        $error['user_id'] = t('Please Enter Email/Mobile');
    } else {

        if (!$userid_is_numeric) {
            if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
                $error['user_id'] = t("Invalid Email");
            } elseif (!empty($get_user_check_email)) {
                $error['user_id'] = t("User already exists with " . $user_id . "");
            }
        } else {
            if (!preg_match('/^\d{10}$/', $user_id)) {
                $error['user_id'] = t("Invalid Mobile Number");
            }
        }
    }

    // password validation
    $pass = $password;
    $cpass = $cpassword;

    $min_length = 6;
    $max_length = 15;

    if (empty($pass)) {
        $error['password'] = t('please enter password');
    } elseif (strlen($pass) < $min_length) {
        $error['password'] = t('Password should be minimum 6 characters without any space ');
    } elseif (strlen($pass) > $max_length) {
        $error['password'] = t('Password should be maximum 15 characters without any space ');
    } elseif (!preg_match('/\d/', $pass) || !preg_match('/[^a-zA-Z\d]/', $pass)) {
        $error['password'] = t("Password should be 1 special and 1 numeric character");
    } elseif ($pass != $cpass) {
        $error['password'] = t('Password and Confirm Password do not match');
    }

    // deviceid/type start
    if (empty($device_id)) {
        $error['device_id'] = t('Device id cannot be an empty');
    }
    if (empty($device_type)) {
        $error['device_type'] = t('Device type cannot be an empty');
    }
    // deviceid/type end

    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * function for upload user profile image from binary file  .
 *
 * @param binay img file
 *
 * @return int FID
 */
function uplodaProfileImg_Rapid($profile_image) {
    $profile_img = base64_decode($profile_image);
    $f = finfo_open();
    $mime_type = finfo_buffer($f, $profile_img, FILEINFO_MIME_TYPE);
    $mime_type_ar = explode("/", $mime_type);
    $mime_type_ext = $mime_type_ar[1];
    $now = time();



    $profile_img_tmp = '/tmp/profileimage_' . $now . "." . $mime_type_ext;

    $image_name = 'profileimage_' . $now . "." . $mime_type_ext;
    // crate profile img tmp file
    file_put_contents($profile_img_tmp, $profile_img);
    $imagedata = file_get_contents($profile_img_tmp);
    //$file_data_temp = file_save_data($imagedata, file_default_scheme() . '://' . $image_url);
    $file_data = file_save_data($imagedata, file_default_scheme() . '://' . $image_name);


    // Update profile pic
    if (!empty($file_data->fid)) {
        return $file_data->fid;
    } else {
        return 0;
    }
}

/**
 * function for update user profile at signup  .
 *
 * @param array $data
 *
 * @return object user
 */
function updateUsedrProfileAtSignup_rapid($data, $action = 1) {
    global $user;

    $location = trim($data['location']);
    $profile_image = trim($data['profile_image']);
    $gender = trim($data['gender']);
    $date_of_birth = trim($data['date_of_birth']);
    $device_id = trim($data['device_id']);
    $device_type = trim($data['device_type']);
    $user_id = trim($data['user_id']);

    $user = $user_detail = user_load_by_name($user_id);
    // call function for upload profile iamge

    $uid = $user->uid;

    // Update dob field.
    if ($profile_image) {
        $profile_img_fid = uplodaProfileImg_Rapid($profile_image);
    }

    // Update dob field.
    if ($date_of_birth) {
        $user_detail->field_story_issue_date['und'][0]['value'] = check_plain($date_of_birth);
    }

    // Update gender field.
    if ($gender) {
        $user_detail->field_user_gender['und'][0]['value'] = check_plain($gender);
    }

    // Update profile pic
    if ($profile_img_fid) {
        $user_detail->field_user_picture['und'][0]['fid'] = $profile_img_fid;
    }

    // Update address field.
    if ($location) {
        $user_detail->field_short_description['und'][0]['value'] = check_plain($location);
    }

    $flag_save = user_save($user_detail);


    // query for insert data into itg_app_device - $action $token
    $token = drupal_get_token('services');
    db_insert('itg_app_device')->fields(array(
        'uid' => $uid,
        'device_id' => check_plain($device_id),
        'device_type' => check_plain($device_type),
        'action' => check_plain($action),
        'token' => check_plain($token),
    ))->execute();
    return $flag_save;
}

/**
 * Call back function for login up raw data validation .
 *
 * @param array
 *
 * @return array
 */
function loginValidation_rapid($params) {

    $user_id = trim($params['user_id']);
    $password = trim($params['password']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    $error = array();
    $userid_is_numeric = 0;

    $userid_is_numeric = is_numeric($user_id);

    if (!$userid_is_numeric) {
        if (function_exists('itg_sso_user_email_check')) {
            $get_user_check_email = itg_sso_user_email_check($user_id);
        }
        if (function_exists('itg_sso_user_email_domain')) {
            $get_user_check_domain = itg_sso_user_email_domain($user_id);
        }
    } else {
        if (function_exists('itg_sso_user_mobile_check')) {
            $get_user_check_mobile = itg_sso_user_mobile_check($mobile);
        }
    }


    // user_id validation

    if (empty($user_id)) {
        $error['user_id'] = t('Please Enter Email/Mobile');
    } else {

        if (!$userid_is_numeric) {
            if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
                $error['user_id'] = t("Invalid Email");
            } elseif (empty($get_user_check_email)) {
                //$error['user_id'] = t("A User is not registered with this " . $user_id . "");
            } else {
                //$error['user_id'] = t("");
            }
        } else {
            if (!preg_match('/^\d{10}$/', $user_id)) {
                $error['user_id'] = t("Invalid Mobile Number");
            }
        }
    }

    // password validation
    $pass = $password;


    $min_length = 6;
    $max_length = 15;

    if (empty($pass)) {
        $error['password'] = t('please enter password');
    } elseif (strlen($pass) < $min_length) {
        $error['password'] = t('Password should be minimum 6 characters without any space ');
    } elseif (strlen($pass) > $max_length) {
        $error['password'] = t('Password should be maximum 15 characters without any space ');
    }

    // deviceid/type start
    if (empty($device_id)) {
        $error['device_id'] = t('Device id cannot be an empty');
    }
    if (empty($device_type)) {
        $error['device_type'] = t('Device type cannot be an empty');
    }
    // deviceid/type end

    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * function for delete token from itg_app_device
 *
 * @param array
 *
 * @return array
 */
function cleanToken_Rapid($params) {

    $user_id = $params['user_id'];
    $auth_token = $params['auth_token'];
    $device_id = $params['device_id'];

    $user = user_load_by_name($user_id);
    $uid = $user->uid;
    if ($uid) {
        $query = db_delete('itg_app_device');
        $query->condition('uid', $uid);
        $query->condition('device_id', $device_id);
        $query->execute();
    }
}

/**
 * Call back function for forgot password raw data validation .
 *
 * @param array
 *
 * @return array
 */
function forgotPasswordValidation_rapid($params) {

    $user_id = trim($params['user_id']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    $error = array();
    $userid_is_numeric = 0;

    $userid_is_numeric = is_numeric($user_id);

    if (!$userid_is_numeric) {
        if (function_exists('itg_sso_user_email_check')) {
            $get_user_check_email = itg_sso_user_email_check($user_id);
        }
        if (function_exists('itg_sso_user_email_domain')) {
            $get_user_check_domain = itg_sso_user_email_domain($user_id);
        }
    } else {
        if (function_exists('itg_sso_user_mobile_check')) {
            $get_user_check_mobile = itg_sso_user_mobile_check($mobile);
        }
    }


    // user_id validation

    if (empty($user_id)) {
        $error['user_id'] = t('Please Enter Email/Mobile');
    } else {

        if (!$userid_is_numeric) {
            if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
                $error['user_id'] = t("Invalid email/phone number");
            }
        } else {
            if (!preg_match('/^\d{10}$/', $user_id)) {
                $error['user_id'] = t("Invalid email/phone number");
            }
        }
    }
    // deviceid/type start
    if (empty($device_id)) {
        $error['device_id'] = t('Device id cannot be an empty');
    }
    if (empty($device_type)) {
        $error['device_type'] = t('Device type cannot be an empty');
    }
    // deviceid/type end


    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * Implements itg_otp_device_info_insert_rapid
 *
 * @param array $pram
 * @param int $rand_otp
 * @param int $source
 * @param string $created
 */
function itg_otp_device_info_insert_rapid($params, $rand_otp, $source, $created) {
    $user_id = trim($params['user_id']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    // Table name no longer needs {}
    $otp = db_insert('itg_otp_device_info')->fields(array(
                'user_id' => $user_id,
                'device_id' => $device_id,
                'device_type' => $device_type,
                'source' => $source,
                'otp' => $rand_otp,
            ))->execute();
}

/**
 * Callback function for validate raw data of reset_password api.
 *
 * @param array
 *
 * @return array
 */
function validateResetPass($params) {

    $user_id = trim($params['user_id']);
    $new_password = trim($params['new_password']);
    $confirm_password = trim($params['confirm_password']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    $error = array();
    $userid_is_numeric = 0;

    $userid_is_numeric = is_numeric($user_id);

    if (!$userid_is_numeric) {
        if (function_exists('itg_sso_user_email_check')) {
            $get_user_check_email = itg_sso_user_email_check($user_id);
        }
        if (function_exists('itg_sso_user_email_domain')) {
            $get_user_check_domain = itg_sso_user_email_domain($user_id);
        }
    } else {
        if (function_exists('itg_sso_user_mobile_check')) {
            $get_user_check_mobile = itg_sso_user_mobile_check($mobile);
        }
    }


    // user_id validation

    if (empty($user_id)) {
        $error['user_id'] = t('Please Enter Email/Mobile');
    } else {

        if (!$userid_is_numeric) {
            if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
                $error['user_id'] = t("A User is not registered with this " . $user_id . "");
            }
        } else {
            if (!preg_match('/^\d{10}$/', $user_id)) {
                $error['user_id'] = t("A User is not registered with this " . $user_id . "");
            }
        }
    }

    // password validation
    $pass = $new_password;
    $pass2 = $confirm_password;


    $min_length = 6;
    $max_length = 15;
    //new pass
    if (empty($pass)) {
        $error['new_password'] = t('please enter new password');
    } elseif (strlen($pass) < $min_length) {
        $error['new_password'] = t('New Password should be minimum 6 characters without any space ');
    } elseif (strlen($pass) > $max_length) {
        $error['new_password'] = t('New Password should be maximum 15 characters without any space ');
    } elseif (!preg_match('/\d/', $pass) || !preg_match('/[^a-zA-Z\d]/', $pass)) {
        $error['password'] = t("New Password should be 1 special and 1 numeric character");
    }
    //confirm pass
    if (empty($pass2)) {
        $error['confirm_password'] = t('please enter confirm password');
    } elseif (strlen($pass2) < $min_length) {
        $error['confirm_password'] = t('Confirm Password should be minimum 6 characters without any space ');
    } elseif (strlen($pass2) > $max_length) {
        $error['confirm_password'] = t('Confirm Password should be maximum 15 characters without any space ');
    } elseif (!preg_match('/\d/', $pass2) || !preg_match('/[^a-zA-Z\d]/', $pass2)) {
        $error['password'] = t("Confirm Password should be 1 special and 1 numeric character");
    }
    //match both pass

    if ($pass != $pass2) {
        $error['match_password'] = t('Passwords don’t match');
    }

    // deviceid/type start
    if (empty($device_id)) {
        $error['device_id'] = t('Device id cannot be an empty');
    }
    if (empty($device_type)) {
        $error['device_type'] = t('Device type cannot be an empty');
    }
    // deviceid/type end

    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * Implements itg_reset_pass_info_insert_rapid
 *
 * @param array $params
 * @param int $source
 */
function itg_reset_pass_info_insert_rapid($params, $source) {
    $user_id = trim($params['user_id']);
    $new_password = trim($params['new_password']);
    $confirm_password = trim($params['confirm_password']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    // Table name no longer needs {}
    $otp = db_insert('itg_reset_pass_info')->fields(array(
                'user_id' => $user_id,
                'device_id' => $device_id,
                'device_type' => $device_type,
                'source' => $source,
            ))->execute();
}

/**
 * Callback function for validate raw data of change_password api.
 *
 * @param array
 *
 * @return array
 */
function validateChangePass($params) {
    module_load_include('inc', 'content', 'includes/password');
    $user_id = trim($params['user_id']);
    $new_password = trim($params['new_password']);
    $confirm_password = trim($params['confirm_password']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);
    $old_password = trim($params['old_password']);
    $account = user_load_by_name($user_id);
    $oldpass_flag = user_check_password($old_password, $account);

    $error = array();
    $userid_is_numeric = 0;

    $userid_is_numeric = is_numeric($user_id);

    if (!$userid_is_numeric) {
        if (function_exists('itg_sso_user_email_check')) {
            $get_user_check_email = itg_sso_user_email_check($user_id);
        }
        if (function_exists('itg_sso_user_email_domain')) {
            $get_user_check_domain = itg_sso_user_email_domain($user_id);
        }
    } else {
        if (function_exists('itg_sso_user_mobile_check')) {
            $get_user_check_mobile = itg_sso_user_mobile_check($mobile);
        }
    }


    // user_id validation

    if (empty($user_id)) {
        $error['user_id'] = t('Please Enter Email/Mobile');
    } else {

        if (!$userid_is_numeric) {
            if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
                $error['user_id'] = t("A User is not registered with this " . $user_id . "");
            }
        } else {
            if (!preg_match('/^\d{10}$/', $user_id)) {
                $error['user_id'] = t("A User is not registered with this " . $user_id . "");
            }
        }
    }
    //old pass validation
    if (empty($old_password)) {
        $error['old_password'] = t('please enter old password');
    } elseif ($old_password == $new_password) {
        $error['old_password'] = t('New Password can\'t be same as Old');
    } elseif (!$oldpass_flag) {
        $error['old_password'] = t('old password is not correct');
    }

    // password validation
    $pass = $new_password;
    $pass2 = $confirm_password;


    $min_length = 6;
    $max_length = 15;
    //new pass
    if (empty($pass)) {
        $error['new_password'] = t('please enter new password');
    } elseif (strlen($pass) < $min_length) {
        $error['new_password'] = t('New Password should be minimum 6 characters without any space ');
    } elseif (strlen($pass) > $max_length) {
        $error['new_password'] = t('New Password should be maximum 15 characters without any space ');
    } elseif (!preg_match('/\d/', $pass) || !preg_match('/[^a-zA-Z\d]/', $pass)) {
        $error['password'] = t("New Password should be 1 special and 1 numeric character");
    }
    //confirm pass
    if (empty($pass2)) {
        $error['confirm_password'] = t('please enter confirm password');
    } elseif (strlen($pass2) < $min_length) {
        $error['confirm_password'] = t('Confirm Password should be minimum 6 characters without any space ');
    } elseif (strlen($pass2) > $max_length) {
        $error['confirm_password'] = t('Confirm Password should be maximum 15 characters without any space ');
    } elseif (!preg_match('/\d/', $pass2) || !preg_match('/[^a-zA-Z\d]/', $pass2)) {
        $error['password'] = t("Confirm Password should be 1 special and 1 numeric character");
    }
    //match both pass

    if ($pass != $pass2) {
        $error['match_password'] = t('Passwords don’t match');
    }
    // deviceid/type start
    if (empty($device_id)) {
        $error['device_id'] = t('Device id cannot be an empty');
    }
    if (empty($device_type)) {
        $error['device_type'] = t('Device type cannot be an empty');
    }
    // deviceid/type end
    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * Call back function for social sign up raw data validation .
 *
 * @param array
 *
 * @return array
 */
function socal_signupValidation_rapid($params, $social_domain) {

    $first_name = trim($params['first_name']);
    $last_name = trim($params['last_name']);
    $user_id = trim($params['user_id']);
    $password = trim($params['password']);
    $cpassword = trim($params['confirm_password']);
    $login_type = trim($params['login_type']);
    $email_id = trim($params['email_id']);
    $phone_number = trim($params['phone_number']);
    $location = trim($params['location']);
    $profile_image = trim($params['profile_image']);
    $gender = trim($params['gender']);
    $date_of_birth = trim($params['date_of_birth']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);
    $error = array();
    $userid_is_numeric = 0;

    $userid_is_numeric = is_numeric($user_id);

    if (!$userid_is_numeric) {
        if (function_exists('itg_sso_user_email_check')) {
            $get_user_check_email = itg_sso_user_email_check($user_id);
        }
        if (function_exists('itg_sso_user_email_domain')) {
            $get_user_check_domain = itg_sso_user_email_domain($user_id);
        }
    } else {
        $error['user_id'] = t("Invalid  User id");
    }





    // user_id validation

    if (empty($user_id)) {
        $error['user_id'] = t('User id cannot be an empty');
    } else {

        if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
            $error['user_id'] = t("Invalid  User id");
        } else {
            if (strpos($user_id, $social_domain) !== FALSE) {
                
            } else {
                $error['user_id'] = t("Invalid  User id");
            }
        }
    }
    // deviceid/type start
    if (empty($device_id)) {
        $error['device_id'] = t('Device id cannot be an empty');
    }
    if (empty($device_type)) {
        $error['device_type'] = t('Device type cannot be an empty');
    }
    // deviceid/type end

    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * Call back function for authtoken raw data validation .
 *
 * @param array
 *
 * @return array
 */
function authtokenValidation_rapid($params) {
    $user_id = trim($params['user_id']);
    $auth_token = trim($params['auth_token']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    $error = array();
    $userid_is_numeric = 0;

    if (empty($user_id)) {
        $error['user_id'] = t('User id cannot be an empty');
    }
    if (empty($auth_token)) {
        $error['auth_token'] = t('Auth token cannot be an empty');
    }
    // deviceid/type start
    if (empty($device_id)) {
        $error['device_id'] = t('Device id cannot be an empty');
    }
    if (empty($device_type)) {
        $error['device_type'] = t('Device type cannot be an empty');
    }
    // deviceid/type end

    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * Call back function for fblogin_rapid raw data validation .
 *
 * @param array
 *
 * @return array
 */
function fblogin_rapid($params) {
    $user_id = trim($params['user_id']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    $error = array();
    $userid_is_numeric = 0;

    if (empty($user_id)) {
        $error['user_id'] = t('User id cannot be an empty');
    }

    // deviceid/type start
    if (empty($device_id)) {
        $error['device_id'] = t('Device id cannot be an empty');
    }
    if (empty($device_type)) {
        $error['device_type'] = t('Device type cannot be an empty');
    }
    // deviceid/type end

    if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
        $error['user_id'] = t("Invalid  User id");
    } else {
        if (strpos($user_id, "@facebook.com") !== FALSE) {
            
        } else {
            $error['user_id'] = t("Invalid  User id");
        }
    }

    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * Call back function for twtogin_rapid raw data validation .
 *
 * @param array
 *
 * @return array
 */
function twtogin_rapid($params) {
    $user_id = trim($params['user_id']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    $error = array();
    $userid_is_numeric = 0;

    if (empty($user_id)) {
        $error['user_id'] = t('User id cannot be an empty');
    }

    // deviceid/type start
    if (empty($device_id)) {
        $error['device_id'] = t('Device id cannot be an empty');
    }
    if (empty($device_type)) {
        $error['device_type'] = t('Device type cannot be an empty');
    }
    // deviceid/type end

    if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
        $error['user_id'] = t("Invalid  User id");
    } else {
        if (strpos($user_id, "@twitter.com") !== FALSE) {
            
        } else {
            $error['user_id'] = t("Invalid  User id");
        }
    }

    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * Call back function for device token reset .
 *
 * @param array
 *
 * @return array
 */
function deviceTokenReset_Rapid($params) {
    $user_id = trim($params['user_id']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    $user_data = user_load_by_name($user_id);

    $token_updated = db_update('itg_app_device');
    $token_updated->fields(array(
        'token' => "",
    ));
    $token_updated->condition('uid', $user_data->uid);
    $token_updated->execute();

    // blank session id

    $session_updated = db_update('sessions');
    $session_updated->fields(array(
        'sid' => "",
    ));
    $session_updated->condition('uid', $user_data->uid);
    $session_updated->execute();
}

/**
 * Call back function for authtoken raw data validation .
 *
 * @param array
 *
 * @return array
 */
function resentotpValidation_rapid($params) {
    $user_id = trim($params['user_id']);
    $auth_token = trim($params['auth_token']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    $error = array();
    $userid_is_numeric = 0;


    // deviceid/type start
    if (empty($device_id)) {
        $error['device_id'] = t('Device id cannot be an empty');
    }
    if (empty($device_type)) {
        $error['device_type'] = t('Device type cannot be an empty');
    }
    // deviceid/type end

    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * Call back function for nody body token filter .
 *
 * @param string $n_body
 *
 * @return string $n_body
 */
function formateNodeBodyToken($n_body) {
    //include 'simple_html_dom.php';
    $token_list = array('div[class=quiz]', 'div[class=poll]', 'div[class=survey]', '<p>[ITG:LISTICLES]</p>', 'div[class=itgimage]', 'div[class=itg-mosimage]', '<p>[ITG:TECH-PHOTOS]</p>', '<p>[ITG:EXPERT-CHUNK]</p>', '<p>[ITG:FACTOIDS]</p>', '<p>[ITG:TECH-PHOTO-GALLERY]</p>');

    $data = array();
    $poll_id = 0;

    $str_html = str_get_html($n_body);
    // loop on token array
    foreach ($token_list as $tkey => $tvalue) {
        if ($tvalue == '<p>[ITG:TECH-PHOTOS]</p>' || $tvalue == '<p>[ITG:EXPERT-CHUNK]</p>' || $tvalue == '<p>[ITG:FACTOIDS]</p>' || $tvalue == '<p>[ITG:LISTICLES]</p>' || $tvalue == '<p>[ITG:TECH-PHOTO-GALLERY]</p>') {

            $tvalue = str_replace("<p>", "", $tvalue);
            $tvalue = str_replace("</p>", "", $tvalue);
            $tvalue_replave = "<ITG-NATIVEAPP>" . $tvalue . "<ITG-NATIVEAPP>";
            $n_body = str_replace($tvalue, $tvalue_replave, $n_body);
        } else {
            $node_str = "";
            $node_ar = array();
            foreach ($str_html->find($tvalue) as $element) {
                $node_str .= $element . "$$$$$";
                // get poll id
                if ($tvalue == "div[class=poll]") {
                    $poll_id = filter_var($element, FILTER_SANITIZE_NUMBER_INT);
                }
            }
            $node_str = rtrim($node_str, "$$$$$");
            $node_ar = explode("$$$$$", $node_str);


            foreach ($node_ar as $key => $value) {
                $replace = "<ITG-NATIVEAPP>" . $value . "<ITG-NATIVEAPP>";
                $n_body = str_replace($value, $replace, $n_body);
            }
        }
    }
    // add AD block after 1st <p> start
    $start = strpos($n_body, '<p>');
    $end = strpos($n_body, '</p>', $start);
    $paragraph = substr($n_body, $start, $end - $start + 4);
    $paragraph_rep = $paragraph . "<ITG-NATIVEAPP>ADS<ITG-NATIVEAPP>";
    $n_body = str_replace($paragraph, $paragraph_rep, $n_body);
    // add AD block after 1st <p> end
    $n_body = str_replace('<img', '<img style="width:100%;height:auto;"', $n_body);
    $n_body = str_replace('<iframe', '<iframe width="100%" ', $n_body);
    $n_body = str_replace('<div class="body_caption">', '<div class="body_caption" style="padding:0.5em!important; color:#767676!important; font-size:10px!important;line-height:15px!important;">', $n_body);
    //$n_body = fbiframeupdtae($n_body);
    //jira:78 start
    $n_body = str_replace('<div class="quotes"', '<div class="quotes" style="border-left:2px solid #eb5a5b; "', $n_body);
    $n_body = str_replace('<blockquote', '<blockquote style="padding: 0.5em !important; display:block;"', $n_body);
    $n_body = str_replace('//www.youtube.com', 'https://www.youtube.com', $n_body);
    $n_body = str_replace('https:https://www.youtube.com', 'https://www.youtube.com', $n_body);
    $n_body = str_replace('<blockquote style="padding: 0.5em !important; display:block;" class="instagram-media"', '<blockquote class="instagram-media"', $n_body);
    //$n_body = str_replace('<blockquote class="instagram-media"', '<blockquote class="instagram"', $n_body);
    $n_body = str_replace('src="//', 'src="https://', $n_body);
    $n_body = str_replace('<div class="itg-mosimage"', '<div class="itg-mosimage body_caption" style="padding:0.5em!important; color:#767676!important; font-size:10px!important;line-height:15px!important;"', $n_body);
    //jira:78 end 
    $data['n_body'] = $n_body;
    $data['poll_id'] = $poll_id;
    return $data;
}

/**
 * function for  fbiframeupdtae
 * @pram string $n_body
 *
 * @return string $n_body
 */
function fbiframeupdtae($n_body) {
    preg_match_all('/<iframe.*src=\"(.*)\".*><\/iframe>/isU', $n_body, $iframes_m);
    foreach ($iframes_m as $iframes) {
        foreach ($iframes as $iframes_s) {
            preg_match('/src="([^"]+)"/', $iframes_s, $match);
            $find = $iframes_s;
            $find_up = str_replace('auto', '168vw', $iframes_s);
            $find_youtube = str_replace('auto', '52vw', $iframes_s);
            if (strpos($match[1], 'https://www.facebook.com') !== FALSE) {
                $n_body = str_replace($find, $find_up, $n_body);
            }
            if (strpos($match[1], 'https://www.youtube.com') !== FALSE) {
                $n_body = str_replace($find, $find_youtube, $n_body);
            }
            $loop2++;
        }
        $loop++;
    }
    return $n_body;
}

/**
 * function for  getTechPros
 * @pram $content_org
 *
 * @return array
 */
function getTechProsImg($content_org) {
    //include 'simple_html_dom.php';
    $src = "";
    if ($content_org) {
        $str_html = str_get_html($content_org);
        $img_str = "";
        foreach ($str_html->find('ul[class="pron-cons-img]') as $element) {
            $img_str = $element;
        }
        if ($img_str != "") {
            $str_html2 = str_get_html($img_str);
            foreach ($str_html2->find('img') as $element) {
                $img_str_img = $element;
            }
            $xpath = new DOMXPath(@DOMDocument::loadHTML($img_str_img));
            $src = $xpath->evaluate("string(//img/@src)");
        }
    }
    return $src;
}

/**
 * function for  getTechPros
 * @pram $content_org
 *
 * @return array
 */
function getTechProsh2($content_org) {
    //include 'simple_html_dom.php';
    $h2 = "";
    if ($content_org) {
        $str_html = str_get_html($content_org);
        $h2 = "";
        foreach ($str_html->find('h2') as $element) {
            $h2 = $element;
        }
        $h2 = ltrim($h2, "<h2>");
        $h2 = rtrim($h2, "</h2>");
    }

    return $h2;
}

/**
 *
 * @param int $nid of the author or anchor
 * @param string $type author or anchor
 *
 * @return $status boolean True|False
 */
function valid_anchor_author($nid, $type) {

    // reporter 285750 , anchor 285903
    $node = node_load($nid);
    $occupation_tids = array();

    foreach ($node->field_celebrity_pro_occupation['und'] as $data) {
        $occupation_tids[] = $data['tid'];
    }
    if ($type == 'author') {
        if (in_array('285750', $occupation_tids)) {
            $status = TRUE;
        } else {
            $status = FALSE;
        }
    } elseif ($type == 'anchor') {
        if (in_array('285903', $occupation_tids)) {
            $status = TRUE;
        } else {
            $status = FALSE;
        }
    }
    return $status;
}

/**
 * function for getNode prime cat tid ByNid
 * @pram datetime $nid
 *
 * @return obj term_object;
 */
function getNodePrimeCatByNid($nid) {
    if ($nid) {
        $query = db_select('field_data_field_primary_category', 'fpc');
        $query->fields('fpc', array('field_primary_category_value'));
        $query->condition('fpc.entity_id', $nid);
        $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
        $field_primary_category_value = $result[0]['field_primary_category_value'];
        return taxonomy_term_load($field_primary_category_value);
    }
}

/**
 * function get section/category icon img
 * @pram int $tid
 *
 * @return string url
 */
function sectionPrgramIconImg($tid) {
    $query = db_select('field_data_field_programme_category_image', 'icimg');
    $query->fields('icimg', array('field_programme_category_image_fid'));
    $query->condition('icimg.entity_id', $tid);
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    return completeFilePath($result[0]['field_programme_category_image_fid']);
}

/**
 * redish_ttl form decalation
 *
 * @return type
 */
function redish_ttl() {
    drupal_add_js(
            'jQuery(document).ready(function () {
  //called when key is pressed in textbox
  jQuery("input[type=text]").keypress(function (e) {
     //if the letter is not digit then display error 
     if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
        //display error message
        alert("Digits Only");
               return false;
    }
   });
});', array(
        'type' => 'inline'
    ));
    $form = array();

    $form['default_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('Default ttl'),
        '#default_value' => variable_get('default_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );

    $form['config_update_status_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('config update status ttl'),
        '#default_value' => variable_get('config_update_status_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['master_config_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('master config ttl'),
        '#default_value' => variable_get('master_config_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['hamburger_menu_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('hamburger menu ttl'),
        '#default_value' => variable_get('hamburger_menu_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['horizontal_menu_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('horizontal menu ttl'),
        '#default_value' => variable_get('horizontal_menu_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['server_error_master_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('server error master ttl'),
        '#default_value' => variable_get('server_error_master_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['photolist_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('photolist ttl'),
        '#default_value' => variable_get('photolist_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['photodetail_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('photodetail ttl'),
        '#default_value' => variable_get('photodetail_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['programlist_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('programlist ttl'),
        '#default_value' => variable_get('programlist_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['newslist_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('newslist ttl'),
        '#default_value' => variable_get('newslist_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['videolist_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('videolist ttl'),
        '#default_value' => variable_get('videolist_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['adconfig_android_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('adconfig android ttl'),
        '#default_value' => variable_get('adconfig_android_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['adconfig_ipad_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('adconfig ipad ttl'),
        '#default_value' => variable_get('adconfig_ipad_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['adconfig_iphone_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('adconfig iphone ttl'),
        '#default_value' => variable_get('adconfig_iphone_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['adconfig_tab_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('adconfig tab ttl'),
        '#default_value' => variable_get('adconfig_tab_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['videodetail_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('videodetail ttl'),
        '#default_value' => variable_get('videodetail_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['programdetail_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('programdetail ttl'),
        '#default_value' => variable_get('programdetail_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['topstories_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('topstories ttl'),
        '#default_value' => variable_get('topstories_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['photostorydetail_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('photostorydetail ttl'),
        '#default_value' => variable_get('photostorydetail_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['program_category_list_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('program category list ttl'),
        '#default_value' => variable_get('program_category_list_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['ad_config_json_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('ad config json ttl'),
        '#default_value' => variable_get('ad_config_json_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['livetv_channellist_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('livetv channellist ttl'),
        '#default_value' => variable_get('livetv_channellist_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['otherapps_ios_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('otherapps ios ttl'),
        '#default_value' => variable_get('otherapps_ios_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['otherapps_android_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('otherapps android ttl'),
        '#default_value' => variable_get('otherapps_android_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['magazine_coverstories_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('magazine coverstories ttl'),
        '#default_value' => variable_get('magazine_coverstories_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['magazine_editionlist_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('magazine editionlist ttl'),
        '#default_value' => variable_get('magazine_editionlist_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['magazine_edition_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('magazine edition ttl'),
        '#default_value' => variable_get('magazine_edition_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['storydetail_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('storydetail ttl'),
        '#default_value' => variable_get('storydetail_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['home_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('home ttl'),
        '#default_value' => variable_get('home_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['livetv_indiatoday_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('livetv indiatoday ttl'),
        '#default_value' => variable_get('livetv_indiatoday_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['livetv_aajtak_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('livetv aajtak ttl'),
        '#default_value' => variable_get('livetv_aajtak_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['livetv_delhiaajtak_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('livetv delhiaajtak ttl'),
        '#default_value' => variable_get('livetv_delhiaajtak_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['livetv_tej_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('livetv_tej_ttl'),
        '#default_value' => variable_get('livetv_tej_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['author_story_list_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('author story list ttl'),
        '#default_value' => variable_get('author_story_list_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['polls_open_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('polls_open_ttl'),
        '#default_value' => variable_get('polls_open_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['polls_close_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('polls close ttl'),
        '#default_value' => variable_get('polls_close_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['poll_detail_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('poll_detail_ttl'),
        '#default_value' => variable_get('poll_detail_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['anchor_programm_list_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('anchor programm list ttl'),
        '#default_value' => variable_get('anchor_programm_list_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['newswrap_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('newswrap ttl'),
        '#default_value' => variable_get('newswrap_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );
    $form['anchor_detail_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('anchor detail ttl'),
        '#default_value' => variable_get('anchor_detail_ttl'),
        '#required' => TRUE,
        '#size' => 20,
        '#maxlength' => 7,
    );

    return system_settings_form($form);
}

/**
 * redish_ttl form decalation
 *
 * @return type
 */
function time_interval() {
    drupal_add_js(
            'jQuery(document).ready(function () {
  //called when key is pressed in textbox
  jQuery("input[type=text]").keypress(function (e) {
     //if the letter is not digit then display error 
     if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
        //display error message
        alert("Digits Only");
               return false;
    }
   });
});', array(
        'type' => 'inline'
    ));
    $form = array();

    $form['itgapp_cat_0'] = array(
    '#type' => 'textfield',
    '#title' => t('Feature Section'),
    '#default_value' => variable_get('itgapp_cat_0'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_default'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Section'),
    '#default_value' => variable_get('itgapp_cat_default'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206553'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMME Section'),
    '#default_value' => variable_get('itgapp_cat_1206553'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208521'] = array(
    '#type' => 'textfield',
    '#title' => t('PHOTO Section'),
    '#default_value' => variable_get('itgapp_cat_1208521'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);


$form['itgapp_cat_1206552'] = array(
    '#type' => 'textfield',
    '#title' => t('VIDEOS Section'),
    '#default_value' => variable_get('itgapp_cat_1206552'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206578'] = array(
    '#type' => 'textfield',
    '#title' => t('INDIA Section'),
    '#default_value' => variable_get('itgapp_cat_1206578'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206577'] = array(
    '#type' => 'textfield',
    '#title' => t('WORLD Section'),
    '#default_value' => variable_get('itgapp_cat_1206577'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206676'] = array(
    '#type' => 'textfield',
    '#title' => t('CRICKET Section'),
    '#default_value' => variable_get('itgapp_cat_1206676'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206533'] = array(
    '#type' => 'textfield',
    '#title' => t('MOVIES Section'),
    '#default_value' => variable_get('itgapp_cat_1206533'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206689'] = array(
    '#type' => 'textfield',
    '#title' => t('AUTO Section'),
    '#default_value' => variable_get('itgapp_cat_1206689'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206550'] = array(
    '#type' => 'textfield',
    '#title' => t('SPORTS Section'),
    '#default_value' => variable_get('itgapp_cat_1206550'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206567'] = array(
    '#type' => 'textfield',
    '#title' => t('LIFESTYLE Section'),
    '#default_value' => variable_get('itgapp_cat_1206567'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206688'] = array(
    '#type' => 'textfield',
    '#title' => t('TECHNOLOGY Section'),
    '#default_value' => variable_get('itgapp_cat_1206688'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206572'] = array(
    '#type' => 'textfield',
    '#title' => t('MAIL TODAY Section'),
    '#default_value' => variable_get('itgapp_cat_1206572'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206837'] = array(
    '#type' => 'textfield',
    '#title' => t('POLITICS Section'),
    '#default_value' => variable_get('itgapp_cat_1206837'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206796'] = array(
    '#type' => 'textfield',
    '#title' => t('TELEVISION Section'),
    '#default_value' => variable_get('itgapp_cat_1206796'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207926'] = array(
    '#type' => 'textfield',
    '#title' => t('FOOD Section'),
    '#default_value' => variable_get('itgapp_cat_1207926'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207041'] = array(
    '#type' => 'textfield',
    '#title' => t('TRAVEL Section'),
    '#default_value' => variable_get('itgapp_cat_1207041'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206574'] = array(
    '#type' => 'textfield',
    '#title' => t('BUSINESS Section'),
    '#default_value' => variable_get('itgapp_cat_1206574'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206955'] = array(
    '#type' => 'textfield',
    '#title' => t('VIDEOS >> INDIA'),
    '#default_value' => variable_get('itgapp_cat_1206955'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207303'] = array(
    '#type' => 'textfield',
    '#title' => t('VIDEOS >> MOVIES'),
    '#default_value' => variable_get('itgapp_cat_1207303'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);

$form['itgapp_cat_1206956'] = array(
    '#type' => 'textfield',
    '#title' => t('VIDEOS >> WORLD'),
    '#default_value' => variable_get('itgapp_cat_1206956'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207304'] = array(
    '#type' => 'textfield',
    '#title' => t('VIDEOS >> LIFESTYLE'),
    '#default_value' => variable_get('itgapp_cat_1207304'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207980'] = array(
    '#type' => 'textfield',
    '#title' => t('VIDEOS >> TELEVISION'),
    '#default_value' => variable_get('itgapp_cat_1207980'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206957'] = array(
    '#type' => 'textfield',
    '#title' => t('VIDEOS >> SPORTS'),
    '#default_value' => variable_get('itgapp_cat_1206957'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207486'] = array(
    '#type' => 'textfield',
    '#title' => t('VIDEOS >> TECHNOLOGY'),
    '#default_value' => variable_get('itgapp_cat_1207486'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);

$form['itgapp_cat_1208598'] = array(
    '#type' => 'textfield',
    '#title' => t('PHOTOS >> MOVIES'),
    '#default_value' => variable_get('itgapp_cat_1208598'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208618'] = array(
    '#type' => 'textfield',
    '#title' => t('PHOTOS >> CRICKET'),
    '#default_value' => variable_get('itgapp_cat_1208618'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208589'] = array(
    '#type' => 'textfield',
    '#title' => t('PHOTOS >> LIFESTYLE'),
    '#default_value' => variable_get('itgapp_cat_1208589'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208561'] = array(
    '#type' => 'textfield',
    '#title' => t('PHOTOS >> SPORTS'),
    '#default_value' => variable_get('itgapp_cat_1208561'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208560'] = array(
    '#type' => 'textfield',
    '#title' => t('PHOTOS >> INDIA'),
    '#default_value' => variable_get('itgapp_cat_1208560'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208681'] = array(
    '#type' => 'textfield',
    '#title' => t('PHOTOS >> TECHNOLOGY'),
    '#default_value' => variable_get('itgapp_cat_1208681'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207041'] = array(
    '#type' => 'textfield',
    '#title' => t('PHOTOS >> TRAVEL'),
    '#default_value' => variable_get('itgapp_cat_1207041'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208562'] = array(
    '#type' => 'textfield',
    '#title' => t('PHOTOS >> WORLD'),
    '#default_value' => variable_get('itgapp_cat_1208562'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
// program cat
$form['itgapp_cat_1207797'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> NEWS TODAY'),
    '#default_value' => variable_get('itgapp_cat_1207797'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207827'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> NEWSROOM'),
    '#default_value' => variable_get('itgapp_cat_1207827'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207722'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> TO THE POINT'),
    '#default_value' => variable_get('itgapp_cat_1207722'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208900'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> PEOPLES COURT'),
    '#default_value' => variable_get('itgapp_cat_1208900'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208095'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> INDIA FIRST'),
    '#default_value' => variable_get('itgapp_cat_1208095'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208902'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> 5IVE LIVE'),
    '#default_value' => variable_get('itgapp_cat_1208902'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208903'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> BURNING QUESTION'),
    '#default_value' => variable_get('itgapp_cat_1208903'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208173'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> IN DA CLUB'),
    '#default_value' => variable_get('itgapp_cat_1208173'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207755'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> FIRST UP'),
    '#default_value' => variable_get('itgapp_cat_1207755'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1787107'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> IN DEPTH'),
    '#default_value' => variable_get('itgapp_cat_1787107'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1206960'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> SPORTS TODAY'),
    '#default_value' => variable_get('itgapp_cat_1206960'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207972'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> AUTO TODAY'),
    '#default_value' => variable_get('itgapp_cat_1207972'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1208061'] = array(
    '#type' => 'textfield',
    '#title' => t('PROGRAMMES >> LONG STORY'),
    '#default_value' => variable_get('itgapp_cat_1208061'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
//tech cat
$form['itgapp_cat_1207758'] = array(
    '#type' => 'textfield',
    '#title' => t('TECHNOLOGY >> NEWS'),
    '#default_value' => variable_get('itgapp_cat_1207758'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207759'] = array(
    '#type' => 'textfield',
    '#title' => t('TECHNOLOGY >> INDEPTH'),
    '#default_value' => variable_get('itgapp_cat_1207759'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207763'] = array(
    '#type' => 'textfield',
    '#title' => t('TECHNOLOGY >> BUYING GUIDE'),
    '#default_value' => variable_get('itgapp_cat_1207763'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207764'] = array(
    '#type' => 'textfield',
    '#title' => t('TECHNOLOGY >> TECH TIPS'),
    '#default_value' => variable_get('itgapp_cat_1207764'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
$form['itgapp_cat_1207766'] = array(
    '#type' => 'textfield',
    '#title' => t('TECHNOLOGY >> TALKING POINTS'),
    '#default_value' => variable_get('itgapp_cat_1207766'),
    '#required' => TRUE,
    '#size' => 20,
    '#maxlength' => 3,
    '#description' => t('Enter interval in days.'),
);
    return system_settings_form($form);
}

/**
 * function for get time interval
 * @pram int $tid
 *
 * @return int
 */
function itg_app_time_interval($tid) {
    $interval = variable_get('itgapp_cat_default');
    $var_key = "";
    if ($tid > 0) {
        $var_key = "itgapp_cat_" . $tid . "";
        if (variable_get($var_key) > 0) {
            $interval = variable_get($var_key);
        }
    }
    elseif($tid == 0){
        $var_key = "itgapp_cat_0";
        if (variable_get($var_key) > 0) {
            $interval = variable_get($var_key);
        }
    }

    return $interval;
}

/**
 * This function use for get video duration data by nid
 * 
 */
function get_rv_video_duration_by_nid($nid) {
    $query = db_select('field_data_field_video_upload', 'up_video');
    $query->join('field_data_field_videogallery_video_upload', 'fvu', 'up_video.field_video_upload_value = fvu.entity_id');
    $query->leftJoin('dailymotion_response_details', 'drd', 'drd.fid = fvu.field_videogallery_video_upload_fid');
    $query->Join('itg_solr_video_info', 'isvi', 'isvi.fid = fvu.field_videogallery_video_upload_fid');
    $query->fields('isvi', array('solr_video_duration'));
    $query->condition('up_video.entity_id', $nid);
    $query->groupBy('isvi.solr_video_id');
    $query->orderBy('up_video.delta', 'ASC');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    return $result[0]['solr_video_duration'];
}

function testtolive_homeapi() {

    include(DRUPAL_ROOT . "/sites/all/modules/custom/itg_app_api/inc/itg_app_api_video.inc");
    include(DRUPAL_ROOT . "/sites/all/modules/custom/itg_app_api/inc/itg_app_api_news.inc");
    include(DRUPAL_ROOT . "/sites/all/modules/custom/itg_app_api/inc/itg_app_api_story.inc");
    include(DRUPAL_ROOT . "/sites/all/modules/custom/itg_app_api/inc/itg_app_api_polls.inc");
    include(DRUPAL_ROOT . "/sites/all/modules/custom/itg_app_api/inc/itg_app_api_photo.inc");
    include(DRUPAL_ROOT . "/sites/all/modules/custom/itg_app_api/inc/itg_app_api_magazine.inc");
    $jsondata = homePageJson();
    $jsondata = json_encode($jsondata);
    $redis_key = "devitg_rapid_api_homePage";
    $ttl = 600;
    $result_set = setRedis($redis_key, $jsondata, $ttl);
    //truncate & insert into live table start
    db_truncate('itg_app_middleware_live')->execute();
    db_truncate('itg_app_master_config_internal_live')->execute();
    db_truncate('itg_app_master_info_internal_live')->execute();
    //into itg_app_middleware
    $query = db_select('itg_app_middleware', 'iam');
    $query->fields('iam');
    db_insert('itg_app_middleware_live')->from($query)->execute();
    //into itg_app_master_config_internal
    $query = db_select('itg_app_master_config_internal', 'imi');
    $query->fields('imi');
    db_insert('itg_app_master_config_internal_live')->from($query)->execute();
    //into itg_app_master_config_internal
    $query = db_select('itg_app_master_info_internal', 'imin');
    $query->fields('imin');
    db_insert('itg_app_master_info_internal_live')->from($query)->execute();
    redis_key_delete($redis_key);
    //insert into live table end    
    drupal_set_message(t('copy dev to live home api done.'));
    drupal_goto('itg-app-arrange-home');
}

/**
 * get_mac_unix_os
 */
function get_mac_unix_os() {
    ob_start();
    system('ifconfig -a');
    $mycom = ob_get_contents(); // Capture the output into a variable
    ob_clean(); // Clean (erase) the output buffer
    $findme = "Physical";
    //Find the position of Physical text 
    $pmac = strpos($mycom, $findme);
    $mac = substr($mycom, ($pmac + 37), 18);

    return $mac;
}
/**
 * cube_widget form decalation
 *
 * @return type
 */
function cube_widget() {
    $form = array();

    $form['cube_widget'] = array(
        '#type' => 'textarea',
        '#title' => t('adconfig tab'),
        '#default_value' => variable_get('cube_widget'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * fba_update_data_search
 * @param type $nid
 * @return int
 */
function fba_update_data_search($nid, $source = 0) {
    $nid_flag = 0;
    $result = "";
    $api_type = "fba_update";
    if ($nid) {
        $query = $query = db_select('itg_fba_update', 'ifu');
        $query->fields('ifu', array('nid', 'fba_id', 'fba_publish_status', 'fba_published'));
        $query->condition('ifu.nid', $nid, '=');
        $query->condition('ifu.api_type', $api_type, '=');
        $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
        if(count($result[0]) > 0){
            $nid_flag = $result[0]['nid'];
        }
        
    }
    if ($source == 0) {
        return $nid_flag;
    } else {
        return $result;
    }
}
/**
 * hamburger_menu_tv_json form decalation
 *
 * @return type
 */
function hamburger_menu_tv_json() {
    $form = array();

    $form['itg_rapid_api_hamburger_menu_tv'] = array(
        '#type' => 'textarea',
        '#title' => t('hamburger menu tv'),
        '#default_value' => variable_get('itg_rapid_api_hamburger_menu_tv'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * popular_search_tv_json_json form decalation
 *
 * @return type
 */
function popular_search_tv_json() {
    $form = array();

    $form['itg_rapid_api_hamburger_menu_tv'] = array(
        '#type' => 'textarea',
        '#title' => t('popular search tv'),
        '#default_value' => variable_get('itg_rapid_api_popular_search_tv'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}
