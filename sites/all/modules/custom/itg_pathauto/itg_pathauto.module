<?php

/**
 * {@inheritdoc}
 */
function itg_pathauto_init() {
  global $base_url;
  $arg = arg();
  if ($arg[0] == 'node' && is_numeric($arg[1]) && $arg[2] == 'edit') {
    $node = menu_get_object();
    $settings = array();
    $settings['node_id'] = $node->nid;
    $settings['node_type'] = $node->type;
    $settings['base_url'] = $base_url;
    drupal_add_js(array('itg_pathauto' => array('settings' => $settings)) , array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module' , 'itg_pathauto') . '/js/itg-pathauto.js' , array('type' => 'file' , 'scope' => 'footer'));
  }
}

/**
 * @param string $entity_type
 *  Type of entity.
 * @param int $entity_id
 *  Entity id.
 * @param int $pathauto_state
 *  Pathauto state 0 or 1.
 */
function itg_pathauto_state_save($entity_type , $entity_id , $pathauto_state) {
  try {
    db_merge('itg_pathauto_state')
        ->key(array(
          'entity_type' => $entity_type ,
          'entity_id' => $entity_id ,
        ))
        ->fields(array(
          'pathauto' => $pathauto_state ? 1 : 0 ,
        ))
        ->execute();
  }
  catch (Exception $ex) {
    drupal_set_message($ex->getMessage());
  }
}

/**
 * {@inheritdoc}
 */
function itg_pathauto_pathauto_alias_alter(&$alias , array &$context) {
  if (function_exists('is_valid_content_type_for_sef_url') && is_valid_content_type_for_sef_url($context['data']['node']->type)) {
    // Handel case if user selected  Generate automatic Sef URL
    // $alias is overridden
    // If you don't want to overridden then use conatinate.
    // Example : $alias .= '.html';
    $alias = $context['data']['node']->path['alias'];
    $node_id = $context['data']['node']->nid;
    $node_type = $context['data']['node']->type;
    $pathauto_state = 1;
    itg_pathauto_state_save($node_type , $node_id , $pathauto_state);
  }
}

/**
 * This function is called via ajax when sef checkbox is unchecked.
 * @param int $node_id
 * @param string $node_type
 * @param blooean $pathauto_state
 */
function itg_pathauto_state_unset($node_id , $node_type , $pathauto_state) {
  itg_pathauto_state_save($node_type , $node_id , $pathauto_state);
}

/**
 * Give status of pathauto.
 * @param int $entity_id
 * @param string $entity_type
 * @return int
 */
function itg_pathauto_get_sef_url_state($entity_id , $entity_type) {
  $query = db_select('itg_pathauto_state' , 'ips');
  $query->addField('ips' , 'pathauto');
  $query->condition('entity_id' , $entity_id);
  $query->condition('entity_type' , $entity_type);
  return $query->execute()->fetchField();
}

/**
 * Function which saves Pathauto status value in custom table after form submit.
 */
function itg_pathauto_save_sef_status($form , &$form_state) {
  $pathauto_state = 0;
  $pathauto = $form_state['values']['path']['pathauto'];
  $node_id = $form_state['values']['nid'];
  $node_type = $form_state['values']['type'];
  if ($pathauto) {
    $pathauto_state = 1;
  }
  itg_pathauto_state_save($node_type , $node_id , $pathauto_state);
}

function itg_pathauto_form_alter(&$form , &$form_state , $form_id) {
  $node_form_array = array(
    'photogallery_node_form' ,
    'story_node_form' ,
    'videogallery_node_form' ,
    'podcast_node_form' ,
    'food_news_node_form' ,
    'cooking_tips_node_form' ,
    'recipe_node_form' ,
    'blog_node_form' ,
    'reporter_node_form' ,
    'itg_funalytics_node_form' ,
    'mega_review_critic_node_form' ,
    'page_node_form' ,
  );
  if (in_array($form['#form_id'] , $node_form_array)) {
    $form['#after_build'][] = 'itg_meta_tags_alias_set';
    // Handel case when pathauto checkbox status.
    $form['actions']['submit']['#submit'][] = 'itg_pathauto_save_sef_status';
    $form['#after_build'][] = 'itg_pathauto_sef_checkbox_status';
  }
  return $form;
}

/**
 * Extra meta tags element hide from form
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_meta_tags_alias_set($form , &$form_state) {
  $nodeid = arg(1);
  if (isset($form['path']) && !empty($form['path'])) {
    $edited_sef_url = itg_get_sef_url($form['path']['alias']['#value'] , $nodeid);
    //pr($edited_sef_url);
    $form['path']['alias']['#value'] = $edited_sef_url; // itg_common_custompath_insert_val($form['path']['alias']['#value']);
  }
  return $form;
}

/**
 * Return SEF Url
 */
function itg_get_sef_url($sef_path , $nodeid) {
  if (isset($sef_path) && !empty($sef_path)) {
    $node_object = node_load($nodeid);
    // Handel edit case for issue baised story.
    $is_issue_magazine = is_issue_baised_magazine($node_object);
    $is_photo_story = is_photo_story($node_object);
    $is_reporter = is_reporter($node_object);
    $is_itg_funalytics = is_itg_funalytics($node_object);
    $is_mega_review_critic = is_mega_review_critic($node_object);
    $is_basic_page = is_basic_page($node_object);
    $is_podcast = is_podcast($node_object);
    if ($is_issue_magazine) {
      $path_alias_set = $sef_path;
      $path_data = explode("/" , $path_alias_set);
      $edit_path_data = end($path_data);
      $new_url_array = explode('-' , $edit_path_data);
      $array_size = count($new_url_array);
      unset($new_url_array[0]);
      unset($new_url_array[$array_size - 4]);
      unset($new_url_array[$array_size - 3]);
      unset($new_url_array[$array_size - 2]);
      unset($new_url_array[$array_size - 1]);
      $edited_sef_url = implode('-' , $new_url_array);
    }
    elseif ($is_photo_story || $is_mega_review_critic || $is_podcast) {
      $path_alias_set = $sef_path;
      $path_data = explode("/" , $path_alias_set);
      $edit_path_data = end($path_data);
      $new_url_array = explode('-' , $edit_path_data);
      $array_size = count($new_url_array);
      unset($new_url_array[$array_size - 4]);
      unset($new_url_array[$array_size - 3]);
      unset($new_url_array[$array_size - 2]);
      unset($new_url_array[$array_size - 1]);
      $edited_sef_url = implode('-' , $new_url_array);
    }
    elseif ($is_reporter || $is_itg_funalytics) {
      $path_data = explode("/" , $sef_path);
      $edited_sef_url = rtrim($path_data[1]);
    }
    elseif ($is_basic_page) {
      $path_data = explode("/" , $sef_path);
      $edited_sef_url = rtrim($path_data[0]);
    }
    else {
      $path_alias_set = $sef_path;
      $path_data = explode("/" , $path_alias_set);
      $set_hierarchy = array_reverse($path_data);
      $seftitle = $set_hierarchy[0];
      $sef_url = explode($nodeid , $seftitle);
      $edited_sef_url = rtrim($sef_url[0] , '-');
    }
    return $edited_sef_url;
  }
}

function itg_pathauto_sef_checkbox_status($form , &$form_state) {
  if (!empty($form['#node']->nid)) {
    $entity_type = $form['#node']->type;
    $entity_id = $form['#node']->nid;
    $state = itg_pathauto_get_sef_url_state($entity_id , $entity_type);
    if (isset($state)) {
      $pathauto_state = $state;
    }
    else {
      $pathauto_state = 0;
    }
  }
  else {
    //Give default sef checked while node/add form.
    $pathauto_state = 1;
  }
  // Handel checked unchecked of sef url;
  $form['path']['pathauto']['#title'] = t('Generate automatic Sef URL');
  $form['path']['pathauto']['#default_value'] = $pathauto_state;
  $form['path']['pathauto']['#value'] = $pathauto_state;
  $form['path']['pathauto']['#checked'] = $pathauto_state;
  return $form;
}
