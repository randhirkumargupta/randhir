<?php

/**
 * Implements hook_init()
 */
function itg_astro_init() {
  $sign_name = itg_astro_zodiac_thumbnail();
  $settings = array();
  foreach ($sign_name as $value) {
    $data[] = array('name' => $value->name, 'tid' => $value->tid);
  }
  $settings = array(
    $data[0]['name'] => $data[0]['tid'],
    $data[1]['name'] => $data[1]['tid'],
    $data[2]['name'] => $data[2]['tid'],
    $data[3]['name'] => $data[3]['tid'],
    $data[4]['name'] => $data[4]['tid'],
    $data[5]['name'] => $data[5]['tid'],
    $data[6]['name'] => $data[6]['tid'],
    $data[7]['name'] => $data[7]['tid'],
    $data[8]['name'] => $data[8]['tid'],
    $data[9]['name'] => $data[9]['tid'],
    $data[10]['name'] => $data[10]['tid'],
    $data[11]['name'] => $data[11]['tid'],
  );
  drupal_add_js(array('sign' => $settings), 'setting');
}

/**
 * Get file name from fid
 * @param type $audioFid
 */
function itg_astro_file_name($audio_fid) {
  $itg_query = db_select('file_managed', 'f');
  $itg_query->condition('fid', $audio_fid, '=')
      ->fields('f', array('filename'));

  $itg_result = $itg_query->execute()->fetchField();
  if ($itg_result != '') {
    return $itg_result;
  }

  return '';
}

/**
 * Load zodiac thumbnail for astro content type
 * @return type
 */
function itg_astro_zodiac_thumbnail() {
  try {
    $cache = cache_get('itg_astro_zodiac', 'cache');
    if ($cache && !empty($cache->data)) {
      $itg_term = $cache->data;
    }
    else {
      $itg_vid = taxonomy_vocabulary_machine_name_load('zodiac_sign');
      $itg_term = taxonomy_get_tree($itg_vid->vid, 0, NULL, TRUE);
      cache_set('itg_astro_zodiac', $itg_term, 'cache', time() + 60 * 60);
    }
  }
  catch (Exception $ex) {
    return $ex->getMessage();
  }

  return $itg_term;
}

/**
 * Fetch term name from drupal cache
 * @param type $tid
 * @return type
 */
function itg_astro_get_term_name($tid) {
  try {
    $cache = cache_get('itg_number', 'cache');
    if ($cache && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $itg_vid = taxonomy_vocabulary_machine_name_load('numerology');
      $itg_term = taxonomy_get_tree($itg_vid->vid, 0, NULL, TRUE);
      $data = array();
      foreach ($itg_term as $all_term) {
        $data[$all_term->tid] = $all_term->name;
      }
      cache_set('itg_number', $data, 'cache', time() + 60 * 60);
    }
  }
  catch (Exception $ex) {
    return $ex->getMessage();
  }

  return $data[$tid];
}

/**
 * Implements hook_form_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function itg_astro_form_alter(&$form, &$form_state, $form_id) {  
  if ($form_id == 'astro_node_form') {
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'itg_astro') . '/js/itg_astro.js',
      drupal_get_path('module', 'itg_astro') . '/js/moment.js',
      drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js',
    );
    if ($form['nid']['#value'] == NULL) {
      $form['title']['#default_value'] = date('M j, Y');
    }
    // Create navigation label
    $form['itg_collective'] = array(
      '#type' => 'markup',
      '#markup' => '<h2 class="story-title story-title-coll">'. t('Collective Content').'</h2>',      
    );
    $form['itg_zodiac'] = array(
      '#type' => 'markup',
      '#markup' => '<h2 class="story-title story-title-zod">'. t('Zodiac Sign').'</h2>',      
    );
    $form['itg_numerology'] = array(
      '#type' => 'markup',
      '#markup' => '<h2 class="story-title story-title-num">'. t('Numerology').'</h2>',      
    ); 

    // Set field visibility for zodiac sign field
    $form['field_astro_zodiac']['#states'] = array(
      'visible' => array(
        ':input[name="field_astro_type[und]"]' => array('value' => '315'),
      ),
    );
    // Set field visibility for collective text field    
    $form['field_buzz_description']['#states'] = array(
      'visible' => array(
        ':input[name="field_astro_type[und]"]' => array('value' => '314'),
      ),
    );
    // Set field visibility for collective video thumbnail field
    $form['field_astro_video_thumbnail']['#states'] = array(
      'visible' => array(
        ':input[name="field_astro_type[und]"]' => array('value' => '314'),
      ),
    );
    // Set field visibility for collective video field
    $form['field_astro_video']['#states'] = array(
      'visible' => array(
        ':input[name="field_astro_type[und]"]' => array('value' => '314'),
      ),
    );
    // Set field visibility for collective audio field
    $form['field_common_audio_file']['#states'] = array(
      'visible' => array(
        ':input[name="field_astro_type[und]"]' => array('value' => '314'),
      ),
    );
    // Set field visibility for collective audio field
    $form['field_astro_numerology_values']['#states'] = array(
      'visible' => array(
        ':input[name="field_astro_type[und]"]' => array('value' => '313'),
      ),
    );  


    $form['#action'] = '?destination=manage-astro';
    $form['actions']['submit']['#submit'][] = 'itg_astro_change_message';
    $form['#after_build'][] = 'itg_astro_after_build';
    unset($form['field_numerology']['und']['#options']['_none']);
    unset($form['field_astro_frequency2']['und']['#options']['_none']);
  }
}

/**
 * after build function for altering field collection label.
 */
function itg_astro_after_build($form, &$form_state) {
  // Change Zodiac field item label name and add * on mandotory fields  
  $zodiac_name = itg_astro_zodiac_thumbnail();
  for ($i = 0; $i <= 11; $i++) {
    $form['field_astro_zodiac']['und'][$i]['itg'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="itg-astro-image"><img src="' . image_style_url("thumbnail", $zodiac_name[$i]->field_astro_thumb_icon['und'][0]['uri']) . '" alt="' . $zodiac_name[$i]->field_astro_thumb_icon['und'][0]['alt'] . '" title="' . $zodiac_name[$i]->field_astro_thumb_icon['und'][0]['title'] . '"></div>',
    );
    $form['field_astro_zodiac']['und'][$i]['#title'] = t($zodiac_name[$i]->name);
    $form['field_astro_numerology_values']['und'][$i]['field_astro_select_number']['und']['#title'] = t('Select Number') . '<span class="form-required" title="This field is required."> *</span>';
    $form['field_astro_numerology_values']['und'][$i]['field_buzz_description']['und'][0]['value']['#title'] = t('Enter Text') . '<span class="form-required" title="This field is required."> *</span>';

    $form['field_astro_zodiac']['und'][$i]['field_buzz_description']['und'][0]['value']['#title'] = t('Text') . '<span class="form-required" title="This field is required."> *</span>';
    $form['field_astro_zodiac']['und'][$i]['field_zodiac_sign']['und']['#title'] = t('Zodiac Sign') . '<span class="form-required" title="This field is required."> *</span>';
  }
  $form['field_buzz_description']['#prefix'] = '<div class="collective-wrapper">';
  $form['field_common_audio_file']['#suffix'] = '</div>';
  $form['field_astro_type']['und']['#title'] = t('Astro Type') . '<span class="form-required" title="This field is required."> *</span>';

  // Add cancel button to create/edit astro page
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'manage-astro', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );

  // Send variable to itg_astro.js file
  global $user, $base_url;
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);

  $settings = array();
  $settings['uid'] = $user->uid;
  $settings['base_url'] = $base_url;
  $settings['type'] = 'astro';
  $settings['nid'] = $form['nid']['#value'];
  drupal_add_js(array('uid' => $settings), 'setting');

  return $form;
}

/**
 * Function return name of the sunsign.
 */
function itg_astro_sunsign_name($index) {
  $name = array(
    'Aries',
    'Taurus',
    'Gemini',
    'Cancer',
    'Leo',
    'Virgo',
    'Libra',
    'Scorpio',
    'Sagittarius',
    'Capricorn',
    'Aquarius',
    'Pisces',
  );
  if ($index <= 11) {
    return $name[$index];
  }

  return '';
}

/**
 * Custom submit callback function to change message after astro node save.
 * @param type $form
 * @param type $form_state
 */
function itg_astro_change_message($form, &$form_state) {
  $messages = drupal_get_messages('status');
  drupal_set_message(t('Astro has been successfully filled.'));
}

/**
 * Implements hook_block_info().
 */
function itg_astro_block_info() {
  $blocks['astro_tab_form_block'] = array(
    'info' => t('Astro Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * @param type $delta
 */
function itg_astro_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'astro_tab_form_block':
      $block['content'] = theme('astro_tab_form_display_block', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * @param type $existing
 * @param type $type
 * @param type $theme
 * @param type $path
 */
function itg_astro_theme($existing, $type, $theme, $path) {
  $themes = array(
    'astro_tab_form_display_block' => array(
      'template' => 'astro-form-tab-template',
      'path' => drupal_get_path('module', 'itg_astro') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'astro_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'astro-node-form',
      'path' => drupal_get_path('module', 'itg_astro') . '/templates',
      'render element' => 'form',
    ),
  );

  return $themes;
}

/**
 * Implements hook_field_widget_form_alter()
 * @staticvar int $count
 * @param type $element
 * @param type $form_state
 * @param type $context
 */
function itg_astro_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name']) && $element['#field_name'] == 'field_zodiac_sign') {
    static $count = 0;
    if ($count <= 11) {
      $itg_thumb = itg_astro_zodiac_thumbnail();
      $element['#title'] = t($itg_thumb[$count]->name);
      $itg_img_uri = $itg_thumb[$count]->field_astro_thumb_icon['und'][0]['uri'];
      $element['#prefix'] = '<div style="display:none;">';
      $element['#suffix'] = '</div>';
      $element['#default_value'] = $itg_thumb[$count]->tid;
    }    
    ++$count;
  }
}

/**
 * Implements hook_menu-alter()
 * @param array $item
 */
function itg_astro_menu_alter(&$item) {
  // Hide the "Create new account" tab
  $item['user/login']['type'] = MENU_CALLBACK;
}

/**
 * Implement hook_views_pre_render
 * @param Array $view
 */
function itg_astro_views_pre_render(&$view) {  
  //Add "Create Breaking news" on listing page of Breaking news
  if ($view->name == "manage_astroo") {
    $header_content_astro = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';  
    $header_content_astro .= l(t('File Astro'), 'node/add/astro', array('attributes' => array('class' => ''), 'query' => array('destination' => arg(0))));
    $view->attachment_before = $header_content_astro;
  }
  if ($view->name == 'category_manager_dev') {    
    $header_content_astro = '<span class="count">Count(' . count($view->result) . ')&nbsp;</span>';  
    $header_content_astro .= l(t('Create Category'), 'admin/structure/taxonomy/category_management/add');
    $view->attachment_before = $header_content_astro;
  }
}
