<?php

/**
 * @file
 * In this file we use widget hooks to extend their functionality.
 *
 * We use drupal hooks and add remove button for fields remove.
 */

/**
 * Implements hook_menu().
 */
function itg_fields_remove_button_menu() {
    $items = array();
    $items['itg_fields_remove_button/ajax'] = array(
      'title' => 'Remove item callback',
      'page callback' => 'itg_fields_remove_button_js',
      'delivery callback' => 'ajax_deliver',
      'access callback' => TRUE,
      'theme callback' => 'ajax_base_page_theme',
      'type' => MENU_CALLBACK,
      'file path' => 'includes',
      'file' => 'form.inc',
    );

    return $items;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function itg_fields_remove_button_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
    
}

/**
 * Ajax callback remove field when remove click is trigger.
 *
 * In this callback we will replace field items. Main job
 * to delete field item we will done into submit handler.
 *
 * @see itg_fields_remove_button_field_widget_form_alter()
 */
function itg_fields_remove_button_js() {
    if (isset($_POST['ajax_html_ids'])) {
        unset($_POST['ajax_html_ids']);
    }

    list($form, $form_state) = ajax_get_form();
    drupal_process_form($form['#form_id'], $form, $form_state);
    // Get the information on what we're removing.
    $button = $form_state['triggering_element'];
    // Go two levels up in the form, to the whole widget.
    $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -3));
    // Now send back the proper AJAX command to replace it.
    $return = array(
      '#type' => 'ajax',
      '#commands' => array(
        ajax_command_replace('#' . $element['#id'], drupal_render($element)),
      ),
    );

    // Because we're doing this ourselves, messages aren't automatic. We have
    // to add them.
    $messages = theme('status_messages');
    if ($messages) {
        $return['#commands'][] = ajax_command_prepend('#' . $element['#id'], $messages);
    }

    return $return;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function itg_fields_remove_button_field_widget_form_alter(&$element, &$form_state, $context) {
    // Remove button for the following field type widgets
    $fieldwidgets = array(
      'multiple_selects',
      'text_textfield',
      'date_popup',
      'date_text',
      'link_field',
      'entityreference_autocomplete',
      'number',
      'text_textarea',
      'text_textarea_with_summary',
      'addressfield_standard',
      'location',
    );
    // Add extra widgets with the help of others modules.
    drupal_alter('itg_field_remove_button_field_widgets', $fieldwidgets);

    if ((!empty($form_state['node']->type) && ($form_state['node']->type == 'syndication_client' 
            || $form_state['node']->type == 'task_idea_allocation_tracking' 
            || $form_state['node']->type == 'story' 
            || $form_state['node']->type == 'recipe' 
            || $form_state['node']->type == 'cooking_tips' 
            || $form_state['node']->type == 'food_news' 
            || $form_state['node']->type == 'videogallery' 
            || $form_state['node']->type == 'survey' 
            || $form_state['node']->type == 'quiz' 
            || $form_state['node']->type == 'breaking_news')) 
            && $context['field']['cardinality'] == FIELD_CARDINALITY_UNLIMITED && in_array($context['instance']['widget']['type'], $fieldwidgets)) {

        $original_element = $element;

        if ($context['field']['type'] == 'entityreference') {
            $original_element = $element['target_id'];
        }

        $field_parents = isset($original_element['#field_parents']) ? $original_element['#field_parents'] : array();
        $field_name = isset($original_element['#field_name']) ? $original_element['#field_name'] : NULL;
        $language = isset($original_element['#language']) ? $original_element['#language'] : LANGUAGE_NONE;
        $delta = isset($original_element['#delta']) ? $original_element['#delta'] : 0;

        // Get parent which will we use into Remove Button Element.
        $parents = array_merge($field_parents, array(
          $field_name,
          $language,
          $delta
        ));

        
        $element['remove_button'] = array(
          '#delta' => $delta,
          '#name' => implode('_', $parents) . '_remove_button',
          '#type' => 'submit',
          '#value' => t('Remove'),
          '#validate' => array(),
          '#attributes' => array('class' => array('itg-fields-remove-button')),
          '#submit' => array('itg_fields_remove_button_submit_handler'),
          '#limit_validation_errors' => array(),
          '#ajax' => array(
            'path' => 'itg_fields_remove_button/ajax',
            'effect' => 'fade',
          ),
          '#weight' => 1000,
        );
        
    }
}

/**
 * Submit callback to remove an item from the field UI itg wrapper.
 */
function itg_fields_remove_button_submit_handler($form, &$form_state) {
    $button = $form_state['triggering_element'];
    $delta = $button['#delta'];
    $inpt = 'input';
    // Where in the form we'll find the parent element.
    $address = array_slice($button['#array_parents'], 0, -2);

    // Go one level up in the form, to the widgets container.
    $parent_element = drupal_array_get_nested_value($form, $address);
    $field_name = $parent_element['#field_name'];
    $langcode = $parent_element['#language'];
    $parents = $parent_element['#field_parents'];

    $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);

    // Go ahead and renumber everything from our delta to the last
    // item down one. This will overwrite the item being removed.
    for ($i = $delta; $i <= $field_state['items_count']; $i++) {
        $old_element_address = array_merge($address, array($i + 1));
        $new_element_address = array_merge($address, array($i));

        $moving_element = drupal_array_get_nested_value($form, $old_element_address);
        $moving_element_value = drupal_array_get_nested_value($form_state['values'], $old_element_address);
        $moving_element_input = drupal_array_get_nested_value($form_state[$inpt], $old_element_address);

        // Tell the element where it's being moved to.
        $moving_element['#parents'] = $new_element_address;

        // Move the element around.
        form_set_value($moving_element, $moving_element_value, $form_state);
        drupal_array_set_nested_value($form_state[$inpt], $moving_element['#parents'], $moving_element_input);

        // Move the entity in our saved state.
        if (isset($field_state['entity'][$i + 1])) {
            $field_state['entity'][$i] = $field_state['entity'][$i + 1];
        }
        else {
            unset($field_state['entity'][$i]);
        }
    }


    if ($field_state['items_count'] > 0) {
        $field_state['items_count'] --;
    }


    $input = drupal_array_get_nested_value($form_state[$inpt], $address);

    uasort($input, '_field_sort_items_helper');
    $weight = -1 * $field_state['items_count'];
    foreach ($input as $key => $item) {
        if ($item) {
            $input[$key]['_weight'] = $weight++;
        }
    }
    drupal_array_set_nested_value($form_state[$inpt], $address, $input);
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);

    $form_state['rebuild'] = TRUE;
}
