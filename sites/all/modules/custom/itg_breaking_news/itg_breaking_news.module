<?php

/**
 * @file
 * The ITG Breaking News module.
 *
 * Contains functionality related to Breaking News.
 */

/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_breaking_news_block_info() {
    $blocks['breaking_news_tab_form_block'] = array(
        'info' => t('Breaking News Form Tab Block'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 * {@inheritdoc}
 */
function itg_breaking_news_block_view($delta = '') {
    $block = array();
    $data = '';
    switch ($delta) {
        case 'breaking_news_tab_form_block':
            $block['content'] = theme('breaking_news_tab_form_display_block', array('data' => $data));
            break;
    }

    return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_breaking_news_theme($existing, $type, $theme, $path) {
    $themes = array(
        'breaking_news_tab_form_display_block' => array(
            'template' => 'breaking-news-form-tab-template',
            'path' => drupal_get_path('module', 'itg_breaking_news') . '/templates',
            'variables' => array('data' => NULL),
        ),
        'breaking_news_node_form' => array(
            'arguments' => array('form' => NULL),
            'template' => 'breaking-news-node-form',
            'path' => drupal_get_path('module', 'itg_breaking_news') . '/templates',
            'render element' => 'form',
        ),
    );

    return $themes;
}

/**
 * Implement node_delete_confirm_alter
 * {@inheritdoc}
 */
function itg_breaking_news_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
    global $user;

    $node_type = $form['#node']->type;
    if ($user->uid != '1' && $node_type == 'breaking_news') {
        // Check if we have a node id and stop if not
        if (empty($form['nid']['#value'])) {
            return;
        }
        // Load the node from the form
        $node = node_load($form['nid']['#value']);
        // condition if node is publish and type is breaking news
        if ($node->status == 1 && $node->type = 'breaking_news') {
            drupal_set_title('Published news cannot be deleted. Please unpublished the news first and try again.');
            unset($form['description']);
            unset($form['actions']['submit']);
        }
    }
}

/**
 * Implement hook_form_alter
 * {@inheritdoc}
 */
function itg_breaking_news_form_alter(&$form, &$form_state, $form_id) {
    global $user;

    if ($form_id == 'breaking_news_node_form') {
      // code to hide source field
        if ($user->uid != '1') {
            $form['field_source']['#access'] = FALSE;
            $form['field_common_related_content']['#attributes']['class'][] = 'element-hidden';
        }

        if (isset($form['#node']->nid)) {
            $form['field_type']['#disabled'] = TRUE;
        }

        // Hide/show Live TV field
        $form['field_story_expires']['#states'] = array(
            'visible' => array(
                ':input[name="field_type[und]"]' => array('value' => 'Live Blog'),
            )
        );
        // code to add taxonomy parent terms with no child
        $op = array("_none" => "Select Section");
        $tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = TRUE);
        foreach ($tax as $key => $val) {
        $type = 'breaking_news';
        if (itg_category_manager_term_state_content($type, $val->tid)) {
          if (itg_category_manager_term_state($val->tid)) {
            $op[$val->tid] = $val->name;
          }
        }
      }

    // assign array value to taxonomy field
        $form['field_section']['#title'] = array('All' => '- Any -');
        $form['field_section']['und']['#options'] = $op;

        // Add destination and cancel button in add Breaking News form page
        $form['field_publish_time'][LANGUAGE_NONE][0]['value']['date']['#disabled'] = TRUE;
        $destination = 'breaking-news';
        $form['actions']['cancel'] = array(
            '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
            '#weight' => 21,
            '#value' => t('Cancel'),
        );

        // Hide/show highlights field based on type
        $form['field_story_highlights']['#states'] = array(
            'visible' => array(
                ':input[name="field_type[und]"]' => array('value' => 'Live Blog'),
            )
        );
        $form['actions']['submit']['#value'] = 'Publish';
        $form['#after_build'][] = 'itg_breaking_news_after_build';
        $form['actions']['submit']['#submit'][] = 'itg_breaking_news_form_custom_callback';
    }
}

/**
 * Custom submit callback for redirecting breaking news form.
 * {@inheritdoc}
 */
function itg_breaking_news_form_custom_callback($form, &$form_state) {
    if (isset($_SESSION['messages']['status'])) {
        unset($_SESSION['messages']['status']);
    }
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'breaking-news') {
        $op = 'created';
    }
    else {
        $op = 'updated';
    }
    $breaking_news_title = $form_state['node']->title;
    drupal_set_message(t('Breaking News <b>' . $breaking_news_title . '</b> has been ' . $op . '.'));
    $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * Implement hook_views_pre_render
 * {@inheritdoc}
 */
function itg_breaking_news_views_pre_render(&$view) {
    // Add "Create Breaking news" on listing page of Breaking news
    if ($view->name == "breaking_news" && $view->current_display == 'page') {
        $header_content_breaking = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
        $header_content_breaking .= l('Create Breaking News live blog', 'node/add/breaking-news', array('query' => array('destination' => 'breaking-news')));
        $view->attachment_before = $header_content_breaking;
        foreach ($view->result as $breaking_value) {
            if ($breaking_value->field_field_type[0]['raw']['value'] == 'Live Blog' && !empty($breaking_value->field_field_story_expires[0]['raw']['value'])) {
                $breaking_value->field_field_story_expires[0]['rendered']['#markup'] = 'Yes';
            }
            if ($breaking_value->field_field_type[0]['raw']['value'] == 'Live Blog' && empty($breaking_value->field_field_story_expires[0]['raw']['value'])) {
                $breaking_value->field_field_story_expires[0]['rendered']['#markup'] = 'No';
            }
        }
    }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * {@inheritdoc}
 */
function itg_breaking_news_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
    // Get the Form Id
    if ($form["#id"] == 'views-exposed-form-breaking-news-page') {
        $form['#after_build'][] = 'itg_breaking_news_views_exposed_after_build';
        $form['title']['#autocomplete_path'] = 'content-title-list/breaking_news/autocomplete';
        $form['title']['#attributes'] = array('placeholder' => t('Title'));

        // code to reset breaking news listing when user click on back button
        drupal_add_js('jQuery(document).ready(function() {                  
                 jQuery("form").each(function() {            
                 this.reset();
               });              
          });', array('type' => 'inline', 'scope' => 'footer'));
    }
}

/**
 * Implement hook_after_build
 * {@inheritdoc}
 */
function itg_breaking_news_after_build($form, &$form_state) {

    global $user, $base_url;
  
    $form['field_content_type']['#attributes']['class'][] = 'element-hidden';
    if (!isset($form['#node']->nid)) {
        // hide remove button of first field on add form 
        drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-field-story-highlights-und-0-remove-button").hide();
              jQuery("#edit-field-breaking-content-details-und-0-remove-button").hide();
            });', array('type' => 'inline', 'scope' => 'footer'));
    }

    //$form['field_breaking_content_details']['#prefix'] = '<div id="custom_another_item"><a href="javascript:void(0)" id="custom_add_another_item">Add another item</a></div>';
    for ($i = 0; $i <= $form['field_breaking_content_details'][LANGUAGE_NONE]['#max_delta']; $i++) {
        $count = $i + 1;
        $form['field_breaking_content_details'][LANGUAGE_NONE][$i]['#title'] = 'Content details - ' . $count;
    }

    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;
    drupal_add_js(array('itg_breaking_news' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_breaking_news') . '/js/itg_breaking_news.js');
    return $form;
}

/**
 * Implement hook_after_build
 * {@inheritdoc}
 */
function itg_breaking_news_views_exposed_after_build($form, &$form_state) {
    $form['status']['#options'][1] = 'Published';
    $form['status']['#options'][0] = 'Unpublished';

    return $form;
}

/**
 * Implement hook node validate
 * {@inheritdoc}
 */
function itg_breaking_news_node_validate($node, $form, &$form_state) {

    if ($node->type == 'breaking_news') {
        $section = $node->field_section[LANGUAGE_NONE];
        $type = $node->field_type[LANGUAGE_NONE][0]['value'];
        $display_on = $node->field_display_on[LANGUAGE_NONE][0]['value'];

        if ($type == 'Live Blog') {
            // filter empty array if type is live blog
            if (empty($section[0]['tid'])) {
                form_set_error('field_section', t("Section Field is required"));
            }
        }
        // check if section is selected and category not select
        if ($type == 'Breaking News' && $display_on == 'Section') {
            if (empty($section[0]['tid'])) {
                form_set_error('field_section', t("Section Field is required!"));
            }
        }
    }
}

/**
 * Implement hook_menu_breadcrumb_alter
 * {@inheritdoc}
 */
function itg_breaking_news_menu_breadcrumb_alter(&$active_trail, $item) {
    global $user, $base_url;
    if ($user->uid && $user->uid != '1') {
        $active_trail[0]['title'] = 'Home';
        $active_trail[0]['href'] = $base_url . '/cms-user-dashboard';
    }
}

/**
 * Implement hook_node_presave
 * {@inheritdoc}
 */
function itg_breaking_news_node_presave($node) {
    if ($node->type == 'breaking_news') {
        $type = $node->field_type[LANGUAGE_NONE][0]['value'];
        if ($type == 'Live Blog') {
            $node->field_display_on[LANGUAGE_NONE][0]['value'] = 'Section';
        }
    }
}

/**
 * Implements hook_views_api().
 *
 * {@inheritdoc}.
 */
function itg_breaking_news_views_api() {
    return array(
        'api' => 3,
    );
}