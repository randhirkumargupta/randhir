<?php

/**
 * @file
 * The ITG Breaking News module.
 *
 * Contains functionality related to Breaking News.
 */

/**
 * Implements hook_menu().
 *
 * {@inheridoc}.
 */
function itg_breaking_news_menu() {
  $items['cricket_live_blog_content'] = array(
    'page callback' => 'cricket_live_blog_content_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'include/itg_breaking_news.inc',
  );
  $items['cricket_live_blog_content_db/%/%'] = array(
    'page callback' => 'get_commentary_data_db_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'include/itg_breaking_news.inc',
  );
  $items['breakingnews'] = array(
    'title' => 'Breaking News',
    'page callback' => 'redirect_breakingnews_to_latest_node',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

   
  $items['manage-live-blog'] = array(
    'title' => 'Manage Live Blog',
    'page callback' => 'itg_live_blog_custom',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'include/itg_breaking_news_forms.inc',    
  );
  
  $items['itg-live-blog-list'] = array(
    'title' => 'Listing Live Blog',
    'page callback' => 'itg_live_blog_list',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,   
  );
  
  $items['itg-live-blog-row'] = array(
    'page callback' => 'itg_live_blog_get_row',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,   
  );
 
  $items['manage-print-form'] = array(
    'page callback' => 'print_form',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'include/itg_breaking_news_forms.inc', 
  );
  
  $items['itg-live-bog-delete'] = array(
    'page callback' => 'live_bog_delete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'include/itg_breaking_news_forms.inc', 
  );  
  
  $items['itg-live-bog-cron'] = array(
    'page callback' => 'live_bog_cron',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'include/itg_breaking_news_forms.inc', 
  );
  return $items;
}

/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_breaking_news_block_info() {
  $blocks['breaking_news_tab_form_block'] = array(
    'info' => t('Breaking News Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * {@inheritdoc}
 */
function itg_breaking_news_block_view($delta = '') {
  $block = array();
  $data = '';
  switch ($delta) {
    case 'breaking_news_tab_form_block':
      $block['content'] = theme('breaking_news_tab_form_display_block', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_breaking_news_theme($existing, $type, $theme, $path) {
  $themes = array(
    'breaking_news_tab_form_display_block' => array(
      'template' => 'breaking-news-form-tab-template',
      'path' => drupal_get_path('module', 'itg_breaking_news') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'breaking_news_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'breaking-news-node-form',
      'path' => drupal_get_path('module', 'itg_breaking_news') . '/templates',
      'render element' => 'form',
    ),
    'cricket_live_blog_commentary' => array(
      'template' => 'cricket-live-blog-commentary',
      'path' => drupal_get_path('module', 'itg_breaking_news') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_live_blog_custom_form' => array(
      'template' => 'itg-live-blog-custom-form',
      'path' => drupal_get_path('module', 'itg_breaking_news') . '/templates',
      'variables' => array('data' => NULL),
    ),
  );

  return $themes;
}

/**
 * Implement node_delete_confirm_alter
 * {@inheritdoc}
 */
function itg_breaking_news_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  global $user;

  $node_type = $form['#node']->type;
  if ($user->uid != '1' && $node_type == 'breaking_news') {
    // Check if we have a node id and stop if not
    if (empty($form['nid']['#value'])) {
      return;
    }
    // Load the node from the form
    $node = node_load($form['nid']['#value']);
    // condition if node is publish and type is breaking news
    if ($node->status == 1 && $node->type = 'breaking_news') {
      drupal_set_title('Published news cannot be deleted. Please unpublished the news first and try again.');
      unset($form['description']);
      unset($form['actions']['submit']);
    }
  }
}

/**
 * Implement hook_form_alter
 * {@inheritdoc}
 */
function itg_breaking_news_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  
  if ($form_id == 'itg_manage_breking_news' || $form_id == 'manage-print-form') { 
     $form['#after_build'][] = 'itg_breaking_custom_from_after_build';
  }
  
  if ($form_id == 'breaking_news_node_form') {
    $form['title']['#title'] = t('Page title');
    // code to hide source field
    if ($user->uid != '1') {
      $form['field_source']['#access'] = FALSE;
      $form['field_common_related_content']['#attributes']['class'][] = 'element-hidden';
    }

    if (isset($form['#node']->nid)) {
      $form['field_type']['#disabled'] = TRUE;
    }

    // Hide/show Live TV field
    $form['field_story_expires']['#states'] = array(
      'visible' => array(
        ':input[name="field_type[und]"]' => array('value' => 'Live Blog'),
      )
    );
    // code to add taxonomy parent terms with no child
    
    /*$tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = TRUE);
    foreach ($tax as $key => $val) {
      $type = 'breaking_news';
      if (itg_category_manager_term_state_content($type, $val->tid)) {
        if (itg_category_manager_term_state($val->tid)) {
          $op[$val->tid] = $val->name;
        }
      }
    }*/
    
    //code for section load on dropdown
    
    $section_query = db_select('taxonomy_term_data', 'ttd');
    $section_query->fields('ttd', array('tid', 'name'));
    $section_query->Join('field_data_field_cm_select_type', 'st', 'st.entity_id = ttd.tid');
    $section_query->Join('itg_category_manager', 'icm', 'icm.tid = ttd.tid');
    $section_query->condition('icm.status', 1);
    $section_query->condition('st.field_cm_select_type_value', 'breaking_news');
    $section_query->condition('st.bundle', 'category_management');
    $tax = $section_query->execute();
    
    foreach ($tax as $key => $val) {
      $op[$val->tid] = $val->name;
    } 
   
    
    //end
    
    natcasesort($op); // Sorting section array or category array by it value

    $op = array("_none" => "Select Section") + $op;

    // assign array value to taxonomy field
    $form['field_section']['#title'] = array('All' => '- Any -');
    $form['field_section']['und']['#options'] = $op;

    // Add destination and cancel button in add Breaking News form page
    $form['field_publish_time'][LANGUAGE_NONE][0]['value']['date']['#disabled'] = TRUE;
    
    // Setting default destination
    if (isset($_GET['destination'])) {
      $destination = $_GET['destination'];
    }
    else {
      $destination = 'breaking-news';
    }


    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
      '#weight' => 21,
      '#value' => t('Cancel'),
    );

    $form['field_section']['#states'] = array(
      'visible' => array(
        array(
          array(':input[name="field_breaking_display_on[und]"]' => array('value' => 'both')),
          'or',
          array(':input[name="field_breaking_display_on[und]"]' => array('value' => 'section')),
        ),
      )
    );


    $form['field_breaking_display_on']['#states'] = array(
      'visible' => array(
        ':input[name="field_type[und]"]' => array('value' => 'Breaking News'),
      ),
      'required' => array(
        ':input[name="field_type[und]"]' => array('value' => 'Breaking News'),
      )
    );


    $form['field_story_snap_post']['#states'] = array(
      'visible' => array(
        ':input[name="field_type[und]"]' => array('value' => 'Breaking News'),
      )
    );

    // Hide/show highlights field based on type
    $form['field_story_highlights']['#states'] = array(
      'visible' => array(
        ':input[name="field_type[und]"]' => array('value' => 'Live Blog'),
      )
    );
    
    // Hide/show hMatch id based on type
    $form['field_match_id']['#states'] = array(
      'visible' => array(
        ':input[name="field_type[und]"]' => array('value' => 'Cricket Live Blog'),
      )
    );
    
    // Hide/show coverage field based on type
    $form['field_breaking_coverage_end_time']['#states'] = array(
      'visible' => array(
        ':input[name="field_type[und]"]' => array('value' => 'Live Blog'),
      )
    );

    $form['actions']['submit']['#value'] = 'Publish';
    $form['#after_build'][] = 'itg_breaking_news_after_build';
    $form['actions']['submit']['#submit'][] = 'itg_breaking_news_form_custom_callback';
    $form['#validate'][] = 'itg_breaking_news_form_custom_validate';
  }
}

/**
 * Custom submit callback for redirecting breaking news form.
 * {@inheritdoc}
 */
function itg_breaking_news_form_custom_callback($form, &$form_state) {
  
  // REDIRECTION FOR APPLY BUTTON
  if ($form_state['input']['op'] == 'Apply') {
    if ($form_state['node']->status == '1') {
      /* Assign story to widget */
      if (is_array($form['#node']->field_story_assign_to_widget[LANGUAGE_NONE])) {
        $previous_story_assign = $form['#node']->field_story_assign_to_widget[LANGUAGE_NONE];
      }
      else {
        $previous_story_assign = '';
      }
      $story_widget = $form_state['input']['field_story_assign_to_widget'][LANGUAGE_NONE];
      // for story assign to widget
      if (function_exists('itg_story_assign_to_widget')) {
        if (is_array($story_widget) && count($story_widget) > 0) {
          itg_story_assign_to_widget($form_state['values']['nid'], $story_widget, '', $previous_story_assign);
        }
      }
      /* End for Assign story to widget */
      $redirect_path = 'node/' . $form_state['values']['nid'] . '/edit?destination=' . $_GET['destination'];
      $_GET['destination'] = $redirect_path;
      drupal_goto('node/' . $form_state['values']['nid'] . '/edit');
    }
  }

  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'breaking-news') {
    $op = 'created';
  }
  else {
    $op = 'edited/updated';
  }
  $breaking_news_title = $form_state['node']->title;
  $ctype = $form_state['node']->field_type[LANGUAGE_NONE][0]['value'];
  drupal_set_message(t($ctype . ' <b>' . $breaking_news_title . '</b> has been ' . $op . '.'));
  $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * Function for validate primary category field
 * @param array $form
 * @param array $form_state
 */
function itg_breaking_news_form_custom_validate($form, &$form_state) {
  if ($form_state['values']['field_type']['und'][0]['value'] == 'Cricket Live Blog' && empty($form_state['values']['field_primary_category']['und'][0]['value'])) {
    form_set_error('field_primary_category', t("Primary category Field is required!"));
  }
}

/**
 * Implement hook_views_pre_render
 * {@inheritdoc}
 */
function itg_breaking_news_views_pre_render(&$view) {
  // Add "Create Breaking news" on listing page of Breaking news
  if ($view->name == "breaking_news" && $view->current_display == 'page') {
    $header_content_breaking = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_breaking .= l('Create Breaking News live blog', 'node/add/breaking-news', array('query' => array('destination' => 'breaking-news')));
    $view->attachment_before = $header_content_breaking;
    foreach ($view->result as $breaking_value) {
      if ($breaking_value->field_field_type[0]['raw']['value'] == 'Live Blog' && !empty($breaking_value->field_field_story_expires[0]['raw']['value'])) {
        $breaking_value->field_field_story_expires[0]['rendered']['#markup'] = 'Yes';
      }
      if ($breaking_value->field_field_type[0]['raw']['value'] == 'Live Blog' && empty($breaking_value->field_field_story_expires[0]['raw']['value'])) {
        $breaking_value->field_field_story_expires[0]['rendered']['#markup'] = 'No';
      }
    }
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * {@inheritdoc}
 */
function itg_breaking_news_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Get the Form Id
  if ($form["#id"] == 'views-exposed-form-breaking-news-page') {
    $form['#after_build'][] = 'itg_breaking_news_views_exposed_after_build';
    $form['title']['#autocomplete_path'] = 'content-title-list/breaking_news/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
}

/**
 * Implement hook_after_build
 * {@inheritdoc}
 */
function itg_breaking_news_after_build($form, &$form_state) {

  global $user, $base_url;

  $form['field_content_type']['#attributes']['class'][] = 'element-hidden';

  if (!isset($form['#node']->nid)) {
    $node_id = 0;
  }

   // apply button for editor and siteadmin role
  if (array_key_exists(EDITOR, $user->roles) || array_key_exists(SITE_ADMIN, $user->roles) || array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) || array_key_exists(COPY_EDITOR, $user->roles) || array_key_exists(INTERN, $user->roles)) {
    if (!empty($form['nid']['#value']) && arg(2) == 'edit' && $form['#node']->type == 'breaking_news' && $form['#node']->status == '1') {
      $form['actions']['itg_breaking_apply_button'] = array(
        '#type' => 'submit',
        '#value' => t('Apply'),
        '#id' => 'btn-apply',
        '#submit' => array('node_form_submit', 'itg_breaking_news_form_custom_callback'),
        '#weight' => -8,
      );
    }
  }

  for ($i = 0; $i <= $form['field_breaking_content_details'][LANGUAGE_NONE]['#max_delta']; $i++) {
    $count = $i + 1;
    $form['field_breaking_content_details'][LANGUAGE_NONE][$i]['#title'] = 'Content details - ' . $count;
  }

  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['no_id'] = $node_id;
  drupal_add_js(array('itg_breaking_news' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_breaking_news') . '/js/itg_breaking_news.js', array('scope' => 'footer'));
  return $form;
}

/**
 * Implement hook_after_build
 * {@inheritdoc}
 */
function itg_breaking_news_views_exposed_after_build($form, &$form_state) {
  $form['status']['#options'][1] = 'Published';
  $form['status']['#options'][0] = 'Unpublished';

  return $form;
}

/**
 * Implement hook node validate
 * {@inheritdoc}
 */
function itg_breaking_news_node_validate($node, $form, &$form_state) {

  if ($node->type == 'breaking_news') {
    $section = $node->field_section[LANGUAGE_NONE];
    $type = $node->field_type[LANGUAGE_NONE][0]['value'];
    $display_on = $node->field_breaking_display_on[LANGUAGE_NONE][0]['value'];

    // check if section is selected and category not select
    if ($type == 'Breaking News' && $display_on == 'section') {
      if (empty($section[0]['tid'])) {
        form_set_error('field_section', t("Section Field is required!"));
      }
    }

    if ($type == 'Breaking News' && $display_on == 'both') {
      if (empty($section[0]['tid'])) {
        form_set_error('field_section', t("Section Field is required!"));
      }
    }

    if ($type == 'Breaking News' && empty($display_on)) {
      form_set_error('field_breaking_display_on', t("Display on Field is required!"));
    }
  }
}

/**
 * Implement hook_menu_breadcrumb_alter
 * {@inheritdoc}
 */
function itg_breaking_news_menu_breadcrumb_alter(&$active_trail, $item) {
  global $user, $base_url;
  if ($user->uid && $user->uid != '1') {
    $active_trail[0]['title'] = 'Home';
    $active_trail[0]['href'] = $base_url . '/cms-user-dashboard';
  }
}

/**
 * Implement hook_node_presave
 * {@inheritdoc}
 */
function itg_breaking_news_node_presave($node) {
  //set custom path alias  
  if (itg_workflow_stop_node_update_batch_for_widgets()) {
    return;
  }

  if ($node->type == 'breaking_news') {
    $type = $node->field_type[LANGUAGE_NONE][0]['value'];
    $node->status = 1;
    if ($type == 'Live Blog') {
      $node->field_display_on[LANGUAGE_NONE][0]['value'] = 'Section';
    }
  }
}

/**
 * Implements hook_views_api().
 *
 * {@inheritdoc}.
 */
function itg_breaking_news_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implementation of hook_views_query_alter
 * @param array reference $view
 * @param array reference $query
 */
function itg_breaking_news_views_query_alter(&$view, &$query) {
  if (isset($view->name) && $view->name === 'breaking_news' && $view->current_display == 'block_1') {
    $query->add_where(5, 'node.created', strtotime(date('d-m-Y 00:00:00')), '>=');
  }
  if (isset($view->name) && $view->name === 'breaking_news' && $view->current_display == 'block_2') {
    $query->add_where(5, 'node.created', strtotime(date('d-m-Y 00:00:00')), '>=');
  }
}

/**
 * Redirect to latest node of breaking news
 * if user hit the breakingnews url
 */
function redirect_breakingnews_to_latest_node() {
  $latestnid = '';
  $latestnid_query = db_select('node', 'n');
  $latestnid_query->leftJoin('field_data_field_type', 'ft', 'ft.entity_id = n.nid');
  $latestnid_query->fields('n', array('nid'));
  $latestnid_query->condition('n.type', 'breaking_news');
  $latestnid_query->condition('n.status', 1);
  $latestnid_query->condition('ft.field_type_value', 'Breaking News');
  $latestnid_query->condition('ft.bundle', 'breaking_news');
  $latestnid_query->condition('ft.entity_type', 'node');
  $latestnid_query->orderBy('n.changed', 'DESC');
  $latestnid_query->range(0, 1);
  $latestnid = $latestnid_query->execute()->fetchField();
  if (is_numeric($latestnid)) {
    drupal_goto('node/' . $latestnid);
  }
}

/**
 * function for show Cricket data from json.
 * @param string $match_id
 * @param int $start
 * @param int $total
 * @param int $commentary_id
 * @param boolean $latest
 * @return array
 */
function get_cricket_live_blog_data($match_id, $limit = NULL) {
  if (!empty($match_id)) {
    $api_base_url = 'http://feeds.intoday.in/xml_it/commentary/';
    $match_commentary = file_get_contents($api_base_url . $match_id . '_ballbyball.json');

    if ($match_commentary) {
      $commentary = array();
      $match_commentary = json_decode($match_commentary);
      $innings = $match_commentary->Match->Innings;
      if (!is_array($innings)) {
        $innings = array($innings);
      }
      $innings = array_reverse($innings, TRUE);

      if (!is_array($innings)) {
        $innings = array($innings);
      }
      foreach ($innings as $key => $value) {
        $nodes = array();
        if (!empty($value->Node)) {
          $nodes = array_reverse($value->Node);
        }
        foreach ($nodes as $node_key => $node_value) {
          $commentary[] = $node_value;
        }
      }
      if (!empty($limit)) {
        $commentary = array_slice($commentary, 0, $limit);
      }
      return theme('cricket_live_blog_commentary', array('data' => $commentary));
    }
  }
}

/**
 * 
 * @param int $nid
 * @param int $page
 * @return boolean/array
 */
function get_commentary_data_db($nid, $page) {
  $data = FALSE;  
    if (isset($nid) && !empty($nid)) {
      $query = db_select('field_data_field_breaking_content_details', 'bcd');
      $query->addField('bt', 'field_breaking_tile_value', 'Commentary');
      $query->addExpression($page, 'innings');
      $query->leftJoin('field_data_field_breaking_tile', 'bt', '(bt.entity_id = bcd.field_breaking_content_details_value)');
      $query->isNotNull('bcd.field_breaking_content_details_value');
      $query->condition('bcd.entity_id', $nid, '=');
      $query->condition('bcd.bundle', 'breaking_news', '=');
      $query->condition('bcd.entity_type', 'node', '=');
      $query->condition('bt.bundle', 'field_breaking_content_details', '=');
      $query->condition('bt.entity_type', 'field_collection_item', '=');
      $query->range((20 * $page), 20);
      $query_result = $query->execute()->fetchAll();
      if (!empty($query_result) && count($query_result) > 0) {
        return theme('cricket_live_blog_commentary', array('data' => $query_result));
      }
    }
  return $data;
}

function itg_breaking_form_ajax_submit($form , &$form_state) {

  global $user;
  $blog_uid = $user->uid;
  $blog_type = 'Breaking News';

  $blog_title = $form_state['values']['blog_title'];
  $blog_description = $form_state['values']['blog_description']['value'];
  $blog_breaking_band = $form_state['values']['blog_breaking_band'];
  $blog_notification = $form_state['values']['blog_notification'];
  // $blog_publish_time = $form_state['input']['blog_publish_time']['time'];
  $blog_publish_time = $form_state['values']['blog_publish_time'];
  $blog_highlight_status = $form_state['values']['blog_highlight_status'];
  $blog_entity_id = $form_state['values']['blog_entity_id'];
  $bid = $form_state['input']['bid'];
 // $blog_exist = itg_live_blog_exist($blog_entity_id, $blog_title);
  $created = date('Y-m-d H:i:s');

    if (isset($bid) && $bid > 0) {
        $insert_id = db_update('itg_live_blog')
            ->fields(array(
              'blog_entity_id' => $blog_entity_id,
              'blog_type' => $blog_type,
              'blog_title' => $blog_title,
              'blog_description' => $blog_description,
              'blog_breaking_band' => $blog_breaking_band,
              'blog_notification' => $blog_notification,
              'blog_publish_time' => $blog_publish_time,
              'blog_highlight_status' => $blog_highlight_status,
              'blog_uid' => $blog_uid,
              'blog_updated_date' => $created,
            ))
            ->condition('bid', $bid, '=')
            ->execute();
      }
      else {
           $insert_id = db_insert('itg_live_blog')
            ->fields(array(
              'blog_entity_id' => $blog_entity_id,
              'blog_type' => $blog_type,
              'blog_title' => $blog_title,
              'blog_description' => $blog_description,
              'blog_breaking_band' => $blog_breaking_band,
              'blog_notification' => $blog_notification,
              'blog_publish_time' => $blog_publish_time,
              'blog_highlight_status' => $blog_highlight_status,
              'blog_uid' => $blog_uid,
              'blog_created_date' => $created,
            ))
            ->execute();
    
      }
  $blog_list = "<div id='live_data'>". itg_live_blog_list($blog_entity_id) . "</div>"; // itg_live_blog_list($blog_entity_id);
  
  $commands = array();
  if (isset($bid) && $bid > 0) {
    $commands[] = ajax_command_prepend(NULL, theme('status_messages')); // Messages output to a Drupal settings variable with registry alter
    $commands[] = ajax_command_replace('#live_data' , $blog_list);
    $commands[] = ajax_command_invoke('#live_data', 'replaceWith', array($content));
    $commands[] = ajax_command_replace(NULL, drupal_render($form));
  } else {
    $commands[] = ajax_command_prepend(NULL, theme('status_messages')); // Messages output to a Drupal settings variable with registry alter
    $commands[] = ajax_command_replace('#live_data' , $blog_list);
    // $commands[] = ajax_command_invoke('#live_data', 'replaceWith', array($content));
    $commands[] = ajax_command_replace(NULL, drupal_render($form));
  } 
     
  return array('#type' => 'ajax', '#commands' => $commands);

  
}

function itg_live_blog_exist($blog_entity_id, $blog_title) {
  $query = db_select('itg_live_blog', 'p');
  $query->fields('p', array('bid'));
  $query->condition('p.blog_title', $blog_title);
  $query->condition('p.blog_entity_id', $blog_entity_id);
  return $result = $query->execute()->fetchField();
}


function itg_live_blog_list($eid = NULL) {
 global $base_url;
 
 $output = '';
 $limit = 3;
 $start_from = ($_POST['row']) ? $_POST['row'] : '0';
 $entityId = ($_POST['entityId']) ? $_POST['entityId'] : '';
 // if (isset($_GET["page"])) { $page  = $_GET["page"]; } else { $page=1; };  
 // $start_from = ($page-1) * $limit;  
 if ($entityId) {
   $blog_entity_id = $entityId;
 } elseif($eid) {
   $blog_entity_id = $eid;
 } else {
   $blog_entity_id = arg(2);  
 } 
 

 
 $query = db_select('itg_live_blog', 'p');
 $query->condition('p.blog_entity_id', $blog_entity_id);
 $query->fields('p', array('bid','blog_title', 'blog_description', 'blog_breaking_band', 'blog_notification', 'blog_publish_time','blog_uid',	'blog_created_date'))
        ->range($start_from, $limit)
       ->orderBy('bid', 'DESC');
  # execute the query
  $results = $query->execute()->fetchAll();
 
    $count = db_query("SELECT bid FROM itg_live_blog")->rowCount();
    $total_records = $count;  
    $total_pages = ceil($total_records / $limit);  

    
  if(empty($start_from)) {
    $output .= '  
      <div class="table-responsive" id="custom-live-blog">  
           <table class="table">  
                <tr>  
                     <th width="10%">Publish Time</th>
                      <th width="10%">User</th>
                     <th width="20%">Title</th> 
                     <th width="20%">Description</th> 
                     <th width="10%">Breaking band</th>
                     <th width="10%">Action
                     <input type="hidden" id="row" value="0">
                     <input type="hidden" id="all" value="'.$count.'">
                     <input type="hidden" id="entity-id" value="'.$blog_entity_id.'">  
                          </th>  
                </tr>';  

  }
      $results = array_reverse($results);
      // p($results);
      foreach ($results as $row) 
      {
        $breaking_band = ($row->blog_breaking_band == 1) ? 'yes' : 'no'; 
        $user = !empty($row->blog_uid) ? user_load($row->blog_uid)->name : '';
         $edit_link = $base_url . '/manage-print-form/edit/' . $row->bid . '?width=1000&height=700&iframe=true';
        $output .= '  
                <tr>
                     <td class="blog_title" id="pt'.$row->blog_publish_time.'" data-id1="'.$row->bid.'">'.$row->blog_publish_time.'</td>
                     <td class="user" id="u'.$row->bid.'" data-id2="'.$row->bid.'">'.$user.'</td>
                     <td class="blog_title" id="t'.$row->bid.'" data-id1="'.$row->bid.'">'.$row->blog_title.'</td>
                     <td class="blog_title" id="t'.$row->bid.'" data-id1="'.$row->bid.'">'.substr($row->blog_description, 0, 100).'</td>
                     <td class="blog_breaking_band" id="b'.$row->bid.'" data-id2="'.$row->bid.'">'.$breaking_band.'</td>
                     
                     <td>
                     
                      
                      <a class="colorbox-load add-more add-related-content-link" oncontextmenu="return false;" href="'.$edit_link.'">Edit</a>  
                      <button type="button" name="delete_btn" data-id3="'.$row->bid.'" class="btn btn-xs btn-danger btn_delete">Delete</button>
                     </td>  
                </tr>  
           ';  
      }  

 if(empty($start_from)) {
       $add_link = $base_url . '/manage-print-form/add/' . $blog_entity_id. '?width=1000&height=700&iframe=true';
    $output .= '</table>  
         <div class="load-more">Load More</div>
        </div>';
 }
 
 return $output; 
}


function itg_live_blog_get_row($eid = NULL) {
 global $base_url;
 
 $output = '';
 $limit = 3;
 $start_from = ($_POST['row']) ? $_POST['row'] : '0';
 $entityId = ($_POST['entityId']) ? $_POST['entityId'] : '';

 if ($entityId) {
   $blog_entity_id = $entityId;
 } elseif($eid) {
   $blog_entity_id = $eid;
 } 

 $query = db_select('itg_live_blog', 'p');
 $query->condition('p.blog_entity_id', $blog_entity_id);
 $query->fields('p', array('bid','blog_title', 'blog_description', 'blog_breaking_band', 'blog_notification', 'blog_publish_time','blog_uid',	'blog_created_date'))
        ->range($start_from, $limit)
       ->orderBy('bid', 'DESC');
      // print strtr((string) $query, $query->arguments()); die;
       # execute the query
      $results = $query->execute()->fetchAll();
      
      $results = array_reverse($results);
      foreach ($results as $row) 
      {
        $breaking_band = ($row->blog_breaking_band == 1) ? 'yes' : 'no'; 
        $user = !empty($row->blog_uid) ? user_load($row->blog_uid)->name : '';
         $edit_link = $base_url . '/manage-print-form/edit/' . $row->bid . '?width=1000&height=700&iframe=true';
        $output .= '  
                <tr>
                     <td class="blog_title" id="pt'.$row->blog_publish_time.'" data-id1="'.$row->bid.'">'.$row->blog_publish_time.'</td>
                     <td class="user" id="u'.$row->bid.'" data-id2="'.$row->bid.'">'.$user.'</td>
                     <td class="blog_title" id="t'.$row->bid.'" data-id1="'.$row->bid.'">'.$row->blog_title.'</td>
                     <td class="blog_title" id="t'.$row->bid.'" data-id1="'.$row->bid.'">'.substr($row->blog_description, 0, 100).'</td>
                     <td class="blog_breaking_band" id="b'.$row->bid.'" data-id2="'.$row->bid.'">'.$breaking_band.'</td>
                     
                     <td>
                     
                      
                      <a class="colorbox-load add-more add-related-content-link" oncontextmenu="return false;" href="'.$edit_link.'">Edit</a>  
                      <button type="button" name="delete_btn" data-id3="'.$row->bid.'" class="btn btn-xs btn-danger btn_delete">Delete</button>
                     </td>  
                </tr>  
           ';  
      }  
     
 
 print $output; 
}

/**
 * Implement hook_after_build
 * {@inheritdoc}
 */
function itg_breaking_custom_from_after_build($form, &$form_state) {

  global $user, $base_url;
  //p($form);
  $settings = array();
  $settings['base_url'] = $base_url;
  // drupal_add_js(drupal_get_path('theme', 'itg') . '/js/budget_predictor/jquery1.7.1.min.js', array('preprocess' => false, 'weight' => 4, 'scope' => 'footer'));
  drupal_add_js(array('itg_breaking_new_form' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_breaking_news') . '/js/itg_breaking_news_custom_form.js', array('preprocess' => false, 'scope' => 'footer'));
  
  return $form;
}