<?php

/**
 * @file
 */
module_load_include('inc', 'itg_dbmigrate', 'includes/itg_migrate');



/**
 * get new content id of itg by old content id
 * @param int $sourceid
 * @return int destination id
 */
function get_itg_destination_id($table_name, $sourceid) {
  $query = db_select($table_name, 'mmap');
  $query->fields('mmap', array('destid1'));  
  $query->condition('sourceid1', $sourceid);
  
  return $query->execute()->fetchField();
}

/**
 * Order set of content
 * @param array $node
 * @return
 */
function ordering_set_of_content($node, $count) {  
  
  $nid = $node->nid;
    if (function_exists('__itg_widget_helper_data_insert')) {
                            __itg_widget_helper_data_insert($node->nid);
                        }
 // $cat_id = $node->field_primary_category[LANGUAGE_NONE][0]['value'];
  if (isset($node->field_story_category['und'])) {
    $cat_id = $node->field_story_category['und'];
      foreach ($cat_id as $category) {
        
         $query = db_insert('itg_widget_order_section')
        ->fields(array(
          'nid' => $nid,
          'widget' => 'section_wise_widget',
          'content_type' => $node->type,
          'cat_id' => $category['tid'],
          'weight' => $count,
          'extra' => "",
        ))
        ->execute();
         _delete_old_data_from_section_widget('itg_widget_order_section', $category['tid'], $node->type);
       
       $query = db_insert('itg_widget_order')
        ->fields(array(
          'nid' => $nid,
            'widget' => 'section_wise_widget',
            'content_type' => 'All',
            'cat_id' => $category['tid'],
            'weight' => $count,
            'extra' => '',
        ))
        ->execute();  
       _delete_old_data_from_section_widget('itg_widget_order', $category['tid'], "all");
      }
    }   
}    
 

/**
 * Implement function for update
 */
function ordering_set_of_content_update($node, $count) {  
  
  $nid = $node->nid;
     if (function_exists('__itg_widget_helper_data_insert')) {
                            __itg_widget_helper_data_insert($node->nid);
                        }
  db_delete('itg_widget_order')
                    ->condition('widget', 'section_wise_widget')
                    ->condition('content_type', 'All')
                    ->condition('nid', $nid)->execute();

            db_delete('itg_widget_order_section')
                    ->condition('content_type', $node->type)
                    ->condition('widget', 'section_wise_widget')
                    ->condition('nid', $nid)->execute();
} 


/**
 * insert value of flag count in db.
 * @param int $nid
 * @param string $type
 * @param string $val
 */
function itg_flag_insert_like_dislike($nid, $like, $dis_like) {
  
  $active = db_insert('itg_custom_flag_count')
      ->fields(array(
        'nid' => $nid,
        'like_count' => $like,
        'dislike_count' => $dis_like,
        'created' => date('Y-m-d G:i:s'),
      ))
      ->execute();
  
}


/**
 * insert value of flag count in db update script.
 * @param int $nid
 * @param string $type
 * @param string $val
 */
function itg_flag_insert_like_dislike_update($nid, $like, $dis_like) {
  $active = db_update('itg_custom_flag_count')
          ->fields(array(
              'like_count' => $like,
              'dislike_count' => $dis_like,
              'created' => date('Y-m-d G:i:s'),
          ))
          ->condition('nid', $nid, '=')
          ->execute();
  
}



/**
 * Implements function for mosimage replace
 * @param string $body_string
 * @param array $mosimage_array
 * @return string
 */
function itg_dbmigrate_mosimage_replace($body_string, $mosimage_array, $token){
  $str = str_replace(array('%', $token), array('%%', '%s'), $body_string);
  $newstr = vsprintf($str, $mosimage_array);
  return $newstr;
}

/**
 * Order set for byline
 * @param array $node
 * @return
 */
function ordering_set_for_byline($nid, $weight) {
    db_insert('draggableviews_structure')->fields(array(
    'view_name' => 'widget_anchors_listing',
    'view_display' => 'anchors_listing_widget',
    'args' => '[]',
    'entity_id' => $nid,
    'weight' => $weight,
    'parent' => 0,
    ))->execute();
  }
  
  /**
   * Implements function for get term name
   * @param int $tid
   * @return
   */
  function itg_db_migrate_term_name($tid){
   $query = db_select('taxonomy_term_data', 'ttd');
   $query = $query->fields('ttd',array('name'));
   $query = $query->condition('tid', $tid, '=');
   $result = $query->execute()->fetchField();
   return $result;
  }
  
  /**
   * Implements function for get parent section id for photo category
   * @param string $term_name
   * @return
   */
  function itg_db_migrate_parent_term($term_name, $vid) {
    $query = db_select('taxonomy_term_data', 'ttd');
    $query -> fields('ttd', array('tid'));
    $query -> condition('vid', $vid, '=');
    $query -> condition('name', '%' . db_like($term_name), LIKE);
    $result = $query->execute()->fetchField();
    return $result;
  }
  
  /**
 * implement function to get category table
 */
function itg_migrate_category_table($level){
  $table = array(
    '1' => 'migrate_map_itgsection',
    '2' => 'migrate_map_itgcategory',
    '3' => 'migrate_map_itgsubcategory',
    '4' => 'migrate_map_itgsubsubcategory',
  );
  
  return $table[$level];
}

/**
   * Implements function for get term sef
   * @param str $url
   * @return
   */
  function itg_db_migrate_term_sef($url){
   $query = db_select('url_alias', 'ul');
   $query = $query->fields('ul',array('alias'));
   $query = $query->condition('source', $url, '=');
   $query->condition('source', '%' . db_like($url), LIKE);
   $result = $query->execute()->fetchField();
   return $result;
  }
  
/**
 * Implement function for return vocab id.
 * @param str $vocab_name
 * @return
 */
function itg_db_migrate_vocab_id($vocab_name) {
  $query = db_select('taxonomy_vocabulary', 'tv');
  $query->fields('tv', array('vid'));
  $query->condition('tv.machine_name', $vocab_name, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implement function for migrate bylines
 */
function itg_db_migrate_bylines($byline_nid, $story_nid){
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status'));
  $query->condition('type', 'reporter', '=');
  $query->condition('nid', $byline_nid, '=');
  $result = $query->execute()->fetchAll();
  db_insert('itg_multi_byline_info')
          ->fields(array(
            'byline_id' => $byline_nid,
            'uniqueid' => 'migrated-'.$story_nid,
            'created' => REQUEST_TIME,
            'nid' => $story_nid,
           'publish_status' => $result[0]->status,
          ))
          ->execute();
}


/**
 * Implement function for migrate bylines
 */
function itg_db_migrate_bylines_update($byline_nid, $story_nid){
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status'));
  $query->condition('type', 'reporter', '=');
  $query->condition('nid', $byline_nid, '=');
  $result = $query->execute()->fetchAll();
  
  $num_deleted = db_delete('itg_multi_byline_info')
  ->condition('nid', $story_nid)
  ->condition('byline_id', $byline_nid)
  ->execute();
  
  db_insert('itg_multi_byline_info')
          ->fields(array(
            'byline_id' => $byline_nid,
            'uniqueid' => 'migrated-'.$story_nid,
            'created' => REQUEST_TIME,
            'nid' => $story_nid,
           'publish_status' => $result[0]->status,
          ))
          ->execute();
}


/**
 * Implement function for image
 */
function itg_dbmigrate_imagepath_url($img_url) {
  //$img = explode('/indiatoday/' , $img_url);
  //return '/var/www/itgcms/sites/default/files/indiatoday/'.$img[1];
  //return '/opt/sites/media/indiatoday/'.$img[1]; //without conclave
  return $img_url;
}

/**
 * {@inheritdoc}
 */
function itg_dbmigrate_menu() {
  $items['itg-clean-story'] = array(
    'title' => 'api callback menu',
    'page callback' => 'itg_db_migrate_index',
    'access callback' => TRUE,
  );
  return $items;
}

function itg_db_migrate_index() {
  $xml_path = 'sites/default/files' . '/xml_file_newcutxml/index/';
  $path = 'sites/default/files/migrate/xml_file/stories';
  $dom = new DOMDocument('1.0', 'utf-8');
  $element = $dom->createElement('content');
  foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path)) as $filename) {
    $rest = substr($filename, -4);
    if($rest == ".xml"){
      $filesd = end(explode('/', $filename));
      $filess = str_replace('.xml', '', $filesd);
      $source = $dom->createElement('sourceid', $filess);
      $element->appendChild($source);
    }        
  }
  $dom->appendChild($element);
  $dom->save($xml_path . 'index.xml');
}

function image_caption_insert_db($caption_text, $fid) {
  db_insert('image_info')
      ->fields(array(
        'image_caption' => $caption_text,
        'fid' => $fid,
      ))
      ->execute();
}


/**
 * Copy folder to another folder
 */

function copy_directoryone_to_another($src,$dst) {
    $dir = opendir($src);
    @mkdir($dst);
    while(false !== ( $file = readdir($dir)) ) {
        if (( $file != '.' ) && ( $file != '..' )) {
            if ( is_dir($src . '/' . $file) ) {
                recurse_copy($src . '/' . $file,$dst . '/' . $file);
            }
            else {
                copy($src . '/' . $file,$dst . '/' . $file);
            }
        }
    }
    closedir($dir);
}


/**
 * Implement function for get failed record ids
 */
function failed_record_xml_id($table) {
  $query = db_select($table, 'tab');
  $query->fields('tab', array('sourceid1'));
  $query->isNull('destid1');
  $result = $query->execute()->fetchAll();
  $output = ''; 
  if(!empty($result)) {
    $output = '<ul>';
      foreach ($result as $rel) {
        $output .= '<li>'.$rel->sourceid1.'</li>';
      }
    $output .= '<ul>';
  }
  return $output;
}

function mail_user_send() {
   $to_mail = '<vedprakash.pareek@kelltontech.com>,<vedmona@gmail.com>,<sanjayanchal@gmail.com>,<santoshkumarjena@gmail.com>';
  return $to_mail;
}


/**
 * Implements hook_mail
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_dbmigrate_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_mail_failed_content':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=iso-8859-1;',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );

      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Implement function for folder structure
 */
function __insert_orignal_image($uri, $fid) {
  $file_uri = file_create_url($uri);
  db_insert('itg_all_orignal_image')->fields(array(
    'fid' => $fid,
    'orignal_fid' => $fid,
    'url' => $file_url
  ))->execute();
}

/**
 * Insert updated date in database
 */
function __insert_modified_date_flag_table($type, $time_stamp, $nid) {
    watchdog('success_update_table', '<pre>'.print_r('rea').'<pre>');
    db_insert('itg_node_update_updation')->fields(array(
    'type' => $type,
    'timestamp' => $time_stamp,
    'nid' => $nid,    
  ))->execute();
}


function itg_dbmigrate_apachesolr_exclude($entity_id, $entity_type, $row, $env_id) {
  // Never index media entities to core_1
  /*if ($entity_type == 'story' && $entity_type == 'photogallery' && $entity_type == 'videogallery') {
    return TRUE;
  }*/
  return FALSE;
}
