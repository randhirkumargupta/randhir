<?php

/**
 * @file
 * Implements the necessary hooks for the file browser to work properly.
 */

/**
 * Implements hook_menu().
 * {@inheritdoc}
 */
function itg_image_repository_menu() {
    $items = array();
    $access = array('administer itg_image_repository');
    $items['itg_image_repository'] = array(
        'title' => 'File browser',
        'page callback' => 'itg_image_repository',
        'access callback' => 'itg_image_repository_access',
        'access arguments' => array(FALSE, 1),
        'file' => 'inc/itg_image_repository.page.inc',
        'type' => MENU_CALLBACK,
    );
    $items['user/%user/itg_image_repository'] = array(
        'title' => 'File browser',
        'page callback' => 'itg_image_repository_user_page',
        'page arguments' => array(1),
        'access callback' => 'itg_image_repository_user_page_access',
        'access arguments' => array(1),
        'file' => 'inc/itg_image_repository.page.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
    );
    $items['admin/config/media/itg_image_repository'] = array(
        'title' => 'itg_image_repository',
        'description' => 'Control how your image/file browser works.',
        'page callback' => 'itg_image_repository_admin',
        'access arguments' => $access,
        'file' => 'inc/itg_image_repository.admin.inc',
    );
    $items['admin/config/media/itg_image_repository/profile'] = array(
        'title' => 'Add new profile',
        'page callback' => 'itg_image_repository_profile_operations',
        'access arguments' => $access,
        'type' => MENU_VISIBLE_IN_BREADCRUMB,
        'file' => 'inc/itg_image_repository.admin.inc',
    );
    $items['file/itg_image_repository/%/%/%'] = array(
        'page callback' => 'filefield_source_itg_image_repository_page',
        'page arguments' => array(2, 3, 4),
       // 'access arguments' => $access,
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
 * Implements hook_info().
 * {@inheritdoc}
 */
function itg_image_repository_filefield_sources_info() {
    $source = array();

    $source['itg_image_repository'] = array(
        'name' => t('ITG Image Repository file browser'),
        'label' => t('File browser'),
        'description' => t('Select a file to use from a file browser.'),
        'process' => 'filefield_source_itg_image_repository_process',
        'value' => 'filefield_source_itg_image_repository_value',
        'weight' => -1,        
    );
    
    $source['itg_image_video'] = array(
        'name' => t('ITG Video Repository'),
        'label' => t('ITG Video Repository'),
        'description' => t('Select a Video to daily motion.'),
        'process' => 'filefield_source_itg_image_video_process',
        'weight' => -1,        
    );

    return $source;
}

/**
 * Implements hook_filefield_source_settings()
 * {@inheritdoc}
 * @param string $option
 * @param array $instance
 * @return array $return
 */
function filefield_source_itg_image_repository_settings($option, $instance) {
    $return = array();

    if ($option == 'form') {
        $settings = $instance['widget']['settings']['filefield_sources'];

        $return['source_itg_image_repository'] = array(
            '#title' => t('itg_image_repository file browser settings'),
            '#type' => 'fieldset',
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#access' => module_exists('itg_image_repository'),
        );

        $return['source_itg_image_repository']['itg_image_repository_mode'] = array(
            '#type' => 'radios',
            '#title' => t('File browser mode'),
            '#options' => array(
                0 => t('Restricted: Users can only browse the field directory. No file operations are allowed.'),
                1 => t('Full: Browsable directories are defined by <a href="!itg_image_repository-admin-url">itg_image_repository configuration profiles</a>. File operations are allowed.', array('!itg_image_repository-admin-url' => url('admin/config/media/itg_image_repository'))),
            ),
            '#default_value' => isset($settings['source_itg_image_repository']['itg_image_repository_mode']) ? $settings['source_itg_image_repository']['itg_image_repository_mode'] : 0,
        );
    } 
    elseif ($option == 'save') {
        $return['source_itg_image_repository']['itg_image_repository_mode'] = 0;
    }

    return $return;
}

/**
 * A #process callback to extend the filefield_widget element type.
 * @param array $element
 * @param reference $form_state
 * @return array $element
 * 
 */
function filefield_source_itg_image_repository_process($element, &$form_state, $form) {
    $instance = field_widget_instance($element, $form_state);

    $element['filefield_itg_image_repository'] = array(
        '#weight' => 100.5,
        '#theme' => 'filefield_source_itg_image_repository_element',
        '#filefield_source' => TRUE, // Required for proper theming.
        '#description' => filefield_sources_element_validation_help($element['#upload_validators']),
    );

    $filepath_id = $element['#id'] . '-itg_image_repository-path';
    $display_id = $element['#id'] . '-itg_image_repository-display';
    $select_id = $element['#id'] . '-itg_image_repository-select';
    $element['filefield_itg_image_repository']['file_path'] = array(
        // IE doesn't support onchange events for hidden fields, so we use a
        // textfield and hide it from display.
        '#type' => 'textfield',
        '#value' => '',
        '#attributes' => array(
            'id' => $filepath_id,
            'onblur' => "if (this.value.length > 0) { jQuery('#$select_id').triggerHandler('mousedown'); }",
            'style' => 'position:absolute; left: -9999em',
        ),
    );

    $getimageoptions = explode('(', @$element['#description']);
    $getimageoptions = explode(')', @$getimageoptions[1]);
    $getimagehightwidth = explode('x', @$getimageoptions[0]);

     $url = url('file/itg_image_repository/' . $element['#entity_type'] . '/' . $form['#node']->type . '/' . $element['#field_name'], array('query' => array('advagg'=>0,'app' => $instance['label'] . '|url@' . $filepath_id, 'field_name' => $element['#field_name'], 'height' => @$getimagehightwidth[1], 'width' => @$getimagehightwidth[0],'btn_name'=>$element['#name'])));      
     $itg_image_repository_function="showimagerepopopu('".$url."')";
     $element['filefield_itg_image_repository']['display_path'] = array(
        '#type' => 'markup',
        '#markup' => '<span id="' . $display_id . '" class="filefield-sources-imce-display">' . t('No file selected') . '</span> (<a class="filefield-sources-imce-browse" href="javascript:void(0)" onclick="' . $itg_image_repository_function . '">' . t('browse') . '</a>)',
    );

    $element['filefield_itg_image_repository']['select'] = array(
        '#name' => implode('_', $element['#array_parents']) . '_itg_image_repository_select',
        '#type' => 'submit',
        '#value' => t('Select'),
        '#validate' => array(),
        '#submit' => array('filefield_sources_field_submit'),
        '#limit_validation_errors' => array($element['#parents']),
        '#name' => $element['#name'] . '[filefield_itg_image_repository][button]',
        '#id' => $select_id,
        '#attributes' => array('style' => 'display: none;'),
        '#ajax' => array(
            'path' => 'file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
            'wrapper' => $element['upload_button']['#ajax']['wrapper'],
            'method' => 'replace',
            'effect' => 'fade',
        ),
    );

    return $element;
}


/**
 * A #process callback to extend the filefield_widget element type.
 * @param array $element
 * @param reference $form_state
 * @return array $element
 * 
 */
function filefield_source_itg_image_video_process($element, &$form_state, $form) {
    $instance = field_widget_instance($element, $form_state);
  $element['filefield_itg_image_video'] = array(
        '#weight' => 100.5,
        '#theme' => 'filefield_source_itg_image_repository_element',
        '#filefield_source' => TRUE, // Required for proper theming.
        '#description' => filefield_sources_element_validation_help($element['#upload_validators']),
    );

    $filepath_id = $element['#id'] . '-itg_image_repository-path';
    $display_id = $element['#id'] . '-itg_image_repository-display';
    $select_id = $element['#id'] . '-itg_image_repository-select';

    $getimageoptions = explode('(', @$element['#description']);
    $getimageoptions = explode(')', @$getimageoptions[1]);
    $getimagehightwidth = explode('x', @$getimageoptions[0]);

    $url=url('dailymotion-ftp-template/' . $element['#entity_type'] . '/' . $element['#bundle'] . '/' . $element['#field_name'], array('query' => array('app' => $instance['label'] . '|url@' . $filepath_id, 'field_name' => $element['#field_name'], 'no_value' => 'single','btn_name'=>$element['#name'])));
 
    $itg_image_repository_function="showimagerepopopu('".$url."')";
    $element['filefield_itg_image_video']['display_path'] = array(
        '#type' => 'markup',
        '#markup' => '<span id="' . $display_id . '" class="filefield-sources-imce-display">' . t('No file selected') . '</span> (<a class="filefield-sources-imce-browse" href="javascript:void(0)" onclick="' . $itg_image_repository_function . '">' . t('browse') . '</a>)',
    );

    $element['filefield_itg_image_video']['select'] = array(
        '#name' => implode('_', $element['#array_parents']) . '_itg_image_repository_select',
        '#type' => 'submit',
        '#value' => t('Select'),
        '#validate' => array(),
        '#submit' => array('filefield_sources_field_submit'),
        '#limit_validation_errors' => array($element['#parents']),
        '#name' => $element['#name'] . '[filefield_itg_image_video][button]',
        '#id' => $select_id,
        '#attributes' => array('style' => 'display: none;'),
        '#ajax' => array(
            'path' => 'file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
            'wrapper' => $element['upload_button']['#ajax']['wrapper'],
            'method' => 'replace',
            'effect' => 'fade',
        ),
    );

    return $element;
}



/**
 * A #filefield_value_callback function.
 * @param array $element
 * @param reference array $item
 */
function filefield_source_itg_image_repository_value($element, &$item) {
    if (isset($item['filefield_itg_image_repository']['file_path']) && $item['filefield_itg_image_repository']['file_path'] != '') {
        $field = field_info_field($element['#field_name']);

        $scheme = $field['settings']['uri_scheme'];
        $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
        $file_directory_prefix = $scheme == 'private' ? 'system/files' : $wrapper->getDirectoryPath();
        $uri = preg_replace('/^' . preg_quote(base_path() . $file_directory_prefix . '/', '/') . '/', $scheme . '://', $item['filefield_itg_image_repository']['file_path']);

        // Resolve the file path to an FID.
        $fid = db_select('file_managed', 'f')
                ->condition('uri', rawurldecode($uri))
                ->fields('f', array('fid'))
                ->execute()
                ->fetchField();
        if ($fid) {
            $file = file_load($fid);
            if (filefield_sources_element_validate($element, $file)) {
                $item = array_merge($item, (array) $file);
            }
        } 
        else {
            form_error($element, t('The selected file could not be used because the file does not exist in the database.'));
        }
        // No matter what happens, clear the value from the file path field.
        $item['filefield_itg_image_repository']['file_path'] = '';
    }
}

/**
 * Theme the output of the autocomplete field.
 *   @param array $variables
 *   @return string 
 */
function theme_filefield_source_itg_image_repository_element($variables) {
    $element = $variables['element'];

    $output = drupal_render_children($element);
    ;
    return '<div class="filefield-source filefield-source-itg_image_repository clear-block">' . $output . '</div>';
}

/**
 * Outputs the itg_image_repository browser for FileField.
 * @param array $entity_type
 * @param string $bundle_name
 * @param string $field_name
 * @return array
 */
function filefield_source_itg_image_repository_page($entity_type, $bundle_name, $field_name) {
    global $conf;
    $conf['preprocess_js'] = 0;
    $field = field_info_field($field_name);
 
    // Disable absolu URLs.
    $conf['itg_image_repository_settings_absurls'] = 0;

    module_load_include('inc', 'itg_image_repository', 'inc/itg_image_repository.page');
  
    return itg_image_repository($field['settings']['uri_scheme']);
}

/**
 * Scan and return files, subdirectories, and total size for "full" mode.
 * @param string $dirname
 * @param reference array $itg_image_repository
 * @return array $directory
 */
function filefield_source_itg_image_repository_custom_scan_full($dirname, &$itg_image_repository) {
    // Get a list of files in the database for this directory.
    $scheme = $itg_image_repository['scheme'];
    $sql_uri_name = $dirname == '.' ? $scheme . '://' : $scheme . '://' . $dirname . '/';

    $result = db_select('file_managed', 'f')
            ->fields('f', array('uri'))
            ->condition('f.uri', $sql_uri_name . '%', 'LIKE')
            ->condition('f.uri', $sql_uri_name . '_%/%', 'NOT LIKE')
            ->execute();

    $db_files = array();
    foreach ($result as $row) {
        $db_files[basename($row->uri)] = 1;
    }

    // Get the default itg_image_repository directory scan, then filter down to database files.
    $directory = itg_image_repository_scan_directory($dirname, $itg_image_repository);
    foreach ($directory['files'] as $filename => $file) {
        if (!isset($db_files[$filename])) {
            unset($directory['files'][$filename]);
            $directory['dirsize'] -= $file['size'];
        }
    }

    return $directory;
}

/**
 * Scan directory and return file list, subdirectories, and total size for Restricted Mode.
 * @param string $dirname
 * @param reference array $itg_image_repository
 * @return array $directory
 */
function filefield_source_itg_image_repository_custom_scan_restricted($dirname, &$itg_image_repository) {
    $field = $GLOBALS['conf']['itg_image_repository_custom_field'];
    $root = $itg_image_repository['scheme'] . '://';
    $field_uri = $field['_uri'];
    $is_root = $field_uri == $root;

    // Process itg_image_repository. Make field directory the only accessible one.
    $itg_image_repository['dir'] = $is_root ? '.' : substr($field_uri, strlen($root));
    $itg_image_repository['directories'] = array();
    if (!empty($itg_image_repository['perm'])) {
        filefield_source_itg_image_repository_disable_perms($itg_image_repository, array('browse'));
    }

    // Create directory info
    $directory = array('dirsize' => 0, 'files' => array(), 'subdirectories' => array(), 'error' => FALSE);

    if (isset($field['storage']['details']['sql']['FIELD_LOAD_CURRENT'])) {
        $storage = $field['storage']['details']['sql']['FIELD_LOAD_CURRENT'];
        $table_info = reset($storage);
        $table = key($storage);
        $sql_uri = $field_uri . ($is_root ? '' : '/');
        $query = db_select($table, 'cf');
        $query->innerJoin('file_managed', 'f', 'f.fid = cf.' . $table_info['fid']);
        $result = $query->fields('f')
                ->condition('f.status', 1)
                ->condition('f.uri', $sql_uri . '%', 'LIKE')
                ->condition('f.uri', $sql_uri . '%/%', 'NOT LIKE')
                ->execute();
        foreach ($result as $file) {
            // Get real name
            $name = basename($file->uri);
            // Get dimensions
            $width = $height = 0;
            if ($img = itg_image_repository_image_info($file->uri)) {
                $width = $img['width'];
                $height = $img['height'];
            }
            $directory['files'][$name] = array(
                'name' => $name,
                'size' => $file->filesize,
                'width' => $width,
                'height' => $height,
                'date' => $file->timestamp,
            );
            $directory['dirsize'] += $file->filesize;
        }
    }

    return $directory;
}

/**
 * Disable itg_image_repository profile permissions.
 * @param reference array $itg_image_repository
 * @param array $exceptions
 */
function filefield_source_itg_image_repository_disable_perms(&$itg_image_repository, $exceptions = array()) {
    $disable_all = empty($exceptions);
    foreach ($itg_image_repository['perm'] as $name => $val) {
        if ($disable_all || !in_array($name, $exceptions)) {
            $itg_image_repository['perm'][$name] = 0;
        }
    }
    $itg_image_repository['directories'][$itg_image_repository['dir']] = array('name' => $itg_image_repository['dir']) + $itg_image_repository['perm'];
}

/**
 * Implements hook_permission()
 * {@inheritdoc}
 */
function itg_image_repository_permission() {
    return array(
        'administer itg_image_repository' => array(
            'title' => t('Administer itg_image_repository'),
            'restrict access' => TRUE,
        ),
    );
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_image_repository_theme() {
    $path = drupal_get_path('module', 'itg_image_repository') . '/tpl';
    $theme['itg_image_repository_admin'] = array('function' => 'itg_image_repository_admin_theme', 'render element' => 'form');
    $theme['itg_image_repository_directories'] = array('function' => 'itg_image_repository_directories_theme', 'render element' => 'form');
    $theme['itg_image_repository_thumbnails'] = array('function' => 'itg_image_repository_thumbnails_theme', 'render element' => 'form');
    $theme['itg_image_repository_root_text'] = array(
        'variables' => array('itg_image_repository_ref' => NULL),
    );
    $theme['itg_image_repository_user_page'] = array(
        'variables' => array('account' => NULL),
    );
    $theme['itg_image_repository_file_list'] = array(
        'template' => 'itg_image_repository-file-list',
        'variables' => array('itg_image_repository_ref' => NULL),
        'path' => $path,
    );
    $theme['itg_image_repository_content'] = array(
        'template' => 'itg_image_repository-content',
        'variables' => array('tree' => NULL, 'forms' => NULL, 'itg_image_repository_ref' => NULL),
        'path' => $path,
    );
    $theme['itg_image_repository_page'] = array(
        'template' => 'itg_image_repository-page',
        'variables' => array('content' => NULL),
        'path' => $path,
    );
    return $theme;
}


/**
 * Returns the configuration profile assigned to a user for a specific file scheme.
 * @param array $user
 * @param string $scheme
 * @return  boolean
 */
function itg_image_repository_user_profile($user, $scheme = NULL) {
    static $ups = array();

    // Set scheme
    if (empty($scheme)) {
        $scheme = variable_get('file_default_scheme', 'public');
    }

    // Return from cache.
    if (isset($ups[$scheme][$user->uid])) {
        return $ups[$scheme][$user->uid];
    }
    $ups[$scheme][$user->uid] = FALSE;

    // Check scheme
    $swrappers = file_get_stream_wrappers();
    if (!isset($swrappers[$scheme])) {
        return FALSE;
    }

    $profiles = variable_get('imce_profiles', array());
    $scinfo = array('scheme' => $scheme);

    // Handle user#1 separately
    if ($user->uid == 1) {
        return $ups[$scheme][$user->uid] = isset($profiles[1]) ? $profiles[1] + $scinfo : FALSE;
    }

    // Handle regular users.
    $roles_profiles = variable_get('imce_roles_profiles', array());

    $sckey = $scheme . '_pid';
    foreach ($roles_profiles as $rid => $conf) {
        if (isset($user->roles[$rid]) && isset($conf[$sckey]) && isset($profiles[$conf[$sckey]])) {
            return $ups[$scheme][$user->uid] = $profiles[$conf[$sckey]] + $scinfo;
        }
    }

    return FALSE;
}

/**
 * Checks if the user is assigned an itg_image_repository profile.
 * A more detailed assignment check is performed before itg_image_repository loads.
 * @param string $user
 * @param string $scheme
 * @return array
 */
function itg_image_repository_access($user = FALSE, $scheme = NULL) {

    if ($user === FALSE) {
        global $user;
    }

    return itg_image_repository_user_profile($user, $scheme) ? TRUE : FALSE;
}

/**
 * Checks access to user/{$account->uid}/itg_image_repository for the $user.
 * @param string $account
 * @param string $user
 * @return string
 */
function itg_image_repository_user_page_access($account, $user = FALSE) {
    if ($user === FALSE) {
        global $user;
    }
    return ($user->uid == 1 || $account->uid == $user->uid) && ($profile = itg_image_repository_user_profile($account)) && $profile['usertab'];
}

/**
 * Check if the directory name is regular.
 * @param string $dirname
 * return boolean
 */
function itg_image_repository_reg_dir($dirname) {
    return $dirname == '.' || is_int($dirname) || (is_string($dirname) && $dirname != '' && !preg_match('@(^\s)|(^/)|(^\./)|(\s$)|(/$)|(/\.$)|(\.\.)|(//)|(\\\\)|(/\./)@', $dirname));
}
