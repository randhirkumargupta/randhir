<?php

/**
 * @file
 * Installs, updates, and uninstalls itg_image_repository.
 */

/**
 * Implements hook_install().
 */
function itg_image_repository_install() {
  module_load_include('inc', 'itg_image_repository', 'inc/itg_image_repository.core.profiles');
  itg_itg_image_repository_install_profiles();
}

/**
 * Implements hook_uninstall().
 */
function itg_image_repository_uninstall() {
  db_delete('file_usage')->condition('module', 'itg_image_repository')->execute();
  variable_del('itg_image_repository_profiles');
  variable_del('itg_image_repository_roles_profiles');
  variable_del('itg_image_repository_settings_textarea');
  variable_del('itg_image_repository_settings_absurls');
  variable_del('itg_image_repository_settings_replace');
  variable_del('itg_image_repository_settings_thumb_method');
  variable_del('itg_image_repository_settings_disable_private');
  variable_del('itg_image_repository_custom_content');
  variable_del('itg_image_repository_custom_process');
  variable_del('itg_image_repository_custom_init');
  variable_del('itg_image_repository_custom_scan');
  variable_del('itg_image_repository_custom_response');
}

/**
 * Updates from 6.x to 7.x.
 */
function itg_image_repository_update_7000() {
  // Update role-profile assignments
  $roles_profiles = variable_get('itg_image_repository_roles_profiles', array());
  if (!empty($roles_profiles)) {
    $scheme = variable_get('file_default_scheme', 'public');
    foreach ($roles_profiles as $rid => &$role) {
      $role[$scheme . '_pid'] = $role['pid'];
      unset($role['pid']);
    }
    variable_set('itg_image_repository_roles_profiles', $roles_profiles);
  }
  // Update textarea ids
  $ids = str_replace(' ', '', variable_get('itg_image_repository_settings_textarea', ''));
  if ($ids != '') {
    $ids = explode(',', $ids);
    foreach ($ids as &$id) {
      $id .= '*';
    }
    variable_set('itg_image_repository_settings_textarea', implode(', ', $ids));
  }
}

/**
 * Migrates itg_image_repository files from {files} to {file_managed}.
 * Removes {itg_image_repository_files} in favor of {file_usage}.
 */
function itg_image_repository_update_7001(&$sandbox) {
  if (!db_table_exists('itg_image_repository_files') || !db_table_exists('files')) {
    return;
  }
  // Initiate progress
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_fid_processed'] = 0;
    $sandbox['max'] = db_query("SELECT COUNT(*) FROM {itg_image_repository_files} i INNER JOIN {files} f ON i.fid = f.fid")->fetchField();
  }
  // Prepare variables
  $limit = 250;
  $basedir = variable_get('file_directory_path', conf_path() . '/files') . '/';
  $baselen = strlen($basedir);
  $scheme = file_default_scheme() . '://';
  $result = db_query_range('SELECT f.* FROM {itg_image_repository_files} i INNER JOIN {files} f ON i.fid = f.fid WHERE i.fid > :fid ORDER BY i.fid', 0, $limit, array(':fid' => $sandbox['last_fid_processed']))->fetchAll();
  // Migrate itg_image_repository files from {files} to {file_managed}
  foreach ($result as $file) {
    $relpath = substr($file->filepath, 0, $baselen) == $basedir ? substr($file->filepath, $baselen) : $file->filepath;
    $file->uri = file_stream_wrapper_uri_normalize($scheme . $relpath);
    unset($file->filepath);
    if (!db_query("SELECT 1 FROM {file_managed} WHERE fid = :fid", array(':fid' => $file->fid))->fetchField()) {
      // Check duplicate uri
      if ($fid = db_query("SELECT fid FROM {file_managed} WHERE uri = :uri", array(':uri' => $file->uri))->fetchField()) {
        $file->fid = $fid;
      }
      else {
        drupal_write_record('file_managed', $file);
      }
    }
    file_usage_add($file, 'itg_image_repository', 'file', $file->fid);
    $sandbox['progress']++;
    $sandbox['last_fid_processed'] = $file->fid;
  }
  // Drop {itg_image_repository_files} if the progress is complete.
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];
  if ($sandbox['#finished'] >= 1) {
    db_drop_table('itg_image_repository_files');
    return t('Migrated itg_image_repository files.');
  }
}

/**
 * Fixes misconfigurations where anonymous user is given User-1 profile
 */
function itg_image_repository_update_7002() {
  $roles = variable_get('itg_image_repository_roles_profiles', array());
  $rid = DRUPAL_ANONYMOUS_RID;
  if (!empty($roles[$rid])) {
    $update = FALSE;
    foreach ($roles[$rid] as $key => $value) {
      if ($value == 1 && substr($key, -4) == '_pid') {
        $roles[$rid][$key] = '0';
        $update = TRUE;
      }
    }
    if ($update) {
      variable_set('itg_image_repository_roles_profiles', $roles);
    }
  }
}