<?php

/**
 * @file
 * ITG Story module.
 *
 * Provides customizations and functions for Story.
 *
 */
module_load_include('inc', 'itg_story', 'includes/itg_story.helper');

/**
 * Implements hook_menu().
 * @return array
 */
function itg_story_menu() {
    $items['reporter-details-ajax'] = array(
        'page callback' => 'itg_story_reporter_details',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['content-title-list/%/autocomplete'] = array(
        'page callback' => 'itg_story_get_content_title',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['content-nid-list/%/autocomplete'] = array(
        'page callback' => 'itg_story_get_content_nid',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['supplement-list-ajax'] = array(
        'page callback' => 'itg_story_supplement_details',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['issue-date-check-ajax'] = array(
        'page callback' => 'itg_story_issue_date_checked',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['associate-photo-video-content/%'] = array(
        'page callback' => 'associate_photo_video_content',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['breaking-news-ajax'] = array(
        'page callback' => 'itg_story_create_breaking_news',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.helper.inc',
    );

    return $items;
}

/**
 * Implements hook_permission.
 */
function itg_story_permission() {
    return array(
        'access itg story' => array(
            'title' => t('story permission'),
            'description' => t('story permission.'),
        ),
    );
}

/**
 * Implements hook_block_info().
 * @return array
 */
function itg_story_block_info() {
    $blocks['story_tab_form_block'] = array(
        'info' => t('Story Form Tab Block'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );

    return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_story_block_view($delta = '') {
    $block = array();

    switch ($delta) {
        case 'story_tab_form_block':
            $block['content'] = theme('story_tab_form_display_block', array('data' => ''));
            break;
    }

    return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_story_theme($existing, $type, $theme, $path) {
    $themes = array(
        'story_tab_form_display_block' => array(
            'template' => 'story-form-tab-template',
            'path' => drupal_get_path('module', 'itg_story') . '/templates',
            'variables' => array('data' => NULL),
        ),
        'story_node_form' => array(
            'arguments' => array('form' => NULL),
            'template' => 'story-node-form',
            'path' => drupal_get_path('module', 'itg_story') . '/templates',
            'render element' => 'form',
        ),
    );

    return $themes;
}

/**
 * Implements hook_ckeditor_plugin_alter().
 * {@inheritdoc}
 */
function itg_story_ckeditor_plugin_alter(&$plugins) {
    $arg = arg();
    if (($arg[0] == 'node' && $arg[1] == 'add' && $arg[2] != 'story') || ($arg[0] == 'personalization' && $arg[1] == 'my-content')) {
        unset($plugins['factoids']);
        unset($plugins['expertchunk']);
    }
}

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_story_form_alter(&$form, &$form_state, $form_id) {
    switch ($form_id) {
        case 'story_node_form':
            if (!empty($form['#node']->field_story_source_id[LANGUAGE_NONE][0]['value'])) {
              $source_id = $form['#node']->field_story_source_id[LANGUAGE_NONE][0]['value'];
            }
            if (!empty($form['#node']->field_story_source_type[LANGUAGE_NONE][0]['value'])) {
              $source_type = trim($form['#node']->field_story_source_type[LANGUAGE_NONE][0]['value']);
            }
            
            
            if (empty($source_id) && empty($source_type)) {
              $breaking_check = '<input type="checkbox" title="breaking_text" id="breaking_text"><span> Make it breaking news</span>';
            }
            $form['title']['#suffix'] = '<div class="breaking_class">'.$breaking_check.'</div>';    
            $form['field_story_magazine_story_issue'][LANGUAGE_NONE]['#title'] = '';
            $form['field_story_syndication'][LANGUAGE_NONE]['#options'] = array('Yes' => $form['field_story_syndication'][LANGUAGE_NONE]['#title']);
            $form['field_story_syndication'][LANGUAGE_NONE]['#title'] = "";
            $form['field_story_syndications_photo'][LANGUAGE_NONE]['#options'] = array('Yes' => $form['field_story_syndications_photo'][LANGUAGE_NONE]['#title']);
            $form['field_story_syndications_photo'][LANGUAGE_NONE]['#title'] = "";
            unset($form['actions']['preview_changes']);
            unset($form['field_story_templates'][LANGUAGE_NONE]['#options']['_none']);
            unset($form['field_story_select_templates'][LANGUAGE_NONE]['#options']['_none']);
            $form['#after_build'][] = 'itg_story_after_build';
            $form['actions']['submit']['#submit'][] = 'itg_story_form_custom_callback';
            break;
    }

    $form['field_story_category']['und']['#config']['module'] = 'itg_category_manager';
}

/**
 * Custom submit callback for redirecting story form.
 * {@inheritdoc}
 */
function itg_story_form_custom_callback($form, &$form_state) {

    $workbench_current_state = $form_state['node']->workbench_moderation_state_new;
    $node_type = ucfirst($form_state['node']->type);
    $node_type = str_replace("_", " ", $node_type);
    $title = ucfirst($form_state['node']->title);

    if (isset($_SESSION['messages']['status'])) {
        unset($_SESSION['messages']['status']);
    }

    $request_destination = $_REQUEST['destination'];
    $redirect_path = $_REQUEST['destination'];

    if ($request_destination == 'published-story') {
        $redirect_path .= "?field_story_syndication_value_op=all";
    }

    if (function_exists('itg_custom_message')) {
        itg_custom_message($node_type, $workbench_current_state, arg(1), $title, $redirect_path);
    }
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_story_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
    //pr($form['#id']);
    $soruce_type_filter_display_views = array(
        'views-exposed-form-strory-menegment-page',
        'views-exposed-form-strory-menegment-page-1',
        'views-exposed-form-strory-menegment-page-2',
        'views-exposed-form-strory-menegment-page-7',
        'views-exposed-form-strory-menegment-page-4',
        ''
    );
    if ($form['#id'] == 'views-exposed-form-strory-menegment-page' || $form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-3' || $form['#id'] == 'views-exposed-form-strory-menegment-page-8' || $form['#id'] == 'views-exposed-form-strory-menegment-page-6' || $form['#id'] == 'views-exposed-form-strory-menegment-page-5' || $form['#id'] == 'views-exposed-form-strory-menegment-page-2' || $form['#id'] == 'views-exposed-form-strory-menegment-page-9' || $form['#id'] == 'views-exposed-form-strory-menegment-page-7' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12' || $form['#id'] == 'views-exposed-form-strory-menegment-page-1'
    ) {
        $form['title']['#autocomplete_path'] = 'content-title-list/story/autocomplete';
        $form['title']['#attributes'] = array('placeholder' => t('Title'));
        $form['nid']['#autocomplete_path'] = 'content-nid-list/story/autocomplete';
        $form['nid']['#attributes'] = array('placeholder' => t('Story ID'));
    }
    if ($form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12') {
        $form['field_story_configurations_value']['#options'] = array('All' => '- All -', 'lock_story' => 'Locked Story');
    }

    if (in_array($form['#id'], $soruce_type_filter_display_views)) {
        $option = array("" => '-Any-', "story" => "Story");
        $query = db_select('field_data_field_story_source_type', 'st');
        $query->leftJoin('node', 'n', 'n.nid=st.entity_id');
        $query->condition('n.type', 'story')->distinct()
                ->fields('st', array('field_story_source_type_value'));
        $result = $query->execute()->fetchAll();
        foreach ($result as $option_values) {
            $option[$option_values->field_story_source_type_value] = $option_values->field_story_source_type_value;
        }

        $source_type = "<select class='form-item form-type-select' id='fake-soruce-type'>";
        foreach ($option as $option_value => $option_element) {
            if (!empty($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == $option_value) {
                $select = "selected";
            }
            else {
                $select = "";
            }
            $source_type .= "<option value=\"$option_value\" $select>$option_element</option>";
        }
        $source_type .= "</select>";
        $form['field_story_source_type_value']['#suffix'] = $source_type;
        drupal_add_css("input#edit-field-story-source-type-value {display:none}", "inline");
    }
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_story_node_validate($node, $form, &$form_state) {

    // Code for redirection url validation
    if ($node->type == 'story') {

        $issue_based = $node->field_story_magazine_story_issue[LANGUAGE_NONE][0]['value'];
        $magazine_kicker = $node->field_story_magazine_kicker_text[LANGUAGE_NONE][0]['value'];
        $magazine = $node->field_story_select_magazine[LANGUAGE_NONE][0]['target_id'];

        // code to validation magazine field when issue based story is checked
        if (!empty($issue_based) && empty($magazine)) {
            form_set_error('field_story_select_magazine', t("Please select Magazine"));
        }

        // code to check if issue based is check fill magazine kicker text
        if (!empty($issue_based) && empty($magazine_kicker)) {
            form_set_error('field_story_magazine_kicker_text', t("Magazine kicker text is required"));
        }

        $redirection_url = $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'];

        if (!empty($redirection_url) && filter_var($redirection_url, FILTER_VALIDATE_URL) === FALSE) {
            form_set_error('field_story_redirection_url_titl', t("$redirection_url is not a valid URL"));
        }

        // code for check expiry date is greater then schedule date
        $schedule_date = $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'];
        $schedule_date = strtotime($schedule_date);
        $schedule_date = date('Y-m-d', $schedule_date);
        $expiry_date = $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'];

        if (isset($expiry_date) && $schedule_date > $expiry_date) {
            form_set_error('field_story_expiry_date', t("Expiry date should be greater then schedule start date"));
        }


        // Code for social media validation
        if (isset($node->field_story_social_media_integ[LANGUAGE_NONE])) {
            foreach ($node->field_story_social_media_integ[LANGUAGE_NONE] as $key_media => $val_media) {
                // Code for facebook narrative validation
                if ($val_media['value'] == 'facebook' && empty($node->field_story_facebook_narrative[LANGUAGE_NONE][0]['value'])) {
                    form_set_error('field_story_facebook_narrative', t("Facebook Narrative field is required."));
                }

                // Code for Twitter validation
                if ($val_media['value'] == 'twitter' && empty($node->field_story_tweet[LANGUAGE_NONE][0]['value'])) {
                    form_set_error('field_story_tweet', t("Twitter Narrative field is required."));
                }
            }
        }

        // Code for issue exit or not.
        if (!empty($node->field_story_issue_date[LANGUAGE_NONE][0]['value'])) {
            $issue = itg_story_checked_issue($node->field_story_issue_date[LANGUAGE_NONE][0]['value']);
            if (!$issue) {
                form_set_error('edit-field-story-issue-date-und-0-value-datepicker-popup-0', t("Issue does not exit."));
            }
        }

        // Code for category validation.
        if (empty($node->field_story_category[LANGUAGE_NONE][0]['tid'])) {
            form_set_error('edit-field-story-category-und-hierarchical-select-selects-0', t("Section field is required."));
        }
    }
}

/**
 * After build for story form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_story_after_build($form, &$form_state) {

    global $user, $base_url;
    drupal_add_js('jQuery(document).ready(function() {              
                  if (jQuery("#edit-path-pathauto").is(":checked")) {                
                    jQuery("#edit-path-alias").attr("readonly", "readonly");
                  } else {                
                    jQuery("#edit-path-alias").removeAttr("readonly");
                  }              
                });', array('type' => 'inline', 'scope' => 'footer'));

    if (!isset($form['#node']->nid)) {
        // hide remove button of first field on add form
        drupal_add_js('jQuery(document).ready(function() {
            jQuery("#edit-field-story-highlights-und-0-remove-button").hide();
            jQuery("#edit-field-story-template-buzz-und-0-remove-button").hide();
            jQuery("#edit-field-story-template-guru-und-0-remove-button").hide();
            jQuery("#edit-field-story-template-quotes-und-0-remove-button").hide();
            jQuery("#edit-field-story-template-factoids-und-0-remove-button").hide();
            jQuery("#edit-field-story-reporter-und-0-remove-button").hide();              
          });', array('type' => 'inline', 'scope' => 'footer'));
    }

    // checked autoalias checkbox on node edit form
    if (isset($form['#node']->nid)) {
        drupal_add_js('jQuery(document).ready(function() {
            jQuery("#edit-path-pathauto").attr("checked", true);            
          });', array('type' => 'inline', 'scope' => 'footer'));
    }

    unset($form['field_story_associate_lead'][LANGUAGE_NONE]['_none']);

    $form['field_story_select_magazine']['und']['#title'] = t('Select magazine') . '<span class="form-required" title="This field is required."> *</span>';
    $form['field_story_magazine_kicker_text']['und']['#title'] = t('Magazine kicker') . '<span class="form-required" title="This field is required."> *</span>';

    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;

    drupal_add_js(array('itg_story' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_story.js', array('weight' => 1));

    return $form;
}

/**
 * Implements hook_node_insert
 * {@inheritdoc}
 */
function itg_story_node_insert($node) {
    if ($node->type == 'story' && $node->workbench_moderation_state_new != 'draft' && isset($node->field_story_configurations[LANGUAGE_NONE])) {
        foreach ($node->field_story_configurations[LANGUAGE_NONE] as $key => $val) {
            if ($val['value'] == 'breaking_news') {
                //itg_story_create_breaking_news($node);
            }
        }
    }
}

/**
 * Implements hook_node_update
 * {@inheritdoc}
 */
function itg_story_node_update($node) {
    if ($node->type == 'story' && $node->workbench_moderation_state_new != 'draft' && $node->op == 'Save') {
        foreach ($node->field_story_configurations[LANGUAGE_NONE] as $key => $val) {
            if ($val['value'] == 'breaking_news') {
                $breaking_cond = get_breaking_id($node->nid);
                if (!$breaking_cond) {
                    //itg_story_create_breaking_news($node);
                }
            }
        }
    }
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_story_form_story_node_form_alter(&$form, &$form_state, $form_id) {
    global $user;

    $magazine_field = 'field_story_select_magazine';
    $supplement_field = 'field_story_select_supplement';
    $tv_date_field = 'field_poll_start_date';
    $tv_time_field = 'field_story_tv_time';
    if (function_exists('itg_common_dropdown_mazine')) {
        $opt = itg_common_dropdown_mazine();
        $form[$magazine_field]['#options'] = $opt;
    }

    // set magazine on edit and trigger action
    if (isset($form[$magazine_field][LANGUAGE_NONE]['#default_value'][0]) && !isset($form_state['triggering_element'])) {
        $magazine_id = $form[$magazine_field][LANGUAGE_NONE]['#default_value'][0];
    }
    else {
        $magazine_id = !empty($form_state['input'][$magazine_field][LANGUAGE_NONE]) ? $form_state['input'][$magazine_field][LANGUAGE_NONE] : '' ;
    }

    if (isset($form['#node']->field_poll_start_date[LANGUAGE_NONE][0]['value']) && !isset($form_state['triggering_element'])) {
        $date_val = $form['#node']->field_poll_start_date[LANGUAGE_NONE][0]['value'];
    }
    else {
        $date_val = !empty($form_state['input'][$tv_date_field][LANGUAGE_NONE][0]['value']['date']) ? $form_state['input'][$tv_date_field][LANGUAGE_NONE][0]['value']['date'] : '';
    }

    // add ajax on magazine field
    $form[$magazine_field][LANGUAGE_NONE]['#ajax'] = array(
        'event' => 'change',
        'callback' => 'itg_story_magazine_ajax_callback',
        'wrapper' => $supplement_field . '_replace',
    );

    // add ajax on tv date field
    $form[$tv_date_field][LANGUAGE_NONE][0]['#ajax'] = array(
        'event' => 'change',
        'callback' => 'itg_tv_time_ajax_callback',
        'wrapper' => $tv_time_field . '_replace',
    );

    // Setup supplement select
    $form[$supplement_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $supplement_field . '_replace">';
    $form[$supplement_field][LANGUAGE_NONE]['#suffix'] = '</div>';

    if (function_exists('itg_common_dropdown_supplement')) {
        $form[$supplement_field][LANGUAGE_NONE]['#options'] = itg_common_dropdown_supplement($magazine_id);
    }

    // Setup tv time field select
    $form[$tv_time_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $tv_time_field . '_replace">';
    $form[$tv_time_field][LANGUAGE_NONE]['#suffix'] = '</div>';

    if (function_exists('itg_common_tv_time')) {
        $form[$tv_time_field][LANGUAGE_NONE]['#options'] = itg_common_tv_time($date_val);
        $form[$tv_time_field][LANGUAGE_NONE]['#default_value'] = !empty($form['#node']->field_story_tv_time[LANGUAGE_NONE][0]['value']) ? $form['#node']->field_story_tv_time[LANGUAGE_NONE][0]['value'] : '';
        // $form[$tv_time_field]['#validated'] = TRUE;
    }

    // code for story expiry date field show and hide
    $form['field_story_expiry_date']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_expires[und][Yes]"]' => array('checked' => TRUE),
        )
    );

    // code for tv date field show and hide
    $form['field_poll_start_date']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_configurations[und][tv]"]' => array('checked' => TRUE),
        )
    );

    // code for Time field show and hide
    $form['field_story_tv_time']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_configurations[und][tv]"]' => array('checked' => TRUE),
        )
    );

    // code for Comment Question field hide and show
    $form['field_story_comment_question']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_configurations[und][comment]"]' => array('checked' => TRUE),
        )
    );

    // code for featured field hide and show
    $form['field_story_featured_name']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_configurations[und][set_as_featured]"]' => array('checked' => TRUE),
        )
    );

    // code for magazine field hide and show
    $form['field_story_select_magazine']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        )
    );

    // code for supplement field hide and show
    $form['field_story_select_supplement']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        ),
    );

    // code for issue date field hide and show
    $form['field_story_issue_date']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        )
    );

    // code for Magazine kicker * field show and hide
    $form['field_story_magazine_kicker_text']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        ),
        'required' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        )
    );

    // code for Magazine Headline * field show and hide
    $form['field_story_magazine_headline']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        )
    );
    // facebook instant Article
    $form['field_facebook_instant_audio_url']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_facebook_audio_position']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_animated_image_position']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_facebook_animated_image']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_facebook_map_position']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_map_embed_code']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_social_embed_code']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_social_embed_code_position']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_facebook_gallery_associate']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    // Set form default value for social media fields

    $form['field_story_posted_by_twitter']['#default_value'] = $user->mail;
    $form['field_story_posted_by_instagram']['#default_value'] = $user->mail;
}

/**
 * Ajax callback for Event roles dropdown
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_story_magazine_ajax_callback($form, $form_state) {
    return $form['field_story_select_supplement'];
}

/**
 * Ajax callback for tv time dropdown
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_tv_time_ajax_callback($form, $form_state) {
    return $form['field_story_tv_time'];
}

/**
 * Implements hook_library_alter().
 *
 * Attach our own JS library whenever drupal.autocomplete is loaded.
 *
 * {@inheritdoc}
 */
function itg_story_library_alter(&$libraries, $module) {
    $limit = 2;

    // Only inject our setting and js override if we've been configured.
    if (!empty($limit) && $module == 'system' && !empty($libraries['drupal.autocomplete'])) {
        drupal_add_js(array('autocomplete_limit' => array('limit' => $limit)), 'setting');

        $library = drupal_get_path('module', 'itg_story') . '/js/autocomplete.limit.js';
        $libraries['drupal.autocomplete']['js'][$library] = array('group' => JS_DEFAULT);
    }
}

/**
 * Get video with player
 * @param int $nid
 * @return string $content
 */
function itg_get_video_display($nid) {
    $node = node_load($nid);
    if (module_exists('itg_videogallery')) {
        $vid = itg_videogallery_get_videoid($row['fid']);
    }
    $content = '<iframe frameborder="0"
            src="https://www.dailymotion.com/embed/video/' . $vid . '?autoplay=0&mute=1&ui-start-screen-info"
            allowfullscreen></iframe>';
    return $content;
}

/**
 * {@inheritdoc}
 */
function itg_story_views_query_alter(&$view, &$query) {
  if ($view->name == 'strory_menegment') {
    if (!empty($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == "story") {
      foreach ($query->where[1]['conditions'] as $keys => $field) {
        if ($field['field'] == 'field_data_field_story_source_type.field_story_source_type_value') {
          $query->where[1]['conditions'][$keys]['value'] = "";
          $query->where[1]['conditions'][$keys]['operator'] = "IS NULL";
        }
      }
    }
  }
}

/**
 * {@inheritdoc}
 */
function itg_story_node_presave($node) {
    $type = $node->type;
    if ($type == 'story' && !empty($node->field_story_magazine_story_issue['und'][0]['value'])) {
        $node->field_story_source_type['und'][0]['value'] = 'Magazine Story';
    }
}

/**
 * {@inheritdoc}
 */
function itg_story_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'story') {
    global $user;
    $actual_link = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
    if(function_exists('itg_get_related_content')) {
      $node->content['related_content'] = itg_get_related_content(arg(1));
    }
    
    if (function_exists('itg_total_share_count')) {
      $node->content['total_share_count'] = itg_total_share_count($actual_link);
    }
    
    if (function_exists('itg_msi_get_lock_story_status')) {
      $node->content['develop_story_status'] = itg_msi_get_lock_story_status($node->nid, 'developing_story');
    }
    
    if(function_exists('itg_get_front_activity_info')) {
      $node->content['follow_status'] = itg_get_front_activity_info($node->nid, $node->type, $user->uid, 'follow_story', $status='');
    }
    
    if(!empty($node->field_story_reporter[LANGUAGE_NONE][0]['target_id'])) {
    $byline_id = $node->field_story_reporter[LANGUAGE_NONE][0]['target_id'];
    $node->content['byline_node'] = node_load($byline_id);
    }
  }
}