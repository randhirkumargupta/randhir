<?php

/**
 * @file
 * ITG Story module.
 *
 * Provides customizations and functions for Story.
 *
 */

/**
 * Implements hook_init().
 */
function itg_story_init() {


}


/**
 * Implements hook_menu().
 */
function itg_story_menu() {
  $items['reporter-details-ajax'] = array(      
      'page callback' => 'itg_story_reporter_details',
      'access arguments' => array('access itg story'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_story.inc',
  );
  $items['story-title-list/autocomplete'] = array(
    'page callback' => 'itg_story_get_story_title',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['story-nid-list/autocomplete'] = array(
    'page callback' => 'itg_story_get_story_nid',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['supplement-list-ajax'] = array(      
      'page callback' => 'itg_story_supplement_details',
      'access arguments' => array('access itg story'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_story.inc',
  );
  
  return $items;
}


/**
 * Implements hook_block_info().
 */
function itg_story_block_info() {
  $blocks['story_tab_form_block'] = array(
    'info' => t('Story Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function itg_story_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'story_tab_form_block':                       
      $block['content'] = theme('story_tab_form_display_block', array('data' => $data));
    break;        
  }
  
  return $block;
}



/**
 * Implements hook_theme().
 */
function itg_story_theme($existing, $type, $theme, $path) {
  $themes = array(
    'story_tab_form_display_block' => array(
      'template' => 'story-form-tab-template',
      'path' => drupal_get_path('module', 'itg_story') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'story_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'story-node-form',
      'path' => drupal_get_path('module', 'itg_story') . '/templates',
      'render element' => 'form',
    ),
  );

  return $themes;
}



/**
 * Implemets hook_form_alter().
 */
function itg_story_form_alter(&$form, &$form_state, $form_id) {
  global $user, $base_url;  

    switch ($form_id) {
    case 'story_node_form':
      //$form['title']['#required']= FALSE;

      unset($form['actions']['preview_changes']);
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'story-management', array('attributes' => array('class' => 'button'))),
        '#weight' => 20,
      );     
      
      unset($form['field_story_templates'][LANGUAGE_NONE]['#options']['_none']);
      $form['#after_build'][] = 'itg_story_after_build';
      $form['actions']['submit']['#submit'][] = 'itg_story_form_custom_callback';
    break;      
  }
}

/**
 * Custom submit callback for redirecting story form.
 */
function itg_story_form_custom_callback($form, &$form_state) {  
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }
  
  drupal_set_message('Story has been created successfully.');
  $_GET['destination'] = 'story-management'; 
   
}

/**
 * Implements hook_form_FORMID_alter().  
 */
function itg_story_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {  
   if ($form['#id'] == 'views-exposed-form-strory-menegment-page') {
     $form['title']['#autocomplete_path'] = 'story-title-list/autocomplete';
     $form['title']['#attributes'] = array('placeholder' => t('Title'));     
     $form['nid']['#autocomplete_path'] = 'story-nid-list/autocomplete';
     $form['nid']['#attributes'] = array('placeholder' => t('Nid'));
   }   
}

/**
 * Implements hook_node_validate().  
 */
function itg_story_node_validate($node, $form, &$form_state) {
  // Code for redirection url validation
  if ($node->type == 'story') {
    $redirection_url = $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'];
    
    if (!empty($redirection_url)) { 
      if (filter_var($redirection_url, FILTER_VALIDATE_URL) === false) {
         form_set_error('field_story_redirection_url_titl', t("$redirection_url is not a valid URL"));
      }
    }
    
    // code for check expiry date is greater then schedule date
    $schedule_date = $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'];
    $schedule_date=strtotime($schedule_date);
    $schedule_date=date('Y-m-d',$schedule_date);
    $expiry_date = $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'];
    
    
     if ($schedule_date > $expiry_date) { 
       form_set_error('field_story_expiry_date', t("Expiry date should be greater then schedule start date"));
        }
    
    
    // Code for configurations validation
    if (isset($node->field_story_configurations[LANGUAGE_NONE])) {
      foreach ($node->field_story_configurations[LANGUAGE_NONE] as $key => $val) {
        if ($val['value'] == 'comment') {
          // Code for comment question validation
          if (empty($node->field_story_comment_question[LANGUAGE_NONE][0]['value'])) {
            form_set_error('field_story_comment_question', t("Comment Question field is required."));
          }
        }
        
        // Code for client title validation
        if ($val['value'] == 'syndication') {
          if (empty($node->field_story_client_title[LANGUAGE_NONE][0]['value'])) {
            form_set_error('field_story_client_title', t("Client title field is required."));
          }
        }
      }      
    }
    
    // Code for social media validation
    if (isset($node->field_story_social_media_integ[LANGUAGE_NONE])) {
      foreach ($node->field_story_social_media_integ[LANGUAGE_NONE] as $key_media => $val_media) {
        // Code for facebook narrative validation
        if ($val_media['value'] == 'facebook') {
          if (empty($node->field_story_facebook_narrative[LANGUAGE_NONE][0]['value'])) {
            form_set_error('field_story_facebook_narrative', t("Facebook Narrative field is required."));
          }
        }
        
        // Code for Twitter validation
        if ($val_media['value'] == 'twitter') {
          if (empty($node->field_story_tweet[LANGUAGE_NONE][0]['value'])) {
            form_set_error('field_story_tweet', t("Twitter field is required."));
          }
        }
      }
      
    }
  }
}

// after build for story form
function itg_story_after_build($form, &$form_state) {
  global $user;
  
  global $user, $base_url;
  unset($form['additional_settings']['group']['#groups']['additional_settings'][5]['#description']);
  unset($form['metatags']['intro_text']['#markup']);
  
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;

  drupal_add_js(array('itg_story' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_story.js', array('weight' => 1));
  return $form;
}

/**
 * Implements hook_permission.
 */
function itg_story_permission() {
  return array(
    'access itg story' => array(
      'title' => t('story permission'),
      'description' => t('story permission.'),
    ),    
  );
}
