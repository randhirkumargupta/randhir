<?php

/**
 * @file
 * ITG Story module.
 *
 * Provides customizations and functions for Story.
 *
 */
module_load_include('inc', 'itg_story', 'includes/itg_story.helper');
module_load_include('inc', 'itg_story', 'includes/itg_story.byline');
/**
 * Implements hook_menu().
 * @return array
 */
function itg_story_menu() {
    $items['reporter-details-ajax'] = array(
        'page callback' => 'itg_story_reporter_details',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['content-title-list/%/autocomplete'] = array(
        'page callback' => 'itg_story_get_content_title',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['content-nid-list/%/autocomplete'] = array(
        'page callback' => 'itg_story_get_content_nid',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['supplement-list-ajax'] = array(
        'page callback' => 'itg_story_supplement_details',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['issue-date-check-ajax'] = array(
        'page callback' => 'itg_story_issue_date_checked',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['associate-photo-video-content/%'] = array(
        'page callback' => 'associate_photo_video_content',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.inc',
    );
    $items['breaking-news-ajax'] = array(
        'page callback' => 'itg_story_create_breaking_news',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_story.helper.inc',
    );
    
    $items['byline/autocomplete'] = array(
    'page callback' => 'itg_story_byline',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    );

    $items['multibyline-save'] = array(
    'page callback' => 'itg_story_byline_save',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Implements hook_permission.
 */
function itg_story_permission() {
    return array(
        'access itg story' => array(
            'title' => t('story permission'),
            'description' => t('story permission.'),
        ),
    );
}

/**
 * Implements hook_block_info().
 * @return array
 */
function itg_story_block_info() {
    $blocks['story_tab_form_block'] = array(
        'info' => t('Story Form Tab Block'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );

    return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_story_block_view($delta = '') {
    $block = array();

    switch ($delta) {
        case 'story_tab_form_block':
            $block['content'] = theme('story_tab_form_display_block', array('data' => ''));
            break;
    }

    return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_story_theme($existing, $type, $theme, $path) {
    $themes = array(
        'story_tab_form_display_block' => array(
            'template' => 'story-form-tab-template',
            'path' => drupal_get_path('module', 'itg_story') . '/templates',
            'variables' => array('data' => NULL),
        ),
        'story_node_form' => array(
            'arguments' => array('form' => NULL),
            'template' => 'story-node-form',
            'path' => drupal_get_path('module', 'itg_story') . '/templates',
            'render element' => 'form',
        ),
    );

    return $themes;
}

/**
 * Implements hook_ckeditor_plugin_alter().
 * {@inheritdoc}
 */
function itg_story_ckeditor_plugin_alter(&$plugins) {
    $arg = arg();
    if (($arg[0] == 'node' && $arg[1] == 'add' && $arg[2] != 'story') || ($arg[0] == 'personalization' && $arg[1] == 'my-content')) {
        unset($plugins['factoids']);
        unset($plugins['expertchunk']);
    }
}

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_story_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'story_node_form':
      global $base_url, $user;
      if($user->uid != 1) {
       unset($form['field_story_short_headline']);
       unset($form['field_story_long_head_line']);
      }
       $form['field_story_big_image']['#attributes']['class'][] = 'element-hidden';
       
      // code for multiple byline
      if (empty($form['#node']->nid))
      {
        if (!empty($_SESSION['unique']))
        {
          $reporter_id = $_SESSION['unique'];
        }
        else
        {
          $unique = 'byline_' . uniqid();
          $_SESSION['unique'] = $unique;
          $reporter_id = $_SESSION['unique'];
        }

        $form['field_reporter_unique_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $reporter_id;
      }
      if ($user->uid != 1)
      {
        $form['field_reporter_publish_id']['#attributes']['class'][] = 'element-hidden';
        $form['field_reporter_unique_id']['#attributes']['class'][] = 'element-hidden';
      }
      $form['field_story_reporter']['und'][0]['target_id']['#autocomplete_path'] = 'byline/autocomplete';
      
      if (!empty($form['#node']->field_story_source_id[LANGUAGE_NONE][0]['value']))
      {
        $source_id = $form['#node']->field_story_source_id[LANGUAGE_NONE][0]['value'];
      }
      if (!empty($form['#node']->field_story_source_type[LANGUAGE_NONE][0]['value']))
      {
        $source_type = trim($form['#node']->field_story_source_type[LANGUAGE_NONE][0]['value']);
      }


      if (empty($source_id) && empty($source_type))
      {
        $breaking_check = '<input type="checkbox" title="breaking_text" id="breaking_text"><span> Make it breaking news</span>';
      }
      $form['title']['#suffix'] = '<div class="breaking_class">' . $breaking_check . '</div>';
      $form['field_story_magazine_story_issue'][LANGUAGE_NONE]['#title'] = '';
      $form['field_story_syndication'][LANGUAGE_NONE]['#options'] = array('Yes' => $form['field_story_syndication'][LANGUAGE_NONE]['#title']);
      $form['field_story_syndication'][LANGUAGE_NONE]['#title'] = "";
      $form['field_story_syndications_photo'][LANGUAGE_NONE]['#options'] = array('Yes' => $form['field_story_syndications_photo'][LANGUAGE_NONE]['#title']);
      $form['field_story_syndications_photo'][LANGUAGE_NONE]['#title'] = "";
      unset($form['actions']['preview_changes']);
      unset($form['field_story_templates'][LANGUAGE_NONE]['#options']['_none']);
      unset($form['field_story_select_templates'][LANGUAGE_NONE]['#options']['_none']);
      $form['#after_build'][] = 'itg_story_after_build';
      $form['actions']['submit']['#submit'][] = 'itg_story_form_custom_callback';
      drupal_add_js(array('itg_common' => array('base_url' => $base_url)), 'setting');
      drupal_add_js(drupal_get_path('module', 'itg_common') . '/js/itg_common.emoji.js', 'file');
      $form['field_emoji_2']['und'][0]['#format'] = 'emoji';
      $form['field_emoji']['und'][0]['#format'] = 'emoji';
      // hide remove button of field collection if there is only single instance of it within the form
      if (isset($form['field_photo_story']['und']['#max_delta']) && isset($form['your_field']['und']['#max_delta']) && $form['your_field']['und']['#max_delta'] == 0) {
        $form['field_photo_story']['und'][0]['remove_button']['#prefix'] = '<div style="display:none;"';
        $form['field_photo_story']['und'][0]['remove_button']['#suffix'] = '</div>';    
      }
      break;
  }

  //$form['field_story_category']['und']['#config']['module'] = 'itg_category_manager';
}

/**
 * Custom submit callback for redirecting story form.
 * {@inheritdoc}
 */
function itg_story_form_custom_callback($form, &$form_state) {

    $workbench_current_state = $form_state['node']->workbench_moderation_state_new;
    $node_type = ucfirst($form_state['node']->type);
    $node_type = str_replace("_", " ", $node_type);
    $title = ucfirst($form_state['node']->title);
    $clone_id = $_GET['clone_id'];
     // code insert image in custom table
    $node_id = $form_state['node']->nid;
    if ($form_state['input']['original_image_fids'] != "") {
        $image_ids = explode('#', $form_state['input']['original_image_fids']);

        if (!empty($image_ids)) {
            if (function_exists('itg_photogallery_insert_image_data'))
                itg_photogallery_insert_image_data($image_ids, $node_id);
        }
    }
    if (isset($_SESSION['messages']['status'])) {
        unset($_SESSION['messages']['status']);
    }

    $request_destination = $_REQUEST['destination'];
    $redirect_path = $_REQUEST['destination'];

    if ($request_destination == 'published-story') {
        $redirect_path .= "?field_story_syndication_value_op=all";
    }
    
    // redirection for clone story
    if ($request_destination == 'clone-story' && !empty($clone_id)) {
    if (arg(1) == 'add') {
      if ($workbench_current_state == 'published') {
        $op = 'cloned and published.';
        drupal_set_message(t($node_type . ' <b>' . $title . '</b> has been successfully ' . $op . ''));
      }
      else {
        $op = 'created';
        drupal_set_message(t($node_type . ' <b>' . $title . '</b> has been ' . $op . ' successfully and submitted for further review and approval.'));
      }
      $_GET['destination'] = 'published-story?field_story_syndication_value_op=all';
    }
  }

  if ($form_state['input']['op'] != 'Save as Draft') {        
      if (function_exists('itg_custom_message')) {
        itg_custom_message($node_type, $workbench_current_state, arg(1), $title, $redirect_path, $action);
      }
    }
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_story_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
   
    $soruce_type_filter_display_views = array(
        'views-exposed-form-strory-menegment-page',
        'views-exposed-form-strory-menegment-page-1',
        'views-exposed-form-strory-menegment-page-2',
        'views-exposed-form-strory-menegment-page-7',
        'views-exposed-form-strory-menegment-page-4',
        'views-exposed-form-strory-menegment-page-5',
        'views-exposed-form-videogallery-management-page-1',
        'views-exposed-form-videogallery-management-page',
        'views-exposed-form-videogallery-management-page-2',
        'views-exposed-form-videogallery-management-page-5'
      );
    
   
    if ($form['#id'] == 'views-exposed-form-strory-menegment-page' || $form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-3' || $form['#id'] == 'views-exposed-form-strory-menegment-page-8' || $form['#id'] == 'views-exposed-form-strory-menegment-page-6' || $form['#id'] == 'views-exposed-form-strory-menegment-page-5' || $form['#id'] == 'views-exposed-form-strory-menegment-page-2' || $form['#id'] == 'views-exposed-form-strory-menegment-page-9' || $form['#id'] == 'views-exposed-form-strory-menegment-page-7' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12' || $form['#id'] == 'views-exposed-form-strory-menegment-page-1'
    ) {
        $form['title']['#autocomplete_path'] = 'content-title-list/story/autocomplete';
        $form['title']['#attributes'] = array('placeholder' => t('Title'));
        $form['nid']['#autocomplete_path'] = 'content-nid-list/story/autocomplete';
        $form['nid']['#attributes'] = array('placeholder' => t('Story ID'));
    }
    if ($form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12') {
        $form['field_story_configurations_value']['#options'] = array('All' => '- All -', 'lock_story' => 'Locked Story');
    }

    if (in_array($form['#id'], $soruce_type_filter_display_views)) {
       if($form['#id'] == 'views-exposed-form-videogallery-management-page-1' || $form['#id'] == 'views-exposed-form-videogallery-management-page' || $form['#id'] == 'views-exposed-form-videogallery-management-page-2' || $form['#id'] == 'views-exposed-form-videogallery-management-page-5') {
         $cn_type = 'videogallery';
       } else {
         $cn_type = 'story';
       }
        $option = array("" => '-Any-', $cn_type => $cn_type);
        $query = db_select('field_data_field_story_source_type', 'st');
        $query->leftJoin('node', 'n', 'n.nid=st.entity_id');
        $query->condition('n.type', $cn_type)->distinct()
                ->fields('st', array('field_story_source_type_value'));
        $result = $query->execute()->fetchAll();
        foreach ($result as $option_values) {
            $option[$option_values->field_story_source_type_value] = $option_values->field_story_source_type_value;
        }

        $source_type = "<select class='form-item form-type-select' id='fake-soruce-type'>";
        foreach ($option as $option_value => $option_element) {
            if (!empty($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == $option_value) {
                $select = "selected";
            }
            else {
                $select = "";
            }
            $source_type .= "<option value=\"$option_value\" $select>$option_element</option>";
        }
        $source_type .= "</select>";
        $form['field_story_source_type_value']['#suffix'] = $source_type;
        drupal_add_css("input#edit-field-story-source-type-value {display:none}", "inline");
    }
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_story_node_validate($node, $form, &$form_state) {

    // Code for redirection url validation
    if ($node->type == 'story') {

        $issue_based = $node->field_story_magazine_story_issue[LANGUAGE_NONE][0]['value'];
        $magazine_kicker = $node->field_story_magazine_kicker_text[LANGUAGE_NONE][0]['value'];
        $magazine = $node->field_story_select_magazine[LANGUAGE_NONE][0]['target_id'];

        // code to validation magazine field when issue based story is checked
        if (!empty($issue_based) && empty($magazine)) {
            form_set_error('field_story_select_magazine', t("Please select Magazine"));
        }

        // code to check if issue based is check fill magazine kicker text
        if (!empty($issue_based) && empty($magazine_kicker)) {
            form_set_error('field_story_magazine_kicker_text', t("Magazine kicker text is required"));
        }

        $redirection_url = $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'];
        if (!empty($redirection_url) && !preg_match("~^(?:f|ht)tps?://~i", $redirection_url)) {
          $redirection_url = "http://" .$redirection_url;
        }
        if (!empty($redirection_url) && filter_var($redirection_url, FILTER_VALIDATE_URL) === FALSE) {
            form_set_error('field_story_redirection_url_titl', t("$redirection_url is not a valid URL"));
        }

        // code for check expiry date is greater then schedule date
        $schedule_date = $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'];
        $schedule_date = strtotime($schedule_date);
        $schedule_date = date('Y-m-d', $schedule_date);
        $expiry_date = $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'];

        if (isset($expiry_date) && $schedule_date > $expiry_date) {
            form_set_error('field_story_expiry_date', t("Expiry date should be greater then schedule start date"));
        }

        // Code for issue exit or not.
        if (!empty($node->field_story_issue_date[LANGUAGE_NONE][0]['value'])) {
            $issue = itg_story_checked_issue($node->field_story_issue_date[LANGUAGE_NONE][0]['value']);
            if (!$issue) {
                form_set_error('edit-field-story-issue-date-und-0-value-datepicker-popup-0', t("Issue does not exist."));
            }
        }

        // Code for category validation.
        if (empty($node->field_story_category[LANGUAGE_NONE][0]['tid'])) {
            form_set_error('edit-field-story-category-und-hierarchical-select-selects-0', t("Section field is required."));
        }
    }
}

/**
 * After build for story form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_story_after_build($form, &$form_state) {
  
  global $user, $base_url;
  
  if(empty($form_state['input']['op'])) {
    unset($_SESSION['unique']);
  }
  // code for multiple byline
  if (empty($form['#node']->nid)) {
    $reporter_id = !empty($form_state['input']['field_reporter_unique_id'][LANGUAGE_NONE][0]['value']) ? $form_state['input']['field_reporter_unique_id'][LANGUAGE_NONE][0]['value'] : '';
  } 
  else {
    $reporter_id = $form['#node']->field_reporter_unique_id[LANGUAGE_NONE][0]['value'];
  }
  $form['field_story_reporter']['#prefix'] = '<div class="multi_reporter">';
  $form['field_story_reporter']['#suffix'] = '<a class="multi-byline" data-tag="save">'.t('Add').'</a></div><div class="byline-list"><ul class="byline-ul">'.itg_byline_info($reporter_id).'</ul><span class="add-more save-byline">'.t('Save').'</span></div><span class="success-byline"></span>';

  $form['original_image_fids'] = array(
        '#type' => 'hidden',
        '#value' => !empty($form_state['input']['original_image_fids']) ? $form_state['input']['original_image_fids'] : '',
        '#attributes' => array('id' => 'original_image_fids', 'name' => 'original_image_fids'),
    );
//  drupal_add_js('jQuery(document).ready(function() {              
//                if (jQuery("#edit-path-pathauto").is(":checked")) {
//                
//                  jQuery("#edit-path-alias").attr("readonly", "readonly");
//                } else {                
//                  jQuery("#edit-path-alias").removeAttr("readonly");
//                }              
//              });', array('type' => 'inline', 'scope' => 'footer'));

  if (!isset($form['#node']->nid)) {
      // hide remove button of first field on add form
      drupal_add_js('jQuery(document).ready(function() {
          jQuery("#edit-field-story-highlights-und-0-remove-button").hide();
          jQuery("#edit-field-story-template-buzz-und-0-remove-button").hide();
          jQuery("#edit-field-story-template-guru-und-0-remove-button").hide();
          jQuery("#edit-field-story-template-quotes-und-0-remove-button").hide();
          jQuery("#edit-field-story-template-factoids-und-0-remove-button").hide();
          jQuery("#edit-field-story-reporter-und-0-remove-button").hide();              
        });', array('type' => 'inline', 'scope' => 'footer'));
  }

  // checked autoalias checkbox on node edit form
  //if(arg(0) == 'node' && is_numeric(arg(1)) && )

  if (isset($form['#node']->nid) && $form['#node']->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
//      drupal_add_js('jQuery(document).ready(function() {
//          jQuery("#edit-path-pathauto").attr("checked", true);            
//        });', array('type' => 'inline', 'scope' => 'footer'));
  }

  unset($form['field_story_associate_lead'][LANGUAGE_NONE]['_none']);

  $form['field_story_select_magazine']['und']['#title'] = t('Select magazine') . '<span class="form-required" title="This field is required."> *</span>';
  $form['field_story_magazine_kicker_text']['und']['#title'] = t('Magazine kicker') . '<span class="form-required" title="This field is required."> *</span>';

  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;

  drupal_add_js(array('itg_story' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_story.js', array('weight' => 1));

  // ADD js for multiple byline
  drupal_add_js(array('itg_byline' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_byline.js');
  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_story_form_story_node_form_alter(&$form, &$form_state, $form_id) {
    global $user;
    
    // condition for first blank reporter field on edit
    if ($form_id == 'story_node_form' && !empty($form['nid']['#value'])) {
    $field_name = 'field_story_reporter';
    if (empty($form[$field_name])) {
      return;
    }
    $field_language = $form[$field_name]['#language'];
    $max_delta = $form[$field_name][$field_language]['#max_delta'];
    if ($max_delta <= 0) {
      drupal_add_js('jQuery(document).ready(function() {
            jQuery("#edit-field-story-reporter-und-0-remove-button").hide();              
          });', array('type' => 'inline', 'scope' => 'footer'));
    }
    }
    $magazine_field = 'field_story_select_magazine';
    $supplement_field = 'field_story_select_supplement';
    $tv_date_field = 'field_poll_start_date';
    $tv_time_field = 'field_story_tv_time';
    if (function_exists('itg_common_dropdown_mazine')) {
        $opt = itg_common_dropdown_mazine();
        $form[$magazine_field]['#options'] = $opt;
    }

    // set magazine on edit and trigger action
    if (isset($form[$magazine_field][LANGUAGE_NONE]['#default_value'][0]) && !isset($form_state['triggering_element'])) {
        $magazine_id = $form[$magazine_field][LANGUAGE_NONE]['#default_value'][0];
    }
    else {
        $magazine_id = !empty($form_state['input'][$magazine_field][LANGUAGE_NONE]) ? $form_state['input'][$magazine_field][LANGUAGE_NONE] : '' ;
    }

    if (isset($form['#node']->field_poll_start_date[LANGUAGE_NONE][0]['value']) && !isset($form_state['triggering_element'])) {
        $date_val = $form['#node']->field_poll_start_date[LANGUAGE_NONE][0]['value'];
    }
    else {
        $date_val = !empty($form_state['input'][$tv_date_field][LANGUAGE_NONE][0]['value']['date']) ? $form_state['input'][$tv_date_field][LANGUAGE_NONE][0]['value']['date'] : '';
    }

    // add ajax on magazine field
    $form[$magazine_field][LANGUAGE_NONE]['#ajax'] = array(
        'event' => 'change',
        'callback' => 'itg_story_magazine_ajax_callback',
        'wrapper' => $supplement_field . '_replace',
    );

    // add ajax on tv date field
    $form[$tv_date_field][LANGUAGE_NONE][0]['#ajax'] = array(
        'event' => 'change',
        'callback' => 'itg_tv_time_ajax_callback',
        'wrapper' => $tv_time_field . '_replace',
    );

    // Setup supplement select
    $form[$supplement_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $supplement_field . '_replace">';
    $form[$supplement_field][LANGUAGE_NONE]['#suffix'] = '</div>';

    if (function_exists('itg_common_dropdown_supplement')) {
        $form[$supplement_field][LANGUAGE_NONE]['#options'] = itg_common_dropdown_supplement($magazine_id);
    }

    // Setup tv time field select
    $form[$tv_time_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $tv_time_field . '_replace">';
    $form[$tv_time_field][LANGUAGE_NONE]['#suffix'] = '</div>';

    if (function_exists('itg_common_tv_time')) {
        $form[$tv_time_field][LANGUAGE_NONE]['#options'] = itg_common_tv_time($date_val);
        $form[$tv_time_field][LANGUAGE_NONE]['#default_value'] = !empty($form['#node']->field_story_tv_time[LANGUAGE_NONE][0]['value']) ? $form['#node']->field_story_tv_time[LANGUAGE_NONE][0]['value'] : '';
        // $form[$tv_time_field]['#validated'] = TRUE;
    }

    // code for story expiry date field show and hide
    $form['field_story_expiry_date']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_expires[und][Yes]"]' => array('checked' => TRUE),
        )
    );

    // code for tv date field show and hide
    $form['field_poll_start_date']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_configurations[und][tv]"]' => array('checked' => TRUE),
        )
    );

    // code for Time field show and hide
    $form['field_story_tv_time']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_configurations[und][tv]"]' => array('checked' => TRUE),
        )
    );

    // code for Comment Question field hide and show
    $form['field_story_comment_question']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_configurations[und][comment]"]' => array('checked' => TRUE),
        )
    );

    // code for featured field hide and show
    $form['field_story_featured_name']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_configurations[und][set_as_featured]"]' => array('checked' => TRUE),
        )
    );

    // code for magazine field hide and show
    $form['field_story_select_magazine']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        )
    );

    // code for supplement field hide and show
    $form['field_story_select_supplement']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        ),
    );

    // code for issue date field hide and show
    $form['field_story_issue_date']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        )
    );

    // code for Magazine kicker * field show and hide
    $form['field_story_magazine_kicker_text']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        ),
        'required' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        )
    );

    // code for Magazine Headline * field show and hide
    $form['field_story_magazine_headline']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
        )
    );
    // facebook instant Article
    $form['field_facebook_instant_audio_url']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_facebook_audio_position']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_animated_image_position']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_facebook_animated_image']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_facebook_map_position']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_map_embed_code']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_social_embed_code']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_social_embed_code_position']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    $form['field_facebook_gallery_associate']['#states'] = array(
        'visible' => array(
            ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
        )
    );
    // Set form default value for social media fields

    $form['field_story_posted_by_twitter']['#default_value'] = $user->mail;
    $form['field_story_posted_by_instagram']['#default_value'] = $user->mail;
}

/**
 * Ajax callback for Event roles dropdown
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_story_magazine_ajax_callback($form, $form_state) {
    return $form['field_story_select_supplement'];
}

/**
 * Ajax callback for tv time dropdown
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_tv_time_ajax_callback($form, $form_state) {
    return $form['field_story_tv_time'];
}

/**
 * Implements hook_library_alter().
 *
 * Attach our own JS library whenever drupal.autocomplete is loaded.
 *
 * {@inheritdoc}
 */
function itg_story_library_alter(&$libraries, $module) {
    $limit = 2;

    // Only inject our setting and js override if we've been configured.
    if (!empty($limit) && $module == 'system' && !empty($libraries['drupal.autocomplete'])) {
        drupal_add_js(array('autocomplete_limit' => array('limit' => $limit)), 'setting');

        $library = drupal_get_path('module', 'itg_story') . '/js/autocomplete.limit.js';
        $libraries['drupal.autocomplete']['js'][$library] = array('group' => JS_DEFAULT);
    }
}

/**
 * Get video with player
 * @param int $nid
 * @return string $content
 */
function itg_get_video_display($nid) {
    $node = node_load($nid);
    if (module_exists('itg_videogallery')) {
        $vid = itg_videogallery_get_videoid($row['fid']);
    }
    $content = '<iframe frameborder="0"
            src="https://www.dailymotion.com/embed/video/' . $vid . '?autoplay=0&mute=1&ui-start-screen-info"
            allowfullscreen></iframe>';
    return $content;
}

/**
 * {@inheritdoc}
 */
/*function itg_story_views_query_alter(&$view, &$query) {
  if ($view->name == 'strory_menegment') {
    if (!empty($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == "story") {
      foreach ($query->where[1]['conditions'] as $keys => $field) {
        if ($field['field'] == 'field_data_field_story_source_type.field_story_source_type_value') {
          $query->where[1]['conditions'][$keys]['value'] = "";
          $query->where[1]['conditions'][$keys]['operator'] = "IS NULL";
        }
      }
    }
  }
}*/

/**
 * {@inheritdoc}
 */
function itg_story_node_presave($node) {
  $type = $node->type;
  if ($type == 'story' && !empty($node->field_story_magazine_story_issue['und'][0]['value'])) {
    if ($node->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
      $node->field_story_source_type['und'][0]['value'] = 'Magazine Story';
    }
  }
  
  if($type == 'story' && empty($node->field_story_source_type[LANGUAGE_NONE][0]['value'])) {
   $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'story';
  }
  
  if ($type == 'story') {
    $redirection_url = $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'];
    if (!empty($redirection_url) && !preg_match("~^(?:f|ht)tps?://~i", $redirection_url)) {
      $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'] = "http://" . $redirection_url;
    }
    if (empty($node->field_reporter_publish_id[LANGUAGE_NONE][0]['value'])) {
      if (function_exists('itg_get_byline_row')) {
        if(!empty($node->field_reporter_unique_id[LANGUAGE_NONE])){
          $publish_id = itg_get_byline_row($node->field_reporter_unique_id[LANGUAGE_NONE][0]['value']);
          $node->field_reporter_publish_id[LANGUAGE_NONE][0]['value'] = $publish_id;
        }
      }
    }
  }
}

/**
 * {@inheritdoc}
 */
function itg_story_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'story') {
    global $user, $theme;
    // for lock story
    if ($theme == FRONT_THEME_NAME && (in_array(FRONT_USER, $user->roles) || $user->uid == 0)) {
      if (!empty($node->field_story_configurations['und'][0]['value'])) {
        foreach ($node->field_story_configurations['und'] as $value) {
          $config[] = $value['value'];
        }
      }
      if (in_array('lock_story', $config)) {          
        drupal_goto('http://subscriptions.intoday.in/subscriptions/itoday/ite_offer_mailer.jsp?source=ITHomepage');
      }
    }
    
    $actual_link = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
    if(function_exists('itg_get_related_content')) {
      $node->content['related_content'] = itg_get_related_content(arg(1));
    }
    
    if (function_exists('itg_total_share_count')) {
      $node->content['total_share_count'] = itg_total_share_count($actual_link);
    }
    
    if (function_exists('itg_msi_get_lock_story_status')) {
      $node->content['develop_story_status'] = itg_msi_get_lock_story_status($node->nid, 'developing_story');
    }
    
    if(function_exists('itg_get_front_activity_info')) {
      $node->content['follow_status'] = itg_get_front_activity_info($node->nid, $node->type, $user->uid, 'follow_story', $status='');
    }  
    
    if(function_exists('itg_common_get_latest_byline')) {
      $node->content['byline_id'] = itg_common_get_latest_byline($node->nid, '1');
    }
    if (isset($node->field_story_type[LANGUAGE_NONE][0]['value']) && $node->field_story_type[LANGUAGE_NONE][0]['value'] == 'photo_story') {
      $next = itg_story_photo_story_redirect($node->nid, '>');
      $previous = itg_story_photo_story_redirect($node->nid, '<');
      drupal_add_js(array('itg_story_front' => array('next' => $next, 'previous' => $previous)), 'setting');
      drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_story_front.js');
    }
    
  }
}

/**
 * Implements itg_story_movie_image_plugin_data()
 * @param type $node_id
 */
function itg_story_movie_image_plugin_data($node_id = '') {
  //Store the node id of the story from the argument
  $story_nid = $node_id;
  if (!empty($story_nid)) {
    $node_obj = node_load($story_nid);
    $dty = date("D j M Y", $node_obj->changed);
    //store entity id of multi value field collection field
    $technology_entity = $node_obj->field_story_technology[LANGUAGE_NONE];
    
    $html = '';
    if (!empty($technology_entity)) {
      $html .= '<div class="story-photo-list-wrapper"><h3 class="story-photo-list-heading"><span>SAMPLE PHOTOS</span></h3><div class="story-photo-list">';

      foreach ($technology_entity as $key => $val) {
        $entity = entity_load('field_collection_item', array($val['value']));
        // store the actual image path
        $sample_img_path = $entity[$val['value']]->field_technology_sample_photo['und'][0]['uri'];
        $sample_img = image_style_url('video_landing_page_170_x_127', $sample_img_path);
        // store image title
        $sample_title = mb_strimwidth($entity[$val['value']]->field_technology_photo_title['und'][0]['value'], 0, 35, "..");
        // generate html 
        $html .= '<div class="story-photo-list-item">';
        $html .= '<img src="' . $sample_img . '"  alt=""/>';
        $html .= '<span class="smp-date">' . $dty . '</span>';
        $html .= '<p>' . $sample_title . '</p>';
        $html .= '</div>';
      }
      $html .= '</div></div>';
    }
    return $html;
  } else {
    return 'No content id found';
  }
}

/**
 * Implements itg_story_photo_story_previous()
 * @param type $node_id
 */
function itg_story_photo_story_redirect($node_id, $type) {
  global $base_url;
  /*
   * query to fetch the previous content id of the id received from the argument
   */
  $query = db_select('field_data_field_story_type', 'fst');
  $query->fields('fst',array('entity_id'));
  $query->condition('fst.field_story_type_value', 'photo_story');
  $query->condition('fst.entity_id', $node_id , $type);
  $query->range(0,1);
  $result = $query->execute()->fetchCol();
  $nid = $result[0];
  if (!empty($nid)) {
  // stores node redirect path 
  $redirect = $base_url . '/' . drupal_get_path_alias('node/' . $nid);
  $redirect = (string) $redirect;
  } else {
    $redirect = '';
  }
  return $redirect;
}

/**
 * 
 * @param type $node_id
 * @return string
 */
function itg_story_photo_story_html($node_id) {
  // generate the html for photo story top slider
  if (!empty($node_id)) {
    $node = node_load($node_id);
    $photo_story = $node->field_photo_story[LANGUAGE_NONE];
    $next = itg_story_photo_story_redirect($node_id, '>');
    $previous = itg_story_photo_story_redirect($node_id, '<');
    $next_link_count = count($photo_story) - 1;
    $html = '';
    $html .= '<div class="photo-story-img multiple-photo-disc">';
    foreach ($photo_story as $key => $val) {
      if ($key == 0 && !empty($previous)) {
        $previous_link = "<a class='fa fa-chevron-left prev-story-link' href='" . $previous . "'></a>";
      }
      else {
        $previous_link = "";
      }
      if ($key == $next_link_count && !empty($next)) {
        $next_link = "<a class='fa fa-chevron-right next-story-link' href='" . $next . "'></a>";
      }
      else {
        $next_link = "";
      }
      $entity_obj = entity_load('field_collection_item', array($val['value']));
      $photo_story_img_path = $entity_obj[$val['value']]->field_photo_story_image['und'][0]['uri'];
      $photo_story_file_name = $entity_obj[$val['value']]->field_photo_story_image['und'][0]['filename'];
      $photo_story_img = image_style_url('photo_story_771x432', $photo_story_img_path);
      $photo_story_desc = $entity_obj[$val['value']]->field_photo_story_description['und'][0]['value'];
      $html .= '<div class="photo-slider">';
      $html .= $next_link . '<img src="' . $photo_story_img . '" title="' . $photo_story_file_name . '" alt="photo_story_img" />' . $previous_link;
      $html .= '<div class="description"><p>' . $photo_story_desc . '</p></div>';
      $html .= '</div>';
    }
    $html .= '</div>';
    return $html;
  }
}

/**
 * 
 * @param type $node_id
 * @return string
 */
function itg_story_photo_story_bottom_html($node_id) {
  $current_url = $_SERVER['REQUEST_URI'];
  // generate the html for photo story bottom slider
  if (!empty($node_id)) {
    $node = node_load($node_id);
    $photo_story = $node->field_photo_story[LANGUAGE_NONE];
    $count = sizeof($photo_story);
      $html = '';
      $html .= '<div class="photo-story-img multiple-photo common-photo">';
//      foreach ($photo_story as $key => $val) {
      for ($i = 0; $i < $count; $i++) {
        $entity_obj = entity_load('field_collection_item', array($photo_story[$i]['value']));
        $photo_story_img_path = $entity_obj[$photo_story[$i]['value']]->field_photo_story_image['und'][0]['uri'];
        $photo_story_file_name = $entity_obj[$photo_story[$i]['value']]->field_photo_story_image['und'][0]['filename'];
        $photo_story_img = image_style_url('photo_story_small_88x66', $photo_story_img_path);
        $html .= '<div class="photo-slider">';
        $html .= '<span class="img-wrapper"><img src="' . $photo_story_img . '" title="' . $photo_story_file_name . '" alt="photo_story" />';
        $html .= '<em class="photo-count">' . ($i+1) . '</em></span>';
        $html .= '</div>';
      }
      $html .= '</div>';
      return $html;
  }
}
