<?php

/**
 * @file
 * ITG Story module.
 *
 * Provides customizations and functions for Story.
 *
 */
module_load_include('inc', 'itg_story', 'includes/itg_story.helper');
module_load_include('inc', 'itg_story', 'includes/itg_story.byline');

/**
 * Implements hook_menu().
 * @return array
 */
function itg_story_menu() {
  $items['reporter-details-ajax'] = array(
    'page callback' => 'itg_story_reporter_details',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['content-title-list/%/autocomplete'] = array(
    'page callback' => 'itg_story_get_content_title',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['content-state-title-list/%/%/autocomplete'] = array(
    'page callback' => 'itg_state_get_content_title',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['content-workbench-title-list/%/%/autocomplete'] = array(
    'page callback' => 'itg_story_get_workbench_title',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['content-nid-list/%/autocomplete'] = array(
    'page callback' => 'itg_story_get_content_nid',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['supplement-list-ajax'] = array(
    'page callback' => 'itg_story_supplement_details',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['issue-date-check-ajax'] = array(
    'page callback' => 'itg_story_issue_date_checked',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['associate-photo-video-content/%'] = array(
    'page callback' => 'associate_photo_video_content',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['breaking-news-ajax'] = array(
    'page callback' => 'itg_story_create_breaking_news',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );

  $items['byline/autocomplete'] = array(
    'page callback' => 'itg_story_byline',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );

  $items['multibyline-save'] = array(
    'page callback' => 'itg_story_byline_save',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );

  $items['admin/config/administration/sponsor_category'] = array(
    'title' => 'Sponsor Category Setting',
    'description' => 'Sponsor Category Setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_sponsor_category_setting'),
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['itg-story-load-follow-story'] = array(
    'title' => 'Akamai load follow story',
    'description' => 'Akamai Load follow story',
    'page callback' => 'itg_story_load_follow_story',
    'access arguments' => array('access content'),
    'file' => 'includes/itg_story.helper.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['byline/%ctools_js/add'] = array(
    'title' => 'Add Byline',
    'page callback' => 'itg_story_add_byline_popup',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/itg_story.inc',
  );
  
  $items['mega-review/embed/%node'] = array(
    'page callback' => 'itg_story_mega_review_node_embed',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  
  $items['itg-read-later-refresh/%'] = array(
    'title' => 'Read later refresh',
    'description' => 'Read later refresh',
    'page callback' => 'itg_story_readlater_block_refresh',
    'access arguments' => array('access content'),
    'file' => 'includes/itg_story_readlater_refresh.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-follow-story-refresh/%'] = array(
    'title' => 'Follow story refresh home page',
    'description' => 'Follow story refresh home page',
    'page callback' => 'itg_follow_story_refresh',
    'access arguments' => array('access content'),
    'file' => 'includes/itg_follow_story_refresh.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['technology/embedegallery/%'] = array(
    'page callback' => 'itg_story_technology_embedgalery',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );

  return $items;
}

/**
 * Implements hook_permission.
 */
function itg_story_permission() {
  return array(
    'access itg story' => array(
      'title' => t('story permission'),
      'description' => t('story permission.'),
    ),
    'access layout delete' => array(
      'title' => t('layout delete permission'),
      'description' => t('layout delete permission.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 * @return array
 */
function itg_story_block_info() {
  $blocks['story_tab_form_block'] = array(
    'info' => t('Story Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_story_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'story_tab_form_block':
      $block['content'] = theme('story_tab_form_display_block', array('data' => ''));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_story_theme($existing, $type, $theme, $path) {
  $themes = array(
    'story_tab_form_display_block' => array(
      'template' => 'story-form-tab-template',
      'path' => drupal_get_path('module', 'itg_story') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'story_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'story-node-form',
      'path' => drupal_get_path('module', 'itg_story') . '/templates',
      'render element' => 'form',
    ),
    'itg_story_load_follow_story' => array(
      'template' => 'itg-story-load-follow-story',
      'path' => drupal_get_path('module', 'itg_story') . '/templates',
      'variables' => array('data' => NULL),
    ),
  );

  return $themes;
}

/**
 * Implements hook_ckeditor_plugin_alter().
 * {@inheritdoc}
 */
function itg_story_ckeditor_plugin_alter(&$plugins) {
  $arg = arg();
  if (($arg[0] == 'node' && $arg[1] == 'add' && $arg[2] != 'story') || ($arg[0] == 'personalization' && $arg[1] == 'my-content')) {
    unset($plugins['factoids']);
    unset($plugins['expertchunk']);
  }
}

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_story_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'story_node_form':
      global $base_url, $user;

      // code for body field config
      $form['body']['#states'] = array(
        'required' => array(
          ':input[name="field_story_type[und]"]' => array('value' => 'other_story'),
        )
      );

      // checked comment box by default
      if (!isset($form['#node']->nid)) {

        if (isset($form['field_story_configurations'][LANGUAGE_NONE]['#default_value']) && count($form['field_story_configurations'][LANGUAGE_NONE]['#default_value'])) {
          $values = array_merge($form['field_story_configurations'][LANGUAGE_NONE]['#default_value'], array('commentbox'));
        }
        else {
          $values = array('commentbox');
        }
        $form['field_story_configurations'][LANGUAGE_NONE]['#default_value'] = $values;
      }

      if ($user->uid != 1) {
        unset($form['field_story_long_head_line']);
        unset($form['field_story_select_templates']['und']['#options']['quote']);
        unset($form['field_story_configurations']['und']['#options']['comment']);
      }
      if ($user->uid) {
        $form['body']['und'][0]['#format'] = 'icon_format';
      }

      // code for multiple byline
      if (empty($form['#node']->nid)) {
        if (!empty($_SESSION['unique'])) {
          $reporter_id = $_SESSION['unique'];
        }
        else {
          $unique = 'byline_' . uniqid();
          $_SESSION['unique'] = $unique;
          $reporter_id = $_SESSION['unique'];
        }

        $form['field_reporter_unique_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $reporter_id;
      }
      if ($user->uid != 1) {
        $form['field_reporter_publish_id']['#attributes']['class'][] = 'element-hidden';
        $form['field_reporter_unique_id']['#attributes']['class'][] = 'element-hidden';
      }
      $form['field_story_reporter']['und'][0]['target_id']['#autocomplete_path'] = 'byline/autocomplete';

      if (!empty($form['#node']->field_story_source_id[LANGUAGE_NONE][0]['value'])) {
        $source_id = $form['#node']->field_story_source_id[LANGUAGE_NONE][0]['value'];
      }

      if (!empty($form['#node']->field_story_source_type[LANGUAGE_NONE][0]['value'])) {
        $source_type = trim($form['#node']->field_story_source_type[LANGUAGE_NONE][0]['value']);
      }

      $breaking_check = '';

      if (empty($source_id) && empty($source_type)) {
       // $breaking_check = '<input type="checkbox" title="breaking_text" id="breaking_text"><span> Make it breaking news</span>';
      }

      $form['title']['#suffix'] = '<div class="breaking_class">' . $breaking_check . '</div>';
      $form['field_story_magazine_story_issue'][LANGUAGE_NONE]['#title'] = '';
      $form['field_story_syndication'][LANGUAGE_NONE]['#options'] = array('Yes' => $form['field_story_syndication'][LANGUAGE_NONE]['#title']);
      $form['field_story_syndication'][LANGUAGE_NONE]['#title'] = "";
      $form['field_story_syndications_photo'][LANGUAGE_NONE]['#options'] = array('Yes' => $form['field_story_syndications_photo'][LANGUAGE_NONE]['#title']);
      $form['field_story_syndications_photo'][LANGUAGE_NONE]['#title'] = "";
      unset($form['actions']['preview_changes']);
      unset($form['field_story_templates'][LANGUAGE_NONE]['#options']['_none']);
      unset($form['field_story_select_templates'][LANGUAGE_NONE]['#options']['_none']);
      $form['#after_build'][] = 'itg_story_after_build';
      $form['actions']['submit']['#submit'][] = 'itg_story_form_custom_callback';
      drupal_add_js(array('itg_common' => array('base_url' => $base_url)), 'setting');
      drupal_add_js(drupal_get_path('module', 'itg_common') . '/js/itg_common.emoji.js', array('scope' => 'footer'));
      $form['field_emoji_2']['und'][0]['#format'] = 'emoji';
      $form['field_emoji']['und'][0]['#format'] = 'emoji';
      // hide remove button of field collection if there is only single instance of it within the form
      if (isset($form['field_photo_story']['und']['#max_delta']) && isset($form['your_field']['und']['#max_delta']) && $form['your_field']['und']['#max_delta'] == 0) {
        $form['field_photo_story']['und'][0]['remove_button']['#prefix'] = '<div style="display:none;"';
        $form['field_photo_story']['und'][0]['remove_button']['#suffix'] = '</div>';
      }
      $form['upload'] = array(
        '#type' => 'plupload',
        '#weight' => 21,
        '#upload_validators' => array(
          'file_validate_extensions' => array("png gif jpg jpeg"),
        ),
      );
      // Google standout chekbox modifications.
      $approved_roleid = array(ADMINISTRATOR, EDITOR, SITE_ADMIN);
      $check = array();
      $check = array_intersect($approved_roleid, array_keys($user->roles));
      if (empty($check)) {
        unset($form['field_story_configurations'][LANGUAGE_NONE]['#options']['google_standout']);
      }
      if ((isset($form['#node']->nid)) && (in_array(EDITOR, array_keys($user->roles)))) {
        foreach ($form['field_story_configurations'][LANGUAGE_NONE]['#default_value'] as $key => $val) {
          if ($val == 'google_standout') {
            $form['field_story_configurations'][LANGUAGE_NONE]['google_standout']['#attributes']['disabled'] = 'disabled';
            break;
          }
        }
      }
      //Byline popup
      // Load the modal library and add the modal javascript.
      ctools_include('modal');
      ctools_modal_add_js();
      break;
    case 'reporter_node_form' :
      if ($form_state['reporter_popup_form']) {
        // alter label name
        $form['title']['#title'] = t('Name');
        //$form['field_reporter_twitter_handle']['#access'] = FALSE;
        //$form['field_story_expert_name']['#access'] = FALSE;
        //$form['field_story_new_title']['#access'] = FALSE;
        $form['field_constituancy']['#access'] = FALSE;
        $form['field_party_name']['#access'] = FALSE;
        $form['field_reporter_movie_name']['#access'] = FALSE;
        $form['field_story_category']['#access'] = FALSE;
        $form['field_story_extra_large_image']['#access'] = FALSE;
        $form['body']['#access'] = FALSE;
        $form['field_reporter_facebook_id']['#access'] = FALSE;
        $form['field_career_graph_cast']['#access'] = FALSE;
        $form['field_old_content_source_id']['#access'] = FALSE;
        $form['category_holder']['#access'] = FALSE;
        $form['path_alias']['#access'] = FALSE;
        $form['actions']['preview']['#access'] = FALSE;
        $form['actions']['cancel']['#access'] = FALSE;
      }
      break;
  }

  //$form['field_story_category']['und']['#config']['module'] = 'itg_category_manager';
}

/**
 * Custom submit callback for redirecting story form.
 * {@inheritdoc}
 */
function itg_story_form_custom_callback($form, &$form_state) {
  
  if ($form_state['node']->status == '1') {
    /* Assign story to widget */
    if (is_array($form['#node']->field_story_assign_to_widget[LANGUAGE_NONE])) {
      $previous_story_assign = $form['#node']->field_story_assign_to_widget[LANGUAGE_NONE];
    }
    else {
      $previous_story_assign = '';
    }
    $story_widget = $form_state['input']['field_story_assign_to_widget'][LANGUAGE_NONE];
    // for story assign to widget
    if (function_exists('itg_story_assign_to_widget')) {
      if (is_array($story_widget) && count($story_widget) > 0) {
        itg_story_assign_to_widget($form_state['values']['nid'], $story_widget, '', $previous_story_assign);
      }
    }
    /* End for Assign story to widget */
  } 
  
  
  $workbench_current_state = $form_state['node']->workbench_moderation_state_new;
  $node_type = ucfirst($form_state['node']->type);
  
  $node_type = str_replace("_", " ", $node_type);
  $title = ucfirst($form_state['node']->title);
  
  $clone_id = $_GET['clone_id'];
  
  $request_destination = $_REQUEST['destination'];
  $redirect_path = $_REQUEST['destination'];
  
  if ($form_state['input']['op'] == 'Apply' && $form_state['node']->status == '1') { // redirection for Apply button
    $redirect_path = 'node/' . $form_state['values']['nid'] . '/edit?destination=' . $_GET['destination'];    
  } else if ($request_destination == 'clone-story' && !empty($clone_id)) { // redirection for clone story
    if (arg(1) == 'add') {
      if ($workbench_current_state == 'published') {
        $op = 'cloned and published.';
        drupal_set_message(t($node_type . ' <b>' . $title . '</b> has been successfully ' . $op . ''));
      }
      else {
        $op = 'created';
        drupal_set_message(t($node_type . ' <b>' . $title . '</b> has been ' . $op . ' successfully and submitted for further review and approval.'));
      }
      $redirect_path = 'published-story?field_story_syndication_value_op=all';
    }
  } else if ($request_destination == 'published-story' && $form_state['input']['op'] != 'Apply') { // redirection for published-story
    $redirect_path .= "?field_story_syndication_value_op=all";    
  }
  
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
 
  if (function_exists('itg_custom_message')) {
    itg_custom_message($node_type, $workbench_current_state, arg(1), $title, $redirect_path, $action);
  }
 
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_story_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  $soruce_type_filter_display_views = array(
    'views-exposed-form-strory-menegment-page',
    'views-exposed-form-strory-menegment-page-1',
    'views-exposed-form-strory-menegment-page-2',
    'views-exposed-form-strory-menegment-page-7',
    'views-exposed-form-strory-menegment-page-4',
    'views-exposed-form-strory-menegment-page-5',
    'views-exposed-form-videogallery-management-page-1',
    'views-exposed-form-videogallery-management-page',
    'views-exposed-form-videogallery-management-page-2',
    'views-exposed-form-videogallery-management-page-5',
    'views-exposed-form-photo-gallery-management-page-1',
    'views-exposed-form-photo-gallery-management-page',
    'views-exposed-form-photo-gallery-management-page-2',
    'views-exposed-form-photo-gallery-management-page-5'
  );



  if ($form['#id'] == 'views-exposed-form-strory-menegment-page-10' || $form['#id'] == 'views-exposed-form-strory-menegment-page' || $form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-3' || $form['#id'] == 'views-exposed-form-strory-menegment-page-8' || $form['#id'] == 'views-exposed-form-strory-menegment-page-6' || $form['#id'] == 'views-exposed-form-strory-menegment-page-5' || $form['#id'] == 'views-exposed-form-strory-menegment-page-2' || $form['#id'] == 'views-exposed-form-strory-menegment-page-9' || $form['#id'] == 'views-exposed-form-strory-menegment-page-7' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12' || $form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-4') {
    if (arg(0) != 'ugc-published-story') {
      $form['title']['#autocomplete_path'] = 'content-workbench-title-list/story/' . arg(0) . '/autocomplete';
    }
    else {
      $form['title']['#autocomplete_path'] = 'content-title-list/story/autocomplete';
    }

    $form['title']['#attributes'] = array('placeholder' => t('Title'));
    $form['nid']['#autocomplete_path'] = 'content-nid-list/story/autocomplete';
    $form['nid']['#attributes'] = array('placeholder' => t('Story ID'));
  }
  if ($form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12') {
    $form['field_story_configurations_value']['#options'] = array('All' => '- All -', 'lock_story' => 'Locked Story');
  }

  if (in_array($form['#id'], $soruce_type_filter_display_views)) {
    if ($form['#id'] == 'views-exposed-form-videogallery-management-page-1' || $form['#id'] == 'views-exposed-form-videogallery-management-page' || $form['#id'] == 'views-exposed-form-videogallery-management-page-2' || $form['#id'] == 'views-exposed-form-videogallery-management-page-5') {
      $cn_type = 'videogallery';
      $option = array(
          '' => '-Any-',
          'videogallery' => 'Video',
          'migrated' => 'Migrated',
          'OCTOPUS' => 'OCTOPUS',
          'UGC' => 'UGC'
      );
    }
    elseif ($form['#id'] == 'views-exposed-form-photo-gallery-management-page-1' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-2' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-5') {
      $cn_type = 'photogallery';
      $option = array(
          '' => '-Any-',
          'photogallery' => 'Photogallery',
          'migrated' => 'Migrated',
          'UGC' => 'UGC',
      );
    }
    else {
      $cn_type = 'story';
        $option = array("" => '-Any-',
        'story' => 'Internal Story',
        'Magazine Story' => 'Magazine Story',
        'Clone Story' => 'Clone Story',
        'breaking' => 'Breaking',
        'UGC' => 'UGC',
        'migrated' => 'Migrated',
        'AP' => 'AP',
        'Mail Today' => 'Mail Today',
        'Reuters' => 'Reuters',
        'IANS' => 'IANS',
        'PTI' => 'PTI');
    }
  //  $option = array("" => '-Any-', $cn_type => $cn_type);
//    $query = db_select('field_data_field_story_source_type', 'st');
//    $query->leftJoin('node', 'n', 'n.nid=st.entity_id');
//    $query->condition('n.type', $cn_type)->distinct()
//        ->fields('st', array('field_story_source_type_value'));
//    $result = $query->execute()->fetchAll();
//    foreach ($result as $option_values) {
//      if ($option_values->field_story_source_type_value == 'videogallery') {
//        $option[$option_values->field_story_source_type_value] = 'Video';
//      } else if ($option_values->field_story_source_type_value == 'story') {
//        $option[$option_values->field_story_source_type_value] = 'Internal Story';
//      }
//      else {
//        $option[$option_values->field_story_source_type_value] = ucwords($option_values->field_story_source_type_value);
//      }
//    }

    $source_type = "<select class='form-item form-type-select' id='fake-soruce-type'>";
    foreach ($option as $option_value => $option_element) {
      if (!empty($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == $option_value) {
        $select = "selected";
      }
      else {
        $select = "";
      }
      $source_type .= "<option value=\"$option_value\" $select>$option_element</option>";
    }
    $source_type .= "</select>";
    $form['field_story_source_type_value']['#suffix'] = $source_type;
    drupal_add_css("input#edit-field-story-source-type-value {display:none}", "inline");
  }
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_story_node_validate($node, $form, &$form_state) {

  // Code for redirection url validation
  if ($node->type == 'story') {
    // code to copy long headline to short headline
    $form_state['values']['field_story_short_headline'][LANGUAGE_NONE][0]['value'] = $form_state['input']['field_story_short_headline'][LANGUAGE_NONE][0]['value'];
    // end here
    $issue_based = $node->field_story_magazine_story_issue[LANGUAGE_NONE][0]['value'];
    $magazine_kicker = $node->field_story_magazine_headline[LANGUAGE_NONE][0]['value'];
    $magazine = $node->field_story_select_magazine[LANGUAGE_NONE][0]['target_id'];

    // code to validation magazine field when issue based story is checked
    if (!empty($issue_based) && empty($magazine)) {
      form_set_error('field_story_select_magazine', t("Please select Magazine"));
    }

    // code to check if issue based is check fill magazine kicker text
    if (!empty($issue_based) && empty($magazine_kicker)) {
      form_set_error('field_story_magazine_headline', t("Magazine kicker text is required"));
    }
    $external_url = $node->field_story_external_url[LANGUAGE_NONE][0]['value'];
    if (!empty($external_url) && filter_var($external_url, FILTER_VALIDATE_URL) === FALSE) {
      form_set_error('field_story_external_url', t("$external_url is not a valid URL"));
    }

    $redirection_url = $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'];
    if (!empty($redirection_url) && !preg_match("~^(?:f|ht)tps?://~i", $redirection_url)) {
      $redirection_url = "http://" . $redirection_url;
    }
    if (!empty($redirection_url) && filter_var($redirection_url, FILTER_VALIDATE_URL) === FALSE) {
      form_set_error('field_story_redirection_url_titl', t("$redirection_url is not a valid URL"));
    }

    // code for check expiry date is greater then schedule date
    $schedule_date = $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'];
    $schedule_date = strtotime($schedule_date);
    $schedule_date = date('Y-m-d', $schedule_date);
    $expiry_date = $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'];

    if (isset($expiry_date) && $schedule_date > $expiry_date) {
      form_set_error('field_story_expiry_date', t("Expiry date should be greater then schedule start date"));
    }

    // Code for issue exit or not.
    if (!empty($node->field_story_issue_date[LANGUAGE_NONE][0]['value'])) {
      $issue = itg_story_checked_issue($node->field_story_issue_date[LANGUAGE_NONE][0]['value']);
      if (!$issue) {
        form_set_error('edit-field-story-issue-date-und-0-value-datepicker-popup-0', t("Issue does not exist."));
      }
    }

    // Code for category validation.
    if (empty($node->field_story_category[LANGUAGE_NONE][0]['tid'])) {
      form_set_error('edit-field-story-category-und-hierarchical-select-selects-0', t("Section field is required."));
    }

    if ($node->field_story_type[LANGUAGE_NONE][0]['value'] == 'other_story' && empty($node->body[LANGUAGE_NONE][0]['value'])) {
      form_set_error('body', t("Description field is required."));
    }
    if ((!empty($node->field_story_configurations[LANGUAGE_NONE]))) {
      foreach ($node->field_story_configurations[LANGUAGE_NONE] as $config_key => $config_val) {
        if ($config_val['value'] == 'google_standout') {
          $current_calender_week = date("W");
          $current_year = date("Y");
          $calender_week = _get_calender_week_start_end_date($current_calender_week, $current_year);
          $start_time = strtotime($calender_week['week_start']);
          $end_time = strtotime($calender_week['week_end']);
          $query = db_select('field_data_field_story_configurations', 'fsc');
          $query->join('node', 'n', 'fsc.entity_id=n.nid');
          $query->fields('n', array('nid'));
          $query->condition('n.changed', array($start_time, $end_time), 'BETWEEN');
          $query->condition('n.status', 1);
          $query->condition('n.type', 'story', '=');
          $query->condition('fsc.field_story_configurations_value', 'google_standout', '=');
          $result = $query->execute();
          $num_of_results = $result->rowCount();
          if ($num_of_results >= 7) {
            form_set_error('field_story_configurations', t("We can have only seven story with google standout with in a calender week."));
          }
          break;
        }
      }
    }
  }
}

/**
 * After build for story form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_story_after_build($form, &$form_state) {

  global $user, $base_url;
echo '<pre>';print_r($form);die;
  // apply button for editor and siteadmin role
  if (array_key_exists(EDITOR, $user->roles) || array_key_exists(SITE_ADMIN, $user->roles) || array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) || array_key_exists(COPY_EDITOR, $user->roles) || array_key_exists(INTERN, $user->roles)) {
    if (!empty($form['nid']['#value']) && arg(2) == 'edit' && $form['#node']->type == 'story' && $form['#node']->status == '1') {
      $form['actions']['itg_custom_apply_button'] = array(
        '#type' => 'submit',
        '#value' => t('Apply'),
        '#id' => 'btn-apply',
        '#submit' => array('node_form_submit', 'itg_story_form_custom_callback'),
        '#weight' => -8,
      );
    }
  }

  if (empty($form_state['input']['op'])) {
    unset($_SESSION['unique']);
  }
  // code for multiple byline
  if (empty($form['#node']->nid)) {
    $reporter_id = !empty($form_state['input']['field_reporter_unique_id'][LANGUAGE_NONE][0]['value']) ? $form_state['input']['field_reporter_unique_id'][LANGUAGE_NONE][0]['value'] : '';
  }
  else {
    $reporter_id = $form['#node']->field_reporter_unique_id[LANGUAGE_NONE][0]['value'];
  }
  $add_byline_link = l('Add Byline', 'byline/nojs/add', array( 'attributes' => array('class' => array( 'ctools-use-modal', 'add-byline-link' )) ));
  $form['field_story_reporter']['#prefix'] = '<div class="multi_reporter">';
  $form['field_story_reporter']['#suffix'] = '<a class="multi-byline" data-tag="save">' . t('Add') . '</a>'.$add_byline_link.'</div><div class="byline-list"><ul class="byline-ul">' . itg_byline_info($reporter_id) . '</ul><span class="add-more save-byline">' . t('Save') . '</span></div><span class="success-byline"></span>';

  $form['original_image_fids'] = array(
    '#type' => 'hidden',
    '#value' => !empty($form_state['input']['original_image_fids']) ? $form_state['input']['original_image_fids'] : '',
    '#attributes' => array('id' => 'original_image_fids', 'name' => 'original_image_fids'),
  );

  unset($form['field_story_associate_lead'][LANGUAGE_NONE]['_none']);

  $form['field_story_select_magazine']['und']['#title'] = t('Select magazine') . '<span class="form-required" title="This field is required."> *</span>';
  $form['field_story_magazine_headline']['und']['#title'] = t('Magazine kicker') . '<span class="form-required" title="This field is required."> *</span>';

  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['storyid'] = isset($form['#node']->nid) ? $form['#node']->nid : 0;

  drupal_add_js(array('itg_story' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_story.js', array('weight' => 1, 'scope' => 'footer'));

  // ADD js for multiple byline
  drupal_add_js(array('itg_byline' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_byline.js', array('scope' => 'footer'));
  
  //Reporter node form Popup
  // get anchor id based on category name
  $tid_repo = REPORTER_TID;
  $reporter_settings = array();
  $reporter_settings['base_url'] = $base_url;
  $reporter_settings['uid'] = $user->uid;
  $reporter_settings['reporter'] = $tid_repo;
  drupal_add_js(array('itg_reporter' => array('settings' => $reporter_settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_story_reporter.js', array('scope' => 'footer'));
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js', array('scope' => 'footer'));
  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_story_form_story_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // condition for first blank reporter field on edit
  if ($form_id == 'story_node_form' && !empty($form['nid']['#value'])) {
    $field_name = 'field_story_reporter';
    if (empty($form[$field_name])) {
      return;
    }
    $field_language = $form[$field_name]['#language'];
    $max_delta = $form[$field_name][$field_language]['#max_delta'];
    if ($max_delta <= 0) {
      drupal_add_js('jQuery(document).ready(function() {
            jQuery("#edit-field-story-reporter-und-0-remove-button").hide();              
          });', array('type' => 'inline', 'scope' => 'footer'));
    }
  }
  $magazine_field = 'field_story_select_magazine';
  $supplement_field = 'field_story_select_supplement';
  $tv_date_field = 'field_poll_start_date';
  $tv_time_field = 'field_story_tv_time';
  if (function_exists('itg_common_dropdown_mazine')) {
    $opt = itg_common_dropdown_mazine();
    $form[$magazine_field]['#options'] = $opt;
  }

  // set magazine on edit and trigger action
  if (isset($form[$magazine_field][LANGUAGE_NONE]['#default_value'][0]) && !isset($form_state['triggering_element'])) {
    $magazine_id = $form[$magazine_field][LANGUAGE_NONE]['#default_value'][0];
  }
  else {
    $magazine_id = !empty($form_state['input'][$magazine_field][LANGUAGE_NONE]) ? $form_state['input'][$magazine_field][LANGUAGE_NONE] : '';
  }

  if (isset($form['#node']->field_poll_start_date[LANGUAGE_NONE][0]['value']) && !isset($form_state['triggering_element'])) {
    $date_val = $form['#node']->field_poll_start_date[LANGUAGE_NONE][0]['value'];
  }
  else {
    $date_val = !empty($form_state['input'][$tv_date_field][LANGUAGE_NONE][0]['value']['date']) ? $form_state['input'][$tv_date_field][LANGUAGE_NONE][0]['value']['date'] : '';
  }

  // add ajax on magazine field
  $form[$magazine_field][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'itg_story_magazine_ajax_callback',
    'wrapper' => $supplement_field . '_replace',
  );

  // add ajax on tv date field
  $form[$tv_date_field][LANGUAGE_NONE][0]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'itg_tv_time_ajax_callback',
    'wrapper' => $tv_time_field . '_replace',
  );

  // Setup supplement select
  $form[$supplement_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $supplement_field . '_replace">';
  $form[$supplement_field][LANGUAGE_NONE]['#suffix'] = '</div>';

  if (function_exists('itg_common_dropdown_supplement')) {
    if(!empty($magazine_id)) {
    $form[$supplement_field][LANGUAGE_NONE]['#options'] = itg_common_dropdown_supplement($magazine_id);
    }
  }

  // Setup tv time field select
  $form[$tv_time_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $tv_time_field . '_replace">';
  $form[$tv_time_field][LANGUAGE_NONE]['#suffix'] = '</div>';

  if (function_exists('itg_common_tv_time')) {
    $form[$tv_time_field][LANGUAGE_NONE]['#options'] = itg_common_tv_time($date_val);
    $form[$tv_time_field][LANGUAGE_NONE]['#default_value'] = !empty($form['#node']->field_story_tv_time[LANGUAGE_NONE][0]['value']) ? $form['#node']->field_story_tv_time[LANGUAGE_NONE][0]['value'] : '';
  }

  // code for story expiry date field show and hide
  $form['field_story_expiry_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_expires[und][Yes]"]' => array('checked' => TRUE),
    )
  );

  // code for tv date field show and hide
  $form['field_poll_start_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_configurations[und][tv]"]' => array('checked' => TRUE),
    )
  );

  // code for Time field show and hide
  $form['field_story_tv_time']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_configurations[und][tv]"]' => array('checked' => TRUE),
    )
  );

  // code for Comment Question field hide and show
  $form['field_story_comment_question']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_configurations[und][commentbox]"]' => array('checked' => TRUE),
    )
  );

  // code for featured field hide and show
  $form['field_story_featured_name']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_configurations[und][set_as_featured]"]' => array('checked' => TRUE),
    )
  );

  // code for magazine field hide and show
  $form['field_story_select_magazine']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
    )
  );

  // code for supplement field hide and show
  $form['field_story_select_supplement']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
    ),
  );

  // code for issue date field hide and show
  $form['field_story_issue_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
    )
  );

  // code for Magazine kicker * field show and hide
  $form['field_story_magazine_headline']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
    )
  );

  // facebook instant Article
  $form['field_facebook_instant_audio_url']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_facebook_audio_position']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_story_big_image']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_animated_image_position']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_facebook_animated_image']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_facebook_map_position']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_map_embed_code']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_social_embed_code']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_social_embed_code_position']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_facebook_gallery_associate']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  // Set form default value for social media fields

  $form['field_story_posted_by_twitter']['#default_value'] = $user->mail;
  $form['field_story_posted_by_instagram']['#default_value'] = $user->mail;
}

/**
 * Ajax callback for Event roles dropdown
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_story_magazine_ajax_callback($form, $form_state) {
  return $form['field_story_select_supplement'];
}

/**
 * Ajax callback for tv time dropdown
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_tv_time_ajax_callback($form, $form_state) {
  return $form['field_story_tv_time'];
}

/**
 * Implements hook_library_alter().
 *
 * Attach our own JS library whenever drupal.autocomplete is loaded.
 *
 * {@inheritdoc}
 */
function itg_story_library_alter(&$libraries, $module) {
  $limit = 2;

  // Only inject our setting and js override if we've been configured.
  if (!empty($limit) && $module == 'system' && !empty($libraries['drupal.autocomplete'])) {
    drupal_add_js(array('autocomplete_limit' => array('limit' => $limit)), 'setting');

    $library = drupal_get_path('module', 'itg_story') . '/js/autocomplete.limit.js';
    $libraries['drupal.autocomplete']['js'][$library] = array('group' => JS_DEFAULT);
  }
}

/**
 * This functio use for get image info from custom table.
 * @param int $fid
 * @return array $result.
 */
function itg_story_get_image_info($fid) {
  if(!empty($fid)) {
  $query = db_select('image_info', 'ii');
  $query->condition('ii.fid', $fid)
      ->fields('ii');
  return $result = $query->execute()->fetchAll();
  }
}

/**
 * Get video with player
 * @param int $nid
 * @return string $content
 */
/*function itg_get_video_display($nid) {
  $node = node_load($nid);
  if (module_exists('itg_videogallery')) {
    $vid = itg_videogallery_get_videoid($row['fid']);
  }
  $content = '<iframe frameborder="0"
            src="https://www.dailymotion.com/embed/video/' . $vid . '?autoplay=0&mute=1&ui-start-screen-info"
            allowfullscreen></iframe>';
  return $content;
}*/

/**
 * {@inheritdoc}
 */
function itg_story_node_presave($node) {
  //set custom path alias  
  if (itg_workflow_stop_node_update_batch_for_widgets()) {
    return;
  }
  $type = $node->type;
  if ($type == 'story' && !empty($node->field_story_magazine_story_issue['und'][0]['value'])) {
    if ($node->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
      $node->field_story_source_type['und'][0]['value'] = 'Magazine Story';
    }
  }

  if ($type == 'story' && empty($node->field_story_source_type[LANGUAGE_NONE][0]['value'])) {
    $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'story';
  }

  if ($type == 'story') {
    $redirection_url = $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'];
    if (!empty($redirection_url) && !preg_match("~^(?:f|ht)tps?://~i", $redirection_url)) {
      $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'] = "http://" . $redirection_url;
    }
    if (empty($node->field_reporter_publish_id[LANGUAGE_NONE][0]['value'])) {
      if (function_exists('itg_get_byline_row')) {
        if (!empty($node->field_reporter_unique_id[LANGUAGE_NONE])) {
          $publish_id = itg_get_byline_row($node->field_reporter_unique_id[LANGUAGE_NONE][0]['value']);
          $node->field_reporter_publish_id[LANGUAGE_NONE][0]['value'] = $publish_id;
        }
      }
    }

    // Prevent expiry date to save if expiry checkbox is unchecked

    if (empty($node->field_story_expires[LANGUAGE_NONE][0]['value'])) {
      unset($node->field_story_expiry_date);
    }
  }
}

/**
 * {@inheritdoc}
 */
function itg_story_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'story' && $view_mode != 'search_index') {
    global $user, $theme;
    // for lock story
    if ($view_mode != 'search_index' && ($theme == FRONT_THEME_NAME || $theme == 'amptheme') && (in_array(FRONT_USER, $user->roles) || $user->uid == 0)) {
      $config = array();
      if (!empty($node->field_story_configurations['und'][0]['value'])) {
        foreach ($node->field_story_configurations['und'] as $value) {
          $config[] = $value['value'];
        }
      }
      if (in_array('lock_story' , $config) && empty($_GET['preview_log'])) {
        drupal_goto('http://subscriptions.intoday.in/subscriptions/itoday/ite_offer_mailer.jsp?source=ITHomepage');
      }
      if (isset($node->type) && $node->type == 'story' && $node->status == 1) {
        if (!empty($node->field_story_configurations[LANGUAGE_NONE])) {
          foreach ($node->field_story_configurations[LANGUAGE_NONE] as $key => $val) {
            if ($val['value'] == 'display_lock') {
              $subscription_url = "http://subscriptions.intoday.in/subscriptions/itoday/ite_offer_mailer.jsp?source=ITStorypage";
              drupal_goto($subscription_url);
            }
          }
        }
      }
    }
    
    if (!empty($node->field_primary_category[LANGUAGE_NONE][0]['value'])) {
      $primary_cat = $node->field_primary_category[LANGUAGE_NONE][0]['value'];
    }
    
    if (!empty($node->field_story_technology['und'])) {
      $node->content['movie_plugin'] = itg_story_movie_image_plugin_data($node);
    }
    
    if(!empty($node->field_photo_story) && $node->field_story_type[LANGUAGE_NONE][0]['value']== 'photo_story') {
      $node->content['photo_story_html'] = itg_story_photo_story_html($node, $primary_cat);
      $node->content['photo_story_bottom_html'] = itg_story_photo_story_bottom_html($node);
    }
    
    if((isset($node->field_story_external_url)) && (!empty($node->field_story_external_url[LANGUAGE_NONE][0]['value']))) {
      $external_url = $node->field_story_external_url[LANGUAGE_NONE][0]['value'];
      drupal_goto($external_url);
    }
    
    // modified code external url code
    if ($view_mode != 'search_index' && ($theme == FRONT_THEME_NAME || $theme == 'amptheme') && (in_array(FRONT_USER, $user->roles) || $user->uid == 0)) {
      if (!empty($node->field_story_external_url['und'][0]['value'])) {
        drupal_goto($node->field_story_external_url['und'][0]['value']);
      }
    }

    $actual_link = SITE_PROTOCOL . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
    if (function_exists('itg_get_related_content')) {
      if(!empty($node->field_common_related_content['und'][0]['value'])) {
      $node->content['related_content'] = itg_get_related_content($node->nid);
      }
    }

    if (function_exists('itg_total_share_count')) {
      //$node->content['total_share_count'] = itg_total_share_count($actual_link);
      $node->content['total_share_count'] = itg_total_share_count($node->nid, $node->type);
    }

    if (function_exists('itg_msi_get_lock_story_status')) {
       if (in_array('developing_story', $config)) {
        $node->content['develop_story_status'] =  1; 
       }
      //$node->content['develop_story_status'] = itg_msi_get_lock_story_status($node->nid, 'developing_story');
    }

    if (function_exists('itg_get_front_activity_info')) {
      $node->content['follow_status'] = itg_get_front_activity_info($node->nid, $node->type, $user->uid, 'follow_story', $status = '');
    }

    if (function_exists('itg_get_migrated_like_count')) {
      $node->content['migrated_count'] = itg_get_migrated_like_count($node->nid);
    }

    if (function_exists('itg_common_get_latest_byline') && function_exists('itg_get_multi_byline_details')) {
       // $byline = itg_common_get_latest_byline($node->nid, '1');
        $node->content['byline_id'] = itg_get_multi_byline_details($node->nid, '1');
    }

    if (isset($node->field_story_type[LANGUAGE_NONE][0]['value']) && $node->field_story_type[LANGUAGE_NONE][0]['value'] == 'photo_story') {
      $next = itg_story_photo_story_redirect($node->nid, 'next');
      $previous = itg_story_photo_story_redirect($node->nid, 'prev');
      drupal_add_js(array('itg_story_front' => array('next' => $next, 'previous' => $previous)), 'setting');
      drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_story_front.js', array('scope' => 'footer'));
    }

    if (function_exists('itg_get_front_activity_info')) {
      $node->content['front_activity_info'] = itg_get_front_activity_info($node->nid, $node->type, $user->uid, 'read_later', $status = '');
    }

    if (function_exists('itg_custom_get_user_details')) {
      $node->content['author'] = itg_custom_get_user_details($node->uid);
    }

    if (function_exists('itg_common_get_smiley_title')) {
      if (!empty($node->field_emoji[LANGUAGE_NONE][0]['value']) || !empty($node->field_emoji_2[LANGUAGE_NONE][0]['value'])) {
       $node_smiley_array = array('field_story_short_headline_value' => $node->field_story_short_headline['und'][0]['value'],
                                  'field_emoji_position_value' => $node->field_emoji_position['und'][0]['value'],
                                  'field_emoji_2_value' => $node->field_emoji_2['und'][0]['value'],
                                  'field_emoji_value' => $node->field_emoji['und'][0]['value'],
                                  'title' => $node->title);
        $node->content['story_title'] = itg_common_get_smiley_title($node_smiley_array, 0, 255, TRUE);
      }
      else {
        $node->content['story_title'] = $node->title;
      }
    }
    
    // code for akamai read later refresh
    if (!empty(variable_get('photo_block_refresh')) && $view_mode != 'amp') {
      $fname_token = '[custom:fname]';
      $settings = array();
      $settings['story_nid'] = $node->nid;
      $settings['u_mail'] = $user->mail;
      $settings['u_name'] = token_replace($fname_token);
      drupal_add_js(array('itg_story' => array('settings' => $settings)), array('type' => 'setting'));
      drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_story_readlater_refresh.js', array('scope' => 'footer'));
    }

    // end here

    // code for amp page
    if ($view_mode == 'amp') {
      // code for photo story
      if (!empty($node->field_primary_category[LANGUAGE_NONE][0]['value'])) {
        $primary_cat = $node->field_primary_category[LANGUAGE_NONE][0]['value'];
      }
      if(!empty($node->field_photo_story) && $node->field_story_type[LANGUAGE_NONE][0]['value']== 'photo_story') {
      $node->content['amp_photo_story_html'] = itg_story_photo_amp_html($node);
      $node->content['amp_photo_story_bottom_html'] = itg_story_photo_amp_bottom_html($node);
      }
      // movie plugin
      if (!empty($node->field_story_technology['und'])) {
      $node->content['amp_movie_plugin'] = itg_story_movie_image_plugin_data($node, 'amp');
      }
      $position = $node->field_emoji_position[LANGUAGE_NONE][0]['value'];
      // left emoji value
      $left_emoji = $node->field_emoji_2[LANGUAGE_NONE][0]['value'];
      preg_match_all('/<img[^>]*>/s', $left_emoji, $leftimages);
      $left_emoji_html = itg_get_emoji_amp_html($leftimages[0]);
      // right emoji value
      $right_emoji = $node->field_emoji[LANGUAGE_NONE][0]['value'];
      preg_match_all('/<img[^>]*>/s', $right_emoji, $rightimages);
      $right_emoji_html = itg_get_emoji_amp_html($rightimages[0]);

      $node->content['amp_title'] = $left_emoji_html . $node->title . $right_emoji_html;
    }
    if ($view_mode == 'full' && ($theme == FRONT_THEME_NAME)) {
      $body_text = $node->body[LANGUAGE_NONE][0]['value'];
      $body_text = str_replace('http://indiatoday.intoday.in/embed/', 'https://www.indiatoday.in/embed/', $body_text);
      // Body Mobile Ad
      $paragraphAfter = variable_get('place_mobile_ad_after_paragraph', 2);
      //$mobile_ad_code = variable_get('mobile_body_ad_code');
      if (isset($paragraphAfter)) {
        $body_text = explode("</p>", $body_text);
        $new_body_text = '';
        for ($i = 0; $i < count($body_text); $i++) {
          if ($i == $paragraphAfter) {
            $new_body_text .= '<div class="mobile-body-ad">';
            $new_body_text .= '</div>';
          }
          $new_body_text .= $body_text[$i] . "</p>";
        }
        $node->body[LANGUAGE_NONE][0]['value'] = $new_body_text;
      }
      else {
        $node->body[LANGUAGE_NONE][0]['value'] = $body_text;
      }
    }
  }
}


/**
 * Implements hook_views_api().
 *
 * {@inheritdoc}.
 */
function itg_story_views_api() {
  return array(
    'api' => 3,
  );
}



/**
 * Function for admin setting for sponsor category.
 */
function _sponsor_category_setting() {
  $form = array();
  $form['sponsor_cat_tid'] = array(
    '#type' => 'textfield',
    '#title' => t('Sponsor Category TID'),
    '#default_value' => variable_get('sponsor_cat_tid', 1208902),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t("Enter TID for Sponsor Category"),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}


/**
 * Function return original image fid
 * @param Integer $ori_fid
 * @return string
 */ 
function itg_story_sample_image_path($ori_fid){
  $query = db_select('itg_all_orignal_image', 'ioi');
  $query->fields('ioi', array('url'));
  $query->condition('fid', $ori_fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements hook_field_attach_form().
 * {@inheritdoc}
 */
function itg_story_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $options = array('language' => field_valid_language($langcode));
  // Merge default options.
  $default_options = array(
    'default' => FALSE,
    'deleted' => FALSE,
    'language' => NULL,
  );
  $options += $default_options;
  list($a, $b, $bundle) = entity_extract_ids($entity_type, $entity);

  $instances = _field_invoke_get_instances($entity_type, $bundle, $options);
  // Iterate through the instances.
  $return = array();
  foreach ($instances as $instance) {
    $field = field_info_field_by_id($instance['field_id']);
    $field_name = $field['field_name'];
    //If we are looking at our field type and specific widget type, and we are multiple entries
    if (($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) && ($field['type'] == "field_collection") && ($field['field_name'] == 'field_story_technology')) {
      if ($field['bundles']['node'][0] == "story") {
        drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/upload.js', array('weight' => 2, 'scope' => 'footer'));
        // Check just in case the button is here, and add another #submit function
        if (isset($form[$field['field_name']]['und']['add_more'])) {
          // add a simple select list, this defaults to numb 3
          $form[$field['field_name']]['add_more_number'] = array(
            '#type' => 'select',
            '#options' => drupal_map_assoc(range(0, 20)),
            '#default_value' => 1,
            '#attributes' => array('style' => 'display:none;'),
          );
          $form[$field['field_name']]['und']['add_more']['#submit'][] = 'itg_story_field_add_more_submit';
        }
      }
    }
  }
}

/**
 * Implements hook_form_submit().
 * @global object $user
 * @param array $form
 * @param array $form_state
 */
function itg_story_field_add_more_submit($form, &$form_state) {
  global $user;
  $button = $form_state['triggering_element'];
  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];

  // Alter the number of widgets to show. items_count = 0 means 1.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  //get the number from the select
  $numbtoadd = $form[$field_name]['add_more_number']['#value'];
  if ($numbtoadd) {
    $field_state['items_count'] += $numbtoadd - 1;
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
    $form_state['rebuild'] = TRUE;
  }
  $node = drupal_rebuild_form('story_node_form', $form_state, $old_form = NULL);
  $filedir = ITG_IMAGE_FOLDER . 'story/' . date('Ym') . '/';
  if (!file_exists(file_default_scheme() . '://' . $filedir)) {
    mkdir(file_default_scheme() . '://' . $filedir, 0777, TRUE);
  }
  chmod(file_default_scheme() . '://' . $filedir, 0777, TRUE);
  $fids = array();
  foreach ($node['upload']['#value'] as $img) {
    // Save media file.
    $scheme = variable_get('file_default_scheme', 'public') . '://';
    $source = $img['tmppath'];

    $directory = $filedir;
    $destination = file_stream_wrapper_uri_normalize($scheme . $directory . $img['name']);
    $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
    global $user;
    // Create the file object.
    $uri = file_stream_wrapper_uri_normalize($destination);
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $file = new StdClass;
    $file->uid = $user->uid;
    $file->filename = basename($uri);
    $file->uri = $uri;
    $file->filemime = file_get_mimetype($uri);
    $file->filesize = @filesize($uri);
    $file->timestamp = REQUEST_TIME;
    // $file->status = FILE_STATUS_PERMANENT;
    $file->is_new = TRUE;
    $file->status = FILE_STATUS_PERMANENT;
    $fids[] = file_save($file);
    file_usage_add($file, 'file', 'itg_image_repository', $file->fid);
  }
  $key_val = 0;
  foreach ($fids as $file_id) {

    $file_ids[$key_val]['fid'] = $file_id->fid;
    $file_ids[$key_val]['filename'] = $file_id->filename;
    $key_val++;
  }
  $i = 0;
  foreach ($form_state['field']['field_story_technology']['und']['entity'] as $key => $filed_collection) {
    if (!isset($filed_collection->field_technology_sample_photo['und'])) {
      $ori_fid = itg_story_save_original_sample_image($file_ids[$i]['fid']);
      if ($ori_fid) {
        $form_state['field']['field_story_technology']['und']['entity'][$key]->field_technology_sample_photo['und'][0]['fid'] = $ori_fid;
      }
      $i++;
    }
  }
}

/**
 * function for large image url.
 * @param int $nid
 * @return string
 */
function itg_get_story_extra_large_image($nid) {
  if (!empty($nid)) {
    $query = db_select('node', 'n');
    $query->leftjoin('field_data_field_story_extra_large_image', 'sm', 'sm.entity_id = n.nid');
    $query->leftJoin('file_managed', 'fm', 'fm.fid = sm.field_story_extra_large_image_fid');
    $query->fields('fm', array('uri'));
    $query->condition('n.nid', $nid);
    $query->orderBy('n.created', 'DESC');
    $result = $query->execute();
    return $query->execute()->fetchField();
  }
}
