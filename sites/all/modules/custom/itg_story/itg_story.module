<?php

/**
 * @file
 * ITG Story module.
 *
 * Provides customizations and functions for Story.
 *
 */
module_load_include('inc', 'itg_story', 'includes/itg_story.helper');
module_load_include('inc', 'itg_story', 'includes/itg_story.byline');

/**
 * Implements hook_menu().
 * @return array
 */
function itg_story_menu() {
  $items['reporter-details-ajax'] = array(
    'page callback' => 'itg_story_reporter_details',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['content-title-list/%/autocomplete'] = array(
    'page callback' => 'itg_story_get_content_title',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['content-workbench-title-list/%/%/autocomplete'] = array(
    'page callback' => 'itg_story_get_workbench_title',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['content-nid-list/%/autocomplete'] = array(
    'page callback' => 'itg_story_get_content_nid',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['supplement-list-ajax'] = array(
    'page callback' => 'itg_story_supplement_details',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['issue-date-check-ajax'] = array(
    'page callback' => 'itg_story_issue_date_checked',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['associate-photo-video-content/%'] = array(
    'page callback' => 'associate_photo_video_content',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.inc',
  );
  $items['breaking-news-ajax'] = array(
    'page callback' => 'itg_story_create_breaking_news',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_story.helper.inc',
  );

  $items['byline/autocomplete'] = array(
    'page callback' => 'itg_story_byline',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['multibyline-save'] = array(
    'page callback' => 'itg_story_byline_save',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/administration/sponsor_category'] = array(
    'title' => 'Sponsor Category Setting',
    'description' => 'Sponsor Category Setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_sponsor_category_setting'),
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['itg-story-load-follow-story'] = array(
    'title' => 'Akamai load follow story',
    'description' => 'Akamai Load follow story',
    'page callback' => 'itg_story_load_follow_story',
    'access arguments' => array('access content'),
    'file' => 'includes/itg_story.helper.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['byline/%ctools_js/add'] = array(
    'title' => 'Add Byline',
    'page callback' => 'itg_story_add_byline_popup',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission.
 */
function itg_story_permission() {
  return array(
    'access itg story' => array(
      'title' => t('story permission'),
      'description' => t('story permission.'),
    ),
    'access layout delete' => array(
      'title' => t('layout delete permission'),
      'description' => t('layout delete permission.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 * @return array
 */
function itg_story_block_info() {
  $blocks['story_tab_form_block'] = array(
    'info' => t('Story Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_story_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'story_tab_form_block':
      $block['content'] = theme('story_tab_form_display_block', array('data' => ''));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_story_theme($existing, $type, $theme, $path) {
  $themes = array(
    'story_tab_form_display_block' => array(
      'template' => 'story-form-tab-template',
      'path' => drupal_get_path('module', 'itg_story') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'story_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'story-node-form',
      'path' => drupal_get_path('module', 'itg_story') . '/templates',
      'render element' => 'form',
    ),
    'itg_story_load_follow_story' => array(
      'template' => 'itg-story-load-follow-story',
      'path' => drupal_get_path('module', 'itg_story') . '/templates',
      'variables' => array('data' => NULL),
    ),
  );

  return $themes;
}

/**
 * Implements hook_ckeditor_plugin_alter().
 * {@inheritdoc}
 */
function itg_story_ckeditor_plugin_alter(&$plugins) {
  $arg = arg();
  if (($arg[0] == 'node' && $arg[1] == 'add' && $arg[2] != 'story') || ($arg[0] == 'personalization' && $arg[1] == 'my-content')) {
    unset($plugins['factoids']);
    unset($plugins['expertchunk']);
  }
}

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_story_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'story_node_form':
      global $base_url, $user;

      // code for body field config
      $form['body']['#states'] = array(
        'required' => array(
          ':input[name="field_story_type[und]"]' => array('value' => 'other_story'),
        )
      );


      // checked comment box by default
      if (!isset($form['#node']->nid)) {

        if (isset($form['field_story_configurations'][LANGUAGE_NONE]['#default_value']) && count($form['field_story_configurations'][LANGUAGE_NONE]['#default_value'])) {
          $values = array_merge($form['field_story_configurations'][LANGUAGE_NONE]['#default_value'], array('commentbox'));
        }
        else {
          $values = array('commentbox');
        }
        $form['field_story_configurations'][LANGUAGE_NONE]['#default_value'] = $values;
      }

      if ($user->uid != 1) {
        unset($form['field_story_long_head_line']);
        unset($form['field_story_select_templates']['und']['#options']['quote']);
        unset($form['field_story_configurations']['und']['#options']['comment']);
      }
      if ($user->uid) {
        $form['body']['und'][0]['#format'] = 'icon_format';
      }

      // code for multiple byline
      if (empty($form['#node']->nid)) {
        if (!empty($_SESSION['unique'])) {
          $reporter_id = $_SESSION['unique'];
        }
        else {
          $unique = 'byline_' . uniqid();
          $_SESSION['unique'] = $unique;
          $reporter_id = $_SESSION['unique'];
        }

        $form['field_reporter_unique_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $reporter_id;
      }
      if ($user->uid != 1) {
        $form['field_reporter_publish_id']['#attributes']['class'][] = 'element-hidden';
        $form['field_reporter_unique_id']['#attributes']['class'][] = 'element-hidden';
      }
      $form['field_story_reporter']['und'][0]['target_id']['#autocomplete_path'] = 'byline/autocomplete';

      if (!empty($form['#node']->field_story_source_id[LANGUAGE_NONE][0]['value'])) {
        $source_id = $form['#node']->field_story_source_id[LANGUAGE_NONE][0]['value'];
      }

      if (!empty($form['#node']->field_story_source_type[LANGUAGE_NONE][0]['value'])) {
        $source_type = trim($form['#node']->field_story_source_type[LANGUAGE_NONE][0]['value']);
      }

      $breaking_check = '';

      if (empty($source_id) && empty($source_type)) {
        $breaking_check = '<input type="checkbox" title="breaking_text" id="breaking_text"><span> Make it breaking news</span>';
      }

      $form['title']['#suffix'] = '<div class="breaking_class">' . $breaking_check . '</div>';
      $form['field_story_magazine_story_issue'][LANGUAGE_NONE]['#title'] = '';
      $form['field_story_syndication'][LANGUAGE_NONE]['#options'] = array('Yes' => $form['field_story_syndication'][LANGUAGE_NONE]['#title']);
      $form['field_story_syndication'][LANGUAGE_NONE]['#title'] = "";
      $form['field_story_syndications_photo'][LANGUAGE_NONE]['#options'] = array('Yes' => $form['field_story_syndications_photo'][LANGUAGE_NONE]['#title']);
      $form['field_story_syndications_photo'][LANGUAGE_NONE]['#title'] = "";
      unset($form['actions']['preview_changes']);
      unset($form['field_story_templates'][LANGUAGE_NONE]['#options']['_none']);
      unset($form['field_story_select_templates'][LANGUAGE_NONE]['#options']['_none']);
      $form['#after_build'][] = 'itg_story_after_build';
      $form['actions']['submit']['#submit'][] = 'itg_story_form_custom_callback';
      drupal_add_js(array('itg_common' => array('base_url' => $base_url)), 'setting');
      drupal_add_js(drupal_get_path('module', 'itg_common') . '/js/itg_common.emoji.js', array('scope' => 'footer'));
      $form['field_emoji_2']['und'][0]['#format'] = 'emoji';
      $form['field_emoji']['und'][0]['#format'] = 'emoji';
      // hide remove button of field collection if there is only single instance of it within the form
      if (isset($form['field_photo_story']['und']['#max_delta']) && isset($form['your_field']['und']['#max_delta']) && $form['your_field']['und']['#max_delta'] == 0) {
        $form['field_photo_story']['und'][0]['remove_button']['#prefix'] = '<div style="display:none;"';
        $form['field_photo_story']['und'][0]['remove_button']['#suffix'] = '</div>';
      }
      //Byline popup
      // Load the modal library and add the modal javascript.
      ctools_include('modal');
      ctools_modal_add_js();
      break;
    case 'reporter_node_form' :
      if ($form_state['reporter_popup_form']) {
        $form['field_reporter_twitter_handle']['#access'] = FALSE;
        $form['field_story_expert_name']['#access'] = FALSE;
        $form['field_story_new_title']['#access'] = FALSE;
        $form['field_constituancy']['#access'] = FALSE;
        $form['field_party_name']['#access'] = FALSE;
        $form['field_reporter_movie_name']['#access'] = FALSE;
        $form['field_story_category']['#access'] = FALSE;
        $form['field_story_extra_large_image']['#access'] = FALSE;
        $form['body']['#access'] = FALSE;
        $form['field_reporter_facebook_id']['#access'] = FALSE;
        $form['field_career_graph_cast']['#access'] = FALSE;
        $form['field_old_content_source_id']['#access'] = FALSE;
        $form['category_holder']['#access'] = FALSE;
        $form['path_alias']['#access'] = FALSE;
        $form['actions']['preview']['#access'] = FALSE;
        $form['actions']['cancel']['#access'] = FALSE;
      }
      break;
  }

  //$form['field_story_category']['und']['#config']['module'] = 'itg_category_manager';
}

/**
 * Custom submit callback for redirecting story form.
 * {@inheritdoc}
 */
function itg_story_form_custom_callback($form, &$form_state) {
  if ($form_state['node']->status == '1') {
    if (is_array($form['#node']->field_story_assign_to_widget[LANGUAGE_NONE])) {
      $previous_story_assign = $form['#node']->field_story_assign_to_widget[LANGUAGE_NONE];
    }
    else {
      $previous_story_assign = '';
    }
    $story_widget = $form_state['input']['field_story_assign_to_widget'][LANGUAGE_NONE];
    $primary_category = $form_state['input']['itg_primary_category'];
    // for story assign to widget
    if (function_exists('itg_story_assign_to_widget')) {
      if(is_array($story_widget) && count($story_widget) > 0) {
        itg_story_assign_to_widget($form_state['values']['nid'], $story_widget, $primary_category, $previous_story_assign, 'story');
      }
    }
  }

  if ($form_state['input']['op'] == 'Apply') {
    if ($form_state['node']->status == '1') {
      $redirect_path = 'node/' . $form_state['values']['nid'] . '/edit?destination=' . $_GET['destination'];
      $_GET['destination'] = $redirect_path;
      drupal_goto('node/' . $form_state['values']['nid'] . '/edit');
    }
  }
  $workbench_current_state = $form_state['node']->workbench_moderation_state_new;
  $node_type = ucfirst($form_state['node']->type);
  $node_type = str_replace("_", " ", $node_type);
  $title = ucfirst($form_state['node']->title);
  $clone_id = $_GET['clone_id'];
  // code insert image in custom table
 
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }

  $request_destination = $_REQUEST['destination'];
  $redirect_path = $_REQUEST['destination'];

  if ($request_destination == 'published-story') {
    $redirect_path .= "?field_story_syndication_value_op=all";
    $_GET['destination'] = $redirect_path;
  }

  // redirection for clone story
  if ($request_destination == 'clone-story' && !empty($clone_id)) {
    if (arg(1) == 'add') {
      if ($workbench_current_state == 'published') {
        $op = 'cloned and published.';
        drupal_set_message(t($node_type . ' <b>' . $title . '</b> has been successfully ' . $op . ''));
      }
      else {
        $op = 'created';
        drupal_set_message(t($node_type . ' <b>' . $title . '</b> has been ' . $op . ' successfully and submitted for further review and approval.'));
      }
      $_GET['destination'] = 'published-story?field_story_syndication_value_op=all';
    }
  }

  //if ($form_state['input']['op'] != 'Save as Draft') {
  if (function_exists('itg_custom_message')) {
    itg_custom_message($node_type, $workbench_current_state, arg(1), $title, $redirect_path, $action);
  }
  //}
}

/**
 * function for story assign to widget
 * @param int $nid
 * @param array $story_widget
 * @param int $cat_id
 */
function itg_story_assign_to_widget($nid, array $story_widget, $cat_id, $previous_story_assign, $content_type) {
  if (!empty($story_widget)) {
    foreach ($story_widget as $widget_val) {
      $result[$widget_val] = $widget_val;
      $result_exist = itg_story_widget_data_exist($nid, 'top_stories_widget');
      itg_watchdog('assign_widget_val', $widget_val);
      itg_watchdog('assign_result_exist', $result_exist);
      // for top stories
      if ($widget_val == 'top_stories') {
        $weight_data = itg_story_widget_max_value('top_stories_widget');
        if (empty($result_exist)) {
          try {
            $inserted_data = db_insert('itg_widget_order')->fields([
              'nid' => $nid,
              'cat_id' => $cat_id,
              'content_type' => $content_type,
              'widget' => 'top_stories_widget',
              'weight' => --$weight_data,
              'state' => 0,
            ])->execute();
          }
          catch (PDOException $e) {
            drupal_set_message(t('Error: %message', ['%message' => $e->getMessage()]), 'error');
          }
        }
      }
      // for big story
      if ($widget_val == 'big_story') {
        $related_nodes_json = '[]';
        $widget = 'big_story_format_widget';
        $result_exist = itg_story_widget_data_exist($nid, 'big_story_format_widget');
        if (empty($result_exist)) {
          // Remove first livetv.
          try {
            db_delete('itg_widget_order')
              ->condition('widget', $widget)
              ->execute();
          }
          catch (Exception $ex) {
            drupal_set_message($ex->getMessage());
          }

          try {
            $query = db_insert('itg_widget_order')
              ->fields(array(
                'nid' => $nid,
                'widget' => $widget,
                'content_type' => $content_type,
                'cat_id' => 0,
                'weight' => 0,
                'extra' => $related_nodes_json,
              ))
              ->execute();
          }
          catch (Exception $ex) {
            drupal_set_message($ex->getMessage());
          }
        }
      }
      // for feature story
      if ($widget_val == 'featured_story') {
        $widget = 'home_page_feature_widget';
        $result_exist = itg_story_widget_data_exist($nid, 'home_page_feature_widget');
        $weight_data = itg_story_widget_max_value('home_page_feature_widget');
        if (empty($result_exist)) {
          try {
            $inserted_data = db_insert('itg_widget_order')->fields([
              'nid' => $nid,
              'cat_id' => 0,
              'content_type' => $content_type,
              'widget' => $widget,
              'weight' => --$weight_data,
              'state' => 0,
            ])->execute();
          }
          catch (PDOException $e) {
            drupal_set_message(t('Error: %message', ['%message' => $e->getMessage()]), 'error');
          }
        }
      }
      // for feature story
      if ($widget_val == 'dont_miss') {
        $widget = 'dont_miss_content_widget';
        $result_exist = itg_story_widget_data_exist($nid, 'dont_miss_content_widget');
        $weight_data = itg_story_widget_max_value('dont_miss_content_widget');
        if (empty($result_exist)) {
          try {
            $inserted_data = db_insert('itg_widget_order')->fields([
              'nid' => $nid,
              'cat_id' => 0,
              'content_type' => $content_type,
              'widget' => $widget,
              'weight' => --$weight_data,
              'state' => 0,
            ])->execute();
          }
          catch (PDOException $e) {
            drupal_set_message(t('Error: %message', ['%message' => $e->getMessage()]), 'error');
          }
        }
      }
    }
    foreach ($previous_story_assign as $row) {
      if ($row['value'] != $result[$row['value']]) {
        if ($row['value'] == 'top_stories') {
          $widget_value = 'top_stories_widget';
        }
        elseif ($row['value'] == 'featured_story') {
          $widget_value = 'home_page_feature_widget';
        }
        elseif ($row['value'] == 'big_story') {
          $widget_value = 'big_story_format_widget';
        }
        elseif ($row['value'] == 'dont_miss') {
          $widget_value = 'dont_miss_content_widget';
        }
        if ($widget_value) {
          try {
            db_delete('itg_widget_order')
              ->condition('widget', $widget_value)
              ->condition('nid', $nid)
              ->execute();
          }
          catch (Exception $ex) {
            drupal_set_message($ex->getMessage());
          }
        }
      }
    }
  }
}

/**
 * check story widget data exist
 * @param int $nid
 * @param int $cat_id
 * @param string $widget_type
 * @return mixed
 */
function itg_story_widget_data_exist($nid, $widget_type) {
  $query = db_select('itg_widget_order', 'w');
  $query->fields('w', array('nid'));
  $query->condition('nid', $nid, '=');
  $query->condition('widget', $widget_type, '=');
  $result = $query->execute()->fetchAssoc();
  return $result;
}

/**
 * get min value from widget
 * @param string $widget_type
 * @return int
 */
function itg_story_widget_max_value($widget_type) {
  $max_query = db_select('itg_widget_order');
  $max_query->addExpression('MIN(weight)');
  $max_query->condition('widget', $widget_type);
  $max_result = $max_query->execute()->fetchField();
  return isset($max_result) ? $max_result : 1;
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_story_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  $soruce_type_filter_display_views = array(
    'views-exposed-form-strory-menegment-page',
    'views-exposed-form-strory-menegment-page-1',
    'views-exposed-form-strory-menegment-page-2',
    'views-exposed-form-strory-menegment-page-7',
    'views-exposed-form-strory-menegment-page-4',
    'views-exposed-form-strory-menegment-page-5',
    'views-exposed-form-videogallery-management-page-1',
    'views-exposed-form-videogallery-management-page',
    'views-exposed-form-videogallery-management-page-2',
    'views-exposed-form-videogallery-management-page-5',
    'views-exposed-form-photo-gallery-management-page-1',
    'views-exposed-form-photo-gallery-management-page',
    'views-exposed-form-photo-gallery-management-page-2',
    'views-exposed-form-photo-gallery-management-page-5'
  );



  if ($form['#id'] == 'views-exposed-form-strory-menegment-page-10' || $form['#id'] == 'views-exposed-form-strory-menegment-page' || $form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-3' || $form['#id'] == 'views-exposed-form-strory-menegment-page-8' || $form['#id'] == 'views-exposed-form-strory-menegment-page-6' || $form['#id'] == 'views-exposed-form-strory-menegment-page-5' || $form['#id'] == 'views-exposed-form-strory-menegment-page-2' || $form['#id'] == 'views-exposed-form-strory-menegment-page-9' || $form['#id'] == 'views-exposed-form-strory-menegment-page-7' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12' || $form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-4') {
    if (arg(0) != 'ugc-published-story') {
      $form['title']['#autocomplete_path'] = 'content-workbench-title-list/story/' . arg(0) . '/autocomplete';
    }
    else {
      $form['title']['#autocomplete_path'] = 'content-title-list/story/autocomplete';
    }

    $form['title']['#attributes'] = array('placeholder' => t('Title'));
    $form['nid']['#autocomplete_path'] = 'content-nid-list/story/autocomplete';
    $form['nid']['#attributes'] = array('placeholder' => t('Story ID'));
  }
  if ($form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12') {
    $form['field_story_configurations_value']['#options'] = array('All' => '- All -', 'lock_story' => 'Locked Story');
  }

  if (in_array($form['#id'], $soruce_type_filter_display_views)) {
    if ($form['#id'] == 'views-exposed-form-videogallery-management-page-1' || $form['#id'] == 'views-exposed-form-videogallery-management-page' || $form['#id'] == 'views-exposed-form-videogallery-management-page-2' || $form['#id'] == 'views-exposed-form-videogallery-management-page-5') {
      $cn_type = 'videogallery';
    }
    elseif ($form['#id'] == 'views-exposed-form-photo-gallery-management-page-1' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-2' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-5') {
      $cn_type = 'photogallery';
    }
    else {
      $cn_type = 'story';
    }
    $option = array("" => '-Any-', $cn_type => $cn_type);
    $query = db_select('field_data_field_story_source_type', 'st');
    $query->leftJoin('node', 'n', 'n.nid=st.entity_id');
    $query->condition('n.type', $cn_type)->distinct()
        ->fields('st', array('field_story_source_type_value'));
    $result = $query->execute()->fetchAll();
    foreach ($result as $option_values) {
      if ($option_values->field_story_source_type_value == 'videogallery') {
        $option[$option_values->field_story_source_type_value] = 'Video';
      }
      else {
        $option[$option_values->field_story_source_type_value] = $option_values->field_story_source_type_value;
      }
    }

    $source_type = "<select class='form-item form-type-select' id='fake-soruce-type'>";
    foreach ($option as $option_value => $option_element) {
      if (!empty($_GET['field_story_source_type_value']) && $_GET['field_story_source_type_value'] == $option_value) {
        $select = "selected";
      }
      else {
        $select = "";
      }
      $source_type .= "<option value=\"$option_value\" $select>$option_element</option>";
    }
    $source_type .= "</select>";
    $form['field_story_source_type_value']['#suffix'] = $source_type;
    drupal_add_css("input#edit-field-story-source-type-value {display:none}", "inline");
  }
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_story_node_validate($node, $form, &$form_state) {

  // Code for redirection url validation
  if ($node->type == 'story') {
    // code to copy long headline to short headline
    $form_state['values']['field_story_short_headline'][LANGUAGE_NONE][0]['value'] = $form_state['input']['field_story_short_headline'][LANGUAGE_NONE][0]['value'];
    // end here
    $issue_based = $node->field_story_magazine_story_issue[LANGUAGE_NONE][0]['value'];
    $magazine_kicker = $node->field_story_magazine_headline[LANGUAGE_NONE][0]['value'];
    $magazine = $node->field_story_select_magazine[LANGUAGE_NONE][0]['target_id'];

    // code to validation magazine field when issue based story is checked
    if (!empty($issue_based) && empty($magazine)) {
      form_set_error('field_story_select_magazine', t("Please select Magazine"));
    }

    // code to check if issue based is check fill magazine kicker text
    if (!empty($issue_based) && empty($magazine_kicker)) {
      form_set_error('field_story_magazine_headline', t("Magazine kicker text is required"));
    }
    $external_url = $node->field_story_external_url[LANGUAGE_NONE][0]['value'];
    if (!empty($external_url) && filter_var($external_url, FILTER_VALIDATE_URL) === FALSE) {
      form_set_error('field_story_external_url', t("$external_url is not a valid URL"));
    }

    $redirection_url = $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'];
    if (!empty($redirection_url) && !preg_match("~^(?:f|ht)tps?://~i", $redirection_url)) {
      $redirection_url = "http://" . $redirection_url;
    }
    if (!empty($redirection_url) && filter_var($redirection_url, FILTER_VALIDATE_URL) === FALSE) {
      form_set_error('field_story_redirection_url_titl', t("$redirection_url is not a valid URL"));
    }

    // code for check expiry date is greater then schedule date
    $schedule_date = $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'];
    $schedule_date = strtotime($schedule_date);
    $schedule_date = date('Y-m-d', $schedule_date);
    $expiry_date = $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'];

    if (isset($expiry_date) && $schedule_date > $expiry_date) {
      form_set_error('field_story_expiry_date', t("Expiry date should be greater then schedule start date"));
    }

    // Code for issue exit or not.
    if (!empty($node->field_story_issue_date[LANGUAGE_NONE][0]['value'])) {
      $issue = itg_story_checked_issue($node->field_story_issue_date[LANGUAGE_NONE][0]['value']);
      if (!$issue) {
        form_set_error('edit-field-story-issue-date-und-0-value-datepicker-popup-0', t("Issue does not exist."));
      }
    }

    // Code for category validation.
    if (empty($node->field_story_category[LANGUAGE_NONE][0]['tid'])) {
      form_set_error('edit-field-story-category-und-hierarchical-select-selects-0', t("Section field is required."));
    }

    if ($node->field_story_type[LANGUAGE_NONE][0]['value'] == 'other_story' && empty($node->body[LANGUAGE_NONE][0]['value'])) {
      form_set_error('body', t("Description field is required."));
    }
  }
}

/**
 * After build for story form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_story_after_build($form, &$form_state) {

  global $user, $base_url;

  // apply button for editor and siteadmin role
  if (array_key_exists(EDITOR, $user->roles) || array_key_exists(SITE_ADMIN, $user->roles) || array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) || array_key_exists(COPY_EDITOR, $user->roles) || array_key_exists(INTERN, $user->roles)) {
    if (!empty($form['nid']['#value']) && arg(2) == 'edit' && $form['#node']->type == 'story' && $form['#node']->status == '1') {
      $form['actions']['itg_custom_apply_button'] = array(
        '#type' => 'submit',
        '#value' => t('Apply'),
        '#id' => 'btn-apply',
        '#submit' => array('node_form_submit', 'itg_story_form_custom_callback'),
        '#weight' => -8,
      );
    }
  }

  if (empty($form_state['input']['op'])) {
    unset($_SESSION['unique']);
  }
  // code for multiple byline
  if (empty($form['#node']->nid)) {
    $reporter_id = !empty($form_state['input']['field_reporter_unique_id'][LANGUAGE_NONE][0]['value']) ? $form_state['input']['field_reporter_unique_id'][LANGUAGE_NONE][0]['value'] : '';
  }
  else {
    $reporter_id = $form['#node']->field_reporter_unique_id[LANGUAGE_NONE][0]['value'];
  }
  $add_byline_link = l('Add Byline', 'byline/nojs/add', array( 'attributes' => array('class' => array( 'ctools-use-modal', 'add-byline-link' )) ));
  $form['field_story_reporter']['#prefix'] = '<div class="multi_reporter">';
  $form['field_story_reporter']['#suffix'] = '<a class="multi-byline" data-tag="save">' . t('Add') . '</a>'.$add_byline_link.'</div><div class="byline-list"><ul class="byline-ul">' . itg_byline_info($reporter_id) . '</ul><span class="add-more save-byline">' . t('Save') . '</span></div><span class="success-byline"></span>';

  $form['original_image_fids'] = array(
    '#type' => 'hidden',
    '#value' => !empty($form_state['input']['original_image_fids']) ? $form_state['input']['original_image_fids'] : '',
    '#attributes' => array('id' => 'original_image_fids', 'name' => 'original_image_fids'),
  );

  unset($form['field_story_associate_lead'][LANGUAGE_NONE]['_none']);

  $form['field_story_select_magazine']['und']['#title'] = t('Select magazine') . '<span class="form-required" title="This field is required."> *</span>';
  $form['field_story_magazine_headline']['und']['#title'] = t('Magazine kicker') . '<span class="form-required" title="This field is required."> *</span>';

  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['storyid'] = isset($form['#node']->nid) ? $form['#node']->nid : 0;

  drupal_add_js(array('itg_story' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_story.js', array('weight' => 1, 'scope' => 'footer'));

  // ADD js for multiple byline
  drupal_add_js(array('itg_byline' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_byline.js', array('scope' => 'footer'));
  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_story_form_story_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // condition for first blank reporter field on edit
  if ($form_id == 'story_node_form' && !empty($form['nid']['#value'])) {
    $field_name = 'field_story_reporter';
    if (empty($form[$field_name])) {
      return;
    }
    $field_language = $form[$field_name]['#language'];
    $max_delta = $form[$field_name][$field_language]['#max_delta'];
    if ($max_delta <= 0) {
      drupal_add_js('jQuery(document).ready(function() {
            jQuery("#edit-field-story-reporter-und-0-remove-button").hide();              
          });', array('type' => 'inline', 'scope' => 'footer'));
    }
  }
  $magazine_field = 'field_story_select_magazine';
  $supplement_field = 'field_story_select_supplement';
  $tv_date_field = 'field_poll_start_date';
  $tv_time_field = 'field_story_tv_time';
  if (function_exists('itg_common_dropdown_mazine')) {
    $opt = itg_common_dropdown_mazine();
    $form[$magazine_field]['#options'] = $opt;
  }

  // set magazine on edit and trigger action
  if (isset($form[$magazine_field][LANGUAGE_NONE]['#default_value'][0]) && !isset($form_state['triggering_element'])) {
    $magazine_id = $form[$magazine_field][LANGUAGE_NONE]['#default_value'][0];
  }
  else {
    $magazine_id = !empty($form_state['input'][$magazine_field][LANGUAGE_NONE]) ? $form_state['input'][$magazine_field][LANGUAGE_NONE] : '';
  }

  if (isset($form['#node']->field_poll_start_date[LANGUAGE_NONE][0]['value']) && !isset($form_state['triggering_element'])) {
    $date_val = $form['#node']->field_poll_start_date[LANGUAGE_NONE][0]['value'];
  }
  else {
    $date_val = !empty($form_state['input'][$tv_date_field][LANGUAGE_NONE][0]['value']['date']) ? $form_state['input'][$tv_date_field][LANGUAGE_NONE][0]['value']['date'] : '';
  }

  // add ajax on magazine field
  $form[$magazine_field][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'itg_story_magazine_ajax_callback',
    'wrapper' => $supplement_field . '_replace',
  );

  // add ajax on tv date field
  $form[$tv_date_field][LANGUAGE_NONE][0]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'itg_tv_time_ajax_callback',
    'wrapper' => $tv_time_field . '_replace',
  );

  // Setup supplement select
  $form[$supplement_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $supplement_field . '_replace">';
  $form[$supplement_field][LANGUAGE_NONE]['#suffix'] = '</div>';

  if (function_exists('itg_common_dropdown_supplement')) {
    if(!empty($magazine_id)) {
    $form[$supplement_field][LANGUAGE_NONE]['#options'] = itg_common_dropdown_supplement($magazine_id);
    }
  }

  // Setup tv time field select
  $form[$tv_time_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $tv_time_field . '_replace">';
  $form[$tv_time_field][LANGUAGE_NONE]['#suffix'] = '</div>';

  if (function_exists('itg_common_tv_time')) {
    $form[$tv_time_field][LANGUAGE_NONE]['#options'] = itg_common_tv_time($date_val);
    $form[$tv_time_field][LANGUAGE_NONE]['#default_value'] = !empty($form['#node']->field_story_tv_time[LANGUAGE_NONE][0]['value']) ? $form['#node']->field_story_tv_time[LANGUAGE_NONE][0]['value'] : '';
  }

  // code for story expiry date field show and hide
  $form['field_story_expiry_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_expires[und][Yes]"]' => array('checked' => TRUE),
    )
  );

  // code for tv date field show and hide
  $form['field_poll_start_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_configurations[und][tv]"]' => array('checked' => TRUE),
    )
  );

  // code for Time field show and hide
  $form['field_story_tv_time']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_configurations[und][tv]"]' => array('checked' => TRUE),
    )
  );

  // code for Comment Question field hide and show
  $form['field_story_comment_question']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_configurations[und][commentbox]"]' => array('checked' => TRUE),
    )
  );

  // code for featured field hide and show
  $form['field_story_featured_name']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_configurations[und][set_as_featured]"]' => array('checked' => TRUE),
    )
  );

  // code for magazine field hide and show
  $form['field_story_select_magazine']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
    )
  );

  // code for supplement field hide and show
  $form['field_story_select_supplement']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
    ),
  );

  // code for issue date field hide and show
  $form['field_story_issue_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
    )
  );

  // code for Magazine kicker * field show and hide
  $form['field_story_magazine_headline']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
    ),
    'required' => array(
      ':input[name="field_story_magazine_story_issue[und][magazine_issue_story]"]' => array('checked' => TRUE),
    )
  );

  // facebook instant Article
  $form['field_facebook_instant_audio_url']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_facebook_audio_position']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_story_big_image']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_animated_image_position']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_facebook_animated_image']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_facebook_map_position']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_map_embed_code']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_social_embed_code']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_social_embed_code_position']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  $form['field_facebook_gallery_associate']['#states'] = array(
    'visible' => array(
      ':input[name="field_story_social_media_integ[und][facebook_instant_article]"]' => array('checked' => TRUE),
    )
  );
  // Set form default value for social media fields

  $form['field_story_posted_by_twitter']['#default_value'] = $user->mail;
  $form['field_story_posted_by_instagram']['#default_value'] = $user->mail;
}

/**
 * Ajax callback for Event roles dropdown
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_story_magazine_ajax_callback($form, $form_state) {
  return $form['field_story_select_supplement'];
}

/**
 * Ajax callback for tv time dropdown
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_tv_time_ajax_callback($form, $form_state) {
  return $form['field_story_tv_time'];
}

/**
 * Implements hook_library_alter().
 *
 * Attach our own JS library whenever drupal.autocomplete is loaded.
 *
 * {@inheritdoc}
 */
function itg_story_library_alter(&$libraries, $module) {
  $limit = 2;

  // Only inject our setting and js override if we've been configured.
  if (!empty($limit) && $module == 'system' && !empty($libraries['drupal.autocomplete'])) {
    drupal_add_js(array('autocomplete_limit' => array('limit' => $limit)), 'setting');

    $library = drupal_get_path('module', 'itg_story') . '/js/autocomplete.limit.js';
    $libraries['drupal.autocomplete']['js'][$library] = array('group' => JS_DEFAULT);
  }
}

/**
 * This functio use for get image info from custom table.
 * @param int $fid
 * @return array $result.
 */
function itg_story_get_image_info($fid) {
  if(!empty($fid)) {
  $query = db_select('image_info', 'ii');
  $query->condition('ii.fid', $fid)
      ->fields('ii');
  return $result = $query->execute()->fetchAll();
  }
}

/**
 * Get video with player
 * @param int $nid
 * @return string $content
 */
/*function itg_get_video_display($nid) {
  $node = node_load($nid);
  if (module_exists('itg_videogallery')) {
    $vid = itg_videogallery_get_videoid($row['fid']);
  }
  $content = '<iframe frameborder="0"
            src="https://www.dailymotion.com/embed/video/' . $vid . '?autoplay=0&mute=1&ui-start-screen-info"
            allowfullscreen></iframe>';
  return $content;
}*/

/**
 * {@inheritdoc}
 */
function itg_story_node_presave($node) {
  //set custom path alias  
  if (itg_workflow_stop_node_update_batch_for_widgets()) {
    return;
  }
  $type = $node->type;
  if ($type == 'story' && !empty($node->field_story_magazine_story_issue['und'][0]['value'])) {
    if ($node->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
      $node->field_story_source_type['und'][0]['value'] = 'Magazine Story';
    }
  }

  if ($type == 'story' && empty($node->field_story_source_type[LANGUAGE_NONE][0]['value'])) {
    $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'story';
  }

  if ($type == 'story') {
    $redirection_url = $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'];
    if (!empty($redirection_url) && !preg_match("~^(?:f|ht)tps?://~i", $redirection_url)) {
      $node->field_story_redirection_url_titl[LANGUAGE_NONE][0]['value'] = "http://" . $redirection_url;
    }
    if (empty($node->field_reporter_publish_id[LANGUAGE_NONE][0]['value'])) {
      if (function_exists('itg_get_byline_row')) {
        if (!empty($node->field_reporter_unique_id[LANGUAGE_NONE])) {
          $publish_id = itg_get_byline_row($node->field_reporter_unique_id[LANGUAGE_NONE][0]['value']);
          $node->field_reporter_publish_id[LANGUAGE_NONE][0]['value'] = $publish_id;
        }
      }
    }

    // Prevent expiry date to save if expiry checkbox is unchecked

    if (empty($node->field_story_expires[LANGUAGE_NONE][0]['value'])) {
      unset($node->field_story_expiry_date);
    }
  }
}

/**
 * {@inheritdoc}
 */
function itg_story_node_view($node, $view_mode, $langcode) {

  if ($node->type == 'story' && $view_mode != 'search_index') {
    global $user, $theme;
    // for lock story
    if ($view_mode != 'search_index' && ($theme == FRONT_THEME_NAME || $theme == 'amptheme') && (in_array(FRONT_USER, $user->roles) || $user->uid == 0)) {
      $config = array();
      if (!empty($node->field_story_configurations['und'][0]['value'])) {
        foreach ($node->field_story_configurations['und'] as $value) {
          $config[] = $value['value'];
        }
      }
      if (in_array('lock_story', $config)) {
        drupal_goto('http://subscriptions.intoday.in/subscriptions/itoday/ite_offer_mailer.jsp?source=ITHomepage');
      }
    }
    
    if (!empty($node->field_primary_category[LANGUAGE_NONE][0]['value'])) {
      $primary_cat = $node->field_primary_category[LANGUAGE_NONE][0]['value'];
    }
    
    if (!empty($node->field_story_technology['und'])) {
    $node->content['movie_plugin'] = itg_story_movie_image_plugin_data($node);
    }
    
    if(!empty($node->field_photo_story) && $node->field_story_type[LANGUAGE_NONE][0]['value']== 'photo_story') {
    $node->content['photo_story_html'] = itg_story_photo_story_html($node, $primary_cat);
    $node->content['photo_story_bottom_html'] = itg_story_photo_story_bottom_html($node);
    }
    
    /*if ($external_url = _is_external_url_story_article($node->nid)) {
      drupal_goto($external_url);
    }*/
    
    // modified code external url code
    if ($view_mode != 'search_index' && ($theme == FRONT_THEME_NAME || $theme == 'amptheme') && (in_array(FRONT_USER, $user->roles) || $user->uid == 0)) {
      if (!empty($node->field_story_external_url['und'][0]['value'])) {
        drupal_goto($node->field_story_external_url['und'][0]['value']);
      }
    }

    $actual_link = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
    if (function_exists('itg_get_related_content')) {
      if(!empty($node->field_common_related_content['und'][0]['value'])) {
      $node->content['related_content'] = itg_get_related_content($node->nid);
      }
    }

    if (function_exists('itg_total_share_count')) {
      //$node->content['total_share_count'] = itg_total_share_count($actual_link);
      $node->content['total_share_count'] = itg_total_share_count($node->nid, $node->type);
    }

    if (function_exists('itg_msi_get_lock_story_status')) {
       if (in_array('developing_story', $config)) {
       $node->content['develop_story_status'] =  1; 
       }
      //$node->content['develop_story_status'] = itg_msi_get_lock_story_status($node->nid, 'developing_story');
    }

    if (function_exists('itg_get_front_activity_info')) {
      $node->content['follow_status'] = itg_get_front_activity_info($node->nid, $node->type, $user->uid, 'follow_story', $status = '');
    }

    if (function_exists('itg_get_migrated_like_count')) {
      $node->content['migrated_count'] = itg_get_migrated_like_count($node->nid);
    }

    if (function_exists('itg_common_get_latest_byline')) {
      $node->content['byline_id'] = itg_common_get_latest_byline($node->nid, '1');
    }

    if (isset($node->field_story_type[LANGUAGE_NONE][0]['value']) && $node->field_story_type[LANGUAGE_NONE][0]['value'] == 'photo_story') {
      $next = itg_story_photo_story_redirect($node->nid, 'next');
      $previous = itg_story_photo_story_redirect($node->nid, 'prev');
      drupal_add_js(array('itg_story_front' => array('next' => $next, 'previous' => $previous)), 'setting');
      drupal_add_js(drupal_get_path('module', 'itg_story') . '/js/itg_story_front.js', array('scope' => 'footer'));
    }

    if (function_exists('itg_get_front_activity_info')) {
      $node->content['front_activity_info'] = itg_get_front_activity_info($node->nid, $node->type, $user->uid, 'read_later', $status = '');
    }

    if (function_exists('itg_custom_get_user_details')) {
      $node->content['author'] = itg_custom_get_user_details($node->uid);
    }

    if (function_exists('itg_common_get_smiley_title')) {
      if (!empty($node->field_emoji[LANGUAGE_NONE][0]['value']) || !empty($node->field_emoji_2[LANGUAGE_NONE][0]['value'])) {
        $node->content['story_title'] = itg_common_get_smiley_title($node->nid, 0, 255, TRUE);
      }
      else {
        $node->content['story_title'] = $node->title;
      }
    }
    

    // code for amp page
    if ($view_mode == 'amp') {
      // code for photo story
      if (!empty($node->field_primary_category[LANGUAGE_NONE][0]['value'])) {
        $primary_cat = $node->field_primary_category[LANGUAGE_NONE][0]['value'];
      }
      if(!empty($node->field_photo_story) && $node->field_story_type[LANGUAGE_NONE][0]['value']== 'photo_story') {
      $node->content['amp_photo_story_html'] = itg_story_photo_amp_html($node);
      $node->content['amp_photo_story_bottom_html'] = itg_story_photo_amp_bottom_html($node);
      }
      // movie plugin
      if (!empty($node->field_story_technology['und'])) {
      $node->content['amp_movie_plugin'] = itg_story_movie_image_plugin_data($node, 'amp');
      }
      $position = $node->field_emoji_position[LANGUAGE_NONE][0]['value'];
      // left emoji value
      $left_emoji = $node->field_emoji_2[LANGUAGE_NONE][0]['value'];
      preg_match_all('/<img[^>]*>/s', $left_emoji, $leftimages);
      $left_emoji_html = itg_get_emoji_amp_html($leftimages[0]);
      // right emoji value
      $right_emoji = $node->field_emoji[LANGUAGE_NONE][0]['value'];
      preg_match_all('/<img[^>]*>/s', $right_emoji, $rightimages);
      $right_emoji_html = itg_get_emoji_amp_html($rightimages[0]);

      $node->content['amp_title'] = $left_emoji_html . $node->title . $right_emoji_html;
    }
  }
}

/**
 * Implements itg_story_movie_image_plugin_data()
 * @param type $node_id
 */
function itg_story_movie_image_plugin_data($node_obj, $source = NULL) {
  //Store the node id of the story from the argument
  
  if (!empty($node_obj->nid)) {
    $dty = date("D j M Y", $node_obj->changed);
    //store entity id of multi value field collection field
    if (isset($node_obj->field_story_technology[LANGUAGE_NONE])) {
      $technology_entity = $node_obj->field_story_technology[LANGUAGE_NONE];
    }

    $html = '';
    if (!empty($technology_entity)) {
      $html .= '<div class="story-photo-list-wrapper"><h3 class="story-photo-list-heading"><span>SAMPLE PHOTOS</span></h3><div class="story-photo-list">';

      foreach ($technology_entity as $key => $val) {
        $entity = entity_load('field_collection_item', array($val['value']));
        // store the actual image path
        $sample_img_path = $entity[$val['value']]->field_technology_sample_photo['und'][0]['uri'];
        $sample_img = image_style_url('video_landing_page_170_x_127', $sample_img_path);
        // store image title
        $sample_title = mb_strimwidth($entity[$val['value']]->field_technology_photo_title['und'][0]['value'], 0, 35, "..");
        // generate html 
        $html .= '<div class="story-photo-list-item">';
        if ($source == 'amp') {
          $html .='<amp-img height="127" width="170" alt="sample photo" src="' . $sample_img . '"></amp-img>';
        }
        else {
          $html .= '<img src="' . $sample_img . '"  alt=""/>';
        }
        $html .= '<span class="smp-date">' . $dty . '</span>';
        $html .= '<p>' . $sample_title . '</p>';
        $html .= '</div>';
      }
      $html .= '</div></div>';
    }
    return $html;
  }
  else {
    return t('No content id found');
  }
}

/**
 * Implements itg_story_photo_story_previous()
 * @param type $node_id
 */
function itg_story_photo_story_redirect($node_id, $type = 'prev', $cat_id) {
  if (!empty($node_id)) {
    global $base_url;
    $current_time = date("Y-m-d H:i:s");
    $query = db_select('field_data_field_story_type', 'fst');
    $query->leftJoin('node', 'n', 'n.nid=fst.entity_id');
    $query->leftJoin('field_data_field_story_expiry_date', 'expiry', 'fst.entity_id = expiry.entity_id');
    $query->leftJoin('field_data_field_story_expires', 'expiry_status', 'n.nid = expiry_status.entity_id');
    $query->leftJoin('field_data_field_primary_category', 'pr', 'pr.entity_id = fst.entity_id');
    $query->fields('fst', array('entity_id'));
    $query->condition('fst.field_story_type_value', 'photo_story');
    if ($type == 'next') {
      $query->condition('fst.entity_id', $node_id, '>');
      $query->condition('pr.field_primary_category_value', $cat_id);
      $query->orderBy('fst.entity_id', 'ASC');
    }
    else {
      $query->condition('fst.entity_id', $node_id, '<');
      $query->condition('pr.field_primary_category_value', $cat_id);
      $query->orderBy('fst.entity_id', 'DESC');
    }

    $query->range(0, 1);
    $query->condition('n.status', 1);
    $query->condition('n.type', array('story'), 'IN');
    $or = db_or()->isNull('expiry.field_story_expiry_date_value')->condition('expiry.field_story_expiry_date_value', $current_time, '>=');
    $query->condition($or);
    $result = $query->execute()->fetchAll();

    if ($result[0]->entity_id) {
      $required_node_id = 'node/' . $result[0]->entity_id;
      $href = $base_url . '/' . $required_node_id;
    }
    else {
      $href = '';
    }
    return $href;
  }
}

/**
 * 
 * @param type $node_id
 * @return string
 */
function itg_story_photo_story_html($node, $primary_cat = NULL) {
  // generate the html for photo story top slider
  if (!empty($node->nid)) {
    $photo_story = $node->field_photo_story[LANGUAGE_NONE];
    $next = itg_story_photo_story_redirect($node_id, 'next', $primary_cat);
    $previous = itg_story_photo_story_redirect($node_id, 'prev', $primary_cat);
    $next_link_count = count($photo_story) - 1;
    $html = '';
    $html .= '<div class="photo-story-img multiple-photo-disc">';
    foreach ($photo_story as $key => $val) {
      if ($key == 0 && !empty($previous)) {
        $previous_link = "<a class='fa fa-chevron-left prev-story-link' href='" . $previous . "'></a>";
      }
      else {
        $previous_link = "";
      }
      if ($key == $next_link_count && !empty($next)) {
        $next_link = "<a class='fa fa-chevron-right next-story-link' href='" . $next . "'></a>";
      }
      else {
        $next_link = "";
      }

      $entity_obj = entity_load('field_collection_item', array($val['value']));
      $photo_story_img_path = $entity_obj[$val['value']]->field_photo_story_image['und'][0]['uri'];

      $photo_story_img = image_style_url('photo_story_771x432', $photo_story_img_path);
      $photo_story_desc = $entity_obj[$val['value']]->field_photo_story_description['und'][0]['value'];
      $photo_story_img_title = $entity_obj[$val['value']]->field_photo_story_image['und'][0]['title'];
      $photo_story_img_alt = $entity_obj[$val['value']]->field_photo_story_image['und'][0]['alt'];
      if (function_exists('itg_story_get_image_info')) {
        $getImageInfo = itg_story_get_image_info($entity_obj[$val['value']]->field_photo_story_image['und'][0]['fid']);
      }
      $html .= '<div class="photo-slider">';
      $html .= $next_link . '<div class="image-caption"><img src="' . $photo_story_img . '" title="' . $photo_story_img_title . '" alt="' . $photo_story_img_alt . '" /><span class="photo-caption">' . $getImageInfo[0]->image_photo_grapher . '</span></div>' . $previous_link;
      $html .= '<div class="photo-description">' . $getImageInfo[0]->image_caption . '</div><div class="description"><p>' . $photo_story_desc . '</p></div>';
      $html .= '</div>';
    }
    $html .= '</div>';
    return $html;
  }
}

/**
 * 
 * @param type $node_id
 * @return string
 */
function itg_story_photo_amp_html($node) {
  // generate the html for photo story top slider
  if (!empty($node->nid)) {
    $photo_story = $node->field_photo_story[LANGUAGE_NONE];
    $next = itg_story_photo_story_redirect($node_id, 'next');
    $previous = itg_story_photo_story_redirect($node_id, 'prev');
    $next_link_count = count($photo_story) - 1;
    $html = '';
    $html .='<amp-carousel id="carousel-with-preview"
    width="400"
    height="300"
    layout="responsive"
    type="slides">';
    $i = 1;
    foreach ($photo_story as $key => $val) {

      $entity_obj = entity_load('field_collection_item', array($val['value']));
      $photo_story_img_path = $entity_obj[$val['value']]->field_photo_story_image['und'][0]['uri'];

      $photo_story_img = image_style_url('photo_story_771x432', $photo_story_img_path);
      $photo_story_desc = $entity_obj[$val['value']]->field_photo_story_description['und'][0]['value'];
      $photo_story_img_title = $entity_obj[$val['value']]->field_photo_story_image['und'][0]['title'];
      $photo_story_img_alt = $entity_obj[$val['value']]->field_photo_story_image['und'][0]['alt'];
      if (function_exists('itg_story_get_image_info')) {
        $getImageInfo = itg_story_get_image_info($entity_obj[$val['value']]->field_photo_story_image['und'][0]['fid']);
      }
      $html .='<div class="slide"><div class="photo-slide"><amp-img src="' . $photo_story_img . '?image=' . $i . '"
      width="771"
      height="432"
      layout="responsive"
      alt="' . $photo_story_img_alt . '" title="' . $photo_story_img_title . '"><div fallback>offline</div></amp-img><div class="caption">' . $getImageInfo[0]->image_photo_grapher . '</div></div>
      <div class="image-alt">' . $getImageInfo[0]->image_caption . '</div><amp-fit-text>' . $photo_story_desc . '</amp-fit-text></div>';
      $i++;
    }
    $html .= '</amp-carousel>';
    return $html;
  }
}

/**
 * 
 * @param type $node_id
 * @return string
 */
function itg_story_photo_amp_bottom_html($node) {
  // generate the html for photo story top slider
  if (!empty($node->nid)) {
    $photo_story = $node->field_photo_story[LANGUAGE_NONE];
    $count = sizeof($photo_story);
    $html = '';
    //$html = '<div class="photo-story-img multiple-photo common-photo">';
    $html .= '<div class="carousel-preview">';
    $index = 0;
    $slide = 1;
    for ($i = 0; $i < $count; $i++) {
      $entity_obj = entity_load('field_collection_item', array($photo_story[$i]['value']));
      $photo_story_img_path = $entity_obj[$photo_story[$i]['value']]->field_photo_story_image['und'][0]['uri'];
      $photo_story_file_name = $entity_obj[$photo_story[$i]['value']]->field_photo_story_image['und'][0]['filename'];
      $photo_story_img_title = $entity_obj[$photo_story[$i]['value']]->field_photo_story_image['und'][0]['title'];
      $photo_story_img = image_style_url('photo_story_small_88x66', $photo_story_img_path);
      $html .= '<button on="tap:carousel-with-preview.goToSlide(index=' . $index . ')">
      <amp-img src="' . $photo_story_img . '?image=' . $slide . '"
        width="88"
        height="66"
       alt="' . $photo_story_img_title . '"><div fallback>offline</div></amp-img><span class="counter">' . $slide . '</span>
    </button>';
      $index++;
      $slide++;
    }
    $html .= '</div>';
    return $html;
  }
}

/**
 * 
 * @param type $node_id
 * @return string
 */
function itg_story_photo_story_bottom_html($node) {
  $current_url = $_SERVER['REQUEST_URI'];
  // generate the html for photo story bottom slider
  if (!empty($node->nid)) {
    $photo_story = $node->field_photo_story[LANGUAGE_NONE];
    $count = sizeof($photo_story);
    $html = '';
    $html .= '<div class="photo-story-img multiple-photo common-photo">';

    for ($i = 0; $i < $count; $i++) {
      $entity_obj = entity_load('field_collection_item', array($photo_story[$i]['value']));
      $photo_story_img_path = $entity_obj[$photo_story[$i]['value']]->field_photo_story_image['und'][0]['uri'];
      $photo_story_file_name = $entity_obj[$photo_story[$i]['value']]->field_photo_story_image['und'][0]['filename'];
      $photo_story_img = image_style_url('photo_story_small_88x66', $photo_story_img_path);
      $html .= '<div class="photo-slider">';
      $html .= '<span class="img-wrapper"><img src="' . $photo_story_img . '" title="' . $photo_story_file_name . '" alt="photo_story" />';
      $html .= '<em class="photo-count">' . ($i + 1) . '</em></span>';
      $html .= '</div>';
    }
    $html .= '</div>';
    return $html;
  }
}

/**
 * Implements hook_views_api().
 *
 * {@inheritdoc}.
 */
function itg_story_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements itg_get_emoji_amp_html().
 */
function itg_get_emoji_amp_html($result, $arr = NULL) {
  if (!empty($result)) {
    $emoji_html = '<span class="smilies-title">';
    if (empty($arr)) {
      foreach ($result as $key => $value) {
        $html = $value;
        $html = str_ireplace(
            ['<img', '<video', '/video>', '<audio', '/audio>'], ['<amp-img', '<amp-video', '/amp-video>', '<amp-audio', '/amp-audio>'], $html
        );
        $emoji_html .= preg_replace('/<amp-img(.*?)\/?>/', '<amp-img$1></amp-img>', $html);
      }
    }
    else {
      $html = $result;
      $html = str_ireplace(
          ['<img', '<video', '/video>', '<audio', '/audio>'], ['<amp-img', '<amp-video', '/amp-video>', '<amp-audio', '/amp-audio>'], $html
      );
      $emoji_html .= preg_replace('/<amp-img(.*?)\/?>/', '<amp-img$1></amp-img>', $html);
    }
    $emoji_html .= '</span>';
    return $emoji_html;
  }
}

/**
 * Function for admin setting for sponsor category.
 */
function _sponsor_category_setting() {
  $form = array();
  $form['sponsor_cat_tid'] = array(
    '#type' => 'textfield',
    '#title' => t('Sponsor Category TID'),
    '#default_value' => variable_get('sponsor_cat_tid', 1208902),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t("Enter TID for Sponsor Category"),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Function for check external url in story
 * @return false or external url
 */
function _is_external_url_story_article($nid) {
  
  $is_external_url = FALSE;
  //commented by shravan and discussed with shashank
 /* if (isset($nid)) {
    if (db_table_exists('field_data_field_story_external_url')) {
      $type_query = db_select('node', 'n');
      $type_query->fields('n', array('type'));
      $type_query->condition('n.nid', $nid, '=');
      $node_type = $type_query->execute()->fetchField();
      if ($node_type == 'story') {
        $query = db_select('field_data_field_story_external_url', 'eu');
        $query->fields('eu', array('field_story_external_url_value'));
        $query->isNotNull('eu.field_story_external_url_value');
        $query->condition('eu.entity_id', $nid, '=');
        $query->condition('eu.bundle', 'story', '=');
        $query->condition('eu.entity_type', 'node', '=');
        $query_result = $query->execute()->fetchAll();
        if (!empty($query_result) && !empty($query_result[0]->field_story_external_url_value) && filter_var(trim($query_result[0]->field_story_external_url_value), FILTER_VALIDATE_URL)) {
          $is_external_url = trim($query_result[0]->field_story_external_url_value);
        }
      }
    }
  }*/
  return $is_external_url;
}

/**
 * Add byline menu page callback
 * @global type $user
 * @param type $ajax
 */
function itg_story_add_byline_popup($ajax) {
  global $user;
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    ctools_include('node.pages', 'node', '');
    $node = (object) array(
          'uid' => $user->uid,
          'name' => (isset($user->name) ? $user->name : ''),
          'type' => 'reporter',
          'language' => LANGUAGE_NONE,
    );

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add Byline'),
      'reporter_popup_form' => 1,
    );
    $form_state['build_info']['args'] = array($node);
    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('reporter_node_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['executed'])) {
      $output = array();
      $output[] = ctools_modal_command_display(
          t('Node created'), 'Node creation successful.');/** Add success message */
      $output[] = ctools_modal_command_dismiss(); //Close modal automatically
      $output[] = ctools_ajax_command_reload(); //reload parent window 
    };
    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
}
