<?php

/**
 * @file
 *
 * Purpose: ITG social media integration module.
 */

/**
 * Implement hook_permissions()
 */
function itg_social_media_permission() {
  return array(
    'administer itg_social_media edit_content settings' => array(
      'title' => t('Edit social media section'),
      'description' => t('Using this permission user can edit social media part of any node.'),
    ),
  );
}

/**
 * Implements hook_menu()
 * @return array
 */
function itg_social_media_menu() {
  $items['itg-social-media/edit-content/%'] = array(
    'title' => t('Social Media Section'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer itg_social_media edit_content settings'),
    'page arguments' => array('itg_social_media_form', 2, 3),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_alter()
 * {@inheritdoc}
 */
function itg_social_media_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['created']['min'])) {
    $form['created']['min'] = array(
      '#type' => 'date_popup',
      '#date_format' => 'd/m/Y',
      '#date_year_range' => '-3:+3',
    );
    $form['created']['max'] = array(
      '#type' => 'date_popup',
      '#date_format' => 'd/m/Y',
      '#date_year_range' => '-3:+3',
    );
  }
}

/**
 * Create custom form for social media integration.
 *
 * {@inheritdoc}
 */
function itg_social_media_form($form, &$form_state, $c_type, $nid) {
  // Load node so that we can provide default value if values already present.
  $node = node_load($nid);
  $data = array();
  foreach ($node->field_story_social_media_integ['und'] as $option) {
    $data[] = $option['value'];
  }

  // Add js file to form.
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'itg_social_media') . '/js/itg_social_media.js',
    drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js',
  );

  // Prepare form array.
  $form['itg_smi'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Social media integration '),
    '#options' => array(
      'facebook' => 'Facebook',
      'facebook_instant_article' => 'Facebook Instant Article',
      'twitter' => 'Twitter',
    ),
    '#default_value' => $data,
  );
  $form['fb_wrap'] = array(
    '#type' => 'fieldset',
    '#title' => t('Facebook Social Media Integration'),
    '#attributes' => array('class' => array('social-fb-block')),
    '#states' => array(
      'visible' => array(
        ':input[name="itg_smi[facebook]"]' => array('checked' => TRUE),
      )
    ),
  );
  $form['fb_wrap']['itg_facebook_narrative'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook Narrative'),
    '#maxlength' => 255,
    '#default_value' => isset($node->field_story_facebook_narrative['und'][0]['value']) ? $node->field_story_facebook_narrative['und'][0]['value'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="itg_smi[facebook]"]' => array('checked' => TRUE),
      ),
      'required' => array(
        ':input[name="itg_smi[facebook]"]' => array('checked' => TRUE),
      )
    ),
  );
  $form['fb_wrap']['itg_fb_img'] = array(
    '#title' => t('Facebook Image'),
    '#type' => 'managed_file',
    '#description' => t('The uploaded image will be displayed on this page using the image style choosen below.'),
    '#default_value' => variable_get('image_example_image_fid', ''),
    '#upload_location' => 'public://itg_fb_img/',
    '#default_value' => isset($node->field_story_facebook_image['und'][0]['fid']) ? $node->field_story_facebook_image['und'][0]['fid'] : 0,
    '#states' => array(
      'visible' => array(
        ':input[name="itg_smi[facebook]"]' => array('checked' => TRUE),
      ),
      'required' => array(
        ':input[name="itg_smi[facebook]"]' => array('checked' => TRUE),
      )
    ),
  );
  $form['twit_wrap'] = array(
    '#type' => 'fieldset',
    '#title' => t('Twitter Social Media Integration'),
    '#attributes' => array('class' => array('social-twitter-block')),
    '#states' => array(
      'visible' => array(
        ':input[name="itg_smi[twitter]"]' => array('checked' => TRUE),
      )
    ),
  );
  $form['twit_wrap']['itg_twitter_narrative'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Narrative'),
    '#maxlength' => 255,
    '#default_value' => isset($node->field_story_tweet['und'][0]['value']) ? $node->field_story_tweet['und'][0]['value'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="itg_smi[twitter]"]' => array('checked' => TRUE),
      ),
      'required' => array(
        ':input[name="itg_smi[twitter]"]' => array('checked' => TRUE),
      )
    ),
  );
  $form['twit_wrap']['itg_twitter_img'] = array(
    '#title' => t('Twitter Image'),
    '#type' => 'managed_file',
    '#description' => t('The uploaded image will be displayed on this page using the image style choosen below.'),
    '#default_value' => variable_get('image_example_image_fid', ''),
    '#upload_location' => 'public://itg_twitter_img/',
    '#states' => array(
      'visible' => array(
        ':input[name="itg_smi[twitter]"]' => array('checked' => TRUE),
      ),
      'required' => array(
        ':input[name="itg_smi[twitter]"]' => array('checked' => TRUE),
      )
    ),
  );
  $form['ctype'] = array(
    '#type' => 'hidden',
    '#default_value' => check_plain($c_type),
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => check_plain($nid),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Share Content'),
  );

  return $form;
}

/**
 * Implements hook_form_submit()
 *
 * {@inheritdoc}
 */
function itg_social_media_form_submit($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);

  if ($form_state['values']['itg_fb_img'] != 0) {
    // Load the file via file.fid.
    $file = file_load($form_state['values']['itg_fb_img']);
    // Change status to permanent.
    $file->status = FILE_STATUS_PERMANENT;
    // Save.
    file_save($file);
    // Record that the module (in this example, user module) is using the file. 
    file_usage_add($file, 'user', 'user', 1);
  }

  // Change field value     
  foreach ($form_state['values']['itg_smi'] as $value) {
    if ($value != '0') {
      $data[]['value'][$value] = $value;
    }
  }

  // Social Media integration field
  $node->field_story_social_media_integ['und'] = $data;

  // Facebook narrative field
  if ($form_state['values']['itg_facebook_narrative'] != '') {
    $node->field_story_facebook_narrative['und'][0]['value'] = $form_state['values']['itg_facebook_narrative'];
  }
  else {
    unset($node->field_story_facebook_narrative['und']);
  }

  // Facebook Image field
  if ($form_state['values']['itg_fb_img'] != 0) {
    $node->field_story_facebook_image['und'][0]['fid'] = $form_state['values']['itg_fb_img'];
  }
  else {
    unset($node->field_story_facebook_image['und']);
    $path = file_create_url($node->field_story_facebook_image['und'][0]['uri']);
    if ($path != '') {
      unlink($path);
    }
  }

  // TWITTER IMAGE
  if ($form_state['values']['itg_twitter_img'] != 0) {
    // Load the file via file.fid.
    $file = file_load($form_state['values']['itg_twitter_img']);
    // Change status to permanent.
    $file->status = FILE_STATUS_PERMANENT;
    // Save.
    file_save($file);
    // Record that the module (in this example, user module) is using the file.
    file_usage_add($file, 'user', 'user', 1);
  }

  // Twitter narrative
  if ($form_state['values']['itg_twitter_narrative'] != '') {
    $node->field_story_tweet['und'][0]['value'] = $form_state['values']['itg_twitter_narrative'];
  }
  else {
    unset($node->field_story_tweet['und']);
  }

  // Twitter Image field
  if ($form_state['values']['itg_twitter_img'] != 0) {
    $node->field_story_tweet_image['und'][0]['fid'] = $form_state['values']['itg_twitter_img'];
  }
  else {
    unset($node->field_story_tweet_image['und']);
    $path = file_create_url($node->field_story_tweet_image['und'][0]['uri']);
    if ($path != '') {
      unlink($path);
    }
  }

  node_save($node);
}

/**
 * Implements hook_block_info()
 *
 * {@inheritdoc}
 */
function itg_social_media_block_info() {
  $block = array();
  $block['social_media_form'] = array(
    'info' => t('Social Media Integration'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $block;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_social_media_block_view($delta = '') {
  $block = array();
  $arg = arg();
  $c_type = itg_social_media_node_type(check_plain($arg[1]));
  $nid = check_plain($arg[1]);
  switch ($delta) {
    case 'social_media_form':
      $block = array(
        'subject' => t('Social media Integration'),
        'content' => drupal_get_form('itg_social_media_form', $c_type, $nid),
      );

      break;
  }

  return $block;
}

/**
 * get type of the node from nid.
 *
 * @param int $nid
 * @return mixed
 */
function itg_social_media_node_type($nid) {
  $itg_query = db_select('node', 'n');
  $itg_query->fields('n', array('type'))
    ->condition('nid', $nid);
  $itg_result = $itg_query->execute()->fetchField();

  return $itg_result;
}