<?php

/**
 * @file
 *
 * Purpose: ITG social media integration module.
 */
require 'vendor/autoload.php';
module_load_include('inc', 'itg_social_media', 'includes/itg_social_media.form');
module_load_include('inc', 'itg_social_media', 'includes/itg_social_media.settings');

/**
 * Implement hook_permissions()
 * 
 * @return array
 */
function itg_social_media_permission() {
    return array(
        'administer itg_social_media edit_content settings' => array(
            'title' => t('Edit social media section'),
            'description' => t('Using this permission user can edit social media part of any node.'),
        ),
        'administer itg_social_media settings' => array(
            'title' => t('Administer api key settings'),
            'description' => t('Using this permission user can edit social media api settings.'),
        ),
    );
}

/**
 * Implements hook_menu()
 * {@inheritdoc}
 */
function itg_social_media_menu() {
    // Facebook login callback
    $items['itg-social-media-settings-callback'] = array(
        'page callback' => 'itg_social_media_settings_callback',
        'access arguments' => array('administer itg_social_media edit_content settings'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_social_media.settings.inc',
    );
    $items['itg-social-log/%'] = array(
        'page callback' => 'itg_social_media_log_listing',
        'access arguments' => array('access content'),
        'page arguments' => array(2),
        'title' => 'ITG Social Media Log',
        'type' => MENU_CALLBACK,
    );
    $items['facebook_count'] = array(
        'page callback' => 'get_shares_count_from_post_for_showing',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['twitter/oauth'] = array(
        'page callback' => 'itg_social_media_twitter_callback',
        'access arguments' => array('administer itg_social_media edit_content settings'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_social_media.settings.inc',
    );
    //settings form  
    $items['admin/config/administration/itg_social_media'] = array(
        'title' => 'ITG Social Media',
        'description' => 'Social Media Settings Form',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('itg_social_media_settings_form'),
        'access arguments' => array('administer itg_social_media settings'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'includes/itg_social_media.admin.inc'
    );
    $items['admin/config/administration/social_media_login'] = array(
        'title' => 'ITG Social Media Login Form',
        'description' => 'Social Media Login Form',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('itg_social_media_login_form'),
        'access arguments' => array('administer itg_social_media settings'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'includes/itg_social_media.admin.inc'
    );
    $items['twitter/logout'] = array(
        'page callback' => 'itg_social_media_twitter_logout',
        'access arguments' => array('administer itg_social_media settings'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_social_media.admin.inc'
    );
    $items['facebook/logout'] = array(
        'page callback' => 'itg_social_media_facebook_logout',
        'access arguments' => array('administer itg_social_media settings'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_social_media.admin.inc'
    );
    $items['admin/itg-social-media/facebook-pages'] = array(
        'page callback' => '_facebook_pages_list',
        'access arguments' => array('administer itg_social_media settings'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_social_media.admin.inc'
    );
    $items['itg-social_media/title-autocomplete/%'] = array(
        'page callback' => '_smi_title_autocomplete',
        'access arguments' => array('administer itg_social_media edit_content settings'),
        'page arguments' => array(2),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_social_media.settings.inc',
    );

    return $items;
}

/*
 * Implements function for rundown listing.
 */

function itg_social_media_log_listing() {
    # configure the table header columns
    $header = array(
        array('data' => t('Title')),
        array('data' => t('Twitter Count ')),
        array('data' => t('Facebook Count')),
        array('data' => t('Last Promoted on ')),
    );

    $nid = arg(1);
    $query = db_select('itg_social_media_logs', 'isml')
                    ->fields('isml')
                    ->condition('nid', $nid, '=')
                    ->orderBy('id', 'DESC')
                    ->extend('TableSort')
                    ->orderByHeader($header)
                    ->extend('PagerDefault')->limit(1);


    $result = $query->execute()->fetchall();


    $twitter_count = itg_social_media_count_log('Twitter', $nid);
    $facebook_count = itg_social_media_count_log('facebook', $nid);

    $rows = array();

    $rows[] = array(
        array('data' => $result[0]->node_title),
        array('data' => $twitter_count),
        array('data' => $facebook_count),
        array('data' => format_date($result[0]->scheduled_time, $type = 'itg_date_with_time', $format = '', $timezone = NULL, $langcode = NULL)),
    );

    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('views-table')), 'empty' => 'No results found'));

    // set facebook table
    $header = array(
        array('data' => t('Like Count')),
        array('data' => t('Share Count ')),
        array('data' => t('Comment Count')),
      
    );

    $nid = arg(1);

    $fecebook_detaila = itg_social_media_facebook_activity($nid);
    $rows = array();

    $rows[] = array(
        array('data' => $fecebook_detaila['like']),
        array('data' => $fecebook_detaila['share']),
        array('data' => $fecebook_detaila['comment']),
      
    );

    $output_1 .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('views-table')), 'empty' => 'No results found'));
$graph_data = "['Share',     ".$fecebook_detaila['share']."],
          ['Comment',      ".$fecebook_detaila['comment']."],
          ['Like',  ".$fecebook_detaila['like']."]"; 

$facebook_graph_flag = 0;
if ($fecebook_detaila['share'] > 0 || $fecebook_detaila['comment'] > 0 || $fecebook_detaila['like'] > 0) {
    $facebook_graph_flag = 1;
}
    # add the pager
    return theme('itg_twitter_social', array('data' => $output, 'facebook_details' => $output_1,'fb_graph_details'=>$graph_data , 'is_fb_graph' =>$facebook_graph_flag));

    //return $output;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_social_media_theme($existing, $type, $theme, $path) {
    $themes = array(
        'itg_twitter_social' => array(
            'template' => 'itg-social-media-twitter',
            'path' => drupal_get_path('module', 'itg_social_media') . '/templates',
            'variables' => array('data' => NULL),
        ),
    );
    return $themes;
}

/**
 * 
 * @param type $share_on
 * @param type $nid
 * @return type int 
 */
function itg_social_media_count_log($share_on = null, $nid) {
    $query = db_select('itg_social_media_logs', 'isml')
            ->fields('isml')
            ->condition('nid', $nid, '=')
            ->condition('social_media', '%' . db_like($share_on) . '%', 'LIKE');


    $result = $query->execute()->fetchall();
    return count($result);
}

/**
 * 
 * @param type $share_on
 * @param type $nid
 * @return type int 
 */
function itg_social_media_check_node_exist($nid) {
    $query = db_select('itg_social_media_logs', 'isml')
            ->fields('isml')
            ->condition('nid', $nid, '=');

    $result = $query->execute()->fetchall();
    return count($result);
}

/**
 * Implements hook_form_alter()
 * {@inheritdoc}
 */
function itg_social_media_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
    switch ($form['#id']) {
        case 'views-exposed-form-social-media-logs-page':
            $form['created']['min'] = array(
                '#type' => 'date_popup',
                '#date_format' => 'd/m/Y',
                '#date_year_range' => '-3:+3',
                '#attributes' => array('autocomplete' => 'off', 'readonly' => 'readonly', 'placeholder' => t('Start Date')),
            );
            $form['created']['max'] = array(
                '#type' => 'date_popup',
                '#date_format' => 'd/m/Y',
                '#date_year_range' => '-3:+3',
                '#attributes' => array('autocomplete' => 'off', 'readonly' => 'readonly', 'placeholder' => t('End Date')),
            );
            // Autocomplete node title
            $form['node_title']['#autocomplete_path'] = 'itg-social_media/title-autocomplete/node_title';
            $form['social_media']['#autocomplete_path'] = 'itg-social_media/title-autocomplete/social_media';
            $form['username']['#autocomplete_path'] = 'itg-social_media/title-autocomplete/username';
            $form['status']['#options'][1] = 'Published';
            $form['status']['#options'][0] = 'Unpublished';

            break;
        case 'views-exposed-form-sold-item-history-page':
            $form['status']['#options'][1] = t('Complete');
            $form['status']['#options'][0] = t('Pending');
        case 'views-exposed-form-browse-content-page':
            $form['date_filter']['min']['#attributes'] = array(
                'autocomplete' => 'off',
                'readonly' => 'readonly',
                'placeholder' => t('Start Date'),
            );
            $form['date_filter']['min']['#datepicker_options'] = array('maxDate' => '+0d');
            $form['date_filter']['max']['#datepicker_options'] = array('maxDate' => '+0d');
            $form['date_filter']['max']['#attributes'] = array(
                'autocomplete' => 'off',
                'readonly' => 'readonly',
                'placeholder' => t('End Date')
            );

            break;
    }
}

/**
 * Implements hook_block_info()
 *
 * {@inheritdoc}
 */
function itg_social_media_block_info() {
    $block = array();
    $block['social_media_form'] = array(
        'info' => t('Social Media Integration'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );

    return $block;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_social_media_block_view($delta = '') {
    $block = array();
    $arg = arg();
    if (isset($arg[1])) {
        $c_type = itg_social_media_node_type(check_plain($arg[1]));
        $nid = check_plain($arg[1]);
    }
    switch ($delta) {
        case 'social_media_form':
            $block = array(
                'subject' => t('Social media Integration'),
                'content' => drupal_get_form('itg_social_media_form', $c_type, $nid),
            );

            break;
    }

    return $block;
}

/**
 * get type of the node from nid.
 *
 * @param int $nid
 * @return string
 */
function itg_social_media_node_type($nid) {
    $itg_query = db_select('node', 'n');
    $itg_query->fields('n', array('type'))
            ->condition('nid', $nid);
    $itg_result = $itg_query->execute()->fetchField();

    return $itg_result;
}

/**
 * Facebook post logic
 * 
 * @global type $base_url
 * @global stdObject $user
 * @param int $fid
 * @param string $desc
 * @param string $type
 * @param stdObject $node
 * @param string $stime
 */
function itg_social_media_facebook_post($fid, $desc, $type, $node, $stime) {
    global $base_url, $user;
    // Set file status to permanent
    $file = file_load($fid);
    // Get file real path
    $path = drupal_realpath($file->uri);
    // Get connection object
    $fb = itg_social_media_fb_connection();
    // Get page information
    $page_id = variable_get('facebook_page_id', '');
    if (variable_get('access_token_one', '') === '') {
        drupal_set_message(t('Please first login to facebook'));
        drupal_goto('browse-content');
    }
    // Create complete access token string.
    $token = variable_get('access_token_one') . variable_get('access_token_two');
    // Check node alias is available or not.
    $alias = '';
    if (!empty($node->path['alias'])) {
        $alias = $node->path['alias'];
    }
    else {
        $alias = 'node/' . $node->nid;
    }
    // Get short url
    $short_url = shorten_url($base_url . '/' . $alias, 'goo.gl');

    switch ($type) {
        case 'videos':
            if ($stime != NULL) {
                $data = [
                    'title' => $node->title,
                    'description' => t($desc) . ' ' . $short_url,
                    'source' => $fb->videoToUpload($path),
                    'published' => FALSE,
                    'scheduled_publish_time' => $stime,
                ];
                $pre_save['scheduled_time'] = $stime;
                $pre_save['created'] = REQUEST_TIME;
            }
            else {
                $data = [
                    'title' => $node->title,
                    'description' => t($desc) . ' ' . $short_url,
                    'source' => $fb->videoToUpload($path),
                    'published' => TRUE,
                ];
                $pre_save['created'] = REQUEST_TIME;
                $pre_save['scheduled_time'] = REQUEST_TIME;
            }

            break;

        case 'photos':
            if ($stime != NULL) {
                $data = [
                    'message' => t($desc) . ' ' . $short_url,
                    'source' => $fb->fileToUpload($path),
                    'published' => FALSE,
                    'scheduled_publish_time' => $stime,
                ];
                $pre_save['scheduled_time'] = $stime;
                $pre_save['created'] = REQUEST_TIME;
            }
            else {
                $data = [
                    'message' => t($desc) . ' ' . $short_url,
                    'source' => $fb->fileToUpload($path),
                    'published' => TRUE,
                ];
                $pre_save['created'] = REQUEST_TIME;
                $pre_save['scheduled_time'] = REQUEST_TIME;
            }

            break;
    }

    try {
        $response = $fb->post('/' . $page_id . '/' . $type, $data, $token);
        $graph_node_res = $response->getGraphNode();
    } catch (Facebook\Exceptions\FacebookResponseException $e) {
        // When Graph returns an error
        drupal_set_message(t('Graph returned an error: @egetMessage', array('@egetMessage' => $e->getMessage())), 'error');
        drupal_goto('/browse-content');
    } catch (Facebook\Exceptions\FacebookSDKException $e) {
        // When validation fails or other local issues
        drupal_set_message(t('Facebook SDK returned an error: @egetMessage', array('@egetMessage' => $e->getMessage())), 'error');
        drupal_goto('/browse-content');
    }
    // get response
    $graphNode = $response->isError();

    if (!$graphNode) {
        $pre_save['nid'] = $node->nid;
        $pre_save['node_title'] = $node->title;
        $pre_save['username'] = $user->name;
        $pre_save['post_id'] = $graph_node_res['post_id'];
        $pre_save['social_media'] = 'facebook ' . $type;
        $pre_save['status'] = 1;
        $mtype = $type == 'photos' ? 'Image' : 'Video';
        watchdog('Facebook pre', '<pre>' . print_r($pre_save, TRUE) . '</pre>');
        // INSERT INTO DATABASE    
        drupal_write_record('itg_social_media_logs', $pre_save);

        drupal_set_message(t('@mtype has been posted on social media - Facebook', array('@mtype' => $mtype)), 'status');
    }
}

function itg_social_media_facebook_activity($nid) {
    global $user_access_token;
    $page_id = variable_get('facebook_page_id', '');
    $token = variable_get('access_token_one') . variable_get('access_token_two');
    $like = 0;
    $share = 0;
    $comment = 0;
    $share_on = 'facebook';
    $query = db_select('itg_social_media_logs', 'isml')
            ->fields('isml')
            ->condition('nid', $nid, '=')
            ->condition('social_media', '%' . db_like($share_on) . '%', 'LIKE');


    $result = $query->execute()->fetchall();
    
    foreach ($result as $result_d) {
        $current_post_id = $result_d->post_id;
        $current_url = 'https://graph.facebook.com/v2.2/' . $current_post_id;
        $current_url .= '?access_token=' . $token;
        $current_url .= '&fields=likes.summary(true),comments.summary(true),shares';
        $json = file_get_contents($current_url);
        $data = json_decode($json, true);
        $like = $like + $data['likes']['summary']['total_count'];
        $comment = $comment + $data['comments']['summary']['total_count'];
        $share = $comment + $data['shares']['count'];
    }
    $return_array = array('share' => $share, 'like' => $like, 'comment' => $comment);

    return $return_array;
}

/**
 * Implements hook_form_submit()
 *
 * {@inheritdoc}
 */
function itg_social_media_form_submit($form, &$form_state) {
    $nid = check_plain($form_state['values']['nid']);
    $node = node_load($nid);
    date_default_timezone('Asia/Kolkata');
    // Facebook section
    if (isset($form_state['values']['itg_smi']['facebook']) && $form_state['values']['itg_smi']['facebook'] === 'facebook') {
        // Facebook Image
        if ($form_state['values']['itg_fb_img'] > 0 && $form_state['values']['itg_facebook_condition'] == 0) {
            $desc = $form_state['values']['itg_facebook_narrative'];
            $fid = $form_state['values']['itg_fb_img'];
            $stime = $form_state['values']['img_schedule_time'] != NULL ? strtotime($form_state['values']['img_schedule_time']) : NULL;
            itg_social_media_facebook_post($fid, $desc, 'photos', $node, $stime);
            $node->field_story_facebook_image['und'][0]['fid'] = $form_state['values']['itg_fb_img'];
            $node->field_story_facebook_narrative['und'][0]['value'] = $form_state['values']['itg_facebook_narrative'];
        }

        // Facebook Video
        if ($form_state['values']['itg_fb_video'] && $form_state['values']['itg_facebook_condition'] == 1) {
            $desc = $form_state['values']['itg_facebook_narrative'];
            $fid = $form_state['values']['itg_fb_video'];
            $stime = $form_state['values']['video_schedule_time'] !== '' ? strtotime($form_state['values']['video_schedule_time']) : '';
            itg_social_media_facebook_post($fid, $desc, 'videos', $node, $stime);
            // save node field
            $node->field_story_facebook_video['und'][0] = array(
                'fid' => $fid,
                'display' => 1,
                'description' => ''
            );
            $node->field_story_facebook_narrative['und'][0]['value'] = $form_state['values']['itg_facebook_narrative'];
        }
    }

    // Change field value     
    foreach ($form_state['values']['itg_smi'] as $value) {
        if ($value != '0') {
            $data[]['value'][$value] = $value;
        }
    }

    // Social Media integration field
    $node->field_story_social_media_integ['und'] = $data;

    // TWITTER Section
    if (!empty($form_state['values']['itg_smi']['twitter']) && $form_state['values']['itg_smi']['twitter'] === 'twitter') {
        // Twitter image
        if ($form_state['values']['itg_twitter_img'] > 0 && $form_state['values']['itg_twitter_condition'] == 0) {
            $stime = $form_state['values']['tw_img_schedule_time'] != NULL ? strtotime($form_state['values']['tw_img_schedule_time']) : NULL;
            $desc = $form_state['values']['itg_twitter_narrative'];
            $fid = $form_state['values']['itg_twitter_img'];
            $node->field_story_tweet['und'][0]['value'] = $form_state['values']['itg_twitter_narrative'];
            $node->field_story_tweet_image['und'][0]['fid'] = $form_state['values']['itg_twitter_img'];
            if ($stime != NULL) {
                itg_social_media_save_scheduled_post($node, 'Twitter Image', $stime);
            }
            else {
                itg_social_media_twitter_photo_post($fid, $desc, $node);
            }
        }

        // Twitter video
        if ($form_state['values']['itg_twit_video'] > 0 && $form_state['values']['itg_twitter_condition'] == 1) {
            $stime = $form_state['values']['tw_vid_schedule_time'] != NULL ? strtotime($form_state['values']['tw_vid_schedule_time']) : NULL;
            $desc = $form_state['values']['itg_twitter_narrative'];
            $fid = $form_state['values']['itg_twit_video'];
            $node->field_story_twitter_video['und'][] = array(
                'fid' => $fid,
                'display' => 1,
                'description' => ''
            );
            $node->field_story_tweet['und'][0]['value'] = $desc;
            if ($stime != NULL) {
                itg_social_media_save_scheduled_post($node, 'Twitter Video', $stime);
            }
            else {
                itg_social_media_tvideo_post($fid, $desc, $node);
            }
        }
    }
    // Save node object.
    node_save($node);
}

/**
 * Twitter image post function
 * @param int $fid
 * @param string $desc
 * @param stdObject $node
 */
function itg_social_media_twitter_photo_post($fid, $desc, $node, $is_scheduled_id = NULL) {
    global $base_url, $user;

    // Create connection with twitter
    $cb = itg_social_media_twitter_connection();
    // Set image status permanent
    $file = file_load($fid);
    // Get real path of the file
    $path = drupal_realpath($file->uri);

    // Check node alias is available or not.
    $alias = '';
    if (!empty($node->path['alias'])) {
        $alias = $node->path['alias'];
    }
    else {
        $alias = 'node/' . $node->nid;
    }
    // Get short url
    $short_url = shorten_url($base_url . '/' . $alias, 'goo.gl');
    $media_files = [$path];
    // will hold the uploaded IDs
    $media_ids = [];

    foreach ($media_files as $files) {
        // upload all media files
        $reply = $cb->media_upload([
            'media' => $files
        ]);
        // and collect their IDs
        $media_ids[] = $reply->media_id_string;
    }
    // convert media ids to string list
    $media_id = implode(',', $media_ids);

    // send Tweet with these medias
    $reply = $cb->statuses_update([
        'status' => $desc . ' ' . $short_url,
        'media_ids' => $media_id
    ]);
    watchdog('twitter image', '<pre>' . print_r($reply, TRUE) . '</pre>');
    if (isset($reply->id) && $is_scheduled_id === NULL) {
        $pre_save = array(
            'nid' => $node->nid,
            'node_title' => $node->title,
            'username' => $user->name,
            'social_media' => 'Twitter Image',
            'created' => REQUEST_TIME,
            'scheduled_time' => REQUEST_TIME,
            'status' => 1,
        );

        // iNSERT INTO DATABASE
        $query = drupal_write_record('itg_social_media_logs', $pre_save);
        // Set message
        drupal_set_message(t('Image has been posted on social media - Twitter'), 'status');
    }
    else {
        $pre_save = array(
            'status' => 1,
        );
        $query = db_update('itg_social_media_logs');
        $query->condition('id', $is_scheduled_id)
                ->condition('status', 0)
                ->fields($pre_save)
                ->execute();
        drupal_set_message(t('Image has been posted on social media - Twitter'), 'status');
    }
}

/**
 * Twitter video post function
 * @param int $fid
 * @param string $desc
 * @param stdObject $node
 * @param string $is_scheduled 
 */
function itg_social_media_tvideo_post($fid, $desc, $node, $is_scheduled_id = NULL) {
    global $base_url, $user;
    // Create connection with twitter
    $cb = itg_social_media_twitter_connection();
    // Set image status permanent
    $file = file_load($fid);
    // Get real path of the file
    $path = drupal_realpath($file->uri);
    $size_bytes = filesize($path);

    // Check node alias is available or not.
    $alias = '';
    if (!empty($node->path['alias'])) {
        $alias = $node->path['alias'];
    }
    else {
        $alias = 'node/' . $node->nid;
    }

    // Get short url
    $short_url = shorten_url($base_url . '/' . $alias, 'goo.gl');
    $fp = fopen($path, 'r');

    // INIT the upload
    $reply = $cb->media_upload([
        'command' => 'INIT',
        'total_bytes' => $size_bytes,
        'media_type' => 'video/mp4',
    ]);

    $media_id = $reply->media_id_string;

    // APPEND data to the upload
    $segment_id = 0;

    while (!feof($fp)) {
        // 1MB per chunk for this sample
        $chunk = fread($fp, 1048576);
        $reply = $cb->media_upload([
            'command' => 'APPEND',
            'media_id' => $media_id,
            'segment_index' => $segment_id,
            'media' => $chunk
        ]);

        $segment_id++;
    }

    fclose($fp);

    // FINALIZE the upload
    $reply = $cb->media_upload([
        'command' => 'FINALIZE',
        'media_id' => $media_id
    ]);

    if ($reply->httpstatus < 200 || $reply->httpstatus > 299) {
        drupal_set_message(t('Http status: @reply', array('@reply' => $reply->httpstatus)), 'error');
        drupal_set_message(t('Please upload valid video file. @filename', array('@filename' => $file->name)), 'error');
        drupal_goto('/browse-content');
    }

    // Now use the media_id in a Tweet
    $reply = $cb->statuses_update([
        'status' => $desc . ' ' . $short_url,
        'media_ids' => $media_id
    ]);
    watchdog('twitter video', '<pre>' . print_r($reply, TRUE) . '</pre>');
    if (isset($reply->id) && $is_scheduled === NULL) {
        $pre_save = array(
            'nid' => $node->nid,
            'node_title' => $node->title,
            'username' => $user->name,
            'social_media' => 'Twitter Video',
            'created' => REQUEST_TIME,
            'status' => 1,
            'scheduled_time' => REQUEST_TIME,
        );

        // iNSERT INTO DATABASE
        $query = drupal_write_record('itg_social_media_logs', $pre_save);
        // Set message
        drupal_set_message(t('Video has been posted on social media - Twitter'), 'status');
    }
    else {
        $pre_save = array(
            'status' => 1,
        );
        $query = db_update('itg_social_media_logs');
        $query->condition('id', $is_scheduled_id)
                ->condition('status', 0)
                ->fields($pre_save)
                ->execute();
        drupal_set_message(t('Video has been posted on social media - Twitter'), 'status');
    }
}

/**
 * Implements hook_views_api().
 *
 * This tells drupal that there is Views integration file named
 * itg_social_media.views.inc
 * 
 * {@inheritdoc}
 */
function itg_social_media_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'itg_social_media') . '/includes/views',
    );
}

/**
 * Implements hook_views_query_alter()
 * @param stdObject $view
 * @param stdObject $query
 */
function itg_social_media_views_query_alter(&$view, &$query) {
    if ($view->name === 'browse_content') {
        $type = !empty($_GET['type']) ? check_plain($_GET['type']) : '';
        foreach ($query->where[1]['conditions'] as $key => $condition) {
            if (isset($condition['value'][':field_data_field_story_schedule_date_time_field_story_schedule_date_time_value']) && $type !== 'story') {
                unset($query->where[1]['conditions'][$key]);
            }
        }
    }
}

/**
 * Implement hook_views_pre_render
 * @param stdObject $view
 */
function itg_social_media_views_pre_render(&$view) {
    switch ($view->name) {
        case 'browse_content':
            $header_content_smi = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
            $view->attachment_before = $header_content_smi;

            break;

        case 'social_media_logs':
            $header_content_smi = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
            $view->attachment_before = $header_content_smi;

            break;
    }
}

/**
 * Save twitter scheduled post.
 * @global stdObject $user
 * @param int $nid
 * @param string $type
 * @param timestamp $stime
 */
function itg_social_media_save_scheduled_post($node, $type, $stime) {
    global $user;
    $presave = array(
        'nid' => $node->nid,
        'node_title' => $node->title,
        'username' => $user->name,
        'social_media' => $type,
        'scheduled_time' => $stime,
        'created' => REQUEST_TIME,
    );
    $itg_query = db_insert('itg_social_media_logs');
    $itg_query->fields($presave)
            ->execute();
    if ($itg_query) {
        drupal_set_message($type . ' Post has been saved for scheduling', 'status');
    }
    else {
        drupal_set_message(t('Unexpected error'), 'error');
        drupal_goto('/browse-content');
    }
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_social_media_cronapi($op, $job = NULL) {
    $items['itg_twitter_schduler'] = array(
        'description' => 'Publish twitter post on twitter',
        'callback' => 'itg_social_media_publish_on_twitter',
    );

    return $items;
}

/**
 * Implement callback function for twitter scheduler
 */
function itg_social_media_publish_on_twitter() {
    $itg_query = db_select('itg_social_media_logs', 'itg');
    $itg_query->fields('itg', array('id', 'nid', 'scheduled_time', 'social_media'))
            ->condition('status', 0)
            ->condition('social_media', 'Twitter%', 'LIKE')
            ->condition('scheduled_time', REQUEST_TIME, '<=');
    $itg_result = $itg_query->execute()->fetchAll();
    foreach ($itg_result as $value) {
        $node = node_load($value->nid);
        // Video tweet
        if ($node->field_story_twitter_video['und'][0]['fid'] != 0) {
            $fid = $node->field_story_twitter_video['und'][0]['fid'];
            $desc = $node->field_story_twitter_video_desc['und'][0]['value'];
            itg_social_media_tvideo_post($fid, $desc, $node, $value->id);
        }
        // Image Tweet
        if ($node->field_story_tweet_image['und'][0]['fid'] != 0) {
            $fid = $node->field_story_tweet_image['und'][0]['fid'];
            $desc = $node->field_story_tweet['und'][0]['value'];
            itg_social_media_twitter_photo_post($fid, $desc, $node, $value->id);
        }
    }
}

/**
 * Implements hook_node_validate().
 *
 * {@inheritdoc}.
 */
function itg_social_media_node_validate($node, $form, &$form_state) {
    switch ($node->type) {
        case 'story':
        case 'recipe':
        case 'videogallery':
        case 'photogallery':
            // Code for social media validation
            if (isset($node->field_story_social_media_integ[LANGUAGE_NONE])) {
                foreach ($node->field_story_social_media_integ[LANGUAGE_NONE] as $key_media => $val_media) {
                    // Code for facebook narrative validation
                    if ($val_media['value'] == 'facebook' && empty($node->field_story_facebook_narrative[LANGUAGE_NONE][0]['value'])) {
                        form_set_error('field_story_facebook_narrative', t("Facebook Narrative field is required."));
                    }

                    // Code for Twitter validation
                    if ($val_media['value'] == 'twitter' && empty($node->field_story_tweet[LANGUAGE_NONE][0]['value'])) {
                        form_set_error('field_story_tweet', t("Twitter Narrative field is required."));
                    }
                }
            }
    }
}
