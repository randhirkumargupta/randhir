<?php

/**
 * @file
 *
 * Purpose: ITG social media integration module.
 */
require 'vendor/autoload.php';
module_load_include('inc', 'itg_social_media', 'includes/itg_social_media.form');
module_load_include('inc', 'itg_social_media', 'includes/itg_social_media.settings');

define('FACEBOOK_APP_KEY', '998850543526214');
define('FACEBOOK_APP_SECRET', '899729807fcf2061364278613db4a4e7');
//define('TWITTER_API_KEY', 'ZrAM49Mh50YKRxRTtLY1mP1jE');
//define('TWITTER_API_SECRET', 'GBNz25BRuSYcNJiWyTtsBSCrb6mDWNxtZrK4EHm0tmjB54Zpzi');
//define('TWITTER_ACCESS_TOKEN', '732461289138585601-yKseoi32vL9UTfoHmRt80cl5awdnLE4');
//define('TWITTER_ACCESS_TOKEN_SECRET', 'IBqZLZfohV5yz3xcXTTU8h9X6bZBqg3IRkUV3wiyN1aUI');
// Local settings
define('TWITTER_API_KEY', 'oynNx70nQQo8aWUlcYtc7BUDX');
define('TWITTER_API_SECRET', '2RsvsZLF5hpEcFIjHvqbUNxoeqFStyB9ZEAxognUjVaBWz2r8X');
define('TWITTER_ACCESS_TOKEN', '732461289138585601-ZGsz2F1L9hHH1OBVGAWyiA3Zb9IoxlX');
define('TWITTER_ACCESS_TOKEN_SECRET', 'hp6qwLPSek76vapx9ReocpXdpXa4078SIoKAe3h0m5Xt7');

/**
 * Implement hook_permissions()
 */
function itg_social_media_permission() {
  return array(
    'administer itg_social_media edit_content settings' => array(
      'title' => t('Edit social media section'),
      'description' => t('Using this permission user can edit social media part of any node.'),
    ),
  );
}

/**
 * Implements hook_menu()
 * {@inheritdoc}
 */
function itg_social_media_menu() {
  $items['itg-social-media-settings'] = array(
    'title' => t('Social Media Settings'),
    'page callback' => 'itg_social_media_settings',
    'access arguments' => array('administer itg_social_media edit_content settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_social_media.settings.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter()
 * {@inheritdoc}
 */
function itg_social_media_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['created']['min'])) {
    $form['created']['min'] = array(
      '#title' => t('Start Date'),
      '#type' => 'date_popup',
      '#date_format' => 'd/m/Y',
      '#date_year_range' => '-3:+3',
    );
    $form['created']['max'] = array(
      '#title' => t('End Date'),
      '#type' => 'date_popup',
      '#date_format' => 'd/m/Y',
      '#date_year_range' => '-3:+3',
    );
  }
}

/**
 * Implements hook_block_info()
 *
 * {@inheritdoc}
 */
function itg_social_media_block_info() {
  $block = array();
  $block['social_media_form'] = array(
    'info' => t('Social Media Integration'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $block['social_media_callback'] = array(
    'info' => t('Social Media Callback'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $block;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_social_media_block_view($delta = '') {
  $block = array();
  $arg = arg();
  $c_type = itg_social_media_node_type(check_plain($arg[1]));
  $nid = check_plain($arg[1]);
  switch ($delta) {
    case 'social_media_form':
      $block = array(
        'subject' => t('Social media Integration'),
        'content' => drupal_get_form('itg_social_media_form', $c_type, $nid),
      );

      break;
    case 'social_media_callback':
      $block = array(
        'subject' => t('Social Media Callback settings'),
        'content' => _facebook_callback_settings(),
      );
  }

  return $block;
}

/**
 * After callback function for facebook access token settings.
 * @return stdObject
 */
function _facebook_callback_settings() {
  $fb = itg_social_media_fb_connection();

  $helper = $fb->getRedirectLoginHelper();
  try {
    $accessToken = $helper->getAccessToken();
  }
  catch (Facebook\Exceptions\FacebookResponseException $e) {
    // When Graph returns an error
    drupal_set_message('Graph returned an error: ' . $e->getMessage(), 'error');
  }
  catch (Facebook\Exceptions\FacebookSDKException $e) {
    // When validation fails or other local issues
    drupal_set_message('Facebook SDK returned an error: ' . $e->getMessage(), 'error');
  }

  if (isset($accessToken)) {
    // Logged in!
    $_SESSION['facebook_access_token'] = (string) $accessToken;
    drupal_set_message('Facebook connection has been made successfully', 'status');
  }
  elseif ($helper->getError()) {
    // The user denied the request
    drupal_set_message('User denied the request.', 'error');
  }
  else {
    drupal_set_message('Unable to connect to facebook.', 'error');
  }

  return '';
}

/**
 * get type of the node from nid.
 *
 * @param int $nid
 * @return string
 */
function itg_social_media_node_type($nid) {
  $itg_query = db_select('node', 'n');
  $itg_query->fields('n', array('type'))
      ->condition('nid', $nid);
  $itg_result = $itg_query->execute()->fetchField();

  return $itg_result;
}

/**
 * Set file status to permanant after save.
 * @global stdObject $user
 * @param int $fid
 */
function itg_social_media_perm_file($fid) {
  global $user;
  // Load the file via file.fid.
  $file = file_load($fid);
  // Change status to permanent.
  $file->status = FILE_STATUS_PERMANENT;
  // Save.
  file_save($file);
  // Record that the module (in this example, user module) is using the file. 
  file_usage_add($file, 'user', 'user', $user->uid);

  return $file;
}

/**
 * Facebook video post logic
 */
function itg_social_media_facebook_post($fid, $desc, $type) {
  // Set file status to permanent
  $file = itg_social_media_perm_file($fid);
  // Get file real path
  $path = drupal_realpath($file->uri);
  // Get connection object
  $fb = itg_social_media_fb_connection();
  // Get short url
  $short_url = shorten_url($node->path['alias'], 'goo.gl');
  
  switch ($type) {
    case 'videos':
      $data = [
        'title' => t('Yogesh kumar'),
        'description' => t($desc),
        'source' => $fb->videoToUpload($path),        
      ];

      break;

    case 'photos':
      $data = [
        'message' => t($desc),
        'source' => $fb->fileToUpload($path),        
      ];

      break;
  }


  try {
    $response = $fb->post('/me/' . $type, $data, $_SESSION['facebook_access_token']);
  }
  catch (Facebook\Exceptions\FacebookResponseException $e) {
    // When Graph returns an error
    drupal_set_message('Graph returned an error: ' . $e->getMessage(), 'error');
  }
  catch (Facebook\Exceptions\FacebookSDKException $e) {
    // When validation fails or other local issues
    drupal_set_message('Facebook SDK returned an error: ' . $e->getMessage(), 'error');
  }
  $graphNode = $response->getGraphNode();
  
  watchdog('facebook post', $graphNode['id']);
}

/**
 * Implements hook_form_submit()
 *
 * {@inheritdoc}
 */
function itg_social_media_form_submit($form, &$form_state) {    
  $node = node_load($form_state['values']['nid']);    
  // Facebook video section
  if ($form_state['values']['itg_smi']['facebook_video'] == 'facebook_video') {    
    $desc = $form_state['values']['itg_facebook_video_text'];
    $fid = $form_state['values']['itg_fb_video'];
    //itg_social_media_facebook_post($fid, $desc, 'videos');
    // save node field
    $node->field_story_facebook_video['und'][0] = array(
      'fid' => $fid,
      'display' => 1,
      'description' => ''
    );
    $node->field_story_facebook_vdescripti['und'][0]['value'] = $desc;
  }

  // Facebook Image
  if ($form_state['values']['itg_smi']['facebook'] == 'facebook') {
    $desc = $form_state['values']['itg_facebook_narrative'];
    $fid = $form_state['values']['itg_fb_img'];
    //itg_social_media_facebook_post($fid, $desc, 'photos');
    $node->field_story_facebook_image['und'][0]['fid'] = $form_state['values']['itg_fb_img'];
    $node->field_story_facebook_narrative['und'][0]['value'] = $form_state['values']['itg_facebook_narrative'];
  }

  // Change field value     
  foreach ($form_state['values']['itg_smi'] as $value) {
    if ($value != '0') {
      $data[]['value'][$value] = $value;
    }
  }

  // Social Media integration field
  $node->field_story_social_media_integ['und'] = $data;

  // Facebook log
  if ($form_state['values']['field_story_posted_by_facebook'] != '') {
    $node->field_story_posted_by_facebook['und'][0]['value'] = $form_state['values']['field_story_posted_by_facebook'];
    $node->field_story_time_facebook['und'][0]['value'] = $form_state['values']['field_story_time_facebook'];
  }

  // Twitter log
  if ($form_state['values']['field_story_posted_by_twitter'] != '') {
    $node->field_story_posted_by_twitter['und'][0]['value'] = $form_state['values']['field_story_posted_by_twitter'];
    $node->field_story_time_twitter['und'][0]['value'] = $form_state['values']['field_story_time_twitter'];
  }

  // TWITTER IMAGE
  if ($form_state['values']['itg_smi']['twitter'] == 'twitter') {
    $desc = $form_state['values']['itg_twitter_narrative'];
    $fid = $form_state['values']['itg_twitter_img'];
    $node->field_story_tweet['und'][0]['value'] = $form_state['values']['itg_twitter_narrative'];
    $node->field_story_tweet_image['und'][0]['fid'] = $form_state['values']['itg_twitter_img'];
    itg_social_media_twitter_photo_post($fid, $desc, $node);
  }
  
  // Twitter Video
  if ($form_state['values']['itg_smi']['twitter_video'] == 'twitter_video') {
    $desc = $form_state['values']['field_story_twitter_video_desc'];
    $fid = $form_state['values']['itg_twit_video'];
    $node->field_story_twitter_video['und'][] = array(
      'fid' => $fid,
      'display' => 1,
      'description' => ''
    );
    $node->field_story_twitter_video_desc['und'][0]['value'] = $desc;
    itg_social_media_tvideo_post($fid, $desc, $node);
  }
  node_save($node);  
}

/**
 * Twitter image post function
 * @param int $fid
 * @param string $desc
 * @param stdObject $node
 */
function itg_social_media_twitter_photo_post($fid, $desc, $node) {
  // Create connection with twitter
  $cb = itg_social_media_twitter_connection();
  // Set image status permanent
  $file = itg_social_media_perm_file($fid);
  // Get real path of the file
  $path = drupal_realpath($file->uri);
  // Get short url
  $short_url = shorten_url($node->path['alias'], 'goo.gl');
  $media_files = [$path];
  // will hold the uploaded IDs
  $media_ids = [];

  foreach ($media_files as $files) {
    // upload all media files
    $reply = $cb->media_upload([
      'media' => $files
    ]);
    // and collect their IDs
    $media_ids[] = $reply->media_id_string;
  }
  // convert media ids to string list
  $media_id = implode(',', $media_ids);
  
  // send Tweet with these medias
  $reply = $cb->statuses_update([
    'status' => $desc . ' ' . $short_url,
    'media_ids' => $media_id
  ]);
  watchdog('twitter image', '<pre>' . print_r( $reply, true) . '</pre>');
}

/**
 * Twitter video post function
 * @param int $fid
 * @param string $desc
 * @param stdObject $node
 */
function itg_social_media_tvideo_post($fid, $desc, $node) {
  // Create connection with twitter
  $cb = itg_social_media_twitter_connection();
  // Set image status permanent
  $file = itg_social_media_perm_file($fid);  
  // Get real path of the file
  $path = drupal_realpath($file->uri);
  $size_bytes = filesize($path);
  // Get short url
  $short_url = shorten_url($node->path['alias'], 'goo.gl');
  $fp = fopen($path, 'r');
  
  // INIT the upload
  $reply = $cb->media_upload([
    'command' => 'INIT',
    'total_bytes' => $size_bytes,
    'media_type' => 'video/mp4',    
  ]);

  $media_id = $reply->media_id_string;

  // APPEND data to the upload
  $segment_id = 0;

  while (!feof($fp)) {
    // 1MB per chunk for this sample
    $chunk = fread($fp, 1048576); 
    $reply = $cb->media_upload([
      'command' => 'APPEND',
      'media_id' => $media_id,
      'segment_index' => $segment_id,
      'media' => $chunk
    ]);

    $segment_id++;
  }

  fclose($fp);

  // FINALIZE the upload
  $reply = $cb->media_upload([
    'command' => 'FINALIZE',
    'media_id' => $media_id
  ]);

  if ($reply->httpstatus < 200 || $reply->httpstatus > 299) {
    die('I am dying');
  }

  // Now use the media_id in a Tweet
  $reply = $cb->statuses_update([
    'status' => 'Twitter now accepts video uploads.',
    'media_ids' => $media_id
  ]);
  watchdog('twitter video', '<pre>' . print_r( $reply, true) . '</pre>');
}
