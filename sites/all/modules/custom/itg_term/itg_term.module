<?php

/**
 * Implementation of hook_menu().
 */
function itg_term_menu() {
    $items['texonomy/confirm/ajax/%'] = array(
        'title' => 'Texonomy Term',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            'texonomy_term_ajax_confirm'
        ),
        'access arguments' => array(
            'access content'
        ),
        'type' => MENU_NORMAL_ITEM
    );
    return $items;
}

/**
 * Validate callback function.
 * @param array $form
 * @param array reference $form_state
 * @return array $confirm_form
 */
function texonomy_term_ajax_confirm($form, &$form_state) {
    $tid  = arg(3);
    $term = taxonomy_term_load($tid);

    $form['tid']  = array(
        '#type' => 'value',
        '#value' => $tid
    );
    $form['name'] = array(
        '#type' => 'value',
        '#value' => $term->name
    );

    $confirm_form = confirm_form($form, t('Are you sure you want to delete this term %title?', array(
        '%title' => $term->name
    )), "tags-management", t('This action cannot be undone.'), t('Delete'), t('Cancel'));
    return $confirm_form;
}


/**
 * Validate callback submit function.
 * @param array $form
 * @param array reference $form_state
 */
function texonomy_term_ajax_confirm_submit($form, &$form_state) {
    $form_values = $form_state['values'];
    if (isset($form_state['values']['confirm'])) {
        $tid  = $form_state['values']['tid'];
        $term = taxonomy_term_load($tid);
        taxonomy_term_delete($tid);
        drupal_set_message(t('Delete %title.', array(
            '%title' => $term->name
        )));
    }
    drupal_goto('tags-management'); // redirect path
}


/**
 * Implementation of hook_form_alter().
 * @param array $form
 * @param array reference $form_state
 * @param type $form_id
 * @return array $form
 */
function itg_term_form_alter(&$form, &$form_state, $form_id) {
    // Load the currently logged in user.
    global $user;
    switch ($form_id) {

        case 'taxonomy_csv_export_form':
            // Check if the user has not the 'administrator' role.
            if (!in_array('administrator', $user->roles)) {
                $form['tab']['content']['#title']           = FALSE;
                $form['tab']['csv_format']['#access']       = FALSE;
                $form['tab']['advanced_options']['#access'] = FALSE;
                $form['tab']['content']['#title']           = t('Vocabularies to export for tags');

                $form['tab']['content']['export_format']['#access']        = FALSE;
                $form['tab']['content']['export_vocabulary_id']['#access'] = FALSE;

                $form['export_default_values']['#access'] = FALSE;

                // set redirect destination
                $destination = 'tags-management';

                $form['actions']['cancel'] = array(
                    '#markup' => l(t('Cancel'), $destination, array(
                        'attributes' => array(
                            'class' => 'button'
                        )
                    )),
                    '#weight' => 21,
                    '#value' => t('Cancel')
                );
            }
            break;

        case 'taxonomy_csv_import_form':
            // Check if the user has not the 'administrator' role.
            if (!in_array('administrator', $user->roles)) {
                $form['csv_import_example'] = array(
                    '#prefix' => "<div class='term-main-wrap'>" . t('Click to Download') . " " . l(t('Import Example'), 'sites/all/modules/custom/itg_term/examples/term.csv') . "</div>"
                );

                $form['tab']['import_format']['#options']['#access'] = FALSE;
                $form['tab']['import_format']['#options']            = array(
                    'fields' => 'Fields'
                );
                $form['tab']['format']['#access']                    = FALSE;
                $form['tab']['csv_format']['#access']                = FALSE;
                $form['tab']['import_options']['#access']            = FALSE;
                $form['tab']['advanced_options']['#access']          = FALSE;

                $form['tab']['import_format']['#options']['#access'] = FALSE;
                $form['tab']['import_format']['#options']            = array(
                    'fields' => 'Fields'
                );

                $form['tab']['import']['#title']                               = FALSE;
                $form['tab']['import']['source_choice']['#options']['#access'] = FALSE;
                $form['tab']['import']['source_choice']['#options']            = array(
                    'file' => 'In a local file'
                );
                $form['tab']['import']['source_choice']['#access']             = FALSE;
                $form['tab']['import']['text']['#access']                      = FALSE;
                $form['tab']['import']['url']['#access']                       = FALSE;

                $form['tab']['destination']['vocabulary_target']['#options']['#access'] = FALSE;
                $form['tab']['destination']['vocabulary_target']['#options']            = array(
                    'existing' => 'Import in an existing vocabulary'
                );

                $form['tab']['destination']['vocabulary_id']['#options']['#access'] = FALSE;
                $form['tab']['destination']['vocabulary_id']['#options']            = array(
                    1 => 'Tags'
                );

                $form['tab']['destination']['#type']                           = FALSE;
                $form['tab']['destination']['import_fields_custom']['#access'] = FALSE;
                $form['tab']['destination']['info_hierarchy']['#access']       = FALSE;
                $form['tab']['destination']['check_hierarchy']['#access']      = FALSE;
                $form['tab']['destination']['set_hierarchy']['#access']        = FALSE;
                $form['tab']['destination']['delete_terms']['#access']         = FALSE;
                $form['tab']['destination']['vocabulary_target']['#access']    = FALSE;
                $form['tab']['destination']['vocabulary_id']['#access']        = FALSE;
                $form['tab']['destination']['i18n_translation']['#title']      = FALSE;
                $form['actions']['import_default_values']['#access']           = FALSE;

                $form['#submit'][] = 'term_redirect_handler';

                // set redirect destination
                $destination = 'tags-management';

                $form['actions']['cancel'] = array(
                    '#markup' => l(t('Cancel'), $destination, array(
                        'attributes' => array(
                            'class' => 'button'
                        )
                    )),
                    '#weight' => 21,
                    '#value' => t('Cancel')
                );

            }

            break;
    }
    return $form;
}

/**
 * Implementation of hook_batch_alter().
 * @param array reference $batch
 */

function itg_term_batch_alter(&$batch) {

    if (isset($batch['sets'][0]['operations'][0][0]) && $batch['sets'][0]['operations'][0][0] == '_taxonomy_csv_vocabulary_export_process') {
        // set message
        variable_set('term_export_message', 'Terms are exported from Tags');
        drupal_set_message(t(variable_get('term_export_message')));
        // redirect path
        $batch['form_state']['redirect']['path'] = 'tags-management';
    }
    elseif (isset($batch['sets'][0]['operations'][0][0]) && $batch['sets'][0]['operations'][0][0] == '_taxonomy_csv_vocabulary_import_process') {
        // set message
        variable_set('term_import_message', 'Terms are imported.');
        drupal_set_message(t(variable_get('term_import_message')));
        // redirect path
        $batch['form_state']['redirect']['path'] = 'tags-management';
    }
}


/**
 * Attaches the redirect to the submitted form.
 * @param type $form
 * @param array reference $form_state
 */
function term_redirect_handler($form, &$form_state) {
    $form_state['redirect'] = 'tags-management';
}


/**
 * Implement hook_views_pre_render
 * @param Object $view
 */
function itg_term_views_pre_render(&$view) {
    if (isset($view->name) && $view->name == "tags_management") {
        if (arg(0) == 'tags-management') {
            $message_arr = drupal_set_message();
            if (isset($message_arr['status']) && $message_arr['status'][0] == variable_get('term_import_message')) {
                // To unset message
                unset($_SESSION['messages']['status']);
                unset($_SESSION['messages']['warning']);
                //To override message

                drupal_set_message(t('Warnings have been reported during import process (bad formatted)'), 'warning');
                drupal_set_message(t('Terms are imported into vocabulary "tags".'));
            }
            elseif (isset($message_arr['status']) && $message_arr['status'][0] == variable_get('term_export_message')) {
                $regexp = "<a\s[^>]*href=(\"??)([^\" >]*?)\\1[^>]*>(.*)<\/a>";
                if (preg_match_all("/$regexp/siU", $message_arr['status'][2], $matches, PREG_SET_ORDER)) {

                    // To unset message
                    unset($_SESSION['messages']['status']);
                    unset($_SESSION['messages']['warning']);
                    $filepath      = $matches[0][2];
                    $filename      = $matches[0][3];
                    $download_link = l(t($filename), $filepath);
                    //To override message
                    drupal_set_message(check_plain(t('Click csv file to download')) . ' ' . $download_link);
                }
            }
        }

        //Add "Create Tag" button on listing page of Tags Management

        $header_content_term = l(t('Create Tag'), 'admin/structure/taxonomy/tags/add') . " " . l(t('Import CSV'), 'admin/structure/taxonomy/csv_import') . " " . l(t('Export CSV'), 'admin/structure/taxonomy/csv_export');

        $view->attachment_before = $header_content_term;
    }
}

/**
 * Implements custom _form_validate() for taxonomy_form_term().
 */
function itg_term_validate($form, &$form_state) {
    $term = $form_state['values']['name'];
    $vid  = $form_state['values']['vid'];
    $tid  = $form_state['values']['tid'];

    if (itg_category_manager_is_dupe_term($term, $vid, $tid)) {
        $tid_existing_term = itg_category_manager_get_term_from_name($term, $vid);
        if ($tid_existing_term) {
            form_set_error('name', t('Term name already exists.'));
        }
    }
}

/*
 * Implementation of hook_form_FORM_ID_alter
 * @param array $form
 * @param array reference $form_state
 * Hiding taxonomy term description field
 */
function itg_term_form_taxonomy_form_term_alter(&$form, &$form_state) {
    if (is_array($form['#term']) && count($form['#term']) > 0) {
        if (isset($form['#term']['vocabulary_machine_name']) && $form['#term']['vocabulary_machine_name'] == 'tags') {
            $destination = 'tags-management';

            // Call valiadte and after build

            $form['#validate'][] = 'itg_term_validate';

            // redirect path

            $form['#submit'][] = 'term_redirect_handler';
            $form['actions']['cancel'] = array(
                '#markup' => l(t('Cancel') , $destination, array(
                    'attributes' => array(
                        'class' => 'button'
                    )
                )) ,
                '#weight' => 21,
                '#value' => t('Cancel')
            );
            unset($form['tags']);
            unset($form['#metatags']);
            $form['description']['#access'] = FALSE;
            $form['relations']['#access'] = FALSE;
            $form['tags']['und']['#metatags']['#access'] = FALSE;
        }
    }
}

/**
 * Implementation of hook_form_views_exposed_form_alter().
 * @param array $form
 * @param array reference $form_state
 */
function itg_term_form_views_exposed_form_alter(&$form, &$form_state) {
    if (isset($form['#id']) && $form['#id'] == 'views-exposed-form-tags-management-page') {
        $form['#info']['filter-created']['label'] = FALSE;
        $form['name']['#attributes'] = array('placeholder' => t('Name'));
        unset($form['filter-created']['label']);
        $form['created']['min'] = array(
            '#type' => 'date_popup',
            '#title' => t('From'),
            '#date_format' => 'Y-m-d',
            '#date_year_range' => '-1:+1',
            '#attributes' => array('readonly' => 'readonly'),

        );
        $form['created']['max'] = array(
            '#type' => 'date_popup',
            '#title' => t('To'),
            '#date_format' => 'Y-m-d',
            '#date_year_range' => '-1:+1',
            '#attributes' => array('readonly' => 'readonly'),
        );
    }
}

/**
 * Implementation of hook_views_query_alter
 * @param array reference $view
 * @param array reference $query
 */
function itg_term_views_query_alter(&$view, &$query) {
    if (isset($view->name) && $view->name === 'tags_management') {
        if (isset($_GET['created']['max']['date'])) {
            $max_date = strtotime(date('Y-m-d', strtotime($_GET['created']['max']['date'] . ' +1 days')));
            $max_date_condition = " AND " . $max_date;

            // $max_conditions = $view->query->where[1]['conditions'][1]['field'];

            $max_conditions_array = explode('AND', $view->query->where[1]['conditions'][1]['field']);
            $view->query->where[1]['conditions'][1]['field'] = $max_conditions_array[0] . $max_date_condition;
        }
    }
}
