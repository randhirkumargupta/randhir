<?php

/**
* Implementation of hook_menu().
*/
function itg_term_menu() {

 $items['texonomy/confirm/ajax/%'] = array(
  'title' => 'Texonomy Term', 
  'page callback' => 'drupal_get_form', 
  'page arguments' => array('texonomy_term_ajax_confirm'), 
  'access arguments' => array('access content'), 
  'type' => MENU_NORMAL_ITEM
  );
  
  return $items;
}



/**
 * Validate callback function. 
 * @param array $form 
 * @param array reference $form_state
 */

function texonomy_term_ajax_confirm($form, &$form_state) {
   $tid = arg(3);
   $term = taxonomy_term_load($tid);
 
  $form['tid'] = array(
    '#type' => 'value',
    '#value' => $tid,
  );
  $form['name'] = array(
    '#type' => 'value',
    '#value' => $term->name,
  );

 return confirm_form($form,
      t('Are you sure you want to delete this term %title?', array('%title' => $term->name)),
      "tags-management",
      t('This action cannot be undone.'),
      t('Delete'),
      t('Cancel'));
 
}


/**
 * Validate callback submit function. 
 * @param array $form 
 * @param array reference $form_state
 */

function texonomy_term_ajax_confirm_submit($form, &$form_state) {
  $form_values = $form_state['values'];

  if ($form_state['values']['confirm']) {
    $tid = $form_state['values']['tid'];
 
    $term = taxonomy_term_load($tid);
    taxonomy_term_delete($tid);
    drupal_set_message(t('Delete %title.', array('%title' => $term->name)));
    }

  drupal_goto('tags-management'); // this is menu callback for 

}


/**
 * Implementation of hook_form_alter().
 * @param array $form 
 * @param array reference $form_state
 * @param type $form_id
 * @return array $form
 */

function itg_term_form_alter(&$form, &$form_state, $form_id) {

    switch ($form_id) {
        case 'taxonomy_form_term':
          // redirect path        
          $form['#submit'][] = 'term_redirect_handler';
          
        break;
        case 'taxonomy_csv_export_form':
             $form['tab']['content']['#title'] = FALSE;
              $form['tab']['csv_format']['#access'] = FALSE;
              $form['tab']['advanced_options']['#access'] = FALSE;
              $form['tab']['content']['#title'] = 'Vocabularies to export for tags'; 
              
              $form['tab']['content']['export_format']['#access'] = FALSE;
              $form['tab']['content']['export_vocabulary_id']['#access'] = FALSE;
              
              $form['export_default_values']['#access'] = FALSE;

        break; 
        case 'taxonomy_csv_import_form':   
            
            $form['tab']['import_format']['#options']['#access'] = FALSE;   
            $form['tab']['import_format']['#options'] = array('fields' => 'Fields');
            $form['tab']['format']['#access'] = FALSE;   
            $form['tab']['csv_format']['#access'] = FALSE;   
            $form['tab']['import_options']['#access'] = FALSE;   
            $form['tab']['advanced_options']['#access'] = FALSE;
            
            $form['tab']['import_format']['#options']['#access'] = FALSE;   
            $form['tab']['import_format']['#options'] = array('fields' => 'Fields');

            $form['tab']['import']['#title'] = FALSE;   
            $form['tab']['import']['source_choice']['#options']['#access'] = FALSE;   
            $form['tab']['import']['source_choice']['#options'] = array('file' => 'In a local file');
            $form['tab']['import']['source_choice']['#access'] = FALSE;   
            $form['tab']['import']['text']['#access'] = FALSE;
            $form['tab']['import']['url']['#access'] = FALSE;

            $form['tab']['destination']['vocabulary_target']['#options']['#access'] = FALSE;   
            $form['tab']['destination']['vocabulary_target']['#options'] = array('existing' => 'Import in an existing vocabulary');

            $form['tab']['destination']['vocabulary_id']['#options']['#access'] = FALSE;   
            $form['tab']['destination']['vocabulary_id']['#options'] = array(1 => 'Tags');
            
            $form['tab']['destination']['#type']['#access'] = FALSE;
            $form['tab']['destination']['import_fields_custom']['#access'] = FALSE;
            $form['tab']['destination']['info_hierarchy']['#access'] = FALSE;
            $form['tab']['destination']['check_hierarchy']['#access'] = FALSE;
            $form['tab']['destination']['set_hierarchy']['#access'] = FALSE;
            $form['tab']['destination']['delete_terms']['#access'] = FALSE;
            $form['tab']['destination']['vocabulary_target']['#access'] = FALSE;
            $form['tab']['destination']['vocabulary_id']['#access'] = FALSE;
            $form['tab']['destination']['i18n_translation']['#title'] = FALSE;


            $form['actions']['import_default_values']['#access'] = FALSE;
            
            $form['#submit'][] = 'term_redirect_handler';
            
          
        break; 
    return $form;
    }
}



/**
 * Implementation of hook_batch_alter().
 * @param array reference $batch
 */

function itg_term_batch_alter(&$batch) {

  if ($batch['sets'][0]['operations'][0][0] == '_taxonomy_csv_vocabulary_export_process') {
     // set message
      drupal_set_message(t('Terms are exported from Tags.'));
     // redirect path
    $batch['form_state']['redirect']['path'] = 'tags-management';
    
  }
  elseif ($batch['sets'][0]['operations'][0][0] == '_taxonomy_csv_vocabulary_import_process') {
      // set message
      drupal_set_message(t('Terms are imported into existing vocabulary Tags.'));
      // redirect path
      $batch['form_state']['redirect']['path'] = 'tags-management';
  }
}



/**
 * Attaches the redirect to the submitted form.
 * @param type $form
 * @param array reference $form_state
 */

function term_redirect_handler($form, &$form_state) {
  $form_state['redirect'] = 'tags-management';
}


/**
 * Implement hook_views_pre_render
 * @param Object $view
 */
function itg_term_views_pre_render(&$view) {
  if ($view->name == "tags_management") {
    if (arg(0) == 'tags-management') {
        $message_arr = drupal_set_message();
        
       // p($message_arr);
        if ($message_arr['status'][0] == 'Terms are imported into existing vocabulary Tags.') {
          // To unset message
          unset($_SESSION['messages']);
          //To override message
          drupal_set_message(t('Terms are imported into existing vocabulary Tags.'));
        }
        elseif ($message_arr['status'][0] == 'Terms are exported from Tags.') {
                      
            $regexp = "<a\s[^>]*href=(\"??)([^\" >]*?)\\1[^>]*>(.*)<\/a>";

            if (preg_match_all("/$regexp/siU", $message_arr['status'][2], $matches, PREG_SET_ORDER)) {
            // Start the session
               session_start();
               $_SESSION['csv_flag'] = $matches;
            }
        } 
    }

    //Add "Create Tag" button on listing page of Tags Management
    $header_content_term = '<a href="./admin/structure/taxonomy/tags/add">Create Tag</a>&nbsp;<a href="./admin/structure/taxonomy/csv_import">CSV import</a>&nbsp;<a href="./admin/structure/taxonomy/csv_export">CSV export</a>';
    $view->attachment_before = $header_content_term;
          if (isset($_SESSION['csv_flag'])) {
              //export_to_csv($_SESSION['csv_flag']);
          }
  }
}

/* 
* @param array $result   
* Download taxonomy term
*/

function export_to_csv($result) {
  $file_href = $matches[0][2];
  $file_name = $matches[0][3];
  header('Content-Type: application/csv');
  header("Content-Disposition: attachment; $file_name");
  header('Pragma: no-cache');
  readfile($file_href);
  unset($_SESSION['csv_flag']);
}

    
/*
* Implementation of hook_form_FORM_ID_alter
* @param array $form 
* @param array reference $form_state  
* Hiding taxonomy term description field
*/

function itg_term_form_taxonomy_form_term_alter(&$form, &$form_state) {
  unset($form['tags']);
  unset($form['#metatags']);
  $form['description']['#access'] = FALSE;
  $form['relations']['#access'] = FALSE;
  $form['tags']['und']['#metatags']['#access'] = FALSE;
}


/** 
*  Implementation of hook_form_views_exposed_form_alter().
* @param array $form 
* @param array reference $form_state   
*/  

function itg_term_form_views_exposed_form_alter(&$form, &$form_state) {
  
  if ($form['#id'] == 'views-exposed-form-tags-management-page') {
  
    $form['status']['#options'] = array('All' => '- Any -', 1 => 'Published', '0' => 'Unpublished');
    $form['#info']['filter-created']['label'] = FALSE;
    unset($form['filter-created']['label']);
    $form['created']['min'] = array(
        '#type' => 'date_popup',
        '#title' => t('From'),
        '#date_format' => 'Y-m-d',
      );
    $form['created']['max'] = array(
        '#type' => 'date_popup',
        '#title' => t('To'),
        '#date_format' => 'Y-m-d',
      );  
  }

}
