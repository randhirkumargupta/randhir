<?php

/**
 * @file
 * The ITG Category Multiple.
 *
 * Contains functionality for ITG Category Multiple. *
 */

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_category_multiple_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'story_node_form':

      $sections = itg_category_multiple_get_section();

      $options_category = array('option1', 'option2', 'option3');

      $form['itg_category_markup'] = array(
          '#markup' => '
        <select name = "itg_section" class="itg-category-section" multiple="multiple">' . $sections . '</select>
       <div class="itg_category_holder">
        <select name = "itg_category" class="itg-category" multiple="multiple"></select>
         <div class="itg_sub_category_holder">
           <select name = "itg_sub_category" class="itg-sub-category" multiple="multiple"></select>
             <div class="itg_sub_sub_category_holder">
             <select name = "itg_sub_sub_category" class="itg-sub-sub-category" multiple="multiple"></select>
                 <div class="itg_sub_sub_sub_category_holder">
                   <select name = "itg_sub_sub_sub_category" class="itg-sub-sub-sub-category" multiple="multiple"></select>
                 </div>
            </div>    
        </div>    
       </div>    
        ',
      );




//      $form['itg_category_section'] = array(
//          '#type' => 'select',
//          '#multiple' => TRUE,
//          '#title' => t('Section'),
//          '#required' => FALSE,
//          '#options' => $sections,
//          '#size' => 5,
//          '#default_value' => '',
//          '#ajax' => array(
//              'callback' => 'itg_category_sub_section_get_values',
//              'wrapper' => 'itg-category-sub-section-get-values',
//          ),
//      );
//
//      $form['itg_category_sub_section'] = array(
//          '#prefix' => '<div id="itg-category-sub-section-get-values">',
//          '#suffix' => '</div>',
//          '#type' => 'Sub Section',
//          '#multiple' => TRUE,
//          '#title' => t('Category'),
//          '#required' => FALSE,
//          '#options' => $options_category,
//          '#size' => 5,
//          '#default_value' => '',
//          '#ajax' => array(
//              'callback' => 'ajax_view_display_dropdown_callback',
//              'wrapper' => 'view-display-dropdown',
//          ),
//      );
//
//      $form['itg_category_sub_sub_section'] = array(
//          '#type' => 'select',
//          '#multiple' => TRUE,
//          '#title' => t('Sub Sub Section'),
//          '#required' => FALSE,
//          '#options' => $options_category,
//          '#size' => 5,
//          '#default_value' => '',
//      );
//
//
//      $form['itg_category_sub_sub_sub_section'] = array(
//          '#type' => 'select',
//          '#multiple' => TRUE,
//          '#title' => t('Sub Sub Sub Section'),
//          '#required' => FALSE,
//          '#options' => $options_category,
//          '#size' => 5,
//          '#default_value' => '',
//      );
//
//      $form['itg_category_sub_sub_sub_sub_section'] = array(
//          '#type' => 'select',
//          '#multiple' => TRUE,
//          '#title' => t('Sub Sub Sub Sub Section'),
//          '#required' => FALSE,
//          '#options' => $options_category,
//          '#size' => 5,
//          '#default_value' => '',
//      );

      $form['#after_build'][] = 'itg_category_multiple_after_build';
      break;
  }
}

/*
 * Implements itg_category_multiple_get_section()
 */

function itg_category_multiple_get_section() {
//  $data = array();
//
//  $section_cache = cache_get('itg_section', 'cache');
//  if (!empty($section_cache->data)) {
//    return $section_cache->data;
//  } else {
//
//    $html = '';
//    try {
//      $query = db_select('taxonomy_term_data', 'td');
//      $query->leftJoin('taxonomy_term_hierarchy', 'th', 'th.tid = td.tid');
//      $result = $query
//              ->condition('td.vid', CATEGORY_MANAGMENT)
//              ->condition('th.parent', 0)
//              ->fields('td', array('tid', 'name'))
//              ->execute();
//
//      foreach ($result as $row) {
//        //$data[$row->tid] = $row->name;
//        $html.='<option value="' . $row->tid . '">' . $row->name . '</option>';
//      }
//      cache_set('itg_section', $html, 'cache');
//
//      return $html;
//    } catch (Exception $e) {
//      drupal_set_message($e->getMessage(), 'error');
//    }
//  }


  if (function_exists('mongodb')) {
    $con = mongodb();
    $html = '';
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $category_data = $people->find(array("parent" => '0'));
        foreach($category_data as $chunk_data){
           $html.='<option value="' . $chunk_data['tid'] . '">' . $chunk_data['name'] . '</option>';

        }  
        return $html;
      }
    }
  }
}

/**
 * Implements itg_caterogy_return_by_tid().
 */
function itg_caterogy_return_by_tid($parent_tid) {

  $itg_section_cat = cache_get('itg_section_cat' . $parent_tid, 'cache');
  if (!empty($itg_section_cat->data)) {
    return $itg_section_cat->data;
  } else {
    $query = db_select('taxonomy_term_data', 'td');
    $query->leftJoin('taxonomy_term_hierarchy', 'th', 'th.tid = td.tid');
    $result = $query
            ->condition('td.vid', CATEGORY_MANAGMENT)
            ->condition('th.parent', $parent_tid)
            ->fields('td', array('tid', 'name'))
            ->execute();

    foreach ($result as $row) {
      $html.='<option value="' . $row->tid . '">' . $row->name . '</option>';
    }

    cache_set('itg_section_cat' . $parent_tid, $html, 'cache');
  }
  return $html;
}

/**
 * After build for multiple category related form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_category_multiple_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'itg_category_multiple') . '/js/itg_category_multiple.js');
  return $form;
}

/**
 * Implements hook_menu().
 * @return array $items
 */
function itg_category_multiple_menu() {
  $items['itg-category-multiple-find'] = array(
      'page callback' => 'itg_category_multiple_find',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements itg_category_multiple_find()
 */
function itg_category_multiple_find() {
  
}
