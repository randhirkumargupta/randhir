<?php

/**
 * @file
 * The ITG Category Multiple.
 *
 * Contains functionality for ITG Category Multiple. *
 */

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_category_multiple_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'story_node_form':
      $content_type = '';
      if (isset($form['#node']->type) && !empty($form['#node']->type)) {
        $content_type = $form['#node']->type;
      }

      //pr($form_state['build_info']['args'][0]->field_story_extra_data[LANGUAGE_NONE][0]['value']);

      $itg_category_multiple_prev_data = NULL; //p($form_state['build_info']['args'][0]);
      if (isset($form_state['build_info']['args'][0]->field_story_extra_data[LANGUAGE_NONE][0]['value']) &&
          !empty($form_state['build_info']['args'][0]->field_story_extra_data[LANGUAGE_NONE][0]['value'])
      ) {
        $itg_category_multiple_prev_data = json_decode(base64_decode($form_state['build_info']['args'][0]->field_story_extra_data[LANGUAGE_NONE][0]['value']));
      }

      // Code stared for the SECTION so that we can get the default sections options

      $section_default_options = array(-1 => '- Select Section -');
      if (isset($itg_category_multiple_prev_data->section) && !empty($itg_category_multiple_prev_data->section)) {
        $section_default_options = $itg_category_multiple_prev_data->section;
      }

      // Code started for CATEGORY so that we can get category options and its defualt options

      $category_default_options = array(-1 => '- Select Category -');
      $category_selected_options = array(-1 => '- Select Category -'); // This value array will be dynamically generated by the use of default selected options  
      if (isset($itg_category_multiple_prev_data->category) && !empty($itg_category_multiple_prev_data->category)) {
        $category_default_options = $itg_category_multiple_prev_data->category;
        if (isset($itg_category_multiple_prev_data->section)) {
          $category_selected_options = itg_category_get_texo_desired($itg_category_multiple_prev_data->section);
        }
      }


      // Code started for  sub category so that we can get sub category options and its default values 
      $sub_category_default_options = array(-1 => '- Select Sub Category -');
      $sub_category_selected_options = array(-1 => '- Select Sub Category -'); // This value array will be dynamically generated by the use of default selected options  
      if (isset($itg_category_multiple_prev_data->sub_category) && !empty($itg_category_multiple_prev_data->sub_category)) {
        $sub_category_default_options = $itg_category_multiple_prev_data->sub_category;
        if (isset($itg_category_multiple_prev_data->category)) {
          $sub_category_selected_options = itg_category_get_texo_desired($itg_category_multiple_prev_data->category);
        }
      }


      // Code started for  sub sub category so that we can get sub sub category options and its default values 
      $sub_sub_category_default_options = array(-1 => '- Select Sub Sub Category -');
      $sub_sub_category_selected_options = array(-1 => '- Select Sub Sub Category -'); // This value array will be dynamically generated by the use of default selected options  
      if (isset($itg_category_multiple_prev_data->sub_sub_category) && !empty($itg_category_multiple_prev_data->sub_sub_category)) {
        $sub_sub_category_default_options = $itg_category_multiple_prev_data->sub_sub_category;
        if (isset($itg_category_multiple_prev_data->sub_category)) {
          $sub_sub_category_selected_options = itg_category_get_texo_desired($itg_category_multiple_prev_data->sub_category);
        }
      }

      // Code started for  sub sub sub category so that we can get sub sub sub category options and its default values 
      $sub_sub_sub_category_default_options = array(-1 => '- Select Sub Sub Sub Category -');
      $sub_sub_sub_category_selected_options = array(-1 => '- Select Sub Sub Sub Category -'); // This value array will be dynamically generated by the use of default selected options  
      if (isset($itg_category_multiple_prev_data->sub_sub_sub_category) && !empty($itg_category_multiple_prev_data->sub_sub_sub_category)) {
        $sub_sub_sub_category_default_options = $itg_category_multiple_prev_data->sub_sub_sub_category;
        if (isset($itg_category_multiple_prev_data->sub_sub_category)) {
          $sub_sub_sub_category_selected_options = itg_category_get_texo_desired($itg_category_multiple_prev_data->sub_sub_category);
        }
      }



      // Code started for generating options for the primary category 

      $complete_structure = array_merge(
          (array) $itg_category_multiple_prev_data->section, (array) $itg_category_multiple_prev_data->category, (array) $itg_category_multiple_prev_data->sub_category, (array) $itg_category_multiple_prev_data->sub_sub_category, (array) $itg_category_multiple_prev_data->sub_sub_sub_category
      );

      $itg_primary_category = get_parent_structure_by_for_all(array_filter($complete_structure));

      // This is for primary category default value

      $default_value_of_primary_cat = array('- Select Primary Category -');
      if (isset($form_state['build_info']['args'][0]->field_primary_category[LANGUAGE_NONE][0]['value']) && !empty($form_state['build_info']['args'][0]->field_primary_category[LANGUAGE_NONE][0]['value'])) {
        $default_value_of_primary_cat = $form_state['build_info']['args'][0]->field_primary_category[LANGUAGE_NONE][0]['value'];
      }

      $itg_category_vocabs = get_itg_category_vocabs($form_state);
      $sections = itg_category_multiple_get_section($itg_category_vocabs, $content_type);
      $options_category = array('_none' => '--Select-');


      $form['category_holder'] = array(
      );

      $form['category_holder']['itg_section'] = array(
        '#type' => 'select',
        '#multiple' => TRUE,
        '#title' => t('Section'),
        '#validated' => TRUE,
        '#options' => $sections,
        '#size' => 10,
        '#default_value' => $section_default_options,
      );
      $form['category_holder']['itg_category'] = array(
        '#type' => 'select',
        '#multiple' => TRUE,
        '#title' => t('Category'),
        '#validated' => TRUE,
        '#options' => $category_selected_options,
        '#size' => 10,
        '#default_value' => $category_default_options,
      );

      $form['category_holder']['itg_sub_category'] = array(
        '#type' => 'select',
        '#multiple' => TRUE,
        '#title' => t('Sub Category'),
        '#validated' => TRUE,
        '#options' => $sub_category_selected_options,
        '#size' => 10,
        '#default_value' => $sub_category_default_options,
      );


      $form['category_holder']['itg_sub_sub_category'] = array(
        '#type' => 'select',
        '#multiple' => TRUE,
        '#title' => t('Sub Sub Category'),
        '#validated' => TRUE,
        '#options' => $sub_sub_category_selected_options,
        '#size' => 10,
        '#default_value' => $sub_sub_category_default_options,
      );

      $form['category_holder']['itg_sub_sub_sub_category'] = array(
        '#type' => 'select',
        '#multiple' => TRUE,
        '#title' => t('Sub Sub Sub Category'),
        '#validated' => TRUE,
        '#options' => $sub_sub_sub_category_selected_options,
        '#size' => 10,
        '#default_value' => $sub_sub_sub_category_default_options,
      );

      $form['category_holder']['itg_primary_category'] = array(
        '#type' => 'select',
        '#size' => '10',
        '#required' => TRUE,
        '#title' => t('Primary Category'),
        '#validated' => TRUE,
        '#options' => $itg_primary_category,
        '#default_value' => $default_value_of_primary_cat,
      );

      // Hiding story extra field 
      if (isset($form['field_story_extra_data'][LANGUAGE_NONE][0]['value']['#type'])) {
        $form['field_story_extra_data'][LANGUAGE_NONE][0]['value']['#type'] = 'hidden';
      }
      //    p($form['actions']);
      //    $form['actions']['submit']['#submit'][] = 'itg_category_multiple_custom_callback';
      $form['#after_build'][] = 'itg_category_multiple_after_build';
      break;
  }
}

/*
 * Implements itg_category_multiple_get_section()
 */

function itg_category_multiple_get_section($itg_category_vocabs, $content_type) {
  if (function_exists('mongodb')) {
    $con = mongodb();
    $html = '';
    $data = array();
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $category_data = $people->find(
            array(
              "parent" => 0,
              "status" => 1,
              "machine_name" => array('$in' => $itg_category_vocabs),
              "content_type" => array('$regex' => $content_type)
            )
        );
        foreach ($category_data as $chunk_data) {
          $data[$chunk_data['tid']] = $chunk_data['name'];
        }
        return $data;
      }
    }
  }
}

/**
 * After build for multiple category related form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_category_multiple_after_build($form, &$form_state) {
  //pr( $form['field_primary_category']['und']);
//p($form_state['input']['itg_primary_category']);
  //if (isset($form_state['input']['itg_primary_category']) && !empty($form_state['input']['itg_primary_category'])) {
  // $form['field_primary_category']['und'][0]['value'] = $form_state['input']['itg_primary_category'];
  //}
  //Getting category on the basis of section

  if (isset($form_state['input']['itg_section']) && !empty($form_state['input']['itg_section'])) {
    $itg_section = itg_category_get_texo_desired($form_state['input']['itg_section']); //p($itg_section);
    $form['category_holder']['itg_category']['#options'] = $itg_section;
  }


  //Getting sub category on the basis of category

  if (isset($form_state['input']['itg_category']) && !empty($form_state['input']['itg_category'])) {
    $itg_category = itg_category_get_texo_desired($form_state['input']['itg_category']);
    $form['category_holder']['itg_sub_category']['#options'] = $itg_category;
  }


  // Getting sub category on the basis of sub category
  if (isset($form_state['input']['itg_sub_category']) && !empty($form_state['input']['itg_sub_category'])) {
    $itg_sub_category = itg_category_get_texo_desired($form_state['input']['itg_sub_category']);
    $form['category_holder']['itg_sub_sub_category']['#options'] = $itg_sub_category;
  }

  // Getting sub sub category  on the basis of sub sub category

  if (isset($form_state['input']['itg_sub_sub_category']) && !empty($form_state['input']['itg_sub_sub_category'])) {
    $itg_sub_sub_category = itg_category_get_texo_desired($form_state['input']['itg_sub_sub_category']);
    $form['category_holder']['itg_sub_sub_sub_category']['#options'] = $itg_sub_sub_category;
  }

  if (isset($form_state['input']['itg_section']) && !empty($form_state['input']['itg_section'])) {
    $fsection = isset($form_state['input']['itg_section']) && !empty($form_state['input']['itg_section']) ? $form_state['input']['itg_section'] : array();
    $fcategory = isset($form_state['input']['itg_category']) && !empty($form_state['input']['itg_category']) ? $form_state['input']['itg_category'] : array();
    $fsub_category = isset($form_state['input']['itg_sub_category']) && !empty($form_state['input']['itg_sub_category']) ? $form_state['input']['itg_sub_category'] : array();
    $fsub_sub_category = isset($form_state['input']['itg_sub_sub_category']) && !empty($form_state['input']['itg_sub_sub_category']) ? $form_state['input']['itg_sub_sub_category'] : array();
    $fsub_sub_sub_category = isset($form_state['input']['itg_sub_sub_sub_category']) && !empty($form_state['input']['itg_sub_sub_sub_category']) ? $form_state['input']['itg_sub_sub_sub_category'] : array();
    $complete_structure = array_merge(
        $fsection, $fcategory, $fsub_category, $fsub_sub_category, $fsub_sub_sub_category
    );

    $itg_primary_category = get_parent_structure_by_for_all(array_filter($complete_structure));
    $form['category_holder']['itg_primary_category']['#options'] = $itg_primary_category;
  }

  //   itg_sub_sub_category  itg_sub_sub_sub_category itg_primary_category

  drupal_add_js(drupal_get_path('module', 'itg_category_multiple') . '/js/itg_category_multiple.js');

  return $form;
}

/**
 * Implements hook_menu().
 * @return array $items
 */
function itg_category_multiple_menu() {
  $items['itg-category-multiple-find'] = array(
    'page callback' => 'itg_category_multiple_find',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['itg-category-primary-category'] = array(
    'page callback' => 'itg_category_primary_category',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements itg_category_multiple_find()
 */
function itg_category_multiple_find() {
  $category = $_POST['type'];
  switch ($category) {
    case 'itg_section[]':
      if (isset($_POST['section']) && count($_POST['section']) >= 1 && !empty($_POST['section'])) {
        $main_category = get_categoryies_by_tid($_POST['section']);
        $primary_category = get_parent_structure_by_tid($_POST['section']);
        $render_data['main'] = $main_category;
        $render_data['primary'] = $primary_category;
        print json_encode($render_data);
        drupal_exit();
      }
      break;
    case 'itg_category[]':

      if (isset($_POST['category']) && count($_POST['category']) >= 1 && !empty($_POST['category'])) {
        $main_category = get_categoryies_by_tid($_POST['category']);
        $final_array_for_final_category = array_merge($_POST['section'], $_POST['category']);
        $primary_category = get_parent_structure_by_tid($final_array_for_final_category);
        $render_data['main'] = $main_category;
        $render_data['primary'] = $primary_category;
        print json_encode($render_data);
        drupal_exit();
      }
      break;

    case 'itg_sub_category[]':
      if (isset($_POST['sub_category']) && count($_POST['sub_category']) >= 1 && !empty($_POST['sub_category'])) {
        $main_category = get_categoryies_by_tid($_POST['sub_category']);
        $final_array_for_final_category = array_merge($_POST['section'], $_POST['category'], $_POST['sub_category']);
        $primary_category = get_parent_structure_by_tid($final_array_for_final_category);
        $render_data['main'] = $main_category;
        $render_data['primary'] = $primary_category;
        print json_encode($render_data);
        drupal_exit();
      }
      break;

    case 'itg_sub_sub_category[]':
      if (isset($_POST['sub_sub_category']) && count($_POST['sub_sub_category']) >= 1 && !empty($_POST['sub_sub_category'])) {
        $main_category = get_categoryies_by_tid($_POST['sub_sub_category']);
        $final_array_for_final_category = array_merge($_POST['section'], $_POST['category'], $_POST['sub_category'], $_POST['sub_sub_category']);
        $primary_category = get_parent_structure_by_tid($final_array_for_final_category);
        $render_data['main'] = $main_category;
        $render_data['primary'] = $primary_category;
        print json_encode($render_data);
        drupal_exit();
      }
      break;

    case 'itg_sub_sub_sub_category[]':
      if (isset($_POST['sub_sub_sub_category']) && count($_POST['sub_sub_sub_category']) >= 1 && !empty($_POST['sub_sub_sub_category'])) {
        $final_array_for_final_category = array_merge($_POST['section'], $_POST['category'], $_POST['sub_category'], $_POST['sub_sub_category'], $_POST['sub_sub_sub_category']);
        $primary_category = get_parent_structure_by_tid($final_array_for_final_category);
        $render_data['primary'] = $primary_category;
        print json_encode($render_data);
        drupal_exit();
      }
      break;
  }
}

/**
 * Implements get_categoryies_by_tid()
 * @param array $tids
 * @return string $html
 */
function get_categoryies_by_tid($tids) {
  if (function_exists('mongodb')) {
    $con = mongodb();
    $html = '';
    $return_data_chunk = array();
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $new_tids = get_categoryies_send_for_convert_to_int($tids);
        $category_data = $people->find(array('status' => 1, "parent" => array('$in' => $new_tids)));
        foreach ($category_data as $chunk_data) {
          $html.='<option value="' . $chunk_data['tid'] . '">' . $chunk_data['name'] . '</option>';
        }
        return $html;
      }
    }
  }
}

/**
 * Implements get_parent_structure_by_tid()
 * @param array $tids
 * @return string
 */
function get_parent_structure_by_tid($tids) {
  if (function_exists('mongodb')) {
    $con = mongodb();
    $primaryhtml = '';
    $return_data_chunk = array();
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $new_tids = get_categoryies_send_for_convert_to_int($tids);
        $category_data = $people->find(array("tid" => array('$in' => $new_tids)));
        foreach ($category_data as $chunk_data) {
          $return_data_chunk[$chunk_data['tid']] = get_parent_complete_structure($chunk_data['parent_data']);
        }
        $primaryhtml = get_parent_structure_in_ordered($new_tids, $return_data_chunk);
        return $primaryhtml;
      }
    }
  }
}

/**
 * Implements itg_category_multiple_hierarchy() 
 * This function will return complete hierarchy which will be further used in primary category.
 */
function itg_category_multiple_hierarchy($category_id) {

  if (function_exists('mongodb')) {
    $con = mongodb($alias);  // Made mongo db connection
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $category_data = $people->find(array("tid" => (int) $category_id));
        foreach ($category_data as $chunk_data) {
          $data = $chunk_data;
        }

        return $data;
      }
    }
  }
}

/**
 * Implements itg_category_primary_category()
 * @param array $category_id
 */
function itg_category_primary_category($category_id) {
  $main_data = $_POST['data'];
  $actual_render = array();
  $html = '';
  foreach ($main_data as $values) {
    $option_label = itg_category_complete_hierarchy($values);
    $html.='<option value="' . $values . '">' . $option_label . '</option>';
  }
  print $html;
}

/**
 * Implements get_itg_category_vocabs()
 * @param array $form_state
 */
function get_itg_category_vocabs($form_state) {
  $vocabs = array();
  $data_categories_array = $form_state['field']['field_story_category'][LANGUAGE_NONE]['field']['settings']['allowed_values'];
  if (isset($data_categories_array)) {
    foreach ($data_categories_array as $data_chunks) {
      if (isset($data_chunks['vocabulary']) && !empty($data_chunks['vocabulary'])) {
        $vocabs[] = $data_chunks['vocabulary'];
      }
    }
  }
  return $vocabs;
}

/**
 * Implemets get_parent_complete_structure()
 * @param array $parent
 */
function get_parent_complete_structure($parent) {
  $path = array();
  if (isset($parent) && !empty($parent)) {
    foreach ($parent as $chunk_data) {
      $path[] = $chunk_data['name'];
    }
    return implode(' => ', array_reverse($path));
  }
}

/**
 * Implements get_categoryies_send_for_convert_to_int() 
 * @param array $tids
 * @return array $values
 */
function get_categoryies_send_for_convert_to_int($tids) {
  $values = array();
  foreach ($tids as $val) {
    $values[] = (int) $val;
  }
  return $values;
}

/**
 * Implements get_parent_structure_in_ordered()
 * @param array $tids
 * @param array $return_data_chunk
 * @return string $html
 */
function get_parent_structure_in_ordered($tids, $return_data_chunk) {
  $html = '';
  foreach ($tids as $key => $chunk_val) {
    $html.='<option value="' . $chunk_val . '">' . $return_data_chunk[$chunk_val] . '</option>';
  }
  return $html;
}

/**
 * Implements itg_category_get_texo_desired() 
 * @param array $tids
 */
// This code have been written for the getting the desired taxonomy as per selected demo

function itg_category_get_texo_desired($tids) {
  if (function_exists('mongodb')) {
    $con = mongodb();
    $html = array();
    $return_data_chunk = array();
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $new_tids = get_categoryies_send_for_convert_to_int($tids);
        $category_data = $people->find(array('status' => 1, "parent" => array('$in' => $new_tids)));
        foreach ($category_data as $chunk_data) {
          $html[$chunk_data['tid']] = $chunk_data['name'];
        }
        return $html;
      }
    }
  }
}

/**
 * Implements get_parent_structure_by_for_all()
 * @param array $tids
 * @return string
 */
function get_parent_structure_by_for_all($tids) {
  if (function_exists('mongodb')) {
    $con = mongodb();
    $primaryhtml = '';
    $return_data_chunk = array();
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $new_tids = get_categoryies_send_for_convert_to_int($tids);
        $category_data = $people->find(array('status' => 1, "tid" => array('$in' => $new_tids)));
        foreach ($category_data as $chunk_data) {
          $return_data_chunk[$chunk_data['tid']] = get_parent_complete_structure($chunk_data['parent_data']);
        }
        $primaryhtml = get_parent_structure_in_complete($new_tids, $return_data_chunk);
        return $primaryhtml;
      }
    }
  }
}

/**
 * Implements get_parent_structure_in_complete()
 * @param array $tids
 * @param array $return_data_chunk
 * @return string $html
 */
function get_parent_structure_in_complete($tids, $return_data_chunk) {
  $data = '';
  foreach ($tids as $key => $chunk_val) {
    $data[$chunk_val] = $return_data_chunk[$chunk_val];
  }
  return $data;
}

/**
 * Implements hook_taxonomy_term_insert()
 */
function itg_category_multiple_taxonomy_term_insert($term) {

  if ($term->vid == CATEGORY_MANAGMENT) {
    if (function_exists('mongodb')) {
      $con = mongodb();
      $people = $con->taxonomy_term_data_mongo;
      $status_data = isset($term->term_state) && $term->term_state == 1 ? 1 : 0;
      // check connection
      if ($con) {
        $qry = array(
          "tid" => (int) $term->tid,
          "name" => $term->name,
          "parent" => (int) $term->parent[0],
          "vid" => (int) $term->vid,
          "machine_name" => $term->vocabulary_machine_name,
          "content_type" => get_content_type_combined_list_term($term->field_cm_select_type[LANGUAGE_NONE]),
          "status" => (int) $status_data,
          'parent_data' => taxonomy_get_parents_all($term->tid),
        );
        $result = $people->insert($qry);
      }
    }
  }
}

/**
 * Implements hook_taxonomy_term_update()
 */
function itg_category_multiple_taxonomy_term_update($term) {
  if ($term->vid == CATEGORY_MANAGMENT) {
// First removing term 
    $id = $term->tid;

    if (function_exists('mongodb') && !empty($id)) {
      $con = mongodb();
      $people = $con->taxonomy_term_data_mongo;
      $people->remove(array("tid" => (int) $id));
    }
    // Inserting data into taxonomy 

    if (function_exists('mongodb')) {
      $con = mongodb();
      $people = $con->taxonomy_term_data_mongo;
      $status_data = isset($term->term_state) && $term->term_state == 1 ? 1 : 0;

      // check connection
      if ($con) {
        $qry = array(
          "tid" => (int) $term->tid,
          "name" => $term->name,
          "parent" => (int) $term->parent[0],
          "vid" => (int) $term->vid,
          "machine_name" => $term->vocabulary_machine_name,
          "content_type" => get_content_type_combined_list_term($term->field_cm_select_type[LANGUAGE_NONE]),
          "status" => (int) $status_data,
          'parent_data' => taxonomy_get_parents_all($term->tid),
        );
        $result = $people->insert($qry);
      }
    }
  }
}

/**
 * Implements get_content_type_combined_list_term()
 */
function get_content_type_combined_list_term($data) {
  $result = array();
  if (isset($data) && !empty($data)) {
    foreach ($data as $chunkdata) {
      $result[] = $chunkdata['value'];
    }
    return isset($result) ? implode(',', $result) : '';
  }
}

/**
 * Implements  hook_taxonomy_term_delete()
 */
function itg_category_multiple_taxonomy_term_delete($term) {
  if ($term->vid == CATEGORY_MANAGMENT) {
    $id = $term->tid;
    if (function_exists('mongodb') && !empty($id)) {
      $con = mongodb();
      $people = $con->taxonomy_term_data_mongo;
      $people->remove(array("tid" => (int) $id));
    }
  }
}
