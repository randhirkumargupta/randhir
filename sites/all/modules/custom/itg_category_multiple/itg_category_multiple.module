<?php

/**
 * @file
 * The ITG Category Multiple.
 *
 * Contains functionality for ITG Category Multiple. *
 */

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_category_multiple_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'story_node_form':

      $itg_category_vocabs = get_itg_category_vocabs($form_state);
      $sections = itg_category_multiple_get_section($itg_category_vocabs);
      $options_category = array('_none' => '--Select-');
      $form['itg_section'] = array(
          '#type' => 'select',
          '#multiple' => TRUE,
          '#title' => t('Section'),
          '#validate' => TRUE,
          '#options' => $sections,
          '#size' => 10,
          '#default_value' => '',
      );

      $form['itg_category'] = array(
          '#type' => 'select',
          '#multiple' => TRUE,
          '#title' => t('Category'),
          '#validate' => TRUE,
          '#options' => $options_category,
          '#size' => 10,
          '#default_value' => '',
      );

      $form['itg_sub_category'] = array(
          '#type' => 'select',
          '#multiple' => TRUE,
          '#title' => t('Sub Category'),
          '#validate' => TRUE,
          '#options' => $options_category,
          '#size' => 10,
          '#default_value' => '',
      );


      $form['itg_sub_sub_category'] = array(
          '#type' => 'select',
          '#multiple' => TRUE,
          '#title' => t('Sub Sub Category'),
          '#validate' => TRUE,
          '#options' => $options_category,
          '#size' => 10,
          '#default_value' => '',
      );

      $form['itg_sub_sub_sub_category'] = array(
          '#type' => 'select',
          '#multiple' => TRUE,
          '#title' => t('Sub Sub Sub Category'),
          '#validate' => TRUE,
          '#options' => $options_category,
          '#size' => 10,
          '#default_value' => '',
      );

      $form['itg_primary_category'] = array(
          '#type' => 'select',
          '#multiple' => TRUE,
          '#title' => t('Primary Category'),
          '#validate' => TRUE,
          '#options' => $options_category,
          '#size' => 10,
          '#default_value' => '',
      );
     // p($form['actions']);

      $form['actions']['submit']['#submit'][] = 'itg_category_multiple_custom_callback';
      $form['#after_build'][] = 'itg_category_multiple_after_build';
      break;
  }
}

/*
 * Implements itg_category_multiple_get_section()
 */

function itg_category_multiple_get_section($itg_category_vocabs) {
  if (function_exists('mongodb')) {
    $con = mongodb();
    $html = '';
    $data = array();
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $category_data = $people->find(array("parent" => 0, "machine_name" => array('$in' => $itg_category_vocabs)));
        foreach ($category_data as $chunk_data) {
          $data[$chunk_data['tid']] = $chunk_data['name'];
        }
        return $data;
      }
    }
  }
}

/**
 * After build for multiple category related form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_category_multiple_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'itg_category_multiple') . '/js/itg_category_multiple.js');
  return $form;
}

/**
 * Implements hook_menu().
 * @return array $items
 */
function itg_category_multiple_menu() {
  $items['itg-category-multiple-find'] = array(
      'page callback' => 'itg_category_multiple_find',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  $items['itg-category-primary-category'] = array(
      'page callback' => 'itg_category_primary_category',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements itg_category_multiple_find()
 */
function itg_category_multiple_find() {
  $category = $_POST['type'];
  switch ($category) {
    case 'itg_section[]':
      if (isset($_POST['section']) && count($_POST['section']) >= 1) {
        $main_category = get_categoryies_by_tid($_POST['section']);
        $primary_category = get_parent_structure_by_tid($_POST['section']);
        $render_data['main'] = $main_category;
        $render_data['primary'] = $primary_category;
        print json_encode($render_data);
        drupal_exit();
      }
      break;
    case 'itg_category[]':

      if (isset($_POST['category']) && count($_POST['category']) >= 1) {
        $main_category = get_categoryies_by_tid($_POST['category']);
        $final_array_for_final_category = array_merge($_POST['section'], $_POST['category']);
        $primary_category = get_parent_structure_by_tid($final_array_for_final_category);
        $render_data['main'] = $main_category;
        $render_data['primary'] = $primary_category;
        print json_encode($render_data);
        drupal_exit();
      }
      break;

    case 'itg_sub_category[]':
      if (isset($_POST['sub_category']) && count($_POST['sub_category']) >= 1) {
        $main_category = get_categoryies_by_tid($_POST['sub_category']);
        $final_array_for_final_category = array_merge($_POST['section'], $_POST['category'], $_POST['sub_category']);
        $primary_category = get_parent_structure_by_tid($final_array_for_final_category);
        $render_data['main'] = $main_category;
        $render_data['primary'] = $primary_category;
        print json_encode($render_data);
        drupal_exit();
      }
      break;

    case 'itg_sub_sub_category[]':
      if (isset($_POST['sub_sub_category']) && count($_POST['sub_sub_category']) >= 1) {
        $main_category = get_categoryies_by_tid($_POST['sub_sub_category']);
        $final_array_for_final_category = array_merge($_POST['section'], $_POST['category'], $_POST['sub_category'], $_POST['sub_sub_category']);
        $primary_category = get_parent_structure_by_tid($final_array_for_final_category);
        $render_data['main'] = $main_category;
        $render_data['primary'] = $primary_category;
        print json_encode($render_data);
        drupal_exit();
      }
      break;

    case 'itg_sub_sub_sub_category[]':
      if (isset($_POST['sub_sub_sub_category']) && count($_POST['sub_sub_sub_category']) >= 1) {
        $final_array_for_final_category = array_merge($_POST['section'], $_POST['category'], $_POST['sub_category'], $_POST['sub_sub_category'], $_POST['sub_sub_sub_category']);
        $primary_category = get_parent_structure_by_tid($final_array_for_final_category);
        $render_data['primary'] = $primary_category;
        print json_encode($render_data);
        drupal_exit();
      }
      break;
  }
}

function get_categoryies_by_tid($tids) {
  if (function_exists('mongodb')) {
    $con = mongodb();
    $html = '';
    $return_data_chunk = array();
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $new_tids = get_categoryies_send_for_convert_to_int($tids);
        $category_data = $people->find(array("parent" => array('$in' => $new_tids)));
        foreach ($category_data as $chunk_data) {
          $html.='<option value="' . $chunk_data['tid'] . '">' . $chunk_data['name'] . '</option>';
        }
        return $html;
      }
    }
  }
}

/**
 * Implements get_parent_structure_by_tid()
 * @param array $tids
 * @return string
 */
function get_parent_structure_by_tid($tids) {
  if (function_exists('mongodb')) {
    $con = mongodb();
    $primaryhtml = '';
    $return_data_chunk = array();
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $new_tids = get_categoryies_send_for_convert_to_int($tids);
        $category_data = $people->find(array("tid" => array('$in' => $new_tids)));
        foreach ($category_data as $chunk_data) {
          $return_data_chunk[$chunk_data['tid']] = get_parent_complete_structure($chunk_data['parent_data']);
        }
        $primaryhtml = get_parent_structure_in_ordered($new_tids, $return_data_chunk);
        return $primaryhtml;
      }
    }
  }
}

/**
 * Implements itg_category_multiple_hierarchy() 
 * This function will return complete hierarchy which will be further used in primary category.
 */
function itg_category_multiple_hierarchy($category_id) {

  if (function_exists('mongodb')) {
    $con = mongodb($alias);  // Made mongo db connection
    if ($con) {
      $people = $con->taxonomy_term_data_mongo;
      $query = array();
      if (is_array($query) && empty($query)) {
        $category_data = $people->find(array("tid" => (int) $category_id));
        foreach ($category_data as $chunk_data) {
          $data = $chunk_data;
        }

        return $data;
      }
    }
  }
}

/**
 * Implements itg_category_primary_category()
 * @param array $category_id
 */
function itg_category_primary_category($category_id) {
  $main_data = $_POST['data'];
  $actual_render = array();
  $html = '';
  foreach ($main_data as $values) {
    $option_label = itg_category_complete_hierarchy($values);
    $html.='<option value="' . $values . '">' . $option_label . '</option>';
  }
  print $html;
}

/**
 * Implements get_itg_category_vocabs()
 * @param array $form_state
 */
function get_itg_category_vocabs($form_state) {
  $vocabs = array();
  $data_categories_array = $form_state['field']['field_story_category'][LANGUAGE_NONE]['field']['settings']['allowed_values'];
  if (isset($data_categories_array)) {
    foreach ($data_categories_array as $data_chunks) {
      if (isset($data_chunks['vocabulary']) && !empty($data_chunks['vocabulary'])) {
        $vocabs[] = $data_chunks['vocabulary'];
      }
    }
  }
  return $vocabs;
}

/**
 * Implemets get_parent_complete_structure()
 * @param array $parent
 */
function get_parent_complete_structure($parent) {
  $path = array();
  if (isset($parent) && !empty($parent)) {
    foreach ($parent as $chunk_data) {
      $path[] = $chunk_data['name'];
    }
    return implode(' => ', array_reverse($path));
  }
}

/**
 * Implements get_categoryies_send_for_convert_to_int() 
 * @param array $tids
 * @return array $values
 */
function get_categoryies_send_for_convert_to_int($tids) {
  $values = array();
  foreach ($tids as $val) {
    $values[] = (int) $val;
  }
  return $values;
}

/**
 * Implements get_parent_structure_in_ordered()
 * @param array $tids
 * @param array $return_data_chunk
 * @return string $html
 */
function get_parent_structure_in_ordered($tids, $return_data_chunk) {
  $html = '';
  foreach ($tids as $key => $chunk_val) {
    $html.='<option value="' . $chunk_val . '">' . $return_data_chunk[$chunk_val] . '</option>';
  }
  return $html;
}

function itg_category_multiple_custom_callback(&$form, &$form_state, $form_id) {
  p($form_state['values']);
}