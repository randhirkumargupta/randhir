<?php

/**
 * @file
 * Module file for Housing Schemes Services.
 * Contains the resource declarations for the service APIs
 * and other commons functions/hooks. if necessary
 */
function itg_rapid_api_init() {
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_photo');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_video');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_news');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_magazine');
    module_load_include('inc', 'itg_rapid_api', 'inc/helper');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_story');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_homePage');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_fblogin');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_twtlogin');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_author_story');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_polls');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_edit_profile');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_bookmark');
}

/**
 * Implements hook_services_resources().
 * Create service resource for APIs to return the necessary json data.
 */
function itg_rapid_api_services_resources() {

    $resources = array();

//Include the necessary inc files.
    module_load_include('inc', 'itg_rapid_api', 'itg_rapid_api.services');

//Service Apis for contents.
    $resources += itg_rapid_api_resource();

    return $resources;
}

/**
 * Implements hook_menu().
 */
function itg_rapid_api_menu() {

    $items = array();

    $items['admin/api-configuration'] = array(
        'title' => 'API Configuration',
        'description' => 'API Configuration',
        'weight' => 80,
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/feed-api'] = array(
        'title' => 'Feed API',
        'description' => 'Feed API Configuration',
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api'] = array(
        'title' => 'REST API',
        'description' => 'REST API Configuration',
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for set update webservice token
    $items['admin/api-configuration/rest-api/mobile-service-token'] = array(
        'title' => 'Mobile web service token',
        'description' => 'Mobile web service token',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mobile_service_token'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update config_update_status json
    $items['admin/api-configuration/rest-api/config-update-status-json'] = array(
        'title' => 'Update config_update_status json',
        'description' => 'Update config_update_status json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('config_update_status_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update datanotexist_api json
    $items['admin/api-configuration/rest-api/datanotexist-api-json'] = array(
        'title' => 'update datanotexist_api json',
        'description' => 'update datanotexist_api json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('datanotexist_api_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update hamburger_menu json
    $items['admin/api-configuration/rest-api/hamburger-menu-json'] = array(
        'title' => 'update hamburger_menu json',
        'description' => 'update hamburger_menu json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('hamburger_menu_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update horizontal_menu json
    $items['admin/api-configuration/rest-api/horizontal-menu-json'] = array(
        'title' => 'update horizontal_menu json',
        'description' => 'update horizontal_menu json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('horizontal_menu_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update master_config json
    $items['admin/api-configuration/rest-api/master-config-json'] = array(
        'title' => 'update master_config json',
        'description' => 'update master_config json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('master_config_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // menu for update server_error_master json
    $items['admin/api-configuration/rest-api/server-error-master-json'] = array(
        'title' => 'update server_error_master json',
        'description' => 'update server_error_master json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('server_error_master_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    //sprint 2 seting menu,  admin/structure/services

    $items['admin/api-configuration/rest-api/ad-config-json'] = array(
        'title' => 'update ad config json',
        'description' => 'ad_config_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ad_config_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/livetv-channellist-json'] = array(
        'title' => 'update livetv channellist json',
        'description' => 'livetv_channellist_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('livetv_channellist_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/livetv-aajtak'] = array(
        'title' => 'update livetv aajtak',
        'description' => 'livetv_aajtak',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('livetv_aajtak'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/livetv-indiatoday'] = array(
        'title' => 'update livetv indiatoday',
        'description' => 'livetv_indiatoday',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('livetv_indiatoday'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/livetv-delhiaajtak'] = array(
        'title' => 'update livetv delhiaajtak',
        'description' => 'livetv_delhiaajtak',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('livetv_delhiaajtak'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/api-configuration/rest-api/livetv-tej'] = array(
        'title' => 'update livetv tej',
        'description' => 'livetv_tej',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('livetv_tej'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/otherapps-ios-json'] = array(
        'title' => 'update otherapps ios json',
        'description' => 'otherapps_ios_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('otherapps_ios_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/otherapps-android-json'] = array(
        'title' => 'update otherapps android json',
        'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('otherapps_android_json'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    // for static other device

    $items['admin/api-configuration/rest-api/adconfig-android'] = array(
        'title' => 'update adconfig android json',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('adconfig_android'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/api-configuration/rest-api/adconfig-ipad'] = array(
        'title' => 'update adconfig ipad json',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('adconfig_ipad'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/api-configuration/rest-api/adconfig-iphone'] = array(
        'title' => 'update adconfig iphone json',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('adconfig_iphone'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/api-configuration/rest-api/adconfig-tab'] = array(
        'title' => 'update adconfig tab json',
        //'description' => 'otherapps_android_json',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('adconfig_tab'),
        'access arguments' => array('itg mobile feed'),
        'type' => MENU_NORMAL_ITEM,
    );


    return $items;
}

/*
 * mobile_service_token form decalation
 */

function mobile_service_token() {
    $form = array();

    $form['mobile_service_token'] = array(
        '#type' => 'textfield',
        '#title' => t('web service token'),
        '#default_value' => variable_get('mobile_service_token'),
        '#description' => t("Token for web service API."),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/*
 * mobile_service_token form validation
 */

function mobile_service_token_validate($form, &$form_state) {
    
}

/*
 * config_update_status_json form decalation
 * 
 */

function config_update_status_json() {
    $form = array();

    $form['config_update_status_json'] = array(
        '#type' => 'textarea',
        '#title' => t('config update status json'),
        '#default_value' => variable_get('config_update_status_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/*
 * datanotexist_api_json form decalation
 */

function datanotexist_api_json() {
    $form = array();

    $form['datanotexist_api_json'] = array(
        '#type' => 'textarea',
        '#title' => t('datanotexist api json'),
        '#default_value' => variable_get('datanotexist_api_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/*
 * hamburger_menu_json form decalation
 */

function hamburger_menu_json() {
    $form = array();

    $form['hamburger_menu_json'] = array(
        '#type' => 'textarea',
        '#title' => t('hamburger menu json'),
        '#default_value' => variable_get('hamburger_menu_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

// horizontal_menu_json form decalation
function horizontal_menu_json() {
    $form = array();

    $form['horizontal_menu_json'] = array(
        '#type' => 'textarea',
        '#title' => t('horizontal menu json'),
        '#default_value' => variable_get('horizontal_menu_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

// master_config_json form decalation
function master_config_json() {
    $form = array();

    $form['master_config_json'] = array(
        '#type' => 'textarea',
        '#title' => t('master config json'),
        '#default_value' => variable_get('master_config_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

// server_error_master_json form decalation
function server_error_master_json() {
    $form = array();

    $form['server_error_master_json'] = array(
        '#type' => 'textarea',
        '#title' => t('server error master json'),
        '#default_value' => variable_get('server_error_master_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * function to getCommentsCount of node
 * @return $count
 * @pram $nid
 */
function getCommentsCount($nid) {

    $node_anyalytics = analytics_node_data($nid, 'array');
    $nc_count = $node_anyalytics['data_count_node_comment'];
    return $nc_count;
}

/**
 * comman function for return node published date
 * @arg $nid 
 * @return published date
 */
function getNodePublishedDate($nid) {
    $query = db_select('workbench_moderation_node_history', 'nh');
    $query->fields('nh', array('stamp'));
    $query->condition('nh.nid', $nid);
    $query->condition('nh.from_state', 'draft');
    $query->condition('nh.state', 'published');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $published_statp = $result[0]['stamp'];
    if ($published_statp) {
        $published_datetime = date("Y-m-d H:i:s", $published_statp);
    } else {
        $published_datetime = "";
    }
    return $published_datetime;
}

// sprint2 seting function
// ad_config_json form decalation
function ad_config_json() {
    $form = array();

    $form['ad_config_json'] = array(
        '#type' => 'textarea',
        '#title' => t('ad config json'),
        '#default_value' => variable_get('ad_config_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

// livetv_channellist_json form decalation
function livetv_channellist_json() {
    $form = array();

    $form['livetv_channellist_json'] = array(
        '#type' => 'textarea',
        '#title' => t('livetv channellist json'),
        '#default_value' => variable_get('livetv_channellist_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

// livetv_json form decalation
function livetv_aajtak() {
    $form = array();

    $form['livetv_aajtak'] = array(
        '#type' => 'textarea',
        '#title' => t('livetv aajtak'),
        '#default_value' => variable_get('livetv_aajtak'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function livetv_indiatoday() {
    $form = array();

    $form['livetv_indiatoday'] = array(
        '#type' => 'textarea',
        '#title' => t('livetv indiatoday'),
        '#default_value' => variable_get('livetv_indiatoday'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function livetv_delhiaajtak() {
    $form = array();

    $form['livetv_delhiaajtak'] = array(
        '#type' => 'textarea',
        '#title' => t('livetv delhiaajtak'),
        '#default_value' => variable_get('livetv_delhiaajtak'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function livetv_tej() {
    $form = array();

    $form['livetv_tej'] = array(
        '#type' => 'textarea',
        '#title' => t('livetv tej'),
        '#default_value' => variable_get('livetv_tej'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

// otherapps_ios_json form decalation
function otherapps_ios_json() {
    $form = array();

    $form['otherapps_ios_json'] = array(
        '#type' => 'textarea',
        '#title' => t('otherapps ios json'),
        '#default_value' => variable_get('otherapps_ios_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

// otherapps_android_json form decalation
function otherapps_android_json() {
    $form = array();

    $form['otherapps_android_json'] = array(
        '#type' => 'textarea',
        '#title' => t('otherapps android json'),
        '#default_value' => variable_get('otherapps_android_json'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * Implements hook_url_inbound_alter().
 */
function itg_rapid_api_url_inbound_alter(&$result, $path, $path_language) {
    $u_agent = $_SERVER['HTTP_USER_AGENT'];
    $flag = 0;

// user agent for browser
    if (preg_match('/MSIE/i', $u_agent) && !preg_match('/Opera/i', $u_agent)) {
        $flag = 1;
    } elseif (preg_match('/Trident/i', $u_agent)) { // this condition is for IE11
        $flag = 1;
    } elseif (preg_match('/Firefox/i', $u_agent)) {
        $flag = 1;
    } elseif (preg_match('/Chrome/i', $u_agent)) {
        $flag = 1;
    } elseif (preg_match('/Safari/i', $u_agent)) {
        $flag = 1;
    } elseif (preg_match('/Opera/i', $u_agent)) {
        $flag = 1;
    } elseif (preg_match('/Netscape/i', $u_agent)) {
        $flag = 1;
    }

    // user agent for mobile device

    $iphone = strpos($_SERVER['HTTP_USER_AGENT'], "iPhone");
    $android = strpos($_SERVER['HTTP_USER_AGENT'], "Android");
    $palmpre = strpos($_SERVER['HTTP_USER_AGENT'], "webOS");
    $berry = strpos($_SERVER['HTTP_USER_AGENT'], "BlackBerry");
    $ipod = strpos($_SERVER['HTTP_USER_AGENT'], "iPod");

    if ($iphone || $android || $palmpre || $ipod || $berry == true) {
        $flag = 1;
    }
    $post_res = array("signup", "login_request", "forgot_password", "otp_verification", "resend_otp", "change_password", "log_out", "get_login_user_detail", "edit_profile", "cast_polls", "bookmark_set", "bookmark_delete", "bookmark_get", "get_preference", "edit_user_image", "update_preference");
    if (arg(0) == "appapi" && count(arg()) == 2) {
        if (!in_array(arg(1), $post_res)) {
            $result = $path . "/it";
        }
    }
}

/*
 * Function to get Story type on behalf of Node nid i.e. photostory or normal story
 * @param int $nid
 * @return String 
 */

function getStoryType($nid) {
    $query = db_select('node', 'n');
    $query->Join('field_data_field_story_type', 'st', 'st.entity_id = n.nid');
    $query->fields('st', array('field_story_type_value'));
    $query->condition('st.entity_id', $nid);
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $type = 'story';
    if ($result[0]['field_story_type_value'] == 'photo_story') {
        $type = 'photostory';
    }
    return $type;
}

/*
 * Function to call login api
 * @param array
 * @return array 
 */

function callAPI($method, $url, $data = false) {
    //echo $method; echo "<br>";echo $url;
    //p($data); exit();
    $curl = curl_init();

    switch ($method) {
        case "POST":
            curl_setopt($curl, CURLOPT_POST, 1);

            if ($data)
                curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
            break;
        case "PUT":
            curl_setopt($curl, CURLOPT_PUT, 1);
            break;
        default:
            if ($data)
                $url = sprintf("%s?%s", $url, http_build_query($data));
    }

    // Optional Authentication:
    curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($curl, CURLOPT_USERPWD, "itgddev:itgd@789");

    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

    $result = curl_exec($curl);

    curl_close($curl);

    return $result;
}

/**
 * Implements hook_boot().
 */
function itg_rapid_api_boot() {
    
}

// code for check POST method only start
function checkReqMethod() {

    $req_method = $_SERVER['REQUEST_METHOD'];
    //p($_SERVER);die();
    $flag = 1;
    if ($req_method != "POST") {
        $flag = 0;
    } else {
        $flag = 1;
    }

    return $flag;
}

// code for check POST method only end
// for static other device
/*
 * adconfig_android form decalation
 */

function adconfig_android() {
    $form = array();

    $form['adconfig_android'] = array(
        '#type' => 'textarea',
        '#title' => t('adconfig android'),
        '#default_value' => variable_get('adconfig_android'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/*
 * adconfig_ipad form decalation
 */

function adconfig_ipad() {
    $form = array();

    $form['adconfig_ipad'] = array(
        '#type' => 'textarea',
        '#title' => t('adconfig ipad'),
        '#default_value' => variable_get('adconfig_ipad'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/*
 * adconfig_iphone form decalation
 */

function adconfig_iphone() {
    $form = array();

    $form['adconfig_iphone'] = array(
        '#type' => 'textarea',
        '#title' => t('adconfig iphone'),
        '#default_value' => variable_get('adconfig_iphone'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/*
 * adconfig_tab form decalation
 */

function adconfig_tab() {
    $form = array();

    $form['adconfig_tab'] = array(
        '#type' => 'textarea',
        '#title' => t('adconfig tab'),
        '#default_value' => variable_get('adconfig_tab'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function get_personalization_front_data_service($user) {
    global $user;
    $weight_count_loop = FALSE;
    // As in table itg_widget_order tid is saved in nid colom.
    // So join field_story_category_tid join is applied on nid.
    $query = db_select('itg_widget_order', 'iwo');
    $query->fields('iwo', array('weight', 'nid'))
            ->condition('iwo.widget', "personalization_widget")
            ->condition('iwo.extra', $user->uid)
            // Orderby weight or taxonomyterm id.
            ->orderBy('iwo.weight', 'DESC')
            ->orderBy('iwo.nid', 'DESC')
            ->range(0, 30);
    $result = $query->execute()->fetchAllAssoc('nid');
    $new_array_of_terms = array_keys($result);
    // case handled if perferences is not saved.
    if (count($result) == 0) {
        $weight_count_loop = TRUE;
        $query = db_select('itg_widget_order', 'iwo');
        $query->leftJoin('field_data_field_set_as_featured_cate', 'fc', 'fc.entity_id=iwo.cat_id');
        $query->fields('iwo', array('cat_id'))
                ->condition('iwo.widget', "section_wise_widget")
                ->condition('fc.field_set_as_featured_cate_value', 'Yes')
                ->groupBy('iwo.cat_id')
                ->range(0, 30);
        $result = $query->execute()->fetchAllAssoc('cat_id');
    }
    if ($weight_count_loop) {
        $new_array_of_terms = array();
        // Get only tids.
        $tids_array = array_keys($result);
        foreach ($tids_array as $term_id) {
            $new_array_of_terms[$term_id] = count_node_under_tid_service($term_id);
        }
        krsort($new_array_of_terms);
    }
    return ($weight_count_loop) ? array_keys($new_array_of_terms) : $new_array_of_terms;
}

/**
 * Function to get total number of nodes in taxonomy.
 * @param int $tid
 * @return int
 */
function count_node_under_tid_service($tid) {
    $query = db_select('taxonomy_index', 'ti');
    $query->leftJoin('node', 'n', 'n.nid=ti.nid');
    $query->addField('ti', 'nid');
    $query->condition('ti.tid', $tid);
    $query->condition('n.status', 1);
    $query->condition('n.type', array('story', 'videogallery', 'photogallery'), 'IN');
    $query->orderBy('n.created', 'DESC');
    return $query->execute()->rowCount();
}

/**
 * 
 * @param array $updates
 */
function save_itg_widget_personalization_data_service($updates) {
    global $user;
    $widget_name = "personalization_widget";

    $nids = array_keys($updates);
    // Delete all the tids from table if they are not in $updates variable
    // unsued tid should be delete
    db_delete('itg_widget_order')
            ->condition('widget', $widget_name)
            ->condition('nid', $nids, "NOT IN")
            ->condition('extra', $user->uid)
            ->execute();
    // Update the weight of tids if exists or insert if dont exists.
    foreach ($updates as $term_id => $weight) {
        db_merge('itg_widget_order')
                ->key(array('nid' => $term_id, 'widget' => $widget_name, 'extra' => $user->uid))
                ->fields(array(
                    'nid' => $term_id,
                    'widget' => $widget_name,
                    'weight' => $weight,
                    'extra' => $user->uid,
                ))
                ->execute();
    }
    drupal_set_message(t("My Preferences Has Been Save."));
}

/**
 * Function to check old/new pass.
 * @param array
 * @return array
 */
function validateServicePass($params) {
    module_load_include('inc', 'content', 'includes/password');
    $pass_vld_msg = array();
    $old_pass = trim($params['old_pass']);
    $new_pass = trim($params['new_pass']);
    $user_id = trim($params['user_id']);
    $account = user_load_by_name($user_id);
    if ($new_pass == "") {
        $pass_vld_msg['success_flag'] = 0;
        $pass_vld_msg['msg'] = "Please enter new password.";
        return $pass_vld_msg;
    }
    if ($old_pass == $new_pass) {
        $pass_vld_msg['success_flag'] = 0;
        $pass_vld_msg['msg'] = "New Password can't be same as Old.";
        return $pass_vld_msg;
    }
    if ($old_pass != "") {
        $flag = user_check_password($old_pass, $account);
        if (!$flag) {
            $pass_vld_msg['success_flag'] = 0;
            $pass_vld_msg['msg'] = "Your new password cannot be accepted because the old password provided is not correct. Please Try again.";
            return $pass_vld_msg;
        }
    }
    $pass_vld_msg['success_flag'] = 1;
    $pass_vld_msg['msg'] = "Go Ahead.";
    return $pass_vld_msg;
}

/**
 * 
 * @param int $tid
 * @return array
 */
function get_personalization_saved_value_service($uid) {
    $query = db_select('itg_widget_order', 'iwo');
    $query->addField('iwo', 'weight');
    $query->addField('iwo', 'nid');
    $query->condition('iwo.widget', 'personalization_widget');
    $query->condition('iwo.extra', $uid);
    return $query->execute()->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * Call back function for sign up raw data validation .
 * @param array
 * @return array
 */
function signupValidation_rapid($params) {

    $first_name = trim($params['first_name']);
    $last_name = trim($params['last_name']);
    $user_id = trim($params['user_id']);
    $password = trim($params['password']);
    $cpassword = trim($params['confirm_password']);
    $login_type = trim($params['login_type']);
    $email_id = trim($params['email_id']);
    $phone_number = trim($params['phone_number']);
    $location = trim($params['location']);
    $profile_image = trim($params['profile_image']);
    $gender = trim($params['gender']);
    $date_of_birth = trim($params['date_of_birth']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);
    $error = array();
    $userid_is_numeric = 0;

    $userid_is_numeric = is_numeric($user_id);

    if (!$userid_is_numeric) {
        if (function_exists('itg_sso_user_email_check')) {
            $get_user_check_email = itg_sso_user_email_check($user_id);
        }
        if (function_exists('itg_sso_user_email_domain')) {
            $get_user_check_domain = itg_sso_user_email_domain($user_id);
        }
    } else {
        if (function_exists('itg_sso_user_mobile_check')) {
            $get_user_check_mobile = itg_sso_user_mobile_check($mobile);
        }
    }


    // fname validation      
    if (empty($first_name)) {
        $error['fname'] = t('Please enter first name');
    } else {
        if (!preg_match("/^[a-zA-Z. ]*$/", $first_name)) {
            $error['fname'] = t('Cannot validate Fname');
        } else {
            if (strlen($first_name) > 25) {
                $error['fname'] = t('Cannot validate Fname');
            } else {
                //$error['fname'] = t('');
            }
        }
    }



    // lname validation      
    if ($last_name) {
        if (!preg_match("/^[a-zA-Z. ]*$/", $last_name)) {
            $error['lname'] = t('Cannot validate Lname');
        } else {
            if (strlen($last_name) > 25) {
                $error['lname'] = t('Cannot validate Lname');
            } else {
                //$error['lname'] = t('');
            }
        }
    }



    // user_id validation

    if (empty($user_id)) {
        $error['user_id'] = t('Please Enter Email/Mobile');
    } else {

        if (!$userid_is_numeric) {
            if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
                $error['user_id'] = t("Invalid Email");
            } else if (!empty($get_user_check_email)) {
                $error['user_id'] = t("User already exists with " . $user_id . "");
            } else if (!empty($get_user_check_domain)) {
                $error['user_id'] = t("User already exists with " . $user_id . "");
            } else {
                //$error['user_id'] = t("");
            }
        } else {
            if (!preg_match('/^\d{10}$/', $user_id)) {
                $error['user_id'] = t("Invalid Mobile Number");
            } else if (!empty($get_user_check_mobile)) {
                $error['user_id'] = t("User already exists with " . $user_id . "");
            } else {
                //$error['user_id'] = t('');
            }
        }
    }

    // password validation
    $pass = $password;
    $cpass = $cpassword;

    $min_length = 6;
    $max_length = 15;

    if (empty($pass)) {
        $error['password'] = t('please enter password');
    } else if (strlen($pass) < $min_length) {
        $error['password'] = t('Password should be minimum 6 characters without any space ');
    } else if (strlen($pass) > $max_length) {
        $error['password'] = t('Password should be maximum 15 characters without any space ');
    } else if ($pass != $cpass) {
        $error['password'] = t('Password and Confirm Password do not match');
    } else {
        //$error['password'] = t('');
    }
    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * function for upload user profile image from binary file  .
 * @param binay img file
 * @return int FID
 */
function uplodaProfileImg_Rapid($profile_image) {
    $profile_img = base64_decode($profile_image);
    $f = finfo_open();
    $mime_type = finfo_buffer($f, $profile_img, FILEINFO_MIME_TYPE);
    $mime_type_ar = explode("/", $mime_type);
    $mime_type_ext = $mime_type_ar[1];
    $now = time();


    //echo  mime_content_type ($profile_image );die();
    $profile_img_tmp = '/tmp/profileimage_' . $now . "." . $mime_type_ext;

    $image_name = 'profileimage_' . $now . "." . $mime_type_ext;
    // crate profile img tmp file
    file_put_contents($profile_img_tmp, $profile_img);
    $imagedata = file_get_contents($profile_img_tmp);
    //$file_data_temp = file_save_data($imagedata, file_default_scheme() . '://' . $image_url);
    $file_data = file_save_data($imagedata, file_default_scheme() . '://' . $image_name);


    // Update profile pic
    if (!empty($file_data->fid)) {
        return $file_data->fid;
    } else {
        return 0;
    }
}

/**
 * function for update user profile at signup  .
 * @param array $data 
 * @return object user
 */
function updateUsedrProfileAtSignup_rapid($data, $action = 1) {
    global $user;

    $location = trim($data['location']);
    $profile_image = trim($data['profile_image']);
    $gender = trim($data['gender']);
    $date_of_birth = trim($data['date_of_birth']);
    $device_id = trim($data['device_id']);
    $device_type = trim($data['device_type']);
    $user_id = trim($data['user_id']);

    $user = $user_detail = user_load_by_name($user_id);
    // call function for upload profile iamge

    $uid = $user->uid;

    // Update dob field.
    if ($profile_image) {
        $profile_img_fid = uplodaProfileImg_Rapid($profile_image);
    }

    // Update dob field.
    if ($date_of_birth) {
        $user_detail->field_story_issue_date['und'][0]['value'] = check_plain($date_of_birth);
    }

    // Update gender field.
    if ($gender) {
        $user_detail->field_user_gender['und'][0]['value'] = check_plain($gender);
    }

    // Update profile pic
    if ($profile_img_fid) {
        $user_detail->field_user_picture['und'][0]['fid'] = $profile_img_fid;
    }

    // Update address field.
    if ($location) {
        $user_detail->field_short_description['und'][0]['value'] = check_plain($location);
    }

    $flag_save = user_save($user_detail);

    //p($flag_save);die();
    // query for insert data into itg_app_device - $action $token
    $token = drupal_get_token('services');
    db_insert('itg_app_device')
            ->fields(array(
                'uid' => $uid,
                'device_id' => check_plain($device_id),
                'device_type' => check_plain($device_type),
                'action' => check_plain($action),
                'token' => check_plain($token),
            ))
            ->execute();
    return $flag_save;
}

/**
 * Call back function for login up raw data validation .
 * @param array
 * @return array
 */
function loginValidation_rapid($params) {

    $user_id = trim($params['user_id']);
    $password = trim($params['password']);
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    $error = array();
    $userid_is_numeric = 0;

    $userid_is_numeric = is_numeric($user_id);

    if (!$userid_is_numeric) {
        if (function_exists('itg_sso_user_email_check')) {
            $get_user_check_email = itg_sso_user_email_check($user_id);
        }
        if (function_exists('itg_sso_user_email_domain')) {
            $get_user_check_domain = itg_sso_user_email_domain($user_id);
        }
    } else {
        if (function_exists('itg_sso_user_mobile_check')) {
            $get_user_check_mobile = itg_sso_user_mobile_check($mobile);
        }
    }


    // user_id validation

    if (empty($user_id)) {
        $error['user_id'] = t('Please Enter Email/Mobile');
    } else {

        if (!$userid_is_numeric) {
            if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
                $error['user_id'] = t("Invalid Email");
            } else if (empty($get_user_check_email)) {
                $error['user_id'] = t("A User is not registered with this " . $user_id . "");
            } else {
                //$error['user_id'] = t("");
            }
        } else {
            if (!preg_match('/^\d{10}$/', $user_id)) {
                $error['user_id'] = t("Invalid Mobile Number");
            } else if (empty($get_user_check_mobile)) {
                $error['user_id'] = t("A User is not registered with this " . $user_id . "");
            } else {
                //$error['user_id'] = t('');
            }
        }
    }

    // password validation
    $pass = $password;


    $min_length = 6;
    $max_length = 15;

    if (empty($pass)) {
        $error['password'] = t('please enter password');
    } else if (strlen($pass) < $min_length) {
        $error['password'] = t('Password should be minimum 6 characters without any space ');
    } else if (strlen($pass) > $max_length) {
        $error['password'] = t('Password should be maximum 15 characters without any space ');
    } else {
        //$error['password'] = t('');
    }
    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}

/**
 * function for delete token from itg_app_device
 * @param array
 * @return array
 */
function cleanToken_Rapid($params) {
    // p($params);die();
    $user_id = $params['user_id'];
    $auth_token = $params['auth_token'];
    $device_id = $params['device_id'];
    
    $user = user_load_by_name($user_id);    
    $uid = $user->uid;
    if ($uid) {
        //p($user);die();
        $query = db_delete('itg_app_device');
        $query->condition('uid', $uid);
        $query->condition('device_id', $device_id);
        //$query->condition('token', $auth_token);
        $query->execute();
    }
}

/**
 * Call back function for forgot password raw data validation .
 * @param array
 * @return array
 */
function forgotPasswordValidation_rapid($params) {

    $user_id = trim($params['user_id']);    
    $device_id = trim($params['device_id']);
    $device_type = trim($params['device_type']);

    $error = array();
    $userid_is_numeric = 0;

    $userid_is_numeric = is_numeric($user_id);

    if (!$userid_is_numeric) {
        if (function_exists('itg_sso_user_email_check')) {
            $get_user_check_email = itg_sso_user_email_check($user_id);
        }
        if (function_exists('itg_sso_user_email_domain')) {
            $get_user_check_domain = itg_sso_user_email_domain($user_id);
        }
    } else {
        if (function_exists('itg_sso_user_mobile_check')) {
            $get_user_check_mobile = itg_sso_user_mobile_check($mobile);
        }
    }


    // user_id validation

    if (empty($user_id)) {
        $error['user_id'] = t('Please Enter Email/Mobile');
    } else {

        if (!$userid_is_numeric) {
            if (!filter_var($user_id, FILTER_VALIDATE_EMAIL)) {
                $error['user_id'] = t("Invalid email/phone number");
            } else if (empty($get_user_check_email)) {
                $error['user_id'] = t("This phone number/ email is not registered");
            } else {
                //$error['user_id'] = t("");
            }
        } else {
            if (!preg_match('/^\d{10}$/', $user_id)) {
                $error['user_id'] = t("Invalid email/phone number");
            } else if (empty($get_user_check_mobile)) {
                $error['user_id'] = t("This phone number/ email is not registered");
            } else {
                //$error['user_id'] = t('');
            }
        }
    }

    
    $error_settings = array();
    $error_settings['custom_error'] = $error;

    return $error_settings;
}
