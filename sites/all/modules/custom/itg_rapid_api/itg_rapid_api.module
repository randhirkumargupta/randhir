<?php

/**
 * @file
 * Module file for Housing Schemes Services.
 * Contains the resource declarations for the service APIs
 * and other commons functions/hooks. if necessary
 */
function itg_rapid_api_init(){
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_photo');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_video');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_news');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_magazine');
    module_load_include('inc', 'itg_rapid_api', 'inc/helper');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_story');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_homePage');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_fblogin');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_twtlogin');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_author_story');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_polls');
    module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_edit_profile');
	module_load_include('inc', 'itg_rapid_api', 'inc/itg_rapid_api_bookmark');
}

/**
 * Implements hook_services_resources().
 * Create service resource for APIs to return the necessary json data.
 */

function itg_rapid_api_services_resources() {

  $resources = array();

//Include the necessary inc files.
  module_load_include('inc', 'itg_rapid_api', 'itg_rapid_api.services');

//Service Apis for contents.
  $resources += itg_rapid_api_resource();

  return $resources;
}

/**
 * Implements hook_menu().
 */

function itg_rapid_api_menu() {

  $items = array();
  
  $items['admin/api-configuration'] = array(
    'title' => 'API Configuration',
    'description' => 'API Configuration',
    'weight' => 80, 	
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
   $items['admin/api-configuration/feed-api'] = array(
    'title' => 'Feed API',
    'description' => 'Feed API Configuration',
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
   
   $items['admin/api-configuration/rest-api'] = array(
    'title' => 'REST API',
    'description' => 'REST API Configuration',
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  // menu for set update webservice token
  $items['admin/api-configuration/rest-api/mobile-service-token'] = array(
    'title' => 'Mobile web service token',
    'description' => 'Mobile web service token',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mobile_service_token'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  // menu for update config_update_status json
  $items['admin/api-configuration/rest-api/config-update-status-json'] = array(
    'title' => 'Update config_update_status json',
    'description' => 'Update config_update_status json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('config_update_status_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  // menu for update datanotexist_api json
  $items['admin/api-configuration/rest-api/datanotexist-api-json'] = array(
    'title' => 'update datanotexist_api json',
    'description' => 'update datanotexist_api json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datanotexist_api_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  // menu for update hamburger_menu json
  $items['admin/api-configuration/rest-api/hamburger-menu-json'] = array(
    'title' => 'update hamburger_menu json',
    'description' => 'update hamburger_menu json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hamburger_menu_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  // menu for update horizontal_menu json
  $items['admin/api-configuration/rest-api/horizontal-menu-json'] = array(
    'title' => 'update horizontal_menu json',
    'description' => 'update horizontal_menu json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('horizontal_menu_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  // menu for update master_config json
  $items['admin/api-configuration/rest-api/master-config-json'] = array(
    'title' => 'update master_config json',
    'description' => 'update master_config json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_config_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
   // menu for update server_error_master json
  $items['admin/api-configuration/rest-api/server-error-master-json'] = array(
    'title' => 'update server_error_master json',
    'description' => 'update server_error_master json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('server_error_master_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  //sprint 2 seting menu,  admin/structure/services
  
  $items['admin/api-configuration/rest-api/ad-config-json'] = array(
    'title' => 'update ad config json',
    'description' => 'ad_config_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ad_config_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  $items['admin/api-configuration/rest-api/livetv-channellist-json'] = array(
    'title' => 'update livetv channellist json',
    'description' => 'livetv_channellist_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livetv_channellist_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  $items['admin/api-configuration/rest-api/livetv-aajtak'] = array(
    'title' => 'update livetv aajtak',
    'description' => 'livetv_aajtak',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livetv_aajtak'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  $items['admin/api-configuration/rest-api/livetv-indiatoday'] = array(
    'title' => 'update livetv indiatoday',
    'description' => 'livetv_indiatoday',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livetv_indiatoday'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  $items['admin/api-configuration/rest-api/livetv-delhiaajtak'] = array(
    'title' => 'update livetv delhiaajtak',
    'description' => 'livetv_delhiaajtak',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livetv_delhiaajtak'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
   $items['admin/api-configuration/rest-api/livetv-tej'] = array(
    'title' => 'update livetv tej',
    'description' => 'livetv_tej',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('livetv_tej'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  $items['admin/api-configuration/rest-api/otherapps-ios-json'] = array(
    'title' => 'update otherapps ios json',
    'description' => 'otherapps_ios_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('otherapps_ios_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  $items['admin/api-configuration/rest-api/otherapps-android-json'] = array(
    'title' => 'update otherapps android json',
    'description' => 'otherapps_android_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('otherapps_android_json'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  // for static other device
  
  $items['admin/api-configuration/rest-api/adconfig-android'] = array(
    'title' => 'update adconfig android json',
    //'description' => 'otherapps_android_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adconfig_android'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  $items['admin/api-configuration/rest-api/adconfig-ipad'] = array(
    'title' => 'update adconfig ipad json',
    //'description' => 'otherapps_android_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adconfig_ipad'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  $items['admin/api-configuration/rest-api/adconfig-iphone'] = array(
    'title' => 'update adconfig iphone json',
    //'description' => 'otherapps_android_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adconfig_iphone'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  $items['admin/api-configuration/rest-api/adconfig-tab'] = array(
    'title' => 'update adconfig tab json',
    //'description' => 'otherapps_android_json',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adconfig_tab'),
    'access arguments' => array('itg mobile feed'),
    'type' => MENU_NORMAL_ITEM,
   );
  

  return $items;
}
/*
 * mobile_service_token form decalation
 */

function mobile_service_token() {
  $form = array();

  $form['mobile_service_token'] = array(
    '#type' => 'textfield',
    '#title' => t('web service token'),
    '#default_value' => variable_get('mobile_service_token'),
    '#description' => t("Token for web service API."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}
/*
 * mobile_service_token form validation
 */

function mobile_service_token_validate($form, &$form_state) {
  
}

/*
 * config_update_status_json form decalation
 * 
 */

function config_update_status_json() {
  $form = array();

  $form['config_update_status_json'] = array(
    '#type' => 'textarea',
    '#title' => t('config update status json'),
    '#default_value' => variable_get('config_update_status_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * datanotexist_api_json form decalation
 */
function datanotexist_api_json() {
  $form = array();

  $form['datanotexist_api_json'] = array(
    '#type' => 'textarea',
    '#title' => t('datanotexist api json'),
    '#default_value' => variable_get('datanotexist_api_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * hamburger_menu_json form decalation
 */

function hamburger_menu_json() {
  $form = array();

  $form['hamburger_menu_json'] = array(
    '#type' => 'textarea',
    '#title' => t('hamburger menu json'),
    '#default_value' => variable_get('hamburger_menu_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// horizontal_menu_json form decalation
function horizontal_menu_json() {
  $form = array();

  $form['horizontal_menu_json'] = array(
    '#type' => 'textarea',
    '#title' => t('horizontal menu json'),
    '#default_value' => variable_get('horizontal_menu_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// master_config_json form decalation
function master_config_json() {
  $form = array();

  $form['master_config_json'] = array(
    '#type' => 'textarea',
    '#title' => t('master config json'),
    '#default_value' => variable_get('master_config_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// server_error_master_json form decalation
function server_error_master_json() {
  $form = array();

  $form['server_error_master_json'] = array(
    '#type' => 'textarea',
    '#title' => t('server error master json'),
    '#default_value' => variable_get('server_error_master_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * function to getCommentsCount of node
 * @return $count
 * @pram $nid
 */

function getCommentsCount($nid){
 
  $node_anyalytics = analytics_node_data($nid,'array');
  $nc_count = $node_anyalytics['data_count_node_comment'];
  return $nc_count;
}

/**
 * comman function for return node published date
 * @arg $nid 
 * @return published date
 */

function getNodePublishedDate($nid){
    $query = db_select('workbench_moderation_node_history', 'nh');
    $query->fields('nh', array('stamp'));
    $query->condition('nh.nid', $nid);
    $query->condition('nh.from_state', 'draft');
    $query->condition('nh.state', 'published');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $published_statp = $result[0]['stamp'];
    if($published_statp){
        $published_datetime = date("Y-m-d H:i:s", $published_statp);
    }
    else{
        $published_datetime = "";
    }
    return $published_datetime;
}

// sprint2 seting function

// ad_config_json form decalation
function ad_config_json() {
  $form = array();

  $form['ad_config_json'] = array(
    '#type' => 'textarea',
    '#title' => t('ad config json'),
    '#default_value' => variable_get('ad_config_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// livetv_channellist_json form decalation
function livetv_channellist_json() {
  $form = array();

  $form['livetv_channellist_json'] = array(
    '#type' => 'textarea',
    '#title' => t('livetv channellist json'),
    '#default_value' => variable_get('livetv_channellist_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// livetv_json form decalation
function livetv_aajtak() {
  $form = array();

  $form['livetv_aajtak'] = array(
    '#type' => 'textarea',
    '#title' => t('livetv aajtak'),
    '#default_value' => variable_get('livetv_aajtak'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function livetv_indiatoday() {
  $form = array();

  $form['livetv_indiatoday'] = array(
    '#type' => 'textarea',
    '#title' => t('livetv indiatoday'),
    '#default_value' => variable_get('livetv_indiatoday'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function livetv_delhiaajtak() {
  $form = array();

  $form['livetv_delhiaajtak'] = array(
    '#type' => 'textarea',
    '#title' => t('livetv delhiaajtak'),
    '#default_value' => variable_get('livetv_delhiaajtak'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function livetv_tej() {
  $form = array();

  $form['livetv_tej'] = array(
    '#type' => 'textarea',
    '#title' => t('livetv tej'),
    '#default_value' => variable_get('livetv_tej'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// otherapps_ios_json form decalation
function otherapps_ios_json() {
  $form = array();

  $form['otherapps_ios_json'] = array(
    '#type' => 'textarea',
    '#title' => t('otherapps ios json'),
    '#default_value' => variable_get('otherapps_ios_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// otherapps_android_json form decalation
function otherapps_android_json() {
  $form = array();

  $form['otherapps_android_json'] = array(
    '#type' => 'textarea',
    '#title' => t('otherapps android json'),
    '#default_value' => variable_get('otherapps_android_json'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}



/**
 * Implements hook_url_inbound_alter().
 */

function itg_rapid_api_url_inbound_alter(&$result, $path, $path_language) {
   $u_agent = $_SERVER['HTTP_USER_AGENT']; 
   $flag = 0;

// user agent for browser
if(preg_match('/MSIE/i',$u_agent) && !preg_match('/Opera/i',$u_agent)) 
    { 
        $flag = 1;
    } 
    elseif(preg_match('/Trident/i',$u_agent)) 
    { // this condition is for IE11
        $flag = 1;
    } 
    elseif(preg_match('/Firefox/i',$u_agent)) 
    { 
        $flag = 1;
    } 
    elseif(preg_match('/Chrome/i',$u_agent)) 
    { 
        $flag = 1;
    } 
    elseif(preg_match('/Safari/i',$u_agent)) 
    { 
        $flag = 1;
    } 
    elseif(preg_match('/Opera/i',$u_agent)) 
    { 
        $flag = 1;
    } 
    elseif(preg_match('/Netscape/i',$u_agent)) 
    { 
        $flag = 1;
    } 
    
    // user agent for mobile device
    
    $iphone = strpos($_SERVER['HTTP_USER_AGENT'],"iPhone");
    $android = strpos($_SERVER['HTTP_USER_AGENT'],"Android");
    $palmpre = strpos($_SERVER['HTTP_USER_AGENT'],"webOS");
    $berry = strpos($_SERVER['HTTP_USER_AGENT'],"BlackBerry");
    $ipod = strpos($_SERVER['HTTP_USER_AGENT'],"iPod");

    if ($iphone || $android || $palmpre || $ipod || $berry == true)
    {
        $flag = 1;

    }
   $post_res = array("signup","login_request","forgot_password","otp_verification","resend_otp", "change_password", "log_out","get_login_user_detail", "edit_profile", "cast_polls", "bookmark_set", "bookmark_delete", "bookmark_get", "get_preference", "edit_user_image", "update_preference", "follow_author","follow_anchor");
   if(arg(0) == "appapi" && count(arg()) == 2 ){
       if(!in_array(arg(1), $post_res)){
            $result = $path."/it";
       }
   }
}

/*
 * Function to get Story type on behalf of Node nid i.e. photostory or normal story
 * @param int $nid
 * @return String 
 */
function getStoryType($nid) {  
  $query = db_select('node','n');
  $query->Join('field_data_field_story_type','st','st.entity_id = n.nid');
  $query->fields('st',array('field_story_type_value'));
  $query->condition('st.entity_id',$nid);
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $type = 'story';
  if($result[0]['field_story_type_value'] == 'photo_story'){
    $type = 'photostory';
  }
  return $type;
}
/*
 * Function to call login api
 * @param array
 * @return array 
 */
function callAPI($method, $url, $data = false){
    //echo $method; echo "<br>";echo $url;
    //p($data); exit();
    $curl = curl_init();

    switch ($method)
    {
        case "POST":
            curl_setopt($curl, CURLOPT_POST, 1);

            if ($data)
                curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
            break;
        case "PUT":
            curl_setopt($curl, CURLOPT_PUT, 1);
            break;
        default:
            if ($data)
                $url = sprintf("%s?%s", $url, http_build_query($data));
    }

    // Optional Authentication:
    curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($curl, CURLOPT_USERPWD, "itgddev:itgd@789");

    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

    $result = curl_exec($curl);

    curl_close($curl);

    return $result;
}

/**
 * Implements hook_boot().
 */

function itg_rapid_api_boot() {}

// code for check POST method only start
function checkReqMethod(){
    
   $req_method = $_SERVER['REQUEST_METHOD'];   
   //p($_SERVER);die();
   $flag = 1;
   if($req_method != "POST"){
       $flag = 0;       
       
    }
    else{
        $flag = 1; 
    }
    
    return $flag;
   
}
// code for check POST method only end

// for static other device
/*
 * adconfig_android form decalation
 */

function adconfig_android() {
  $form = array();

  $form['adconfig_android'] = array(
    '#type' => 'textarea',
    '#title' => t('adconfig android'),
    '#default_value' => variable_get('adconfig_android'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * adconfig_ipad form decalation
 */

function adconfig_ipad() {
  $form = array();

  $form['adconfig_ipad'] = array(
    '#type' => 'textarea',
    '#title' => t('adconfig ipad'),
    '#default_value' => variable_get('adconfig_ipad'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * adconfig_iphone form decalation
 */

function adconfig_iphone() {
  $form = array();

  $form['adconfig_iphone'] = array(
    '#type' => 'textarea',
    '#title' => t('adconfig iphone'),
    '#default_value' => variable_get('adconfig_iphone'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * adconfig_tab form decalation
 */

function adconfig_tab() {
  $form = array();

  $form['adconfig_tab'] = array(
    '#type' => 'textarea',
    '#title' => t('adconfig tab'),
    '#default_value' => variable_get('adconfig_tab'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}
function get_personalization_front_data_service($user) {
  global $user;
  $weight_count_loop = FALSE;
  // As in table itg_widget_order tid is saved in nid colom.
  // So join field_story_category_tid join is applied on nid.
  $query = db_select('itg_widget_order', 'iwo');
  $query->fields('iwo', array('weight', 'nid'))
      ->condition('iwo.widget', "personalization_widget")
      ->condition('iwo.extra', $user->uid)
      // Orderby weight or taxonomyterm id.
      ->orderBy('iwo.weight', 'DESC')
      ->orderBy('iwo.nid', 'DESC')
      ->range(0, 30);
  $result = $query->execute()->fetchAllAssoc('nid');
  $new_array_of_terms = array_keys($result);
  // case handled if perferences is not saved.
  if (count($result) == 0) {
    $weight_count_loop = TRUE;
    $query = db_select('itg_widget_order', 'iwo');
    $query->leftJoin('field_data_field_set_as_featured_cate', 'fc', 'fc.entity_id=iwo.cat_id');
    $query->fields('iwo', array('cat_id'))
        ->condition('iwo.widget', "section_wise_widget")
        ->condition('fc.field_set_as_featured_cate_value', 'Yes')
        ->groupBy('iwo.cat_id')
        ->range(0, 30);
    $result = $query->execute()->fetchAllAssoc('cat_id');
  }
  if ($weight_count_loop) {
    $new_array_of_terms = array();
    // Get only tids.
    $tids_array = array_keys($result);
    foreach ($tids_array as $term_id) {
      $new_array_of_terms[$term_id] = count_node_under_tid_service($term_id);
    }
    krsort($new_array_of_terms);
  }
  return ($weight_count_loop) ? array_keys($new_array_of_terms) : $new_array_of_terms;
}

/**
 * Function to get total number of nodes in taxonomy.
 * @param int $tid
 * @return int
 */
function count_node_under_tid_service($tid) {
  $query = db_select('taxonomy_index', 'ti');
  $query->leftJoin('node', 'n', 'n.nid=ti.nid');
  $query->addField('ti', 'nid');
  $query->condition('ti.tid', $tid);
  $query->condition('n.status', 1);
  $query->condition('n.type', array('story', 'videogallery', 'photogallery'), 'IN');
  $query->orderBy('n.created', 'DESC');
  return $query->execute()->rowCount();
}

/**
 * 
 * @param array $updates
 */
function save_itg_widget_personalization_data_service($updates) {
  global $user;
  $widget_name = "personalization_widget";

  $nids = array_keys($updates);
  // Delete all the tids from table if they are not in $updates variable
  // unsued tid should be delete
  db_delete('itg_widget_order')
      ->condition('widget', $widget_name)
      ->condition('nid', $nids, "NOT IN")
      ->condition('extra', $user->uid)
      ->execute();
  // Update the weight of tids if exists or insert if dont exists.
  foreach ($updates as $term_id => $weight) {
    db_merge('itg_widget_order')
        ->key(array('nid' => $term_id, 'widget' => $widget_name, 'extra' => $user->uid))
        ->fields(array(
          'nid' => $term_id,
          'widget' => $widget_name,
          'weight' => $weight,
          'extra' => $user->uid,
        ))
        ->execute();
  }
  drupal_set_message(t("My Preferences Has Been Save."));
}


/**
 * Function to check old/new pass.
 * @param array
 * @return array
 */

function validateServicePass($params){
    module_load_include('inc', 'content', 'includes/password');
    $pass_vld_msg = array();
    $old_pass = trim($params['old_pass']);
    $new_pass = trim($params['new_pass']);
    $user_id = trim($params['user_id']);
    $account = user_load_by_name($user_id);
    if($new_pass == ""){
        $pass_vld_msg['success_flag'] = 0;
        $pass_vld_msg['msg'] = "Please enter new password.";
        return $pass_vld_msg;
    }
    if($old_pass == $new_pass){
        $pass_vld_msg['success_flag'] = 0;
        $pass_vld_msg['msg'] = "New Password can't be same as Old.";
        return $pass_vld_msg;
    }
    if($old_pass != ""){
       $flag = user_check_password($old_pass, $account);
       if(!$flag){
           $pass_vld_msg['success_flag'] = 0;
           $pass_vld_msg['msg'] = "Your new password cannot be accepted because the old password provided is not correct. Please Try again.";
           return $pass_vld_msg;
       }
    }
    $pass_vld_msg['success_flag'] = 1;
    $pass_vld_msg['msg'] = "Go Ahead.";
    return $pass_vld_msg;
}

/**
 * 
 * @param int $tid
 * @return array
 */
function get_personalization_saved_value_service($uid) {
  $query = db_select('itg_widget_order', 'iwo');
  $query->addField('iwo', 'weight');
  $query->addField('iwo', 'nid');
  $query->condition('iwo.widget', 'personalization_widget');
  $query->condition('iwo.extra', $uid);
  return $query->execute()->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * @param int $nid of the author or anchor
 * @param string $type author or anchor
 * @return $status boolean True|False
 */
function valid_anchor_author($nid,$type){
  $node = node_load($nid);// reporter 285750 , anchor 285903
  $occupation_tids = array();
  foreach($node->field_celebrity_pro_occupation['und'] as $data){
    $occupation_tids[] = $data['tid'];
  }
  if($type == 'author'){
    if(in_array('285750', $occupation_tids)){
      $status = TRUE;
    }else{
      $status = FALSE;
    }  
  }elseif($type == 'anchor'){
    if(in_array('285903', $occupation_tids)){
      $status = TRUE;
    }else{
      $status = FALSE;
    }
  }
  return $status;
}

/*
 * Follow or unfollow anchor
 */
function follow_anchor_responce($token, $user_id, $node_id) {
    $HTTP_RAW_POST_DATA;
    $params = (array) json_decode(file_get_contents('php://input'), TRUE);

    $user_name = $params['user_id']; //user name of the logend in user
    $user_load = user_load_by_name($user_name);
    $user_id = $user_load->uid;
    $authtoken_id = $params['authtoken_id'];
    $anchor_id = $params['anchor_id'];
    $type = $params['type'];
    $message_array = array();

    $args = '0';
    if ($user_id != '0' && isset($authtoken_id) && $anchor_id != '' && $type != '') {
        $args = '1';
    } else {
        $message_array['status_code'] = '0';
        $message_array['status_message'] = "Argument are missing";
        $message_array['data'] = array();
    }

    if ($user_id == '') {
        $args = '0';
        $message_array['status_code'] = "0";
        $message_array['status_message'] = "User does not exist";
        $message_array['data'] = array();
    }

    if (!drupal_valid_token($authtoken_id, 'services')) {
        $args = '0';
        $message_array['status_code'] = "0";
        $message_array['status_message'] = "invalid token";
        $message_array['data'] = array();
    }
    if(!valid_anchor_author($anchor_id,'anchor')){
        $args = '0';
        $message_array['status_code'] = "0";
        $message_array['status_message'] = "Anchor Id is not valid.";
        $message_array['data'] = array();
    }
    if($type == 'follow_story' || $type == 'Unfollow'){
    }else{
        $args = '0';
        $message_array['status_code'] = "0";
        $message_array['status_message'] = "Type is not valid it shoud be either follow_story or Unfollow";
        $message_array['data'] = array();
    }

    // check args
    if ($args != '0') {
        $jsondata = follow_author_data_responce($user_id, $author_id,$type);
    } else {
        $jsondata = $message_array;
    }

    return $jsondata;
}

  
