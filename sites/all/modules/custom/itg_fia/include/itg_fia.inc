<?php

/**
 * Implementing itg_fia_data().
 */
function itg_fia_data() {
  $query = db_select('node', 'n');
  $query->join('field_data_field_story_social_media_integ', 'fsmi', 'n.nid = fsmi.entity_id');
  $query->fields('n', array('nid', 'created'));
  $query->condition('n.status', 1);
  $query->condition('n.type', 'story', '=');
  $query->condition('fsmi.field_story_social_media_integ_value', 'facebook_instant_article', '=');
  $query->orderBy('n.created', 'DESC');
  $query->range(0, 10);
  $query = $query->execute()->fetchCol();
  itg_fia_xml_node_feed($query);
}

/**
 * Generates and prints a custom XML feed.
 */
function itg_fia_xml_node_feed($query) {
  global $base_url;
  $xml_base = $base_url . '/' . current_path();
  $nodes = node_load_multiple($query);
  $items = '';
  foreach ($nodes as $node) {
    if ($node->workbench_moderation['current']->state == 'published') {
      $op_pub = date('F j, h:i a', $node->workbench_moderation['current']->timestamp);
      $pubdate = date('Y-m-d h:i:s+05:30', $node->workbench_moderation['current']->timestamp);
    } else {
      $op_pub = date('F j, h:i a', $node->created);
      $pubdate = date('Y-m-d h:i:s+5:30', $node->created);
    }
    $guid = $node->nid . " at " . $base_url;
    $op_modified = date('F j, h:i a', $node->changed);
    $modified = date('Y-m-d h:i:s+5:30', $node->changed);
    $auth_name = get_author_name($node->nid);
    $desc = $node->field_story_long_head_line[LANGUAGE_NONE][0]['value'];
    $embed_code_pos = $node->field_social_embed_code_position[LANGUAGE_NONE][0]['value'];
    $embed_code_data = $node->field_social_embed_code[LANGUAGE_NONE][0]['value'];
    $audio_pos = $node->field_facebook_audio_position[LANGUAGE_NONE][0]['value'];
    $audio_url = $node->field_facebook_instant_audio_url[LANGUAGE_NONE][0]['value'];
    $img_position = $node->field_animated_image_position[LANGUAGE_NONE][0]['value'];
    $img_path = file_create_url($node->field_facebook_animated_image[LANGUAGE_NONE][0]['uri']);
    
    if (empty($node->field_story_big_image[LANGUAGE_NONE][0]['uri'])) {
      $fb_instant_image = $base_url . "/" . drupal_get_path('theme', 'itg') . "/images/itg_image370x208.jpg";
    } else {
      $fb_instant_image = file_create_url($node->field_story_big_image[LANGUAGE_NONE][0]['uri']);
    }
    
    $map_pos = $node->field_facebook_map_position[LANGUAGE_NONE][0]['value'];
    if (isset($node->field_map_embed_code[LANGUAGE_NONE][0]['value']) && !empty($node->field_map_embed_code[LANGUAGE_NONE][0]['value'])) {
      $map_data = $node->field_map_embed_code[LANGUAGE_NONE][0]['value'];
      // getting map data from map <iframe>
      if (strpos($map_data, '<iframe') !== false) {
        $map_data_iframe = $map_data;
        $get_map_iframe = explode(" ", $map_data_iframe);
        $get_map_data = explode("!", $get_map_iframe[1]);
        $get_map_lat = explode("2d", $get_map_data[5]);
        $get_map_lng = explode("3d", $get_map_data[6]);
        $lat = number_format($get_map_lat[1], 6);
        $lng = number_format($get_map_lng[1], 6);
        $get_iframe_place = $get_map_data[18];
        $get_iframe_places = explode('2s', $get_map_data[18]);
        $get_place_name = str_replace("+", " ", $get_iframe_places[1]);
      } else {
        // getting map data from map url
        $get_map = explode("place", $map_data);
        $get_map_coordinate = explode("@", $get_map[1]);
        $get_place = str_replace("/", "", $get_map_coordinate[0]);
        $get_place_name = str_replace("+", " ", $get_place);
        $coordinate_map = explode(",", $get_map_coordinate[1]);
        $lat = $coordinate_map[0];
        $lng = $coordinate_map[1];
      }
    }

    // getting gallery data
    $target_nids = NULL;
    $gall_position = NULL;
    if (is_array($node->field_facebook_gallery_associate[LANGUAGE_NONE]) && !empty($node->field_facebook_gallery_associate[LANGUAGE_NONE])) {
      $associate_gallery = $node->field_facebook_gallery_associate[LANGUAGE_NONE];
      foreach ($associate_gallery as $fc_k => $fc_v) {
        $fc_ids = $fc_v['value'];
        $load_fc = field_collection_item_load($fc_ids);
        $gall_position = $load_fc->field_gallery_position[LANGUAGE_NONE][0]['value'];
        $target_nids[$gall_position][] = $load_fc->field_associate_gallery_id[LANGUAGE_NONE];
        $query = db_select('field_data_field_gallery_image' , 'n');
        $query->leftJoin('field_data_field_api_image', 'fdfi', 'n.field_gallery_image_value = fdfi.entity_id');
        $query->fields('fdfi', array('field_api_image_fid'));
        $query->condition('n.entity_id' , $load_fc->field_associate_gallery_id[LANGUAGE_NONE]);
        $result = $query->execute();
        $get_fc = $result->fetchAll();
        $get_script = '';
        foreach ($get_fc as $get_fck => $get_fcv) {
          if (!empty($get_fcv->field_api_image_fid)) {
            $file = file_load($get_fcv->field_api_image_fid);
            $imgs_path = file_create_url($file->uri);
            $get_script .= '<figure><img src="' . $imgs_path . '" /></figure>';
          }
        }
        $full_script_slider[$gall_position] = '<figure class="op-slideshow">' . $get_script . '</figure>';
      }
    }
    
    // facebook instant article body placement
    $node_body = $node->body[LANGUAGE_NONE][0]['value'];
    $numLine = explode("<p>", $node_body);

    unset($numLine[0]);
    foreach ($numLine as $body_key => $body_val) {
      $bk[$body_key] = $body_key;
      $body_vals[$body_key] = $numLine[$body_key];
    }

    // facebook instant article audio placement
    if (!empty($audio_url)) {
      if (in_array($audio_pos, $bk)) {
        $body_vals[$audio_pos] = $body_vals[$audio_pos] .
          '<figure>
             <img src="' . $img_path . '">
             <audio title="audio title" autoplay="autoplay" muted="muted">
               <source src="' . $audio_url . '">
            </audio>
           </figure>';
      } else {
        $last_postion = end($bk);
        $body_vals[$last_postion] = $body_vals[$last_postion] .
          '<figure>
             <img src="' . $img_path . '">
             <audio title="audio title" autoplay="autoplay" muted="muted">
              <source src="' . $audio_url . '">
            </audio>
          </figure>';
      }
    }

    // facebook instant article animated image placement
    if (!empty($img_path)) {
      if (in_array($img_position, $bk)) {
        $body_vals[$img_position] = $body_vals[$img_position] .
          '<figure>
            <img src="' . $img_path . '" />
          </figure>';
      } else {
        $last_postion = end($bk);
        $body_vals[$last_postion] = $body_vals[$last_postion] .
          '<figure>
            <img src="' . $img_path . '" />
          </figure>';
      }
    }

    // facebook instant article map placement
    if (!empty($get_place_name)) {
      if (in_array($map_pos, $bk)) {
        $body_vals[$map_pos] = $body_vals[$map_pos] .
          '<figure class="op-map">
            <script type="application/json" class="op-geotag">
              {
                "type": "Feature",
                "geometry":
                  {
                    "type": "Point",
                    "coordinates": [' . $lat . ', ' . $lng . ']
                  },
                "properties":
                  {
                    "title": "' . $get_place_name . '",
                    "radius": 10000,
                    "pivot": true,   
                    "style": "satellite",
                  }
               }
            </script>
          </figure>';
      } else {
        $last_postion = end($bk);
        $body_vals[$last_postion] = $body_vals[$last_postion] .
          '<figure class="op-map">
            <script type="application/json" class="op-geotag">
              {
                "type": "Feature",
                "geometry":
                  {
                    "type": "Point",
                    "coordinates": [' . $lat . ', ' . $lng . ']
                  },
                "properties":
                  {
                    "title": "' . $get_place_name . '",
                    "radius": 10000,
                    "pivot": true,   
                    "style": "satellite",
                  }
               }
            </script>
          </figure>';
      }
    }
    
    // Creating Slideshow for facebook instant article data
    if (!empty($imgs_path)) {
      $slider_keys = array_keys($full_script_slider);
      foreach ($slider_keys as $xx => $sliderkey) {
        $body_vals[$sliderkey] = $body_vals[$sliderkey] . $full_script_slider[$sliderkey];
      }
    }
    
    // Creating Social Embed Code for facebook instant article data
    if (!empty($embed_code_data)) {
      if (in_array($embed_code_pos, $bk)) {
        $body_vals[$embed_code_pos] = $body_vals[$embed_code_pos] .
          '<figure class="op-interactive">' . $embed_code_data . '</figure>';
      } else {
        $last_postion = end($bk);
        $body_vals[$last_postion] = $body_vals[$last_postion] .
          '<figure class="op-interactive">' . $embed_code_data . '</figure>';
      }
    }

    $node_body = implode("<p>", $body_vals);
    $node_body_content = '<p>' . $node_body;
    $node->link = url("node/$node->nid", ['absolute' => TRUE]);
    $kicker = $node->field_story_kicker_text[LANGUAGE_NONE][0]['value'];
    $items .= itg_fia_xml_format_rss_item($kicker, $target_nids, $fb_instant_image, $guid, $node_body_content, $node->title, $node->link, $pubdate, $auth_name, $desc, $op_pub, $modified, $op_modified);
  }

  global $base_url;
  $channel_defaults = array(
      'title' => variable_get('site_name', 'Drupal'),
      'link' => $base_url . '/' . current_path(),
  );

//  header("Content-Type: text/xml");
//  $output = "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\" >";
//  $output .= "<rss version='2.0' xml:base='" . $xml_base . "' xmlns:dc='http://purl.org/dc/elements/1.1/' xmlns:atom='http://www.w3.org/2005/Atom'>";
//  $output .= itg_fia_xml_format_rss_channel($channel_defaults['title'], $channel_defaults['link'], $items);
//  $dom = new DOMDocument;
//  $dom->preserveWhiteSpace = false;
//  $dom->formatOutput = true;
//  $dom->loadXML($output);
//  echo $dom->saveXML();
//  exit;

  $output = "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\" ?>\n";
  $output .= "<rss version='2.0' xml:base='" . $xml_base . "' xmlns:dc='http://purl.org/dc/elements/1.1/' xmlns:atom='http://www.w3.org/2005/Atom'>\n";
  $output .= itg_fia_xml_format_rss_channel($channel_defaults['title'], $channel_defaults['link'], $items);
  drupal_add_http_header('Content-Type:application/rss+xml; charset=utf-8');
  print $output;
  
}

/**
 * Creates the xml channel.
 */
function itg_fia_xml_format_rss_channel($title, $link, $items) {

  $output = "  <channel>\n";
  $output .= "    <title>" . $title . "</title>\n";
  $output .= "    <link>" . check_url($link) . "</link>\n";
  $output .= "    <description>" . t("Facebook Instant Articles feed") . "</description>\n";
  $output .= "    <language>en</language>\n";
  $output .= "    <atom:link href='" . check_url($link) . "' rel='self' type='application/rss+xml' />\n";
  $output .= $items;
  $output .= "  </channel>\n";
  $output .= "</rss>\n";

  return $output;
}

/**
 * Creates the xml item.
 */
function itg_fia_xml_format_rss_item($kicker, $target_nids, $fb_instant_image, $guid, $node_body_content, $title, $link, $pubdate, $name, $desc, $op_pub, $modified, $op_modified) {

  $output = "    <item>\n";
  $output .= "     <title>" . $title . "</title>\n";
  $output .= "     <link>" . check_url($link) . "</link>\n";
  $output .= "     <guid>" . $guid . "</guid>\n";
  $output .= "     <pubDate><![CDATA[" . $pubdate . "]]></pubDate>\n";
  $output .= "     <author>" . $name . "</author>\n";
  $output .= "     <description>" . $desc . "</description>\n";
  $output .= "    <content:encoded>\n";
  $output .= "    <![CDATA[\n";
  $output .= "    <!doctype html>\n";
  $output .= "    <html lang='en' prefix='op: http://media.facebook.com/op#'>\n";
  $output .= "    <head>\n";
  $output .= "     <meta charset='utf-8'>\n";
  $output .= "     <meta property ='fb:op-recirculation-ads' content=placement_id=".'xxxxxx'.">\n";
  $output .= "     <meta property='fb:use_automatic_ad_placement' content='enable=true ad_density=default'>\n";
  $output .= "     <meta property='op:markup_version' content='v1.0'>\n";
  $output .= "     <meta property='og:title' content='" . $title . "'>\n";
  $output .= "     <meta property='og:description' content='" . $desc . "'>\n";
  $output .= "     <link rel='canonical' href='" . $link . "'>\n";
  $output .= "     <link rel='stylesheet' title='default' href='#'>\n";
  $output .= "     <meta property='op:markup_version' content='v1.0'>\n";
  $output .= "    </head>\n";
  $output .= "     <body>\n";
  $output .= "     <article>\n";
  $output .= "     <header>\n";
  // <!-- The header image shown inside your article --> 
  $output .= "     <figure data-feedback='fb:likes, fb:comments'>\n";
  $output .= "      <img src='" . $fb_instant_image . "' />\n";
  $output .= "      <figcaption class='op-vertical-below'>\n";
  $output .= "      <h1>" . "CAPTION GOES HERE" . "</h1>\n";
  $output .= "      </figcaption>\n";
  $output .= "     </figure>\n";
  $output .= "     <h1>" . $title . "</h1>\n";
  $output .= "     <h2>" . $kicker . "</h2>\n";
  // <!-- A kicker for your article -->
  $output .= "     <h3 class='op-kicker'>" . $kicker . "</h3>\n";
  // <!-- The author of your article -->
  $output .= "     <address>" . $name . "</address>\n";
  $output .= "     <time class='op-published' dateTime='" . $pubdate . "'>" . $op_pub . "</time>\n";
  $output .= "     <time class='op-modified' dateTime='" . $modified . "'>" . $op_modified . "</time>\n";
  $output .= "     </header>\n";
  
  $output .= "     <div property='content:encoded'>" . $node_body_content . "</div>\n";
  $output .= "      <footer>\n";
  // <!-- Credits for your article -->
  $output .= "       <aside>The footer section can be used for acknowledgements, author bios, related articles, or any other supplemental information.</aside>\n";
  // <!-- Copyright details for your article -->
  $output .= "       <small>© Facebook</small>\n";
  $output .= "      </footer>\n";
  $output .= "     </article>\n";
  $output .= "     </body>\n";
  $output .= "    </html>\n";
  $output .= "    ]]>\n";
  $output .= "    </content:encoded>\n";
  $output .= "    </item>\n";
  return $output;
}

/*
 * Return Author Name
 */
function get_author_name($auid) {
  $get_author_id = db_query("SELECT byline_id from {itg_multi_byline_info} mbi WHERE mbi.nid = :nid AND mbi.publish_status = :status", array(":nid" => $auid, ":status" => 1))->fetchField();
  $author_name = db_query("SELECT title from {node} n WHERE n.nid = :nid", array(":nid" => $get_author_id))->fetchField();
  return $author_name;
}
