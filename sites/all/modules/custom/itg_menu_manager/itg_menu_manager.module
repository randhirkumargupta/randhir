<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
module_load_include('inc', 'itg_menu_manager', 'include/itg_menu_manager');

/**
 * {@inheritdoc}
 */
function itg_menu_manager_menu() {

    $items['itg-menu-manager'] = array(
        'title' => t('Menu Manager'),
        'description' => t('Menu Manager'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('itg_menu_manager_form'),
        'access arguments' => array('administer itg menu manager'),
    );

    $items['itg-menu-manager-remove'] = array(
        'page callback' => 'remove_from_menu_manager',
        'page arguments' => array(1),
        'access arguments' => array('administer itg menu manager'),
    );

    $items['itg-menu-manager/get-child/autocomplete'] = array(
        'page callback' => 'itg_menu_manager_get_child',
        'access arguments' => array('administer itg menu manager'),
    );

    $items['admin/config/user-interface/itg_menu_manager'] = array(
        'title' => 'Slideshow',
        'description' => 'Manage itg_menu_manager list.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('itg_menu_manager_manage'),
        'access arguments' => array('administer content'),
    );

    $items['itg-menu-manager/get-child-under-category-management/autocomplete'] = array(
        'page callback' => 'itg_menu_manager_get_child_under_category_management',
        'access arguments' => array('administer itg menu manager'),
    );

    $items['admin/settings/menu-manager'] = array(
        'title' => 'Menu manager',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('itg_menu_manager_custom_variables'),
        'access arguments' => array('access administrator'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

/**
 * Function is used to delete row in itg_menu_manager.
 * @param int $tid
 * @return type
 */
function remove_from_menu_manager($tid) {
    if (is_numeric($tid)) {
        db_delete('itg_menu_manager')->condition('id', $tid)->execute();
    }
    else {
        drupal_set_message("Please enter tid");
    }
    drupal_goto($_GET['destination']);
    return;
}

/**
 * {@inheritdoc}
 */
function itg_menu_manager_permission() {
    return array(
        'administer itg menu manager' => array(
            'title' => t('administer itg menu manager'),
            'description' => t('Perform administration tasks for administer itg menu manager'),
        ),
    );
}

/**
 * {@inheritdoc}
 */
function itg_menu_manager_form($form, &$form_state) {

    reset($options);
    // Get only frist tid
    $frist_section = key($options);

    $section = isset($form_state['values']['sections']) ? $form_state['values']['sections'] : $frist_section;

    $menu_level = $form_state['values']['menu_level'];
    if ($menu_level == 'third') {
        drupal_add_css('#decided-section {display:inline-block !important;}', array('type' => 'inline'));
        $options = itg_menu_manager_get_taxonomy_term_options('category_management');
    }
    else {
        $options = array(0 => "Home Page");
    }

    $form['url_type'] = array(
        '#type' => 'radios',
        '#title' => t('Menu Type'),
        '#options' => array(
            'internal' => 'Internal',
            'external' => 'External',
        ),
        '#default_value' => 'internal',
        '#ajax' => array(
            'callback' => 'add_or_remove_autocomplete',
            'wrapper' => 'entire_form',
        ),
        '#required' => TRUE,
    );

    $form['menu_level'] = array(
        '#type' => 'select',
        '#title' => t('Menu Level'),
        '#options' => array(
            'second' => 'Second',
            'third' => 'Third',
        ),
        '#required' => TRUE,
        '#ajax' => array(
            'callback' => 'decide_section',
            'wrapper' => 'entire_form',
        ),
    );
    $form['sections'] = array(
        '#type' => 'select',
        '#title' => t('Section'),
        '#ajax' => array(
            'callback' => 'get_section_update',
            'wrapper' => 'referral_provider',
        ),
        '#options' => $options,
        '#prefix' => '<div id="decided-section">',
        '#suffix' => '</div>',
        '#validated' => TRUE
    );

    $form['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title / Category'),
        '#prefix' => '<div id="referral_provider">',
        '#suffix' => '</div>',
        '#ajax' => array(
            'callback' => 'get_url_of_current_term',
            'wrapper' => 'url-of-current-term',
        ),
        '#required' => TRUE,
    );

    if ($menu_level == 'third') {
        $form['title']['#autocomplete_path'] = 'itg-menu-manager/get-child/autocomplete/' . $section;
    }
    else {
        $form['title']['#autocomplete_path'] = 'itg-menu-manager/get-child-under-category-management/autocomplete';
    }

    $form['url'] = array(
        '#type' => 'textfield',
        '#title' => t('URL'),
        '#prefix' => '<div id="url-of-current-term">',
        '#suffix' => '</div>',
        '#required' => TRUE,
    );

    $form['url_window'] = array(
        '#type' => 'radios',
        '#title' => t('Target'),
        '#options' => array(
            'same_window' => 'Same Window',
            'new_window' => 'New Window',
        ),
        '#default_value' => 'same_window',
        '#required' => TRUE,
    );


    // Submit Button
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save Menu'),
    );

    $form['#attributes'] = array(
        'class' => array('itg_menu_manager_form'),
    );

    $form['#prefix'] = '<div id="entire_form">';
    $form['#suffix'] = '</div>';


    drupal_add_js(drupal_get_path('module', 'itg_menu_manager') . '/js/itg_menu_manager.js', 'file');
    return $form;
}

/**
 * {@inheritdoc}
 */
function itg_menu_manager_form_validate($form, &$form_state) {
    $values = $form_state['values'];
    $url_type = $values['url_type'];
    $url = $values['url'];
    $errors = array();

    if ($url_type == 'external' && !empty($url)) {
        if ((strpos($url, 'http') === 0) && filter_var($url, FILTER_VALIDATE_URL)) {
            watchdog("menu_manager", "Url validated in case of external");
        }
        else {
            $errors[] = "Please enter valid external url  eg: http://www.example.com";
        }
    }

    if ($url_type == 'internal' && !empty($url)) {
        if (!drupal_valid_path($url)) {
            // Not a system URL.
            if (!drupal_lookup_path('source', $url)) {
                $errors[] = "Please enter valid internal url";
            }
        }
    }

    if (!empty($errors)) {
        drupal_set_message(implode("][", $errors), "error");
        foreach ($errors as $error) {
            form_set_error($error);
        }
    }
}

/**
 * Function return string matched child element of vocuvolary category_management.
 * @param string $string
 * @return json
 */
function itg_menu_manager_get_child_under_category_management($string) {
    $vocuvolary = taxonomy_vocabulary_machine_name_load('category_management');
    $options_source = taxonomy_get_tree($vocuvolary->vid);

    foreach ($options_source as $item) {
        if (itg_category_manager_term_state($item->tid) && module_exists('itg_category_manager') && function_exists('itg_category_manager_term_state')) {
            // Check for active categories
            $options[] = $item->tid;
        }
    }

    // Get autocomplete string matched children.
    $match_terms_query = db_select('taxonomy_term_data', 'ttd')
            ->fields('ttd', array('tid', 'name'))
            ->condition('ttd.tid', array($options), 'IN')
            ->condition('ttd.name', '%' . db_like($string) . '%', 'LIKE');

    $match_terms = $match_terms_query->execute()->fetchAll();

    foreach ($match_terms as $match_terms_data) {
        $children[$match_terms_data->name . " [tid: " . $match_terms_data->tid . "]"] = $match_terms_data->name . " [tid: " . $match_terms_data->tid . "]";
    }
    return drupal_json_output($children);
}

/**
 * Function create options for itg_menu_manager field.
 * @param string $machine_name
 * @return array
 */
function itg_menu_manager_get_taxonomy_term_options($machine_name) {
    $options = array();

    $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;

    $options_source = taxonomy_get_tree($vid, 0, 1);
    $options[0] = '-Select-';
    foreach ($options_source as $item) {
        if (itg_category_manager_term_state($item->tid) && module_exists('itg_category_manager') && function_exists('itg_category_manager_term_state')) {
            // Check for active categories
            $key = $item->tid;
            $value = $item->name;
            $options[$key] = $value;
        }
    }

    return $options;
}

/**
 * Function returns matched child of term.
 * @param int $tid
 * @param string $string
 * @return json
 */
function itg_menu_manager_get_child($tid, $string) {
    if (!empty($tid) && $tid) {
        $term = array();
        $children = array();
        // Get all child under the section.
        $all_children = taxonomy_get_children($tid);
        foreach ($all_children as $term_data) {
            $term[] = $term_data->tid;
        }

        if (!empty($term)) {
            // Get autocomplete string matched children.
            $match_terms_query = db_select('taxonomy_term_data', 'ttd')
                    ->fields('ttd', array('tid', 'name'))
                    ->condition('ttd.tid', array($term), 'IN')
                    ->condition('ttd.name', '%' . db_like($string) . '%', 'LIKE');

            $match_terms = $match_terms_query->execute()->fetchAll();

            foreach ($match_terms as $match_terms_data) {
                $children[$match_terms_data->name . " [tid: " . $match_terms_data->tid . "]"] = $match_terms_data->name . " [tid: " . $match_terms_data->tid . "]";
            }

            return drupal_json_output($children);
        }
    }
}

/**
 * Ajax callback funtion which replace tite field for autocomplete path.
 * @global array $messages
 * @param array $form
 * @param type $form_state
 * @return array
 */
function get_section_update($form, &$form_state) {
    global $messages;
    unset($messages);
    unset($form_state['input']['title'], $form_state['values']['title']);
    $section = $form_state['values']['sections'];
    $form['title']['#autocomplete_path'] = 'itg-menu-manager/get-child/autocomplete/' . $section;
    return form_builder($form['#id'], $form['title'], $form_state);
}

function get_url_of_current_term($form, &$form_state) {
    unset($form_state['input']['url'], $form_state['values']['url']);
    $title = $form_state['values']['title'];
    // get values beween squre breaket.
    preg_match_all("/\[([^\]]*)\]/", $title, $matches);
    // get tid
    $term_tid_array = explode("tid:", $matches[1][0]);
    $link = drupal_lookup_path('alias', 'taxonomy/term/' . trim($term_tid_array[1]));
    $form['url']['#value'] = $link;
    $form_builder = form_builder($form['#id'], $form['url'], $form_state);
    return $form_builder;
}

/**
 * Function is callback, which decide section is menadatory or not according to level.
 * 
 * @param array $form
 * @param type $form_state
 * @return array
 */
function decide_section($form, &$form_state) {

    $menu_level = $form_state['values']['menu_level'];
    $url_type = $form_state['values']['url_type'];
    $sections = $form_state['values']['sections'];

    // Make section required.
    if ($menu_level == 'third' && $url_type == 'internal') {
        $form['sections']['#required'] = TRUE;
    }

    // In case of external url , not need autocomplete path
    // Hide sections field as not required in case of external url
    if ($url_type == 'external') {
        unset($form['title']['#ajax']);
        unset($form['title']['#autocomplete_path']);
//    $form['sections']['#prefix'] = '<div style="display:none">';
//    $form['sections']['#sufix'] = '</div>';
    }

    if ($sections == 0 && $menu_level == 'third' && $url_type == 'internal') {
        $form['title']['#attributes'] = array(
            'disabled' => "disabled",
        );
    }
    return $form;
//  return form_builder($form['#id'], $form['sections'], $form_state);
}

/**
 * Function is callback, which decide title autosuggest.
 * 
 * @param array $form
 * @param type $form_state
 * @return array
 */
function add_or_remove_autocomplete($form, $form_state) {

    if ($form_state['values']['url_type'] == 'external') {
        unset($form['title']['#ajax']);
        unset($form['title']['#autocomplete_path']);
    }
    return $form;
}

/**
 * {@inheritdoc}
 */
function itg_menu_manager_form_submit($form, &$form_state) {
    $values = $form_state['values'];
    $url_type = filter_xss($values['url_type']);
    $menu_level = filter_xss($values['menu_level']);
    $sections = filter_xss($values['sections']);
    $title = filter_xss($values['title']);
    $url = filter_xss($values['url']);
    $target = filter_xss($values['url_window']);

    $max_query = db_select('itg_menu_manager');
    $max_query->addExpression('MAX(weight)');
    $max_query->condition('menu_level', $menu_level);
    // condition during menu level
    if ($menu_level == 'third') {
        $max_query->condition('section_id', $sections);
    }
    $max_result = $max_query->execute()->fetchField();

    $order = ++$max_result;

    // get values beween squre breaket.
    preg_match_all("/\[([^\]]*)\]/", $title, $matches);
    // get tid
    $term_tid_array = explode("tid:", $matches[1][0]);
    // In case of external url we didnt got tid so mannualy give a tid.
    $term_id = ($term_tid_array[1]) ? trim($term_tid_array[1]) : time();

    try {

        if (1) {
            db_insert('itg_menu_manager')
                    ->fields(array(
                        'title' => $title,
                        'url' => $url,
                        'target' => $target,
                        'menu_level' => $menu_level,
                        'weight' => $order,
                        'url_type' => $url_type,
                        'menu_name' => "blank",
                        'section_id' => $sections,
                        'tid' => trim($term_id),
                        'created' => time(),
                    ))
                    ->execute();
        }
//    else {
//      db_insert('itg_menu_manager')
//              ->fields(array(
//                  'title' => $title,
//                  'url' => $url,
//                  'target' => $target,
//                  'menu_level' => $menu_level,
//                  'weight' => $order,
//                  'url_type' => $url_type,
//                  'menu_name' => "blank",
//                  'section_id' => $sections,
//                  'tid' => time(),
//                  'created' => time(),
//              ))
//              ->execute();
//    }
    } catch (Exception $ex) {
        drupal_set_message($ex->getMessage());
    }
}

/**
 * {@inheritdoc}
 */
function itg_menu_manager_block_info() {
    $blocks['second_level_menu'] = array(
        'info' => t('Second Level Menu'),
        'cache' => DRUPAL_NO_CACHE
    );

    $blocks['third_level_menu'] = array(
        'info' => t('Third Level Menu'),
        'cache' => DRUPAL_NO_CACHE
    );
    return $blocks;
}

/**
 * {@inheritdoc}
 */
function itg_menu_manager_block_view($delta = '') {
    $block = array();
    switch ($delta) {
        case 'second_level_menu':
            $second_level_menu = get_second_level_menu();
            foreach ($second_level_menu as $db_data) {
                $temp_data = array();
                $temp_data['db_data'] = $db_data;
                $temp_data['term_load'] = taxonomy_term_load($db_data['tid']);
                $data[] = $temp_data;
            }
            $block['content'] = theme('second_level_menu', array("data" => $data));
            break;
        case 'third_level_menu':
            $data = array();
            $third_level_menu = get_third_level_menu();
            $node_data = array();

            // handling for ip pages
            $links_string = variable_get('menu_manager_custom_url');
            $links_array = explode(",", $links_string);
            if (in_array(arg(1), $links_array)) {
                $node_data = node_load(arg(1));
            }

            foreach ($third_level_menu as $db_data) {
                $temp_data = array();
                $temp_data['db_data'] = $db_data;
                $temp_data['term_load'] = taxonomy_term_load($db_data['tid']);
                $data[] = $temp_data;
            }
            $block['content'] = theme('third_level_menu', array("data" => $data, "node_load" => $node_data));
            break;
    }
    return $block;
}

function itg_menu_manager_theme() {
    return array(
        'second_level_menu' => array(
            'template' => 'templates/second-level-menu',
        ),
        'third_level_menu' => array(
            'template' => 'templates/third-level-menu',
        ),
    );
}

/**
 * function returns array of second level menu
 * @return type
 */
function get_second_level_menu() {
    $query = db_select('itg_menu_manager', 'imm')
            ->fields('imm')
            ->condition('imm.menu_level', 'second')
            ->orderBy('imm.weight', 'ASC');
    return $query->execute()->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * function returns array of third level menu
 * @return type
 */
function get_third_level_menu() {
    $arg = arg();
    $node_data = array();
    $section_id = 0;

    // handling for ip pages
    $links_string = variable_get('menu_manager_custom_url');
    $links_array = explode(",", $links_string);
    if (in_array(arg(1), $links_array)) {
        $node_data = node_load(arg(1));
    }

    // condition for itg theme
    if (isset($arg[2])) {
        $section_id = $arg[2];
    }
    // condition for itgadmin theme
    else if (isset($_GET['section'])) {
        $section_id = $_GET['section'];
    }
    else if (isset($node_data->field_page_section['und'][0]['tid']) && $node_data->field_page_section['und'][0]['tid'] == variable_get('ipl_for_widget')) {
        $section_id = variable_get('ipl_for_widget');
    }
    else if ($section_id == "") {
        $node = itg_videogallery_get_term(arg(1));

        if (in_array(variable_get('ipl_for_widget'), $node)) {
            $section_id = variable_get('ipl_for_widget');
        }
    }


    if ($section_id) {
        $query = db_select('itg_menu_manager', 'imm')
                ->fields('imm')
                ->condition('imm.menu_level', 'third')
                ->condition('imm.section_id', $section_id)
                ->orderBy('imm.weight', 'ASC');
        return $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    }
}

/**
 * Implements hook_views_api().
 * registering api information for custom views handlers.
 */
function itg_menu_manager_views_api() {
    return array(
        'api' => 3,
    );
}

/**
 * {@inheritdoc}
 */
function itg_menu_manager_views_data() {

    $data['itg_menu_manager']['table']['group'] = t('Menu Manager');

    $data['itg_menu_manager']['table']['base'] = array(
        'field' => 'tid',
        'title' => t('Menu Manager'),
        'help' => t('ITG Menu Manager Data'),
    );



    $data['itg_menu_manager']['tid'] = array(
        'title' => t('Category Manager Table'),
        'help' => t('Log information about taxonomy term.'),
        'relationship' => array(
            'base' => 'taxonomy_term_data', // The name of the table to join with.
            'base field' => 'tid', // The name of the field on the joined table.      
            'handler' => 'views_handler_relationship',
            'label' => t('Menu Category manager'),
            'title' => t('ITG'),
            'help' => t('Relate taxonomy to view.'),
        ),
        'field' => array(
            'handler' => 'views_handler_field_numeric',
            'click sortable' => TRUE,
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_numeric',
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
    );

    $data['itg_menu_manager']['url'] = array(
        'title' => t('url'),
        'help' => t('Menu url'),
        'field' => array(
            'handler' => 'views_handler_field',
            'click sortable' => TRUE,
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_string',
        ),
        'argument' => array(
            'handler' => 'views_handler_argument_string',
        ),
    );

    $data['itg_menu_manager']['title'] = array(
        'title' => t('title'),
        'help' => t('Menu title'),
        'field' => array(
            'handler' => 'views_handler_field',
            'click sortable' => TRUE,
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_string',
        ),
        'argument' => array(
            'handler' => 'views_handler_argument_string',
        ),
    );

    $data['itg_menu_manager']['menu_level'] = array(
        'title' => t('Menu Level'),
        'help' => t('Menu Level'),
        'field' => array(
            'handler' => 'views_handler_field',
            'click sortable' => TRUE,
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_string',
        ),
        'argument' => array(
            'handler' => 'views_handler_argument_string',
        ),
    );

    $data['itg_menu_manager']['url_type'] = array(
        'title' => t('Url Type'),
        'help' => t('Its stores url type value internal or external'),
        'field' => array(
            'handler' => 'views_handler_field',
            'click sortable' => TRUE,
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_string',
        ),
        'argument' => array(
            'handler' => 'views_handler_argument_string',
        ),
    );


    // Example numeric text field.
    $data['itg_menu_manager']['weight'] = array(
        'title' => t('Weight'),
        'help' => t('Weight'),
        'field' => array(
            'handler' => 'views_handler_field_numeric',
            'click sortable' => TRUE,
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_numeric',
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
    );

    // Example numeric text field.
    $data['itg_menu_manager']['id'] = array(
        'title' => t('ID'),
        'help' => t('table id can be use for actions'),
        'field' => array(
            'handler' => 'views_handler_field_numeric',
            'click sortable' => TRUE,
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_numeric',
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
    );

    // Example numeric text field.
    $data['itg_menu_manager']['section_id'] = array(
        'title' => t('Section'),
        'help' => t('Section id is saved if menu level is third'),
        'field' => array(
            'handler' => 'views_handler_field_numeric',
            'click sortable' => TRUE,
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_numeric',
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
    );


    return $data;
}

/**
 * {@inheritdoc}
 */
function itg_menu_manager_form_alter(&$form, &$form_state, $form_id) {

    if ($form_id == 'views_form_menu_manager_menu_manager_page') {
        $form['actions']['submit']['#submit'][] = 'itg_menu_manager_custom_submit';
    }

    if ($form_id == 'views_exposed_form') {
        $view = $form_state['view'];
        if ($view->name == "menu_manager" && $view->current_display == 'menu_manager_page') {
            drupal_add_css("#edit-section-id-wrapper {display:none}", "inline");
            if (arg(1) == 'third') {
                drupal_add_js(drupal_get_path('module', 'itg_menu_manager') . '/js/itg_menu_manager.js', 'file');
                $options = itg_menu_manager_get_taxonomy_term_options('category_management');
                $form['section_child'] = array(
                    '#title' => 'Section',
                    '#type' => 'select',
                    '#options' => $options,
                    '#weight' => -99,
                );
            }
        }
    }
}

/**
 * {@inheritdoc}
 */
function itg_menu_manager_custom_submit($form, &$form_state) {
    // Current display for indentifing the view page (Widget name).
    $current_display = $form_state['build_info']['args'][0]->current_display;
    // Below view_name will use to get widget name.
    // Take draggable view input value after submit the form.
    $draggable_view_data = $form_state['input']['draggableviews'];
    // Category tid from url.
    $menu_level = arg(1);
    if ($menu_level == 'second') {
        $total_changed_weight = 0;

        foreach ($draggable_view_data as $weight_cal_key => $weight) {
            $total_changed_weight = $weight['weight'] + $total_changed_weight;
        }

        if ($total_changed_weight) {
            // Now insert new entry in itg_widget_order table of combination
            foreach ($draggable_view_data as $key => $menu_data) {
                try {
                    db_merge('itg_menu_manager')
                            ->key(array(
                                'tid' => $menu_data['id'],
                                'menu_level' => $menu_level,
                            ))
                            ->fields(array(
                                'weight' => $menu_data['weight'],
                            ))
                            ->execute();
                    drupal_set_message("Order has been updated");
                } catch (Exception $ex) {
                    drupal_set_message($ex->getMessage());
                }
            }
        }
    }
    else if ($menu_level == 'third') {
        $section_id = $_GET['section_id'];
        $total_changed_weight = 0;

        foreach ($draggable_view_data as $weight_cal_key => $weight) {
            $total_changed_weight = $weight['weight'] + $total_changed_weight;
        }

        if ($total_changed_weight) {
            // Now insert new entry in itg_widget_order table of combination
            foreach ($draggable_view_data as $key => $menu_data) {
                try {
                    db_merge('itg_menu_manager')
                            ->key(array(
                                'tid' => trim($menu_data['id']),
                                'menu_level' => trim($menu_level),
                                'section_id' => trim($section_id),
                            ))
                            ->fields(array(
                                'weight' => $menu_data['weight'],
                            ))
                            ->execute();
                    drupal_set_message("Order has been updated");
                } catch (Exception $ex) {
                    drupal_set_message($ex->getMessage());
                }
            }
        }
    }
}

/**
 * {@inheritdoc}
 */
function itg_menu_manager_views_pre_render(&$view) {
    if ($view->name == "menu_manager" && $view->current_display == 'menu_manager_page') {
        $header_content = "<h2>" . arg(1) . " level menu ordering</h2>";
        $count = 0;
        if ((arg(1) == 'third' && !isset($_GET['section_child'])) && $_GET['section_child'] == 0) {
            unset($view->result);
        }
        else {
            $count = $view->total_rows;
        }
        $header_content .= '<span class="count">Count (' . $count . ') </span>';
        $view->attachment_before = $header_content;
    }
}
