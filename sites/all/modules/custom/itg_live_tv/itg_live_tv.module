<?php

/**
 * @file
 * The ITG Live TV module.
 *
 * Contains functionality for Live TV.
 *
 */

/**
 * Implements hook_menu().
 * @return array
 */
function itg_live_tv_menu() {
  $items['live-tv-details-ajax'] = array(
    'page callback' => 'itg_live_tv_details',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_live_tv_block_info() {
  $blocks['live_tv_tab_form_block'] = array(
    'info' => t('Live tv Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['live_tv_video_page'] = array(
    'info' => t('Live Tv Video Page'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * {@inheritdoc}
 */
function itg_live_tv_block_view($delta = '') {
  $block = array();
  $data = '';
  switch ($delta) {
    case 'live_tv_tab_form_block':
      $block['content'] = theme('live_tv_tab_form_display_block', array('data' => $data));
      break;
    case 'live_tv_video_page':
      $data = itg_live_tv_page_video();
      $block['content'] = theme('live_tv_video_page_block', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_live_tv_theme($existing, $type, $theme, $path) {
  $themes = array(
    'live_tv_tab_form_display_block' => array(
      'template' => 'live-tv-integration-form-tab-template',
      'path' => drupal_get_path('module', 'itg_live_tv') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'live_tv_integration_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'live-tv-integration-node-form',
      'path' => drupal_get_path('module', 'itg_live_tv') . '/templates',
      'render element' => 'form',
    ),
    'live_tv_video_page_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'live-tv-video-page',
      'path' => drupal_get_path('module', 'itg_live_tv') . '/templates',
      'render element' => 'form',
    ),
  );

  return $themes;
}

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_live_tv_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'live_tv_integration_node_form') {

    if (isset($form['#node']->nid)) {
      $default_tv_value = $form['title']['#default_value'];
      $form['title']['#attributes'] = array('disabled' => TRUE);
    }

    $itg_vid = taxonomy_vocabulary_machine_name_load('live_tv');
    $tax = taxonomy_get_tree($itg_vid->vid, $parent = 0, $max_depth = 1, $load_entities = FALSE);
    $op['_none'] = t(' - Select - ');

    foreach ($tax as $key => $val) {
      $op[$val->name] = $val->name;
    }

    if (empty($form['#node']->nid)) {
      $form['title'] = array(
        '#title' => t('Company'),
        '#type' => 'select',
        '#id' => 'company',
        '#default_value' => $default_tv_value,
        '#description' => t(''),
        '#options' => $op,
      );
    }

    $form['#after_build'][] = 'itg_live_tv_after_build';
    $form['actions']['submit']['#submit'][] = 'itg_live_tv_form_custom_callback';

    $destination = 'live-tv-integration';
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
      '#weight' => 21,
      '#value' => t('Cancel'),
    );
  }
}

/**
 * Implement hook_after_build
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_live_tv_after_build($form, &$form_state) {

  global $user, $base_url;


  // Alter label name
  if (isset($form['#node']->nid)) {
    $form['title']['#title'] = t('Company');
  }
  else {
    $form['title']['#title'] = t('Company') . '<span class="form-required" title="This field is required."> *</span>';
  }
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_live_tv' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_live_tv') . '/js/itg_live_tv.js', array('scope' => 'footer'));

  return $form;
}

/**
 * Custom submit callback for redirecting Live TV form.
 * {@inheritdoc}
 */
function itg_live_tv_form_custom_callback($form, &$form_state) {
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'live-tv-integration') {
    $op = 'created';
  }
  else {
    $op = 'updated';
  }
  $live_tv_title = $form_state['node']->title;
  drupal_set_message(t('Live tv integration <b>' . $live_tv_title . '</b> has been ' . $op . '.'));
  $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_live_tv_node_validate($node, $form, &$form_state) {

  if ($node->type == 'live_tv_integration') {

    $tv_title = $node->title;

    if (function_exists('itg_api_get_nid')) {

      $duplicate_title = itg_api_get_nid($tv_title, 'live_tv_integration');
    }

    // code to validation title field
    if ($tv_title == '_none') {
      form_set_error('title', t("Please select Company"));
    }

    if (!empty($duplicate_title) && empty($form['#node']->nid)) {
      form_set_error('title', t("Company name already exist"));
    }
  }
}

/**
 * Implement hook_views_pre_render
 * {@inheritdoc}
 */
function itg_live_tv_views_pre_render(&$view) {
  global $user, $base_url;

  // condition for view name
  if ($view->name == "live_tv_integration") {
    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;
    drupal_add_js(array('itg_live_tv' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_live_tv') . '/js/itg_live_tv.js', array('weight' => 1, 'scope' => 'footer'));

    $header_content_breaking = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_breaking .= l('Create Live tv integration', 'node/add/live-tv-integration', array('query' => array('destination' => 'live-tv-integration')));
    $view->attachment_before = $header_content_breaking;
  }

  if (isset($view->result) && !empty($view->result)) {
    foreach ($view->result as $live_result) {
      if (!empty($live_result->field_field_live_tv_device)) {
        $errors = array_filter($live_result->field_field_live_tv_device);
        if (empty($errors)) {
          $live_result->field_field_live_tv_device[0]['rendered']['#markup'] = 'Not Activated';
        }
      }
    }
  }
}

/**
 * Implements itg_live_tv_details
 */
function itg_live_tv_details() {
  $n_id = $_POST['company'];
  $device = $_POST['device'];
  // check if value is exist
  if (!empty($n_id) && !empty($device)) {
    $exist_val = itg_live_tv_company($device);
    $errors = array_filter($exist_val);

    if (!empty($errors)) {
      foreach ($exist_val as $val) {
        $node = node_load($val);
        foreach ($node->field_live_tv_device[LANGUAGE_NONE] as $key => $value) {
          if ($value['value'] == $device) {
            unset($node->field_live_tv_device[LANGUAGE_NONE][$key]);
            field_attach_presave('node', $node);
            field_attach_update('node', $node);
            // Clear the static loading cache.
            entity_get_controller('node')->resetCache(array($node->nid));
            itg_live_tv_insert($n_id, $device);
          }
        }
      }
    }
    else {
      itg_live_tv_insert($n_id, $device);
    }
  }
}

/**
 * Implements itg_live_tv_company
 * @param string $device
 * @return array
 */
function itg_live_tv_company($device) {
  $query = db_select('field_data_field_live_tv_device', 'c');
  $query->fields('c', array('entity_id'));
  $query->condition('c.field_live_tv_device_value', $device, '=');
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $options[] = $record['entity_id'];
  }

  return $options;
}

/**
 * Helper function to get live tv code
 * @param int $nid
 */
function itg_get_live_tv_code($nid) {
  if (!empty($nid)) {
    $query = db_select('field_data_field_ads_ad_code', 's');
    $query->fields('s', array('field_ads_ad_code_value'))
        ->condition('s.entity_id', $nid, '=');
    $query->range(0, 1);
    $result = $query->execute();
    $tv_code = $result->fetchField();
    if ($tv_code) {
      return $tv_code;
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Implements itg_live_tv_insert
 * @param int $n_id
 * @param string $device
 */
function itg_live_tv_insert($n_id, $device) {
  $node = node_load($n_id);
  foreach ($node->field_live_tv_device['und'] as $key => $value) {
    if (!empty($value)) {
      $data[]['value'] = $value;
    }
  }
  $data[]['value'] = $device;
  $node->field_live_tv_device[LANGUAGE_NONE] = $data;
  field_attach_presave('node', $node);
  field_attach_update('node', $node);
  // Clear the static loading cache.
  entity_get_controller('node')->resetCache(array($node->nid));
}

function mobile_user_agent_switch() {
  $tablet_browser = 0;
  $mobile_browser = 0;

  if (preg_match('/(tablet|ipad|playbook)|(android(?!.*(mobi|opera mini)))/i', strtolower($_SERVER['HTTP_USER_AGENT']))) {
    $tablet_browser++;
  }

  if (preg_match('/(up.browser|up.link|mmp|symbian|smartphone|midp|wap|phone|android|iemobile)/i', strtolower($_SERVER['HTTP_USER_AGENT']))) {
    $mobile_browser++;
  }

  if ((strpos(strtolower($_SERVER['HTTP_ACCEPT']), 'application/vnd.wap.xhtml+xml') > 0) or ( (isset($_SERVER['HTTP_X_WAP_PROFILE']) or isset($_SERVER['HTTP_PROFILE'])))) {
    $mobile_browser++;
  }

  $mobile_ua = strtolower(substr($_SERVER['HTTP_USER_AGENT'], 0, 4));
  $mobile_agents = array(
    'w3c ', 'acs-', 'alav', 'alca', 'amoi', 'audi', 'avan', 'benq', 'bird', 'blac',
    'blaz', 'brew', 'cell', 'cldc', 'cmd-', 'dang', 'doco', 'eric', 'hipt', 'inno',
    'ipaq', 'java', 'jigs', 'kddi', 'keji', 'leno', 'lg-c', 'lg-d', 'lg-g', 'lge-',
    'maui', 'maxo', 'midp', 'mits', 'mmef', 'mobi', 'mot-', 'moto', 'mwbp', 'nec-',
    'newt', 'noki', 'palm', 'pana', 'pant', 'phil', 'play', 'port', 'prox',
    'qwap', 'sage', 'sams', 'sany', 'sch-', 'sec-', 'send', 'seri', 'sgh-', 'shar',
    'sie-', 'siem', 'smal', 'smar', 'sony', 'sph-', 'symb', 't-mo', 'teli', 'tim-',
    'tosh', 'tsm-', 'upg1', 'upsi', 'vk-v', 'voda', 'wap-', 'wapa', 'wapi', 'wapp',
    'wapr', 'webc', 'winw', 'winw', 'xda ', 'xda-');

  if (in_array($mobile_ua, $mobile_agents)) {
    $mobile_browser++;
  }

  if (strpos(strtolower($_SERVER['HTTP_USER_AGENT']), 'opera mini') > 0) {
    $mobile_browser++;
    //Check for tablets on opera mini alternative headers
    $stock_ua = strtolower(isset($_SERVER['HTTP_X_OPERAMINI_PHONE_UA']) ? $_SERVER['HTTP_X_OPERAMINI_PHONE_UA'] : (isset($_SERVER['HTTP_DEVICE_STOCK_UA']) ? $_SERVER['HTTP_DEVICE_STOCK_UA'] : ''));
    if (preg_match('/(tablet|ipad|playbook)|(android(?!.*mobile))/i', $stock_ua)) {
      $tablet_browser++;
    }
  }
  if ($mobile_browser > 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implement function for iframe return for live tv video page
 */
function itg_live_tv_page_video() {
  $output = '';
  if (function_exists('itg_live_tv_company')) {
    $flag = mobile_user_agent_switch();
    if ($flag) {
      $current_device = 'Web Mobile';
    }
    else {
      $current_device = 'Web';
    }
    $device = itg_live_tv_company($current_device);

    if (!empty($device[0])) {
      $live_tv_get_details = node_load($device[0]);
      $live_url = $live_tv_get_details->field_ads_ad_code[LANGUAGE_NONE][0]['value'];
      if (filter_var($live_url, FILTER_VALIDATE_URL)) {
        $output = '<iframe frameborder="0" class="media__video--responsive" id="livetv_video1" scrolling="no" allowfullscreen="" src="' . $live_url . '"></iframe>';
      }
      else {
        $output = $live_url;
      }
    }
    return $output;
  }
}

/**
 * Implement function for category return for current live tv program
 * @return array
 */
function itg_live_tv_page_video_category() {
  $useragent = $_SERVER['HTTP_USER_AGENT'];
  if (function_exists('itg_live_tv_company')) {
    $current_device = 'Web';
    if (function_exists('mobile_user_agent_switch')) {
      $flag = mobile_user_agent_switch();
      if ($flag) {
        $current_device = 'Web Mobile';
      }
    }
    $device = itg_live_tv_company($current_device);
    if (!empty($device[0])) {
      $live_tv_get_details = node_load($device[0]);
      $live_url = $live_tv_get_details->field_ads_ad_code[LANGUAGE_NONE][0]['value'];
    }
    $program_cat_value = variable_get('program_category_id_for_programmes');
    $p_term = taxonomy_term_load($program_cat_value);
    $childs[$program_cat_value]['time'] = (!empty($p_term->field_user_city[LANGUAGE_NONE][0]['value']) ? strtotime($p_term->field_user_city[LANGUAGE_NONE][0]['value']) : '');
    $childs[$program_cat_value]['name'] = $p_term->name;
    $childs[$program_cat_value]['tid'] = $p_term->tid;
    $program_child = taxonomy_get_children($program_cat_value, $vid = 0);
    $current_program_time = date('H:i', time());
    $current_program_timestamp = strtotime($current_program_time);
    if (!empty($program_child)) {
      foreach ($program_child as $key => $child) {
        $childs[$key]['time'] = (!empty($child->field_user_city[LANGUAGE_NONE][0]['value']) ? strtotime($child->field_user_city[LANGUAGE_NONE][0]['value']) : '');
        $childs[$key]['name'] = $child->name;
        $childs[$key]['tid'] = $key;
      }
    }
    if (!empty($childs)) {
      foreach ($childs as $value) {
        if (!empty($value['time']) && $value['time'] <= $current_program_timestamp) {
          $new_time[$value['time']]['time'] = date('d-m-Y H:i', $value['time']);
          $new_time[$value['time']]['tid'] = $value['tid'];
          $new_time[$value['time']]['name'] = $value['name'];
        }
      }
    }
    krsort($new_time);
    $current_program_cat = array_slice($new_time, 0, 1);
    $output = $current_program_cat[0]['tid'];
    return $output;
  }
}
