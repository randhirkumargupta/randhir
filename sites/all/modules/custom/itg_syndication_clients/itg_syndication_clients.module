<?php

/**
 * @file
 * The ITG Syndication clients.
 * Contains functionality for ITG Syndication for clients.
 */
module_load_include('inc', 'itg_syndication_clients', 'itg_syndication_clients.helper');

/**
 * Implements hook_menu().
 */
function itg_syndication_clients_menu() {
  $items['bsb/story'] = array(
    'page callback' => 'itg_bsb_story_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_bsb_story.inc',
    'type' => MENU_CALLBACK,
  );
  $items['bsb/photos'] = array(
    'page callback' => 'itg_bsb_photo_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_bsb_photo.inc',
    'type' => MENU_CALLBACK,
  );
  $items['bsb/videos'] = array(
    'page callback' => 'itg_bsb_video_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_bsb_video.inc',
    'type' => MENU_CALLBACK,
  );
  $items['indiatoday/yahoo'] = array(
    'page callback' => 'itg_indiatoday_yahoo_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_indiatoday_yahoo.inc',
    'type' => MENU_CALLBACK,
  );
  $items['feeds/msnfeeds/story'] = array(
    'page callback' => 'itg_msn_feed_story_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_msn_feed_story.inc',
    'type' => MENU_CALLBACK,
  );
  $items['rssfeeds/cabbytabby/videos'] = array(
    'page callback' => 'itg_cabbytabby_feed_videos_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_cabbytabby_feed_videos.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * This function is used to create bsb directory on public folder
 * hook_install
 */
function itg_syndication_clients_install() {
  $bsbdir = 'public://bsb';
  file_prepare_directory($bsbdir, FILE_CREATE_DIRECTORY);
}

function slugify($text) {  
  $text = preg_replace('~&~', 'and', $text);  
  $text = preg_replace('~[^\pL\d]+~u', '-', $text);
  $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);
  $text = preg_replace('~[^-\w]+~', '', $text);
  $text = trim($text, '-');
  $text = preg_replace('~-+~', '-', $text);
  $text = strtolower($text);
  if (empty($text)) {
    return 'n-a';
  }
  return $text;
}

function get_terms_name_by_ids($tids = array()) {
  if (count($tids) <= 0)
    return FALSE;

  $query = db_select('taxonomy_term_data', 'ttd');
  $query->fields('ttd', array('tid', 'name'));
  $query->condition('ttd.tid', $tids, 'IN');
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $result;
}

function get_image_info_by_fid($fid = NULL) {
  $image_data = array();
  if (!empty($fid)) {
    $query = db_select('image_info', 'ii');
    $query->fields('ii', array('image_caption'));
    $query->condition('ii.fid', $fid, '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $image_data['caption'] = '';
    if (count($result) > 0) {
      $image_data['caption'] = $result[0]['image_caption'];
    }
    $img_url = get_thumbnail_by_fid($fid);
    $image_data['imag_url'] = $img_url;
    $ext = end(explode(".", $img_url));
    $image_data['mime_type'] = $ext;
  }
  return $image_data;
}

function get_thumbnail_by_fid($fid = NULL, $style = NULL) {
  if (!empty($fid)) {
    $file_obj = file_load($fid);
    if (empty($style)) {
      $img_url = file_create_url($file_obj->uri);
    }
    else {
      $img_url = image_style_url($style, $file_obj->uri);
    }
    return $img_url;
  }
  return FALSE;
}

function get_term_name_by_tid($tid = NULL) {
  $tname = '';
  if (!empty($tid)) {
    $query = db_select('taxonomy_term_data', 'ttd');
    $query->fields('ttd', array('name'));
    $query->condition('ttd.tid', $tid, '=');
    $tname = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if (count($tname) > 0) {
      $tname = $tname[0]['name'];
    }
  }
  return $tname;
}

function get_content_city($nid = NULL) {
  $city = '';
  if (!empty($nid)) {
    $query = db_select('field_data_field_stroy_city', 'city');
    $query->leftJoin('taxonomy_term_data', 'tdata', 'tdata.tid=city.field_stroy_city_tid');
    $query->fields('tdata', array('name'));
    $query->fields('city', array('field_stroy_city_tid'));
    $query->condition('city.entity_id', $nid, '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if (count($result) > 0) {
      $city = $result[0]['name'];
    }
  }
  return $city;
}

function get_byline_by_nid($nid = NULL) {
  $city = '';
  if (!empty($nid)) {
    $query = db_select('field_data_field_stroy_city', 'city');
    $query->leftJoin('taxonomy_term_data', 'tdata', 'tdata.tid=city.field_stroy_city_tid');
    $query->fields('tdata', array('name'));
    $query->fields('city', array('field_stroy_city_tid'));
    $query->condition('city.entity_id', $nid, '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if (count($result) > 0) {
      $city = $result[0]['name'];
    }
  }
  return $city;
}

function get_content_tags($nid = NULL, $isStr = FALSE) {
  $tags = array();
  if (!empty($nid)) {
    $query = db_select('field_data_field_story_itg_tags', 'tags');
    $query->leftJoin('taxonomy_term_data', 'tdata', 'tdata.tid=tags.field_story_itg_tags_tid');
    $query->fields('tdata', array('name'));
    $query->fields('tags', array('field_story_itg_tags_tid'));
    $query->condition('tags.entity_id', $nid, '=');
    $tags = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if ($isStr) {
      $keywords = array();
      foreach ($tags as $value) {
        $keywords[] = $value['name'];
      }
      $tags = implode(',', $keywords);
    }
  }
  return $tags;
}

function get_releted_content_by_nid($nid = NULL) {
  $related_content = array();
  if (!empty($nid)) {
    $query = db_select('field_data_field_common_related_content', 'rc');
    $query->fields('rc', array('field_common_related_content_value'));
    $query->condition('rc.entity_id', $nid, '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if (count($result) > 0) {
      $related_str = explode('|~|', $result[0]['field_common_related_content_value']);
      $nids = array();
      foreach ($related_str as $value) {
        $nids[] = end(explode('IT_', $value));
      }
      $query = db_select('node', 'rn');
      $query->fields('rn', array('nid', 'title'));
      $query->condition('rn.nid', $nids, 'IN');
      $related_content = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    }
  }
  return $related_content;
}


function get_node_metatags_by_nid($nid = NULL) {
  if (empty($nid))
    return FALSE;
  $result = db_select('metatag', 'mt')->fields('mt', array('data'))->condition('mt.entity_id', $nid, '=')->execute()->fetchAssoc();
  return $result;
}

function genrate_uniqui_guid(){
  return md5(uniqid(rand(), true));
}

function get_byline_name_by_nid($nid = NULL){
  $byline = '';
  if (!empty($nid)) {
    
    $query = db_select('itg_multi_byline_info', 'bi');
    $query->leftJoin('node', 'n', 'bi.byline_id=n.nid');
    $query->fields('n', array('title'));
    $query->condition('bi.publish_status', 1, '=');
    $query->condition('bi.nid', $nid, '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if (count($result) > 0) {
      $byline = $result[0]['title'];
    }
  }
  return $byline;
}