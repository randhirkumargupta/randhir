<?php

/**
 * @file
 * The ITG Syndication clients.
 * Contains functionality for ITG Syndication for clients.
 */
module_load_include('inc', 'itg_syndication_clients', 'itg_syndication_clients.helper');

/**
 * Implements hook_menu().
 */
function itg_syndication_clients_menu() {
  $items['bsb/story'] = array(
    'page callback' => 'itg_bsb_story_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_bsb_story.inc',
    'type' => MENU_CALLBACK,
  );
  $items['bsb/photos'] = array(
    'page callback' => 'itg_bsb_photo_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_bsb_photo.inc',
    'type' => MENU_CALLBACK,
  );
  $items['bsb/videos'] = array(
    'page callback' => 'itg_bsb_video_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_bsb_video.inc',
    'type' => MENU_CALLBACK,
  );
  $items['indiatoday/yahoo'] = array(
    'page callback' => 'itg_indiatoday_yahoo_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_indiatoday_yahoo.inc',
    'type' => MENU_CALLBACK,
  );
  $items['feeds/msnfeeds/story'] = array(
    'page callback' => 'itg_msn_feed_story_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_msn_feed_story.inc',
    'type' => MENU_CALLBACK,
  );
  $items['rssfeeds/cabbytabby/videos'] = array(
    'page callback' => 'itg_cabbytabby_feed_videos_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_cabbytabby_feed_videos.inc',
    'type' => MENU_CALLBACK,
  );
  $items['rssfeeds/proquest/story'] = array(
    'page callback' => 'itg_proquest_feed_story_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_proquest_feed_story.inc',
    'type' => MENU_CALLBACK,
  );
  $items['rssfeeds/ola/video'] = array(
    'page callback' => 'itg_ola_feed_videos_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_ola_feed_videos.inc',
    'type' => MENU_CALLBACK,
  );
  $items['rssfeeds/dekkho/video'] = array(
    'page callback' => 'itg_dekkho_feed_videos_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_dekkho_feed_videos.inc',
    'type' => MENU_CALLBACK,
  );
  $items['rssfeeds/videoelephant/video'] = array(
    'page callback' => 'itg_videoelephant_feed_videos_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_videoelephant_feed_videos.inc',
    'type' => MENU_CALLBACK,
  );
  $items['rssfeeds/gist/galleries'] = array(
    'page callback' => 'itg_gist_feed_galleries_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_gist_galleries_videos.inc',
    'type' => MENU_CALLBACK,
  );
  $items['rssfeeds/dailyhunt/stories'] = array(
    'page callback' => 'itg_dailyhunt_feed_stories_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_dailyhunt_stories.inc',
    'type' => MENU_CALLBACK,
  );
  $items['rssfeeds/dailyhunt/breakingnews'] = array(
    'page callback' => 'itg_dailyhunt_feed_breakingnews_syndication',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_dailyhunt_stories.inc',
    'type' => MENU_CALLBACK,
  );
  $items['rssfeeds/scribd/latest_issue'] = array(
    'page callback' => 'itg_scribd_feed_latest_issue',
    'access arguments' => array('access content'),
    'file' => 'inc/itg_scribd_latest_issue.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_syndication_clients_cronapi($op, $job = NULL) {
  $items['itg-bsb-story-syndication-cron'] = array(
    'description' => 'Syndication BSB story cron.',
    'callback' => 'itg_bsb_story_syndication',
    'file' => 'inc/itg_bsb_story.inc',
  );
  $items['itg-bsb-photo-syndication-cron'] = array(
    'description' => 'Syndication BSB Photo cron.',
    'callback' => 'itg_bsb_photo_syndication',
    'file' => 'inc/itg_bsb_photo.inc',
  );
  $items['itg-bsb-video-syndication-cron'] = array(
    'description' => 'Syndication BSB Video cron.',
    'callback' => 'itg_bsb_video_syndication',
    'file' => 'inc/itg_bsb_video.inc',
  );
  $items['itg-indiatoday-yahoo-syndication-cron'] = array(
    'description' => 'Syndication Yahoo cron.',
    'callback' => 'itg_indiatoday_yahoo_syndication',
    'file' => 'inc/itg_indiatoday_yahoo.inc',
  );
  $items['itg-msn-feed-story-syndication-cron'] = array(
    'description' => 'Syndication MSN story cron.',
    'callback' => 'itg_msn_feed_story_syndication',
    'file' => 'inc/itg_msn_feed_story.inc',
  );
  $items['itg-cabbytabby-feed-videos-syndication-cron'] = array(
    'description' => 'Syndication Cabbytabby video cron.',
    'callback' => 'itg_cabbytabby_feed_videos_syndication',
    'file' => 'inc/itg_cabbytabby_feed_videos.inc',
  );
  $items['itg-proquest-feed-story-syndication-cron'] = array(
    'description' => 'Syndication Proquest story cron.',
    'callback' => 'itg_proquest_feed_story_syndication',
    'file' => 'inc/itg_proquest_feed_story.inc',
  );
  $items['itg-ola-feed-videos-syndication-cron'] = array(
    'description' => 'Syndication Ola Video cron.',
    'callback' => 'itg_ola_feed_videos_syndication',
    'file' => 'inc/itg_ola_feed_videos.inc',
  );
  $items['itg-dekkho-feed-videos-syndication-cron'] = array(
    'description' => 'Syndication Dekkho video cron.',
    'callback' => 'itg_dekkho_feed_videos_syndication',
    'file' => 'inc/itg_dekkho_feed_videos.inc',
  );
  $items['itg-videoelephant-feed-videos-syndication-cron'] = array(
    'description' => 'Syndication Video Elephant video cron.',
    'callback' => 'itg_videoelephant_feed_videos_syndication',
    'file' => 'inc/itg_videoelephant_feed_videos.inc',
  );
  $items['itg-gist-feed-galleries-syndication-cron'] = array(
    'description' => 'Syndication Gist galleries cron.',
    'callback' => 'itg_gist_feed_galleries_syndication',
    'file' => 'inc/itg_gist_galleries_videos.inc',
  );
  $items['itg-dailyhunt-feed-stories-syndication-cron'] = array(
    'description' => 'Syndication Dailyhunt stories cron.',
    'callback' => 'itg_dailyhunt_feed_stories_syndication',
    'file' => 'inc/itg_dailyhunt_stories.inc',
  );
  $items['itg-dailyhunt-feed-breakingnews-syndication-cron'] = array(
    'description' => 'Syndication Dailyhunt breaking news cron.',
    'callback' => 'itg_dailyhunt_feed_breakingnews_syndication',
    'file' => 'inc/itg_dailyhunt_stories.inc',
  );
  $items['itg-scribd-feed-latest-issue-cron'] = array(
    'description' => 'Syndication Scribd Latest issue cron.',
    'callback' => 'itg_scribd_feed_latest_issue',
    'file' => 'inc/itg_scribd_latest_issue.inc',
  );
  return $items;
}

function slugify($text) {
  $text = preg_replace('~&~', 'and', $text);
  $text = preg_replace('~[^\pL\d]+~u', '-', $text);
  $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);
  $text = preg_replace('~[^-\w]+~', '', $text);
  $text = trim($text, '-');
  $text = preg_replace('~-+~', '-', $text);
  $text = strtolower($text);
  if (empty($text)) {
    return 'n-a';
  }
  return $text;
}

function get_terms_name_by_ids($tids = array()) {
  if (count($tids) <= 0)
    return FALSE;

  $query = db_select('taxonomy_term_data', 'ttd');
  $query->fields('ttd', array('tid', 'name'));
  $query->condition('ttd.tid', $tids, 'IN');
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $result;
}

function get_image_info_by_fid($fid = NULL) {
  $image_data = array();
  if (!empty($fid)) {
    $query = db_select('image_info', 'ii');
    $query->fields('ii', array('image_caption'));
    $query->condition('ii.fid', $fid, '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $image_data['caption'] = '';
    if (count($result) > 0) {
      $image_data['caption'] = $result[0]['image_caption'];
    }
    $img_url = get_thumbnail_by_fid($fid);
    $image_data['imag_url'] = $img_url;
    $ext = end(explode(".", $img_url));
    $image_data['mime_type'] = $ext;
  }
  return $image_data;
}

function get_thumbnail_by_fid($fid = NULL, $style = NULL) {
  if (!empty($fid)) {
    $file_obj = file_load($fid);
    if (empty($style)) {
      $img_url = file_create_url($file_obj->uri);
    }
    else {
      $img_url = image_style_url($style, $file_obj->uri);
    }
    return $img_url;
  }
  return FALSE;
}

function get_term_name_by_tid($tid = NULL) {
  $tname = '';
  if (!empty($tid)) {
    $query = db_select('taxonomy_term_data', 'ttd');
    $query->fields('ttd', array('name'));
    $query->condition('ttd.tid', $tid, '=');
    $tname = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if (count($tname) > 0) {
      $tname = $tname[0]['name'];
    }
  }
  return $tname;
}

function get_content_city($nid = NULL) {
  $city = '';
  if (!empty($nid)) {
    $query = db_select('field_data_field_stroy_city', 'city');
    $query->leftJoin('taxonomy_term_data', 'tdata', 'tdata.tid=city.field_stroy_city_tid');
    $query->fields('tdata', array('name'));
    $query->fields('city', array('field_stroy_city_tid'));
    $query->condition('city.entity_id', $nid, '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if (count($result) > 0) {
      $city = $result[0]['name'];
    }
  }
  return $city;
}

function get_byline_by_nid($nid = NULL) {
  $city = '';
  if (!empty($nid)) {
    $query = db_select('field_data_field_stroy_city', 'city');
    $query->leftJoin('taxonomy_term_data', 'tdata', 'tdata.tid=city.field_stroy_city_tid');
    $query->fields('tdata', array('name'));
    $query->fields('city', array('field_stroy_city_tid'));
    $query->condition('city.entity_id', $nid, '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if (count($result) > 0) {
      $city = $result[0]['name'];
    }
  }
  return $city;
}

function get_content_tags($nid = NULL, $isStr = FALSE) {
  $tags = array();
  if (!empty($nid)) {
    $query = db_select('field_data_field_story_itg_tags', 'tags');
    $query->leftJoin('taxonomy_term_data', 'tdata', 'tdata.tid=tags.field_story_itg_tags_tid');
    $query->fields('tdata', array('name'));
    $query->fields('tags', array('field_story_itg_tags_tid'));
    $query->condition('tags.entity_id', $nid, '=');
    $tags = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if ($isStr) {
      $keywords = array();
      foreach ($tags as $value) {
        $keywords[] = $value['name'];
      }
      $tags = implode(',', $keywords);
    }
  }
  return $tags;
}

function get_releted_content_by_nid($nid = NULL) {
  $related_content = array();
  if (!empty($nid)) {
    $query = db_select('field_data_field_common_related_content', 'rc');
    $query->fields('rc', array('field_common_related_content_value'));
    $query->condition('rc.entity_id', $nid, '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if (count($result) > 0) {
      $related_str = explode('|~|', $result[0]['field_common_related_content_value']);
      $nids = array();
      foreach ($related_str as $value) {
        $nids[] = end(explode('IT_', $value));
      }
      $query = db_select('node', 'rn');
      $query->fields('rn', array('nid', 'title'));
      $query->condition('rn.nid', $nids, 'IN');
      $related_content = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    }
  }
  return $related_content;
}

function get_node_metatags_by_nid($nid = NULL) {
  if (empty($nid))
    return FALSE;
  $result = db_select('metatag', 'mt')->fields('mt', array('data'))->condition('mt.entity_id', $nid, '=')->execute()->fetchAssoc();
  return $result;
}

function genrate_uniqui_guid() {
  return md5(uniqid(rand(), true));
}

function get_byline_name_by_nid($nid = NULL) {
  $byline = '';
  if (!empty($nid)) {
    $query = db_select('itg_multi_byline_info', 'bi');
    $query->leftJoin('node', 'n', 'bi.byline_id=n.nid');
    $query->fields('n', array('title'));
    $query->condition('bi.publish_status', 1, '=');
    $query->condition('bi.nid', $nid, '=');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    if (count($result) > 0) {
      $byline = $result[0]['title'];
    }
  }
  return $byline;
}

/**
 * function for generate image xml tag
 *
 * @return array
 */
function get_img_tag_detail($result) {
  if (empty($result[field_story_medium_image_fid]))
    return FALSE;

  $highres = get_image_info_by_fid($result['field_story_medium_image_fid']);
  $lowres = get_image_info_by_fid($result['field_story_small_image_fid']);
  $imgtag = "<bodyimages><image><lowres><![CDATA[" . $lowres['imag_url'] . "]]></lowres><highres><![CDATA[" . $highres['imag_url'] . "]]></highres><caption>" . $highres['caption'] . "</caption></image></bodyimages>";
  return $imgtag;
}

/**
 * function for generate comment xml tag
 *
 * @return array
 */
function get_comment_xml_tag($nid) {
  $node = node_load($nid);

  if (count($node->comment) <= 0) {
    return emptyget_comment_xml_tag();
  }
  // variable declation
  $mode = "COMMENT_MODE_FLAT";
  $comments_per_page = 10;
  $commentsflag = 0;
  $comment_tag = "";
  $output = "";
  $comments_list = comment_get_thread($node, $mode, $comments_per_page);

  // writng comments tag
  foreach ($comments_list as $key => $value) {
    $cid = $value;
    $commentsflag = 1;
    $commens_obj = comment_load($cid);
    $commenttext = $commens_obj->comment_body['und'][0]['value'];
    $name = $commens_obj->name;
    $create_date = date("F d, Y", $commens_obj->created);
    $create_datetime = date("Y-m-d\TH:i:sP", $commens_obj->created);
    $email = $commens_obj->mail;
    $comment_tag .= "<comment><commenttext>" . $commenttext . "</commenttext><name>" . $name . "</name><createddate>" . $create_date . "</createddate><createddatetime>" . $create_datetime . "</createddatetime><email>" . $email . "</email></comment>";
  }

  if ($commentsflag) {
    $output .= "<comments>";
    $output .= $comment_tag;
    $output .= "</comments>";
  }
  else {
    $output .= emptyget_comment_xml_tag();
  }
  return $output;
}

/**
 * function for generate Empty comment xml tag
 *
 *
 */
function emptyget_comment_xml_tag() {
  $commenttext = "";
  $name = '';
  $create_date = '';
  $create_datetime = "";
  $email = "";
  // writng comments tag
  $comment_tag .= "<comment><commenttext>" . $commenttext . "</commenttext><name>" . $name . "</name><createddate>" . $create_date . "</createddate><createddatetime>" . $create_datetime . "</createddatetime><email>" . $email . "</email></comment>";

  $output .= "<comments>";
  $output .= $comment_tag;
  $output .= "</comments>";
  return $output;
}

function get_empty_related_story_tag() {
  return "<story><title></title><url></url><thumbimage></thumbimage></story>";
}

function get_empty_related_video_tag() {
  return "<video><title></title><url></url><thumbimage></thumbimage></video>";
}

function get_empty_related_photo_tag() {
  return "<photo><title></title><url></url><thumbimage></thumbimage></photo>";
}

/**
 * common function for return related content node type
 *
 * @return array
 * @pram $type
 */
function related_content_node_type($node_list = "", $type) {
  global $base_url;
  $file_name = "";
  $term_feed_path = "";
  $type_ar = array('photos' => 'NO', 'videos' => 'NO', 'stories' => 'NO');
  $related_ar = array();
  $count = 0;
  $query = db_select('field_data_field_common_related_content', 'frc');
  $query->fields('frc', array('field_common_related_content_value'));
  $query->condition('frc.entity_id', $node_list);
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $node_str = $result[0]['field_common_related_content_value'];

  // replace enviroment name: AWS_, UAT_ etc
  $node_str = str_replace("AWS_", "", $node_str);
  $node_str = str_replace("UAT_", "", $node_str);
  $node_str = str_replace("IT_", "", $node_str);
  $node_str = str_replace("|~|", ",", $node_str);

  $nid_list = explode(",", $node_str);
  $query_type = db_select('node', 'n');
  $query_type->leftJoin('field_data_field_story_small_image', 'si', 'si.entity_id=n.nid');
  $query_type->fields('n', array('type', 'nid', 'title'));
  $query_type->fields('si', array('field_story_small_image_fid'));
  $query_type->condition('n.nid', $nid_list, 'IN');
  $result_type = $query_type->execute()->fetchAll(PDO::FETCH_ASSOC);

  $related_story_xml = '';
  $related_video_xml = '';
  $related_photo_xml = '';
  foreach ($result_type as $reskey => $resvalue) {
    $nid = $resvalue['nid'];
    if ($resvalue['type'] == "story") {
      $type_ar['stories'] = "YES";
      $url = $base_url . "/" . drupal_get_path_alias('node/' . $resvalue['nid']);
      $small_img = get_image_info_by_fid($resvalue['field_story_small_image_fid']);
      $related_story_xml .= '<story>';
      $related_story_xml .= '<title>' . $resvalue['title'] . '</title>';
      $related_story_xml .= '<url>' . $url . '</url>';
      $related_story_xml .= '<thumbimage>' . $small_img['imag_url'] . '</thumbimage>';
      $related_story_xml .= '</story>';
    }
    elseif ($resvalue['type'] == "videogallery") {
      $type_ar['videos'] = "YES";
      $url = $base_url . "/" . drupal_get_path_alias('node/' . $resvalue['nid']);
      $small_img = get_image_info_by_fid($resvalue['field_story_small_image_fid']);
      $related_video_xml .= '<video>';
      $related_video_xml .= '<title>' . $resvalue['title'] . '</title>';
      $related_video_xml .= '<url>' . $url . '</url>';
      $related_video_xml .= '<thumbimage>' . $small_img['imag_url'] . '</thumbimage>';
      $related_video_xml .= '</video>';
    }
    elseif ($resvalue['type'] == "photogallery") {
      $type_ar['photos'] = "YES";
      $url = $base_url . "/" . drupal_get_path_alias('node/' . $resvalue['nid']);
      $small_img = get_image_info_by_fid($resvalue['field_story_small_image_fid']);
      $related_photo_xml .= '<photo>';
      $related_photo_xml .= '<title>' . $resvalue['title'] . '</title>';
      $related_photo_xml .= '<url>' . $url . '</url>';
      $related_photo_xml .= '<thumbimage>' . $small_img['imag_url'] . '</thumbimage>';
      $related_photo_xml .= '</photo>';
    }
    $count++;
  }
  $type_ar['nid'] = $related_ar;
  $type_ar['related_story_xml'] = $related_story_xml;
  $type_ar['related_video_xml'] = $related_video_xml;
  $type_ar['related_photo_xml'] = $related_photo_xml;
  return $type_ar;
}

/*
 * All video format responce
 * @param $nid
 * @return the details video xml tags
 */

function video_detail_formats($nid, $source_type) {

  $video_detail = array();

  if ($source_type != 'migrated') {
    $video_status = 'dailymotion';
    $videoids = get_video_in_fieldcollection_by_nid($nid);

    foreach ($videoids as $keys => $video_value) {
      if ($video_value->video_id != '') {
        $video_id = $video_value->video_id;
      }
      elseif ($video_value->solr_video_id != '') {
        $video_id = $video_value->solr_video_id;
      }
      else {
        
      }
      $video_detail[$video_status]['video_id'] = $video_id;
      $file_id = $video_value->fid;
    }

    $query = db_select('file_managed', 'fm');
    $query->condition('fm.fid', $file_id);
    $query->fields('fm', array('filename', 'uri', 'filemime', 'filesize', 'status'));
    $query->orderBy('fm.fid', 'DESC');
    $query->range(0, 1);
    $results = $query->execute()->fetchAll();
    $uri = $results[0]->uri;
    $video_detail[$video_status]['filename'] = $results[0]->filename;
    $video_detail[$video_status]['filsize'] = $results[0]->filesize;

    $query = db_select('itg_video_bitrates_data', 'itgv');
    $query->fields('itgv', array('bitate_url', 'bitates_field'));
    $query->condition('itgv.video_id', $video_id);
    $result2 = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

    $video_format = array();
    foreach ($result2 as $res_data) {
      $video_format[$res_data['bitates_field']] = $res_data['bitate_url'];
    }
    $video_path_mp4 = "https://www.dailymotion.com/video/" . $video_id . "";
    $video_format['videoparts_mp4'] = $video_path_mp4;
    $video_detail[$video_status]['bitate_url'] = $video_format;
    $dailymotion_download = dailymotion_download_video_uri($video_id);
    $video_detail[$video_status]['bitate_url']['download_url'] = "$dailymotion_download";
  }
  elseif ($source_type == 'migrated') {
    $video_status = 'migrated';
    $videoids = get_video_in_fieldcollection_by_nid_mirtaed($nid);
    foreach ($videoids as $keys => $video_value) {
      $video_path_mp4 = $video_value->field_migrated_video_url_value;
    }
    $video_detail[$video_status]['video_path_mp4'] = $video_path_mp4;
    $flv_url = str_replace(".mp4", ".flv", $video_path_mp4);
    $videoparts_3gp = str_replace(".mp4", ".3gp", $video_path_mp4);
    $video_detail[$video_status]['flv_url'] = $flv_url;
    $video_detail[$video_status]['videoparts_3gp'] = $videoparts_3gp;
  }
  return $video_detail;
}

/**
 * Get the dailymotion download video url
 * @param type $video_id
 * @return type
 */
function dailymotion_download_video_uri($video_id) {
  $query = db_select('field_data_field_bitrate_video_id', 'bvi');
  $query->leftJoin('field_data_field_video_url', 'v_url', 'v_url.entity_id = bvi.entity_id');
  $query->fields('v_url', array('field_video_url_value'));
  $query->condition('bvi.field_bitrate_video_id_value', $video_id);
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $result[0]['field_video_url_value'];
}

function get_nid_is_favorite($nid) {
  $flag = "";
  $result = db_select('field_data_field_featured', 'ffd')->fields('ffd', array('field_featured_value'))->condition('ffd.entity_id', $nid, '=')->execute()->fetchAssoc();
  if (isset($result['field_featured_value']) && ($result['field_featured_value'] == "yes" || $result['field_featured_value'] == "Yes")) {
    $flag = "true";
  }
  else {
    $flag = "false";
  }
  return $flag;
}

/**
 * function get nid is syndications
 * @pram $tid
 *
 * @return type
 */
function get_nid_is_syndications($nid) {
  // variable declation
  $flag = 0;
  $result = db_select('field_data_field_story_syndication', 'fss')->fields('fss', array('field_story_syndication_value'))->condition('fss.entity_id', $nid, '=')->execute()->fetchAssoc();

  if (isset($result['field_featured_value']) && ($result['field_featured_value'] == "yes" || $result['field_featured_value'] == "Yes")) {
    $flag = 1;
  }
  else {
    $flag = 0;
  }
  return $flag;
}

/**
 * function for generate Empty image xml tag
 *
 *
 */
function empty_get_img_tag_detail() {
  $imgtag = "<bodyimages><image><lowres><![CDATA[]]></lowres><highres><![CDATA[]]></highres><caption></caption></image></bodyimages>";
  return $imgtag;
}

function get_itg_video_transcoding($nid) {
  if (empty($nid))
    return '';
  $query = db_select('itg_video_transcoding', 'tra');
  $query->fields('tra', array('file_size', 'video_duration'));
  $query->condition('tra.nid', $nid);
  $result = $query->execute()->fetchAll();
  return $result;
}
