<?php

/**
 * @file
 * The ITG Mobile App XML Feed.
 *
 * Contains functionality for mobile app xml feed.
 */
module_load_include('inc', 'itg_mobile_feed', 'inc/tidConfig');
module_load_include('inc', 'itg_mobile_feed', 'inc/photoDetailPageFeed');
module_load_include('inc', 'itg_mobile_feed', 'inc/storyDetailPageFeed');
module_load_include('inc', 'itg_mobile_feed', 'inc/videoDetailPageFeed');

/**
 * Implements hook_menu().
 */
function itg_mobile_feed_menu() {
  $items['home-page-feed'] = array(
    'page callback' => 'homePageFeed',
    'access arguments' => array('access content'),
    //'access arguments' => array('mobile feed permission'),
    'file' => 'inc/homePageFeed.inc',
    'type' => MENU_CALLBACK,
  );
  $items['story-section-page-feed'] = array(
    'page callback' => 'storySectionPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/storySectionPageFeed.inc',
    'type' => MENU_CALLBACK,
  );


  $items['photo-section-page-feed'] = array(
    'page callback' => 'photoSectionPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/photoSectionPageFeed.inc',
    'type' => MENU_CALLBACK,
  );

  $items['video-section-page-feed'] = array(
    'page callback' => 'videoSectionPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/videoSectionPageFeed.inc',
    'type' => MENU_CALLBACK,
  );

  $items['story-category-page-feed'] = array(
    'page callback' => 'storyCategoryPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/storyCategoryPageFeed.inc',
    'type' => MENU_CALLBACK,
  );

  $items['photo-category-page-feed'] = array(
    'page callback' => 'photocategoryPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/photocategoryPageFeed.inc',
    'type' => MENU_CALLBACK,
  );

  $items['video-category-page-feed'] = array(
    'page callback' => 'videoCategoryPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/videoCategoryPageFeed.inc',
    'type' => MENU_CALLBACK,
  );


  $items['story-detail-page-feed'] = array(
    'page callback' => 'storyDetailPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/storyDetailPageFeed.inc',
    'type' => MENU_CALLBACK,
  );

  $items['photo-detail-page-feed'] = array(
    'page callback' => 'photoDetailPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/photoDetailPageFeed.inc',
    'type' => MENU_CALLBACK,
  );

  $items['video-detail-page-feed'] = array(
    'page callback' => 'videoDetailPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/videoDetailPageFeed.inc',
    'type' => MENU_CALLBACK,
  );

//  $items['event-page-feed'] = array(
//    'page callback' => 'eventPageFeed',
//    'access arguments' => array('mobile feed permission'),
//    'file' => 'inc/eventPageFeed.inc',
//    'type' => MENU_CALLBACK,
//  );

  $items['breaking-news-page-feed'] = array(
    'page callback' => 'breakingNewsPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/breakingNewsPageFeed.inc',
    'type' => MENU_CALLBACK,
  );
// new url -- 11
  $items['program-section-page-feed'] = array(
    'page callback' => 'programSectionPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/programSectionPageFeed.inc',
    'type' => MENU_CALLBACK,
  );

  $items['program-category-page-feed'] = array(
    'page callback' => 'programCategoryPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/programCategoryPageFeed.inc',
    'type' => MENU_CALLBACK,
  );

  $items['root-category-content-page-feed'] = array(
    'page callback' => 'rootCategoryContentPageFeed',
    'access arguments' => array('access content'),
    'file' => 'inc/rootCategoryContentPageFeed.inc',
    'type' => MENU_CALLBACK,
  );
  $items['intoday-magazine'] = array(
    'page callback' => 'intodayMagazine',
    'access arguments' => array('access content'),
    'file' => 'inc/intodayMagazine.inc',
    'type' => MENU_CALLBACK,
  );




  return $items;
}

/**
 * Implements hook_permission.
 */
function itg_mobile_feed_permission() {
  return array(
    'itg mobile feed' => array(
      'title' => t('mobile feed permission'),
      'description' => t('mobile feed permission.'),
    ),
  );
}

/**
 * common function for return xml feed file header
 *
 * @return string
 */
function getMobileFeedXmlHeader() {
  $output = "";
  $output = "<?xml version='1.0' encoding='utf-8'?><Root>";

  return $output;
}

/**
 * common function for return xml feed file header
 *
 * @return string
 */
function getMobileFeedXmlFooter() {
  $output = "";
  $output = "</Root>";

  return $output;
}
/**
 *  function for return xml feed file header only for program section
 *
 * @return string
 */
function program_section_page_feed_header() {
  $output = "";
  $output = "<?xml version='1.0' encoding='utf-8'?><root>";
  return $output;
}

/**
 *  function for return xml feed file footer only for program section
 *
 * @return string
 *
 */

function program_section_page_feed_footer() {
  $output = "";
  $output = "</root>";

  return $output;
}

/**
 * common function for return related content node type
 *
 * @return array
 * @pram $type
 */
function relatedContentNodeType($node_list = "", $type) {
  // variable declation
    $file_name=""; $term_feed_path="";
  $type_ar = array('photos' => 'NO', 'videos' => 'NO', 'stories' => 'NO');
  $related_ar = array();
  $count = 0;
  $query = db_select('field_data_field_common_related_content', 'frc');
  $query->fields('frc', array('field_common_related_content_value'));
  $query->condition('frc.entity_id', $node_list);
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $node_str = $result[0]['field_common_related_content_value'];
  // replace enviroment name: AWS_, UAT_ etc
  $node_str = str_replace("AWS_", "", $node_str);
  $node_str = str_replace("UAT_", "", $node_str);

  $nid_list = explode(",", $node_str);
  $query_type = db_select('node', 'n');
  $query_type->leftJoin('field_data_field_story_small_image', 'si', 'si.entity_id=n.nid');
  $query_type->fields('n', array('type', 'nid', 'title'));
  $query_type->fields('si', array('field_story_small_image_fid'));
  $query_type->condition('n.nid', $nid_list, 'IN');
  $result_type = $query_type->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($result_type as $reskey => $resvalue) {
    $nid = $resvalue['nid'];
    if ($resvalue['type'] == "story") {
      $type_ar['stories'] = "YES";
       // generate story detail page
       $fl = generateStoryDetailPageFeed($nid,$file_name, $term_feed_path, $type);
    }
    elseif ($resvalue['type'] == "videogallery") {
      $type_ar['videos'] = "YES";
      // generate video detail page
      $fl = generateVideoDetailPageFeed($nid,$file_name, $term_feed_path, $type);
    }
    elseif ($resvalue['type'] == "photogallery") {
      $type_ar['photos'] = "YES";
      // generate photo detail page
      $fl = generatePhotoDetailPageFeed($nid,$file_name, $term_feed_path, $type);
    }
    $related_ar[$count]['type'] = $resvalue['type'];
    $related_ar[$count]['nid'] = $resvalue['nid'];
    $related_ar[$count]['title'] = $resvalue['title'];
    $related_ar[$count]['field_story_small_image_fid'] = $resvalue['field_story_small_image_fid'];
    $count++;
  }
  $type_ar['nid'] = $related_ar;
  return $type_ar;
}

/**
 * common function for return complete file path
 *
 * @return $type
 * @pram $type
 */
function completeFilePath($fid) {
  $file_url = "";
  if ($fid) {
    $file_obj = file_load($fid);
    $file_url = file_create_url($file_obj->uri);
  }
  $serch = "http://itgddev.indiatodayonline.in/sites/default/files";
  $replace = "http://itgd-mum-dev-static.s3.ap-south-1.amazonaws.com/s3fs-public";
  $file_url = str_replace($serch,$replace,$file_url); // need update img base url in variable table

  return $file_url;
}

/**
 * common function for write feed file
 *
 * @return $type
 * @pram $type
 */
function writeFeedFile($feed_file_path, $feed_file_name, $output) {
  // variable declation
  global $user;
  $ip_add = ip_address();
  $status = 0;
  $return_flag = "";
  $file = $feed_file_path . "/" . $feed_file_name;
  $fileHandle = fopen($file, 'w') or die("can't open file");
  chmod($file, 0777);
  if (fwrite($fileHandle, $output)) {

    $return_flag = "file saved successfully with path & name: $file <br>";
    $status = 1;
  }
  else {
    $return_flag = "can't write file: $file <br>";
    $status = 0;
  }
  // write log into database table

  db_insert('itg_mobile_feed_log')->fields(array(
      'uid' => $user->uid,
      'agent' => 1,
      'status' => $status,
      'ip' => $ip_add,
      'file' => $feed_file_name,
      'path' => $feed_file_path,
      'created' => REQUEST_TIME,
    ))->execute();
  fclose($fileHandle);
  return $return_flag;
}

/**
 * common function for return array of category-manager section tid
 *
 * @return array
 */
function categoryManagerSectionTid($type = "story", $parent = 0) {
  // variable declation
  $tid_list = array();

  $vid = 14;
  $mapped_ctype = 0;

  $tree = taxonomy_get_tree(14, $parent, $max_depth = NULL, $load_entities = FALSE);
  foreach ($tree as $key => $value) {
    //check parent

    $parent = $value->parents[0];
    // check map with passed content type
    $mapped_ctype = chectContentTypeMapped($value->tid, $type);

    // section tid
    if ($parent == 0 && $mapped_ctype == 1) {
    //if ($parent == 0) {
      $tid_list[] = $value->tid;
    }
  }
  return $tid_list;
}

/**
 * common function for return content type mapped with tid
 *
 * @return type
 */

function chectContentTypeMapped($tid, $type){
     // check map with passed content type
    $flag = 0;
    $query = db_select('field_data_field_cm_select_type', 'fdst');
    $query->fields('fdst', array('field_cm_select_type_value'));
    $query->condition('fdst.entity_id', $tid);
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

    foreach ($result as $key => $value) {
        if($value['field_cm_select_type_value'] == $type){
            $flag = 1; break;
        }
    }
    return $flag;
}

/**
 * common function for return node count without child
 * @pram $type
 * @pram $tid
 *
 * @return $type
 */
function customNodeCount($type, $tid) {
  // variable declation
  $query = db_select('taxonomy_index', 'ti');
  $query->innerJoin('node', 'n', 'ti.nid=n.nid');
  $query->fields('n', array('nid'));
  $query->condition('ti.tid', $tid);
  $query->condition('n.type', $type);
  $query->condition('n.status', 1, '=');
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return count($result);
}

/**
 * common function for return node count with child
 * @pram $type
 * @pram $tid
 *
 * @return $type
 */
function customNodeCountChild($tid, $type, $child_count = TRUE) {
  // variable declation
  $tids = array($tid);
  if ($child_count) {
    $tids = array_merge($tids, term_get_children_ids($tid));
  }
  global $language;
  $langs = array($language->language);
  $langs[] = 'und';
  $query = db_select('taxonomy_index', 't');
  $query->condition('tid', $tids, 'IN');
  $query->join('node', 'n', 't.nid = n.nid');
  $query->condition('n.status', 1, '=');
  $query->condition('n.type', $type);
  $query->condition('n.language', $langs, 'IN');
  $count = $query->countQuery()->execute()->fetchField();
  return $count;
  //echo $count = count($count);exit();
}

/**
 * Retrieve ids of term children .
 *
 * @param $tid
 *   The term's ID.
 * @param $tids
 *   An array where ids of term children will be added
 */
function term_get_children_ids($tid) {
  $children = taxonomy_get_children($tid);
  $tids = array();
  if (!empty($children)) {
    foreach ($children as $child) {
      $tids[] = $child->tid;
      $tids = array_merge($tids, term_get_children_ids($child->tid));
    }
  }

  return $tids;
}

/**
 *function get section/category/node front url
 * @pram $tid
 *
 * @return $type
 */
function nodeCategoryFrontUrl($tid, $type) {
  // variable declation
  $final_url = "";
  if ($type == 'term') {
    $source = "taxonomy/term/" . $tid;
  }
  elseif ($type == 'node') {
    $source = "node/" . $tid;
  }
  $query = db_select('url_alias', 'ual');
  $query->fields('ual', array('alias'));
  $query->condition('ual.source', $source);
  $query->orderBy('ual.pid', 'DESC');
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $final_url = $result[0]['alias'];
  if ($result[0]['alias'] == "") {

    $query = db_select('itg_sef_url', 'isu');
    $query->fields('isu', array('sef_url'));
    $query->condition('isu.tid', $tid);
    $query->orderBy('isu.changed', 'DESC');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $final_url = $result[0]['sef_url'];
  }
  return $final_url;
}

/**
 *function get section/category icon img
 * @pram $tid
 *
 * @return $type
 */
function sectionCategoryIconImg($tid) {
  $query = db_select('field_data_field_sponser_logo', 'icimg');
  $query->fields('icimg', array('field_sponser_logo_fid'));
  $query->condition('icimg.entity_id', $tid);
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return completeFilePath($result[0]['field_sponser_logo_fid']);
}

/**
 *function get tid is_favorite
 * @pram $tid
 *
 * @return type
 */
function getNidIsFavorite($nid) {
  // variable declation
  $flag = "";
  $result = db_select('field_data_field_featured', 'ffd')->fields('ffd', array('field_featured_value'))->condition('ffd.entity_id', $nid, '=')->execute()->fetchAssoc();
  if (isset($result['field_featured_value']) && ($result['field_featured_value'] == "yes" || $result['field_featured_value'] == "Yes")) {
    $flag = "true";
  }
  else {
    $flag = "false";
  }
  return $flag;
}

/**
 *function get tid is_favorite
 * @pram $tid
 *
 * @return type
 */
function getNidIsSyndications($nid) {
  // variable declation
  $flag = 0;
  $result = db_select('field_data_field_story_syndication', 'fss')->fields('fss', array('field_story_syndication_value'))->condition('fss.entity_id', $nid, '=')->execute()->fetchAssoc();

  if (isset($result['field_featured_value']) && ($result['field_featured_value'] == "yes" || $result['field_featured_value'] == "Yes")) {
    $flag = 1;
  }
  else {
    $flag = 0;
  }
  return $flag;
}

/**
 *function get node list in tid
 * @pram $tid
 * @pram $type
 * @pram $count
 *
 * @return array
 */
function getNodeFeedTag($tid, $type, $count) {
  // variable declation
  global $base_url;
  $data = array();
  $tid_list = array();
  $tid_list[] = $tid;
  $term_list = taxonomy_get_tree(14, $tid, $max_depth = NULL, $load_entities = FALSE);
  foreach ($term_list as $key => $value) {
    $tid_list[] = $value->tid;
  }


  $output = "";

  $range_max = $count;
  $range_min = 0;
  $order_by = 'ASC';

  $query = db_select('taxonomy_index', 'ti');
  $query->leftJoin('node', 'n', 'n.nid=ti.nid');
  //join  for field value
  $query->leftJoin('field_data_field_story_extra_large_image', 'eli', 'eli.entity_id=n.nid');
  $query->leftJoin('field_data_field_story_large_image', 'li', 'li.entity_id=n.nid');
  $query->leftJoin('field_data_field_story_medium_image', 'mi', 'mi.entity_id=n.nid');
  $query->leftJoin('field_data_field_story_small_image', 'si', 'si.entity_id=n.nid');
  $query->leftJoin('field_data_field_story_extra_small_image', 'esi', 'esi.entity_id=n.nid');
  $query->leftJoin('field_data_field_story_kicker_text', 'kt', 'kt.entity_id=n.nid');
  $query->leftJoin('field_data_body', 'dbody', 'dbody.entity_id=n.nid');
  $query->leftJoin('field_data_field_video_duration', 'vd', 'vd.entity_id=n.nid');
  $query->leftJoin('file_managed', 'eli_file', 'eli_file.fid=eli.field_story_extra_large_image_fid');
  $query->leftJoin('file_managed', 'li_file', 'li_file.fid=li.field_story_large_image_fid');
  $query->leftJoin('file_managed', 'mi_file', 'mi_file.fid=mi.field_story_medium_image_fid');
  $query->leftJoin('file_managed', 'si_file', 'si_file.fid=si.field_story_small_image_fid');
  $query->leftJoin('file_managed', 'esi_file', 'esi_file.fid=esi.field_story_extra_small_image_fid');

  $query->leftJoin('field_data_field_common_related_content', 'rc', 'rc.entity_id=n.nid');

  $query->fields('eli_file', array('uri'));
  $query->fields('li_file', array('uri'));
  $query->fields('mi_file', array('uri'));
  $query->fields('si_file', array('uri'));
  $query->fields('esi_file', array('uri'));

  $query->fields('mi', array('field_story_medium_image_fid'));
  $query->fields('si', array('field_story_small_image_fid'));
  $query->fields('rc', array('field_common_related_content_value'));

  $query->fields('kt', array('field_story_kicker_text_value'));
  $query->fields('vd', array('field_video_duration_value'));
  $query->fields('n', array('nid', 'title', 'created', 'type', 'uid'));


  //end
  $query->condition('ti.tid', $tid)->condition('n.status', 1)->condition('n.type', $type)->orderBy('n.created', 'DESC')->range($range_min, $range_max);

  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  foreach ($result as $reskey => $resvalue) {

    // varibale for feed tag
    $title = $resvalue['title'];
    $type = $resvalue['type'];
    $nid = $resvalue['nid'];
    $created = $resvalue['created'];
    $is_fav = getNidIsFavorite($nid);
    // file url
    $file_small_img_url = completeFilePath($resvalue['field_story_small_image_fid']);
    $file_medium_img_url = completeFilePath($resvalue['field_story_medium_image_fid']);

    //related content
    $related = relatedContentNodeType($resvalue['field_common_related_content_value'], $type);

    // create date formating
    $create_date = date("F d, Y", $created);
    $create_datetime = date(DATE_ATOM, $created);
    $output .= "<title><![CDATA[" . $title . "]]></title>
                            <thumbimage><![CDATA[" . $file_small_img_url . "]]></thumbimage>";
    if ($type == "photogallery") {
      $output .= "<url>photo" . $nid . ".xml</url>";
      // generate photo detail page
    $fl = generatePhotoDetailPageFeed($nid);
    }
    elseif($type == "videogallery") {
      $output .= "<mediumimage><![CDATA[" . $file_medium_img_url . "]]></mediumimage>";
      $output .= "<url>video" . $nid . ".xml</url>";
      // generate video detail page
    $fl = generateVideoDetailPageFeed($nid);
    }
    else {
      //$output .= "<mediumimage><![CDATA[" . $file_medium_img_url . "]]></mediumimage>";
      $output .= "<url>story" . $nid . ".xml</url>";
      // generate story detail page
    $fl = generateStoryDetailPageFeed($nid);
    }

    $output .= "<create_date>" . $create_date . "</create_date>
                            <create_datetime>" . $create_datetime . "</create_datetime>
                            <is_favorite>" . $is_fav . "</is_favorite>";
  }
  return $output;
  //echo $output; exit();
}

/**
 * common function for get img caption
 *
 * @return $type
 * @pram $type
 */
function getImgCaption($fid) {
  // variable declation
  $caption = "";
  $query = db_select('field_data_field_image_caption', 'fic');
  $query->fields('fic', array('field_image_caption_value'));
  $query->condition('fic.entity_id', $fid);
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $caption = $result['0']['field_image_caption_value'];

  return $caption;
}

/**
 * common function for get img byline
 *
 * @return $type
 * @pram $type
 */
function getImgByline($fid) {
  // variable declation
  $byline = "";
  $query = db_select('field_data_field_photo_byline', 'fpb');
  $query->innerJoin('node', 'n', 'fpb.field_photo_byline_target_id=n.nid');
  $query->fields('n', array('title'));
  $query->condition('fpb.entity_id', $fid);
  $query->condition('n.type', 'reporter');
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $byline = $result['0']['title'];

  return $byline;
}

/**
 * common function for getCityByNid
 *
 * @return $type
 * @pram $type
 */
function getCityByNid($nid) {
  // variable declation
  $query = db_select('field_data_field_stroy_city', 'fdc');
  $query->innerJoin('taxonomy_term_data', 'ttd', 'fdc.field_stroy_city_tid=ttd.tid');
  $query->fields('ttd', array('name'));
  $query->condition('fdc.entity_id', $nid);
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $city = $result['0']['name'];
  return $city;
}

/**
 * common function for getBodyDataForAndroid
 *
 * @return $type
 * @pram $type
 */
function getBodyDataForAndroid($str) {
  // variable declation
  $mob_str = "";
  //remove iframe..
  $mob_str = preg_replace('/<iframe.*?\/iframe>/i', '', $str);
  $mob_str = preg_replace("/<img[^>]+\>/i", "", $mob_str);

  return $mob_str;
}

/**
 * function for generate comment xml tag
 *
 * @return array
 */
function getCommentXmlTag($node) {
  // variable declation
  $mode = "COMMENT_MODE_FLAT";
  $comments_per_page = 10;
  $commentsflag = 0;
  $comment_tag = "";
  $output = "";
  $comments_list = comment_get_thread($node, $mode, $comments_per_page);

  // writng comments tag
  foreach ($comments_list as $key => $value) {
    $cid = $value;
    $commentsflag = 1;
    $commens_obj = comment_load($cid);
    $commenttext = $commens_obj->comment_body['und'][0]['value'];
    $name = $commens_obj->name;
    $create_date = date("F d, Y", $commens_obj->created);
    $create_datetime = date(DATE_ATOM, $commens_obj->created);
    $email = $commens_obj->mail;
    $comment_tag .= "<comment>
                        <commenttext>" . $commenttext . "</commenttext>
                        <name>" . $name . "</name>
                        <createddate>" . $create_date . "</createddate>
                        <createddatetime>" . $create_datetime . "</createddatetime>
                        <email>" . $email . "</email>
                      </comment>";
  }

  if ($commentsflag) {
    $output .= "<comments>";
    $output .= $comment_tag;
    $output .= "</comments>";
  }
  return $output;
}


/**
 * function for generate Empty comment xml tag
 *
 *
 */
function emptygetCommentXmlTag() {
  // variable declation
  $commenttext = "";
  $name = '';
  $create_date = '';
  $create_datetime = "";
  $email = "";

  // writng comments tag
  $comment_tag .= "<comment>
                        <commenttext>" . $commenttext . "</commenttext>
                        <name>" . $name . "</name>
                        <createddate>" . $create_date . "</createddate>
                        <createddatetime>" . $create_datetime . "</createddatetime>
                        <email>" . $email . "</email>
                      </comment>";

    $output .= "<comments>";
    $output .= $comment_tag;
    $output .= "</comments>";

    return $output;
}


/**
 * function for generate getRelatedNodeXmlTag
 *
 * @return array
 */
function getRelatedNodeXmlTag($nidar) {
  // variable declation
  global $base_url;
  $output = "";
  $story_tag = "";
  $photo_tag = "";
  $video_tag = "";
  $related_flag_story = 0;
  $related_flag_photo = 0;
  $related_flag_video = 0;
  foreach ($nidar as $key => $value) {
    $title = $value['title'];
    $url = $base_url . "/node/" . $value['nid'];
    $img_url = completeFilePath($value['field_story_small_image_fid']);

    if ($value['type'] == "story") {
      $related_flag_story = 1;
      $story_tag .= "<story>
                            <title>" . $title . "</title>
                            <url>" . $url . "</url>
                            <thumbimage>" . $img_url . "</thumbimage>
                          </story>";
    }
    elseif ($value['type'] == "photogallery") {
      $related_flag_photo = 1;
      $photo_tag .= "<photo>
                            <title>" . $title . "</title>
                            <url>" . $url . "</url>
                            <thumbimage>" . $img_url . "</thumbimage>
                           </photo>";
    }
    elseif ($value['type'] == "videogallery") {
      $related_flag_video = 1;
      $video_tag .= "<video>
                            <title>" . $title . "</title>
                            <url>" . $url . "</url>
                            <thumbimage>" . $img_url . "</thumbimage>
                           </video>";
    }
  }
  $output .= "<related>";
  if ($related_flag_story) {
    $output .= "<stories>
            " . $story_tag . "
        </stories>";
  }
  if ($related_flag_photo) {
    $output .= "<photos>
            " . $photo_tag . "
        </photos>";
  }
  if ($related_flag_video) {
    $output .= "<videos>
            " . $video_tag . "
        </videos>";
  }
  $output .= "</related>";

  // blank related tag if no data
  if ($related_flag_story == 0 && $related_flag_photo == 0 && $related_flag_video == 0) {
    $output = "";
  }

  return $output;
}


/**
 * function for Blank generate getRelatedNodeXmlTag
 *
 * @return array
 */
function emptygetRelatedNodeXmlTag() {
  // variable declation
  global $base_url;
  $output = "";
  $story_tag = "";
  $photo_tag = "";
  $video_tag = "";
  $title = '';
  $url = '';
  $img_url = '';

  $story_tag .= "<story>
                            <title>" . $title . "</title>
                            <url>" . $url . "</url>
                            <thumbimage>" . $img_url . "</thumbimage>
                            </story>";

  $photo_tag .= "<photo>
                            <title>" . $title . "</title>
                            <url>" . $url . "</url>
                            <thumbimage>" . $img_url . "</thumbimage>
                           </photo>";

  $video_tag .= "<video>
                            <title>" . $title . "</title>
                            <url>" . $url . "</url>
                            <thumbimage>" . $img_url . "</thumbimage>
                           </video>";
  $output .= "<related>";

  $output .= "<stories>
            " . $story_tag . "
        </stories>";

  $output .= "<photos>
            " . $photo_tag . "
        </photos>";
  $output .= "<videos>
            " . $video_tag . "
        </videos>";
  $output .= "</related>";

  return $output;
}
