<?php

/**
 * @file
 * The ITG Global Loyality module.
 *
 * Contains functionality for ITG Global Loyality. *
 */

/**
 * Implements hook_menu.
 * {@inheritdoc}
 */
function itg_global_loyality_menu() {
  $items = array();
  $items['itg-get-loyality-point'] = array(
    'title' => t('Global loyality point'),
    'page callback' => 'itg_get_loyality_point',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-global-point-history'] = array(
    'title' => t(''),
    'page callback' => 'itg_get_global_point_history',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-global-badge-history'] = array(
    'title' => t('Global badge history'),
    'page callback' => 'itg_get_badge_point_history',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-global-remaining-point'] = array(
    'title' => t('Global badge history'),
    'page callback' => 'itg_global_remaining_point',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-global-fb-point'] = array(
    'title' => t('Global facebook loyality point'),
    'page callback' => 'itg_global_fb_loyality_point',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-global-get-remaining-point-calculation'] = array(
    'title' => t('Remaining point calculation'),
    'page callback' => 'itg_global_get_remaining_point_calculation',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-global-get-order-details'] = array(
    'title' => t('Get global order details'),
    'page callback' => 'itg_global_get_order_details',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-global-update-alternate-email-action'] = array(
    'title' => t('update alternate email user'),
    'page callback' => 'itg_global_update_alternate_email_action',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-sso-email-insert'] = array(
    'title' => t('insert cms user email'),
    'page callback' => 'itg_global_sso_email_insert',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-sso-get-social-mobile'] = array(
    'title' => t('get mobile of social user'),
    'page callback' => 'itg_sso_get_social_mobile',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/config/people/global-point-report-history'] = array(
    'title' => 'Global point history',
    'description' => 'Global point history',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('global_point_report_history_form'),
    'access arguments' => array('access global point report history'),
    'file' => 'includes/global_point_history_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
   $items['del-point-history-data'] = array(
    'title' => 'Delete Point history table data',
    'page callback' => 'itg_del_point_history_data',
    'access arguments' => array('access global point report history'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implement hook_permissions()
 * 
 * @return array
 */
function itg_global_loyality_permission() {
  return array(
    'access global point report history' => array(
      'title' => t('access global point report history'),
      'description' => t('Using this permission user can view global point report history.'),
    )
  );
}

/**
 * Implements itg_get_loyality_point().
 */
function itg_get_loyality_point() {
  $uid = $_POST['uid'];
  $sso_id = $_POST['sso_id'];
  //watchdog('sso_id', $sso_id);
  if(empty($sso_id)) {
    $sso_id = $uid;
  }
  $nid = $_POST['nid'];
  $loyalty_type = $_POST['loyalty_type'];
  $loyalty_points = $_POST['loyalty_points'];
  $remaining_points = $_POST['remaining_points'];
  $property = $_POST['property'];
  $status = $_POST['status'];
  $news_letter = $_POST['news_letter'];
  $expiry_date = $_POST['expiry_date'];
  $created = strtotime(date('Y-m-d'));
  if($loyalty_type == 'Newsletter_subscription') {
  $value_exist = itg_global_loyalty_newsletter_point($uid, $loyalty_type, $news_letter); 
  } else {
  $value_exist = itg_global_loyality_exist_point($uid, $loyalty_type, $nid, $property);
  }
  if (empty($value_exist)) {

    try {

      db_insert('itg_global_loyality_point')
          ->fields(array(
            'uid' => $uid,
            'sso_id' => (int) $sso_id,
            'nid' => $nid,
            'loyalty_type' => $loyalty_type,
            'loyalty_points' => $loyalty_points,
            'remaining_points' => $remaining_points,
            'newsletter' => $news_letter,
            'created' => $created,
            'property' => $property,
            'status' => $status,
            'expiry_date' => $expiry_date,
          ))
          ->execute();
    }
    catch (Exception $e) {
      watchdog('globaldata1 exception', '<pre>' . $e->getMessage() . '</pre>');
    }
    //watchdog('globaldata1', '<pre>' . print_r($_POST, true) . '</pre>');
  }
}

/*
 * Implements itg_global_loyality_get_sso_id().
 * @param int $uid
 * @return string
 */
function itg_global_loyality_get_sso_id($uid) {
  if (!empty($uid)) {
    $query = db_select('authmap', 'u');
    $query->fields('u', array('authname'))
        ->condition('u.uid', $uid);
   return $query->execute()->fetchField();
  }
  return 0;
}

/*
 * Implements itg_global_loyality_get_uid().
 * @param int $uid
 * @return string
 */
function itg_global_loyality_get_uid($sso_id) {
  if (!empty($sso_id)) {
    $query = db_select('authmap', 'u');
    $query->fields('u', array('uid'))
        ->condition('u.authname', $sso_id);
   return $query->execute()->fetchField();
  }
  return 0;
}

/**
 * Validate fb and twitter points.
 *
 * @param int $user
 * @param string $type
 * @param int $nid
 * @return boolean
 */
function itg_global_loyality_exist_point($user, $type, $nid = NULL, $property = NULL) {
  $itg_result = '';
  $itg_query = db_select('itg_global_loyality_point', 'p')
      ->fields('p', array('id'))
      ->condition('p.uid', $user);
      if(!empty($nid)) {
      $itg_query->condition('p.nid', $nid);
      }
      if(!empty($property)) {
      $itg_query->condition('p.property', $property);
      }
  $itg_query->condition('p.loyalty_type', $type);
  $itg_result = $itg_query->execute()->fetchField();
  if (!empty($itg_result)) {
    return TRUE;
  }
  return ;
  
}

/**
 * Implements itg_global_loyality_send_data().
 * @param int $uid
 * @param string $type
 * @param int $nid
 * @param string $newsletter
 * @param int $sso_id
 */
function itg_global_loyality_send_data($uid, $type, $nid, $newsletter = NULL, $sso_id = NULL) {
  $url = variable_get('global_loyalty_url').'/itg-get-loyality-point';
  if ($type == 'Content_Visit') {
    $loyalty_type = 'Content_Visit';
    if (!empty(variable_get('lrp_content_visit'))) {
      $loyalty_points = variable_get('lrp_content_visit');
      $remaining_points = variable_get('lrp_content_visit');
    }
  }
  
  if ($type == 'content_like') {
    $loyalty_type = 'content_like';
    if (!empty(variable_get('lrp_content_like'))) {
      $loyalty_points = variable_get('lrp_content_like');
      $remaining_points = variable_get('lrp_content_like');
    }
  }
  
if ($type == 'fb_follow' || $type == 'twitter_follow' || $type == 'google_follow') {
    $loyalty_type = $type;
    if (!empty(variable_get('lrp_follow_itg_on_social_sites'))) {
      $loyalty_points = variable_get('lrp_follow_itg_on_social_sites');
      $remaining_points = variable_get('lrp_follow_itg_on_social_sites');
    }
  }
  
  
  if ($type == 'twitter_share' || $type == 'google_share' || $type == 'facebook_share') {
    $loyalty_type = $type;
    if (!empty(variable_get('lrp_content_share'))) {
      $loyalty_points = variable_get('lrp_content_share');
      $remaining_points = variable_get('lrp_content_share');
    }
  }
  
  if ($type == 'Newsletter_subscription') {
    $loyalty_type = 'Newsletter_subscription';
    if (!empty(variable_get('lrp_newsletter_subscription'))) {
      $loyalty_points = variable_get('lrp_newsletter_subscription');
      $remaining_points = variable_get('lrp_newsletter_subscription');
    }
  }
  
  if ($type == 'poll') {
    $loyalty_type = 'poll';
    if (!empty(variable_get('lrp_participation_in_poll'))) {
      $loyalty_points = variable_get('lrp_participation_in_poll');
      $remaining_points = variable_get('lrp_participation_in_poll');
    }
  }
  
  if ($type == 'campaign') {
    $loyalty_type = 'campaign';
    if (!empty(variable_get('lrp_participation_in_campaign'))) {
      $loyalty_points = variable_get('lrp_participation_in_campaign');
      $remaining_points = variable_get('lrp_participation_in_campaign');
    }
  }
  
  if ($type == 'survey') {
    $loyalty_type = 'survey';
    if (!empty(variable_get('lrp_participation_in_survey'))) {
      $loyalty_points = variable_get('lrp_participation_in_survey');
      $remaining_points = variable_get('lrp_participation_in_survey');
    }
  }
  
  if ($type == 'raf') {
    $loyalty_type = 'raf';
    if (!empty(variable_get('lrp_refer_a_friend'))) {
      $loyalty_points = variable_get('lrp_refer_a_friend');
      $remaining_points = variable_get('lrp_refer_a_friend');
    }
  }
  
  if ($type == 'ugc_contribution') {
    $loyalty_type = 'ugc_contribution';
    if (!empty(variable_get('lrp_ugc_contribution'))) {
      $loyalty_points = variable_get('lrp_ugc_contribution');
      $remaining_points = variable_get('lrp_ugc_contribution');
    }
  }
  
  if ($type == 'event_registration') {
    $loyalty_type = 'event_registration';
    if (!empty(variable_get('lrp_online_registration_for_any_events'))) {
      $loyalty_points = variable_get('lrp_online_registration_for_any_events');
      $remaining_points = variable_get('lrp_online_registration_for_any_events');
    }
  }

  if (!empty(variable_get('property_name'))) {
    $property = variable_get('property_name');
  }
  if (!empty(variable_get('lrp_loyality_points_expiry'))) {
    $expiry_days = '+' . variable_get('lrp_loyality_points_expiry') . ' days';
    $expiry_date_old = date('Y-m-d H:i', strtotime($expiry_days));
    $expiry_date = strtotime($expiry_date_old);
  }
  $data = 'uid=' . $uid . '&sso_id=' . $sso_id . '&nid=' . $nid . '&loyalty_type=' . $loyalty_type . '&loyalty_points=' . $loyalty_points . '&remaining_points=' . $remaining_points . '&property=' . $property . '&status=1&expiry_date=' . $expiry_date.'&news_letter='.$newsletter;
  $options = array(
    'method' => 'POST',
    'data' => $data,
    'timeout' => 60,
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
  );
  $result = drupal_http_request($url, $options);
}

/**
 * Implements itg_global_fb_loyality_point().
 */
function itg_global_fb_loyality_point() {
  global $user;
  $arg = arg();
  if (function_exists('itg_global_loyality_get_sso_id')) {
    $sso_id = itg_global_loyality_get_sso_id($user->uid);
  }
  if (function_exists('itg_global_loyality_get_sso_id') && array_key_exists(FRONT_USER, $user->roles)) {
    itg_global_loyality_send_data($user->uid, $arg[2], $arg[1], '', $sso_id);
  }
}

/**
 * Implemsnts itg_global_loyalty_newsletter_point().
 * @param int $user
 * @param string $type
 * @param string $news_letter
 * @return boolean
 */
function itg_global_loyalty_newsletter_point($user, $type, $news_letter) {
  $itg_result = '';
  $itg_query = db_select('itg_global_loyality_point', 'p')
      ->fields('p', array('newsletter'))
      ->condition('p.uid', $user)
      ->condition('p.loyalty_type', $type);
  $itg_result = $itg_query->execute()->fetchAll();
  // If newsletter subscription is first time then earn point else not.
  foreach ($itg_result as $value) {
    if ($value->newsletter == $news_letter) {
     return TRUE;
    }
  }
}

/*
 * Implements itg_get_global_point_history().
 */
function itg_get_global_point_history() {
  global $user;
  //watchdog('credit', '<pre>' . print_r($_POST, true) . '</pre>');
  $uid = $_POST['uid'];
  $sso_final_id = $_POST['sso_id'];
  $property = $_POST['property'];
  $sso_id = '';
  if(empty($sso_final_id)) {
    $sso_id = $uid;
  } else {
    $sso_id = $sso_final_id;
  }
  //watchdog('point', $sso_id);
  $property = $_POST['property'];
  if (!empty($uid)) {
    $itg_result = array();
  try {
    $itg_query = db_select('itg_global_loyality_point', 'itg');
    $itg_query->fields('itg', array('loyalty_type', 'loyalty_points'));
    $itg_query->condition('itg.uid', $uid)
              ->condition('itg.property', $property)
        ->addExpression('SUM(itg.loyalty_points)', 'sum');
    $itg_query->groupBy('itg.loyalty_type');
    $itg_query->orderBy('itg.id', 'DESC');
    $itg_result = $itg_query->execute()->fetchAll();
  }
  catch (Exception $ex) {
    watchdog('Loyalty Points', $ex->getMessage());
  }
  $data = array();
  $data['total_earned_so_far'] = 0;
  $data['redeemed_points'] = 0;
  $data['remaining_point'] = 0;
  $data['unit_description'] = array();
  watchdog('result', '<pre>' . print_r($itg_result, true) . '</pre>');
  if(!empty($itg_result)) {
  foreach ($itg_result as $key => $value) {
     if ($key == 0) {
       $earn = itg_global_loyalty_reward_get_total_earn_point($sso_id, 'earn');
       //watchdog('earn', $earn);
       $remain = itg_global_loyalty_reward_get_total_earn_point($sso_id, 'remaining');
       $redem = itg_global_loyalty_reward_get_redem_point($sso_id);
       //watchdog('redem', $redem);
      $data['total_earned_so_far'] = (int)$earn;
      $data['remaining_point'] = (int)$remain;
      $data['redeemed_points'] = (int)$redem;
    }
    $data['unit_description'][] = array(
      'activity_name' => $value->loyalty_type,
      'earned_points' => $value->sum,
      'points_per_activity' => itg_global_loyalty_get_point_activity($value->loyalty_type, $property),
    );
  }
  } else {
      $earn = itg_global_loyalty_reward_get_total_earn_point($sso_id, 'earn');
      $remain = itg_global_loyalty_reward_get_total_earn_point($sso_id, 'remaining');
      $redem = itg_global_loyalty_reward_get_redem_point($sso_id);
      //watchdog('redem', $redem);
      $data['total_earned_so_far'] = (int) $earn;
      $data['remaining_point'] = (int) $remain;
      $data['redeemed_points'] = (int) $redem;
    }
    print drupal_json_output($data);
    drupal_exit();
  }
}

/*
 * Implements itg_get_badge_point_history().
 */
function itg_get_badge_point_history() {
  global $user;
  $uid = $_POST['uid'];
  $sso_final_id = $_POST['sso_id'];
  $property = $_POST['property'];
  $sso_id = '';
  if (empty($sso_final_id)) {
    $sso_id = $uid;
  }
  else {
    $sso_id = $sso_final_id;
  }
  //watchdog('badge', $uid);
  if (!empty($uid)) {
    $itg_result = array();
  try {
    $itg_query = db_select('itg_global_loyality_point', 'itg');
    $itg_query->fields('itg', array('loyalty_type', 'loyalty_points'));
    $itg_query->condition('itg.uid', $uid)
              ->condition('itg.property', $property)
        ->addExpression('SUM(itg.loyalty_points)', 'sum');
    $itg_query->groupBy('itg.loyalty_type');
    $itg_query->orderBy('itg.id', 'DESC');
    $itg_result = $itg_query->execute()->fetchAll();
  }
  catch (Exception $ex) {
    watchdog('Loyalty Points', $ex->getMessage());
  }
  $data = array();
  $data['total_earned_for_current_level'] = 0;
  if(!empty($itg_result)) {
  foreach ($itg_result as $key => $value) {
     if ($key == 0) {
      $data['total_earned_so_far'] = itg_global_loyalty_reward_get_total_earn_point($uid, 'earn', $property, 'particular');
      $data['total_earned_for_current_level'] = itg_global_loyalty_reward_get_total_earn_point($uid, 'earn', $property, 'particular');
      $data['total_global_point'] = itg_global_loyalty_reward_get_total_earn_point($sso_id, 'earn');
    }
  }
  } else {
    $data['total_global_point'] = itg_global_loyalty_reward_get_total_earn_point($sso_id, 'earn');
  }
    print drupal_json_output($data);
    drupal_exit();
  }
}

/*
 * Implements itg_get_global_credits().
 * @param int $uid
 * @param string $property
 * @param int $sso_id
 */
function itg_get_global_credits($uid, $property, $sso_id = NULL) {
  global $user;
  if($uid > 0 && array_key_exists(FRONT_USER, $user->roles)) {
    $property = variable_get('property_name');
    $url = variable_get('global_loyalty_url').'/itg-global-point-history';
    $data = 'uid=' . $uid . '&property=' . $property.'&sso_id='.$sso_id;
    $options = array(
      'method' => 'POST',
      'data' => $data,
      'timeout' => 60,
      'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    );
    $response = drupal_http_request($url, $options);
    // Check if successful
    if ($response->code == 200) {
      $result =  json_decode($response->data, true);
      return $result;
    }
  }
}

/*
 * Implements itg_get_badge_credits().
 * @param int $uid
 * @param string $property
 * @param int $sso_id
 */
function itg_get_badge_credits($uid, $property, $sso_id = NULL) {
  global $user;
  if($uid > 0 && array_key_exists(FRONT_USER, $user->roles)) {
    $property = variable_get('property_name');
    $url = variable_get('global_loyalty_url').'/itg-global-badge-history';
    $data = 'uid=' . $uid . '&property=' . $property.'&sso_id='.$sso_id;
    $options = array(
      'method' => 'POST',
      'data' => $data,
      'timeout' => 60,
      'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    );
    $response = drupal_http_request($url, $options);
    // Check if successful
    if ($response->code == 200) {
      $result =  json_decode($response->data, true);
      return $result;
    }
  }
}

/*
 * Implements itg_get_global_remaining_point().
 * @param int $uid
 * @param string $property
 * @param int $sso_id
 */
function itg_get_global_remaining_point($uid, $property, $sso_id = NULL) {
  global $user;
  if($uid > 0 && array_key_exists(FRONT_USER, $user->roles)) {
    $property = variable_get('property_name');
    $url = variable_get('global_loyalty_url').'/itg-global-remaining-point';
    $data = 'uid=' . $uid . '&property=' . $property.'&sso_id='.$sso_id;
    $options = array(
      'method' => 'POST',
      'data' => $data,
      'timeout' => 60,
      'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    );
    $response = drupal_http_request($url, $options);
    // Check if successful
    if ($response->code == 200) {
      $result =  json_decode($response->data, true);
      return $result;
    }
  }
}

/*
 * Implements itg_global_remaining_point().
 * @param int $uid
 * @param string $property
 * @param int $sso_id
 */
function itg_global_remaining_point($uid, $property, $sso_id = NULL) {
  global $user;
  $uid = $_POST['uid'];
  $sso_final_id = $_POST['sso_id'];
  $property = $_POST['property'];
  $sso_id = '';
  if (empty($sso_final_id)) {
    $sso_id = $uid;
  }
  else {
    $sso_id = $sso_final_id;
  }
  //watchdog('badge', $uid);
  if (!empty($uid)) {
    $remain_point = itg_global_loyalty_reward_get_total_earn_point($sso_id, 'remaining');
    //$remain_point = 40;
    print drupal_json_output($remain_point);
    drupal_exit();
  }
}

/**
 * Implements itg_global_loyalty_reward_get_total_earn_point().
 * @param int $uid
 * @param string $type
 * @param string $property
 * @param string $task
 * @return int
 */
function itg_global_loyalty_reward_get_total_earn_point($uid, $type, $property = NULL, $task = NULL) {
  $itg_query = db_select('itg_global_loyality_point', 'itg');
  if(!empty($property)) {
  $itg_query->condition('itg.property', $property);  
  }
  if(!empty($task)) {
  $itg_query->condition('itg.uid', $uid);
  } else {
  $itg_query->condition('itg.sso_id', $uid); 
  }
  if ($type == 'earn') {
    $itg_query->addExpression('SUM(itg.loyalty_points)', 'count');
  }
  if ($type == 'remaining') {
    $itg_query->addExpression('SUM(itg.remaining_points)', 'count');
    $itg_query->condition('status', 1);
    $itg_query->condition('expiry_date', REQUEST_TIME, '>=');
  }
  $total_earn_point = $itg_query->execute()->fetchField();

  return $total_earn_point;
}

/**
 * Implements itg_global_loyalty_reward_get_redem_point().
 * @param int $sso_id
 * @return int
 */
function itg_global_loyalty_reward_get_redem_point($sso_id) {
  try {
  $itg_query = db_select('itg_global_redem_point', 'itg');
  $itg_query->condition('itg.sso_id', $sso_id);
  $itg_query->addExpression('SUM(itg.redem_points)', 'count');
  $total_redem_point = $itg_query->execute()->fetchField();
  } catch(Exception $e) {
    watchdog('Redem Points', $e->getMessage());
  }
  return $total_redem_point;
}

/**
 * Implements itg_global_loyalty_get_point_activity().
 * @param string $activityname
 * @param string $property
 * @return int
 */
function itg_global_loyalty_get_point_activity($activityname, $property) {
  if (!empty($activityname) && !empty($property)) {
    $itg_query = db_select('itg_global_loyality_point', 'itg');
    $itg_query->fields('itg', array('loyalty_points'));
    $itg_query->condition('itg.loyalty_type', $activityname);
    $itg_query->condition('itg.property', $property);
    $itg_query->orderBY('itg.id', 'DESC');
    $itg_query->range(0, 1);
    $activity_point = $itg_query->execute()->fetchField();

    return $activity_point;
  }
}

/**
 * Implements itg_get_total_cart_point().
 */
function itg_get_total_cart_point($uid) {
  $itg_query = db_select('itg_loyalty_reward_cart', 'itg')
      ->condition('uid', $uid);
  $itg_query->addExpression('SUM(points * quintity)', 'mul');
  $itg_result = $itg_query->execute()->fetchField();
  return $itg_result;
}

/*
 * Implements itg_update_remaining_point().
 * @param int $uid
 * @param string $property
 * @param int $sso_id
 */
function itg_update_remaining_point($sso_id, $redem_point, $uid, $property, $site_url, $product_info, $nids, $site_order_id = NULL) {
  global $user;
  if($sso_id > 0 && array_key_exists(FRONT_USER, $user->roles)) {
    $url = variable_get('global_loyalty_url').'/itg-global-get-remaining-point-calculation';
    $data = 'sso_id=' . $sso_id . '&redem_point=' . $redem_point.'&uid='.$uid.'&property='.$property.'&product_info='.$product_info.'&nids='.$nids.'&site_url='.$site_url.'&site_order_id='.$site_order_id;
    $options = array(
      'method' => 'POST',
      'data' => $data,
      'timeout' => 60,
      'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    );
    $response = drupal_http_request($url, $options);
    // Check if successful
    if ($response->code == 200) {
      //drupal_exit();
    }
  }
}

/*
 * Temporary function for calculating remaining points.
 */
function itg_global_get_remaining_point_calculation() {
  // print $uid = arg(1);
  //$date = strtotime('2017-08-23');
  //pr(date('Y-m-d', REQUEST_TIME));
  $sso_id = $_POST['sso_id'];
  $redem_point = $_POST['redem_point'];
  $save = $_POST['redem_point'];
  $uid = $_POST['uid'];
  $property = $_POST['property'];
  $product_info = $_POST['product_info'];
  $nids = $_POST['nids'];
  $site_url = $_POST['site_url'];
  $site_order_id = $_POST['site_order_id'];
  $flag = FALSE;
  if (!empty($sso_id)) {
    $query = db_select('itg_global_loyality_point', 'fe')
        ->fields(fe, array('remaining_points', 'id'))
        ->condition('expiry_date', REQUEST_TIME, '>=')
        ->condition('status', 1)
        ->orderBY('id', 'ASC')
        ->condition('fe.sso_id', $sso_id);
    $result = $query->execute();
    //$redem_point = 80;
    //$save = 80;
    $redem_array = array();
    while ($record = $result->fetchAssoc()) {
      $id = $record['id'];
      $remain = $record['remaining_points'];
      // print $id.'->'.$remain.'<br/>';
      if ($save != 0) {
        $redem_point = $redem_point - $record['remaining_points'];
        if ($redem_point > 0) {
          $redem_array[$id] = 0;
          $save = $redem_point;
        }
        else {
          $point = $record['remaining_points'] - $save;
          $redem_array[$id] = $point;
          $save = 0;
          break;
        }
      }
    }
    //return drupal_json_output($redem_array);
    if (!empty($redem_array)) {
      foreach ($redem_array as $key => $value) {
        if($value == 0) {
          $status = 0;
        } else {
          $status = 1;
        }
        db_update('itg_global_loyality_point')
            ->fields(array(
              'remaining_points' => $value,
              'status' => $status,
            ))
            ->condition('id', $key, '=')
            ->execute();
      }
      $flag = TRUE;
      /** redem point insertion */
      try {

      db_insert('itg_global_redem_point')
          ->fields(array(
            'uid' => $uid,
            'sso_id' => (int) $sso_id,
            'created' => REQUEST_TIME,
            'redem_points' => $_POST['redem_point'],
            'property' => $property,
          ))
          ->execute();
    }
    catch (Exception $e) {
      watchdog('Redem point insert exception', '<pre>' . $e->getMessage() . '</pre>');
    }
    /** end here **/
    /** product insertion finish **/
       
      $global_product_presave = array(
        'uid' => $uid,
        'sso_id' => $sso_id,
        'property' => $property,
        'site_order_id' => $site_order_id,
        'site_url' => $site_url,
        'product_information' => $product_info,
        'created' => REQUEST_TIME,
        'nids' => $nids,
      );
     if (!empty($global_product_presave)) {
       try {
          $order_placed = db_insert('itg_global_reward_order')
              ->fields($global_product_presave)
              ->execute();
        }
        catch (Exception $e) {
          watchdog('product insert exception', '<pre>' . $e->getMessage() . '</pre>');
        }
      }
      /** product insertion finish **/ 
    }
  }
  return drupal_json_output($redem_array);
}

/*
 * Implements itg_global_get_order_info().
 * @param int $sso_id
 */
function itg_global_get_order_info($sso_id) {
  global $user;
  if($user->uid > 0 && !empty($sso_id) && array_key_exists(FRONT_USER, $user->roles)) {
    $url = variable_get('global_loyalty_url').'/itg-global-get-order-details';
    $data = 'sso_id=' . $sso_id;
    $options = array(
      'method' => 'POST',
      'data' => $data,
      'timeout' => 60,
      'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    );
    $response = drupal_http_request($url, $options);
    // Check if successful
    if ($response->code == 200) {
      $result =  json_decode($response->data, true);
      return $result;
    }
  }
}

/*
 * Implements itg_global_get_order_details().
 */
function itg_global_get_order_details() {
  global $user;
  $sso_id = $_POST['sso_id'];
  if (!empty($sso_id)) {
    $itg_result = array();
  try {
    $itg_query = db_select('itg_global_reward_order', 'itg')
      ->fields('itg', array('order_id', 'product_information', 'created', 'property', 'site_url', 'site_order_id'))
      ->condition('itg.sso_id', $sso_id)
      ->orderBy('itg.order_id', 'desc');
    $itg_result = $itg_query->execute()->fetchAll();
  }
  catch (Exception $ex) {
    watchdog('order fetch details', $ex->getMessage());
  }
    print drupal_json_output($itg_result);
    drupal_exit();
  }
}

/**
 * Implements global_update_alternate_email(). 
 */
function global_update_alternate_email($alt_email = NULL, $sso_id = NULL) {
  if (!empty($alt_email) && !empty($sso_id)) {
    global $user;
    if ($user->uid > 0 && array_key_exists(FRONT_USER, $user->roles)) {
      $url = variable_get('global_loyalty_url') . '/itg-global-update-alternate-email-action';
      $data = 'alt_email=' . $alt_email .'&sso_id=' . $sso_id;
      $options = array(
        'method' => 'POST',
        'data' => $data,
        'timeout' => 60,
        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
      );
      $response = drupal_http_request($url, $options);
      // Check if successful
      if ($response->code == 200) {
        
      }
    }
  }
}

/**
 * Implements itg_global_update_alternate_email_action().
 */
function itg_global_update_alternate_email_action() {
  $sso_id = $_POST['sso_id'];
  $alt_email = $_POST['alt_email'];
  if (!empty($sso_id) && !empty($alt_email)) {
    try {
    $uid = itg_global_loyality_get_uid($sso_id);
    $existingUser = user_load($uid);
    $existingUser->field_user_alternate_email['und'][0]['value'] = $alt_email;
    user_save($existingUser);
    } catch (Exception $e) {
    watchdog('USer alt email save exception', '<pre>' . $e->getMessage() . '</pre>');  
    }
  } else {
    return drupal_access_denied();
  }
}

/**
 * Implements itg_global_sso_email_insert().
 */
function itg_global_sso_email_insert() {
  $email = $_POST['email'];
  $uid = $_POST['uid'];
  $property = $_POST['property'];
  $operation = $_POST['operation'];
  
  if (!empty($uid)) {
    try {
    if($operation == 'add') {  
    $id = db_insert('itg_sso_email_history')
      ->fields(array(
        'email' => $email,
        'uid' => $uid,
        'domain' => $property,
        'created' => date('Y-m-d G:i:s'),
      ))
      ->execute();
    }
    if ($operation == 'delete') {
        db_delete('itg_sso_email_history')
            ->condition('uid', $uid)
            ->execute();
    }
    } catch (Exception $e) {
    watchdog('cms user insert email in sso server', '<pre>' . $e->getMessage() . '</pre>');  
    }
  } else {
    return drupal_access_denied();
  }
}

/**
 * Helper function to get user alternate email
 * @param int $uid 
 */
function itg_get_global_alt_email($uid) {
  if (!empty($uid)) {
    $query = db_select('field_data_field_user_alternate_email', 'alt');
    $query->fields('alt', array('field_user_alternate_email_value'))
          ->condition('bundle', 'user')
          ->condition('alt.entity_id', $uid);
    $result = $query->execute()->fetchField();
    return $result;
  }
}

/**
 * Implements global_sso_entry_backend_user_email(). 
 */
function global_sso_entry_backend_user_email($email = NULL, $uid = NULL, $property = NULL, $operation = NULL) {
  if (!empty($uid)) {
    global $user;
    if ($user->uid > 0) {
      $url = variable_get('global_loyalty_url') . '/itg-sso-email-insert';
      $data = 'email=' . $email .'&uid=' . $uid.'&property='.$property.'&operation='.$operation;
      $options = array(
        'method' => 'POST',
        'data' => $data,
        'timeout' => 60,
        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
      );
      $response = drupal_http_request($url, $options);
      // Check if successful
      if ($response->code == 200) {
        
      }
    }
  }
}

/**
 * Implements itg_sso_get_social_uid(). 
 */
function itg_sso_get_social_uid($sso_id = NULL) {
  if (!empty($sso_id)) {
    global $user;
    if ($user->uid > 0 && array_key_exists(FRONT_USER, $user->roles)) {
      $url = variable_get('global_loyalty_url') . '/itg-sso-get-social-mobile';
      $data = 'sso_id=' . $sso_id;
      $options = array(
        'method' => 'POST',
        'data' => $data,
        'timeout' => 60,
        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
      );
      $response = drupal_http_request($url, $options);
      // Check if successful
      if ($response->code == 200) {
        $result =  json_decode($response->data, true);
        return $result;
      }
    }
  }
}

/**
 * Implements itg_sso_get_social_mobile(). 
 */
function itg_sso_get_social_mobile($sso_id = NULL) {
  
  $sso_id = $_POST['sso_id'];
  if (!empty($sso_id)) {
    try {
      $uid = itg_global_loyality_get_uid($sso_id);
      $query = db_select('field_data_field_mobile_number', 'f');
      $query->fields('f', array('field_mobile_number_value'))
            ->condition('f.bundle', 'user')
            ->condition('f.entity_id', $uid);
      $result = $query->execute()->fetchField();
      print drupal_json_output($result);
      drupal_exit();
    }
    catch (Exception $e) {
      watchdog('get social user mobile exception', '<pre>' . $e->getMessage() . '</pre>');
    }
  }
  else {
    return drupal_access_denied();
  }
}

/*
 * Implements itg_del_point_history_data().
 */
function itg_del_point_history_data() {
  try {
  $result = db_truncate('itg_global_loyality_point')->execute();
  $result = db_truncate('itg_global_redem_point')->execute();
  $result = db_truncate('itg_global_reward_order')->execute();
  $redirect_url = 'admin/config/people/global-point-report-history';
  drupal_goto($redirect_url);
  } catch (Exception $e) {
  watchdog('table not truncate', '<pre>' . $e->getMessage() . '</pre>');  
  }
}
