<?php

/**
 * @file
 * The ITG Ads module.
 *
 * Contains functionality for Ads. *
 */

/**
 * Implements hook_block_info(). 
 * {@inheritdoc}
 */
function itg_ads_block_info() {
  $blocks['ad_right_sidebar_1'] = array(
      'info' => t('Ad right sidebar 1'),
      'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['ad_right_sidebar_2'] = array(
      'info' => t('Ad right sidebar 2'),
      'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * {@inheritdoc}
 */
function itg_ads_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ad_right_sidebar_1':
      $page_name = 'Rest';
      $data['itg_ad'] = get_ad_script($page_name);
      $block['content'] = theme('ad_right_sidebar_block1', array('data' => $data));
      break;
    case 'ad_right_sidebar_2':
      $page_name = 'Rest';
      $data['itg_ad'] = get_ad_script($page_name);
      $block['content'] = theme('ad_right_sidebar_block2', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * Implements hook_menu.
 * {@inheritdoc}
 */
function itg_ads_menu() {
  $items = array();
  $items['itg-ads/%'] = array(
      'title' => t('Ads'),
      'page callback' => 'itg_ads_show_ad_image',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme.
 * {@inheritdoc}
 */
function itg_ads_theme($existing, $type, $theme, $path) {
  return array(
      'itg_ads' => array(
          'variables' => array('data' => NULL),
          'template' => 'templates/itg-ads',
      ),
      'ad_right_sidebar_block1' => array(
          'template' => 'ad-right-sidebar1',
          'path' => drupal_get_path('module', 'itg_ads') . '/templates',
          'variables' => array('data' => NULL),
      ),
      'ad_right_sidebar_block2' => array(
          'template' => 'ad-right-sidebar2',
          'path' => drupal_get_path('module', 'itg_ads') . '/templates',
          'variables' => array('data' => NULL),
      ),
  );
}

/**
 * Implemens hook_form_FORM_ID_alter().
 * {@inheritdoc}
 */
function itg_ads_form_ads_management_node_form_alter(&$form, &$form_state, $form_id) {
  //dpm('field_ads_placeholder');
  //code for client related mode display in dropdown
  $syndication_mode = 'field_ads_placeholder';
  $syndication_rule_title = 'field_ads_template_selection';
  $rule_title = $form[$syndication_rule_title][LANGUAGE_NONE]['#entity']->field_ads_template_selection[LANGUAGE_NONE][0]['value'];

  
 
  
  
  
  $option_array = array(
      '_none' => '- Select a value -',
      'Home' => 'Home Page',
      'Rest' => 'Rest of the Site',
  );


  $combined_final_array = $option_array + get_all_list_of_section_page();

  $form[$syndication_rule_title][LANGUAGE_NONE]['#options'] = $combined_final_array;

  if (isset($rule_title)) {
    $form[$syndication_rule_title][LANGUAGE_NONE]['#default_value'] = $rule_title;
  }

  $form[$syndication_rule_title][LANGUAGE_NONE]['#ajax'] = array(
      'event' => 'change',
      'callback' => 'itg_ads_mode_ajax_callback',
      'wrapper' => $syndication_mode . '_replace',
  );


  $form['field_adds_code_holder']['#prefix'] = '<div id="' . $syndication_mode . '_replace">';
  $form['field_adds_code_holder']['#suffix'] = '</div>';

  $option_array_ds = array(
      '_none' => '- Select a value -',
  );

  //Get mode 
  if (isset($form_state['input'][$syndication_rule_title][LANGUAGE_NONE])) {
    $op = $option_array_ds + itg_ads_get_mode($form_state['input'][$syndication_rule_title][LANGUAGE_NONE]);
    //dpm($op);
  } else if (isset($rule_title)) {
    $op = itg_ads_get_mode($rule_title);
  }
//  else {
//    $op = array('_none' => '- None -');
//  }
//dpm($op);
  foreach ($form['field_adds_code_holder'][LANGUAGE_NONE] as $key => $item) {
    if (is_numeric($key)) {

      if ($key == 0) {
        unset($form['field_adds_code_holder'][LANGUAGE_NONE][$key]['remove_button']);
      }

      $syndication_mode_value = $form['field_adds_code_holder'][LANGUAGE_NONE][$key]['#entity']->field_ads_placeholder[LANGUAGE_NONE][0]['value'];
//dpm('$syndication_mode_value='.$syndication_mode_value);
//pr($form['field_adds_code_holder'][LANGUAGE_NONE][$key][$syndication_mode]);
      $form['field_adds_code_holder'][LANGUAGE_NONE][$key][$syndication_mode][LANGUAGE_NONE]['#options'] = $op;
      if (isset($syndication_mode_value)) {
        $form['field_adds_code_holder'][LANGUAGE_NONE][$key][$syndication_mode][LANGUAGE_NONE]['#default_value'] = $syndication_mode_value;
      }

      unset($form['field_adds_code_holder'][LANGUAGE_NONE][$key][$syndication_mode]['#validated']);
    }
  }

  //$form['#after_build'][] = 'itg_syndication_rule_after_build';
  // $form['actions']['submit']['#submit'][] = 'itg_syndication_rule_change_message';
  $form['#validate'][] = 'itg_ads_rule_after_build_validate';

  
//   $check_add_template_existance = check_add_template_existance($form_state['values']['field_ads_template_selection']['und'][0]['value']);
//
//  if (isset($form_state['values']['nid']) && !empty($form_state['values']['nid']) && $form_state['values']['nid']!=$check_add_template_existance) {
//        form_set_error('field_ads_template_selection','OOPS! Already added place holder for selected template.If you want to edit selected templete please '.l('click here!','node/'.$form_state['values']['nid'].'/edit'));
//  }
  





  /* $formdata = NULL;

    // Hide the template variant field temporary
    unset($form['field_ads_template_variants']);
    $form['#attached']['js'] = array(
    drupal_get_path('module', 'itg_ads') . '/js/itg_ads.js',
    );

    $form['#after_build'][] = 'itg_common_cancel_button';

    // Custom callback on submit button
    $form['actions']['submit']['#submit'][] = 'alter_ad_submit_status_message';

    // Code to check if section is selected then section selection field show
    $form['field_ads_select_secton_option']['#states'] = array(
    'visible' => array(
    ':input[name="field_ads_template_selection[und]"]' => array('value' => 'Section'),
    )
    );

    // Code to check if section is selected then section selection field show
    $form['field_ads_section_selection']['#states'] = array(
    'visible' => array(
    ':input[name="field_ads_template_selection[und]"]' => array('value' => 'Section'),
    )
    );

    // Ajax work based on field template selection
    $template_selection_field = 'field_ads_template_selection';
    $ads_placeholder_field = 'field_ads_placeholder';

    // Set template selection on edit and trigger action
    if (isset($form[$template_selection_field][LANGUAGE_NONE]['#default_value'][0]) && !isset($form_state['triggering_element'])) {
    $template_id = $form[$template_selection_field][LANGUAGE_NONE]['#default_value'][0];
    $formdata = $template_id;
    } else {
    $template_id = $form_state['input'][$template_selection_field][LANGUAGE_NONE];
    }

    // Add ajax on template selection field

    $option_array = array(
    '_none' => '- Select a value -',
    'Home' => 'Home Page',
    'Rest' => 'Rest of the Site',
    );


    $combined_final_array = $option_array + get_all_list_of_section_page();


    $form[$template_selection_field][LANGUAGE_NONE]['#options'] = $combined_final_array;


    $form[$template_selection_field][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'itg_ads_value_ajax_callback',
    'wrapper' => $ads_placeholder_field . '_replace',
    );
    $form['field_ads_placeholder']['#validated'] = TRUE;

    // Setup Ads placeholder field select
    $form[$ads_placeholder_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $ads_placeholder_field . '_replace">';
    $form[$ads_placeholder_field][LANGUAGE_NONE]['#suffix'] = '</div>';

    //  if (function_exists('itg_common_dropdown_supplement')) {
    if ($template_id == 'Home' || $template_id == 'Rest') {
    $form['field_ads_select_secton_option'][LANGUAGE_NONE]['#options'] = array('_none' => 'NONE');
    unset($form['field_ads_select_secton_option']);

    //$form['field_ads_select_secton_option'][LANGUAGE_NONE]['#default_value'] = array('_none' => '-None-');
    $form[$ads_placeholder_field][LANGUAGE_NONE]['#options'] = itg_ads_placeholder_values($template_id, $template_id);
    } else {

    //Ajax work based on field section selection
    $section_selection_field = 'field_ads_section_selection';
    $ads_placeholder_field = 'field_ads_select_secton_option';
    // set section selection on edit and trigger action
    if (isset($form[$section_selection_field][LANGUAGE_NONE]['#default_value'][0]) && !isset($form_state['triggering_element'])) {
    $section_id = $form[$section_selection_field][LANGUAGE_NONE]['#default_value'][0];
    } else {
    $section_id = $form_state['input'][$section_selection_field][LANGUAGE_NONE];
    }

    // add ajax on template selection field
    $form[$section_selection_field][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'itg_ads_value_ajaxs',
    'wrapper' => $ads_placeholder_field . '_replace',
    );
    $form['field_ads_select_secton_option']['#validated'] = TRUE;

    // Setup Ads placeholder field select
    $form[$ads_placeholder_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $ads_placeholder_field . '_replace">';
    $form[$ads_placeholder_field][LANGUAGE_NONE]['#suffix'] = '</div>';
    if ($section_id == 'Photo' || $section_id == 'Video' || $section_id == 'Default') {
    $form[$ads_placeholder_field][LANGUAGE_NONE]['#options'] = itg_ads_placeholder($form, $section_id);
    }

    //Ajax work based on field select section option.
    $select_secton_field = 'field_ads_select_secton_option';
    $ads_placeholder_field = 'field_ads_placeholder';
    if (arg(2) == 'edit' && arg(0) == 'node' && is_numeric(arg(1))) {
    $select_section_id = $form[$select_secton_field][LANGUAGE_NONE]['#entity']->field_ads_select_secton_option[LANGUAGE_NONE][0]['value'];
    $section_id = $form[$select_secton_field][LANGUAGE_NONE]['#entity']->field_ads_section_selection[LANGUAGE_NONE][0]['value'];
    } else {
    $select_section_id = $form_state['input'][$select_secton_field][LANGUAGE_NONE];
    $section_id = $form_state['input']['field_ads_section_selection'][LANGUAGE_NONE];
    }
    // add ajax on template selection field
    $form[$select_secton_field][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'itg_ads_value_ajax',
    'wrapper' => $ads_placeholder_field . '_replace',
    );
    $form['field_ads_placeholder']['#validated'] = TRUE;

    // Setup Ads placeholder field select
    $form[$ads_placeholder_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $ads_placeholder_field . '_replace">';
    $form[$ads_placeholder_field][LANGUAGE_NONE]['#suffix'] = '</div>';
    $form[$ads_placeholder_field][LANGUAGE_NONE]['#options'] = itg_ads_placeholder_value($select_section_id, $section_id);
    }
    if (arg(2) == 'edit') {
    $db_options = $form_state['build_info']['args'][0]->field_ads_placeholder['und'][0]['value'];
    $form['field_ads_placeholder']['und']['#options'][$db_options] = $db_options;
    $form['field_ads_placeholder']['und']['#default_value'] = array($db_options);

    $db_option = $form_state['build_info']['args'][0]->field_ads_select_secton_option['und'][0]['value'];
    $term = taxonomy_term_load($db_option);
    $term_data = $term->name;
    $form['field_ads_select_secton_option']['und']['#options'][$db_option] = t($term_data);
    $form['field_ads_select_secton_option']['und']['#default_value'] = $db_option;
    } */
}

/**
 * Ajax callback for syndication_mode dropdown
 * @param array $form
 * @param array $form_state
 * @return $form;
 */
function itg_ads_mode_ajax_callback($form, $form_state) {
  return $form['field_adds_code_holder'];
}

/**
 * Ajax callback for syndication_mode dropdown
 * @param array $form
 * @param array $form_state
 * @return $form; 
 */
//function itg_syndication_delivery_mode_ajax_callback($form, $form_state) {
//  return $form['client_delivery_mode'];
//}

/**
 * Ajax callback for ads placeholder dropdown.
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_ads_value_ajax_callback($form, $form_state) {
  return $form['field_ads_placeholder'];
}

/**
 * Ajax callback for Event roles dropdown.
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_ads_value_ajax($form, $form_state) {
  return $form['field_ads_placeholder'];
}

/**
 * Ajax callback for Event roles dropdown.
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_ads_value_ajaxs($form, $form_state) {
  return $form['field_ads_select_secton_option'];
}

/**
 * Custom function to populate the second dropdown.
 * @param string $formdata
 * @param string $id
 * @return array $result
 */
function itg_ads_placeholder_value($formdata, $id = '') {

  if ($id == 'Photo') {
    $section_name = 'page section photo';
  }
  if ($id == 'Video') {
    $section_name = 'page section video';
  }
  if ($id == 'Default') {
    $section_name = 'page section default';
  }
  if ($formdata == '_none') {
    $arr = array();
    return $arr;
  }
  if (!is_null($id)) {
    $dat = $id;
  }

  // Fetch query for Ads Placeholder
  $select = t('- None -');
  $data = array('_none' => $select);
  $data1 = array();
  $current_date = date("Y-m-d H:i:s");
  $query = db_select('taxonomy_term_data', 'tt');
  $query->join('taxonomy_vocabulary', 'tv', 'tv.vid = tt.vid');
  $query->join('field_data_field_ads_placeholder_values', 'fdapv', 'fdapv.entity_id = tt.tid');
  $query->condition('tt.name', $section_name, '=');
  $query->fields('tt', array('tid', 'name'));
  $query->fields('fdapv', array('field_ads_placeholder_values_value'));
  $script_code = $query->execute()->fetchAll();
  foreach ($script_code as $val) {
    if ($val->name == 'page section default') {
      $data['Default'][$val->field_ads_placeholder_values_value] = $val->field_ads_placeholder_values_value;
    }
    if ($val->name == 'page section photo') {
      $data['Photo'][$val->field_ads_placeholder_values_value] = $val->field_ads_placeholder_values_value;
    }
    if ($val->name == 'page section video') {
      $data['Video'][$val->field_ads_placeholder_values_value] = $val->field_ads_placeholder_values_value;
    }
  }
  //Fetech query to get already filled values of ads placeholder against section selection
  $query = db_select('field_data_field_ads_placeholder', 'ap');
  $query->fields('ap', array('field_ads_placeholder_value'));
  $query->join('field_data_field_ads_end_date', 'ed', 'ed.entity_id = ap.entity_id');
  $query->join('field_data_field_ads_section_selection', 'ts', 'ap.entity_id = ts.entity_id');
  $query->join('field_data_field_ads_select_secton_option', 'so', 'ap.entity_id = so.entity_id');
  $query->condition('ts.field_ads_section_selection_value', $id, '=');
  $query->condition('so.field_ads_select_secton_option_value', $formdata, '=');
  $query->condition('ed.field_ads_end_date_value', $current_date, '>');
  $place_code = $query->execute()->fetchAll();
  foreach ($place_code as $row) {
    $data1[$row->field_ads_placeholder_value] = $row->field_ads_placeholder_value;
  }

  if (arg(2) == 'edit') { //Edit case
    $result = array_diff($data[$id], $data1);
    $nid = arg(1);
    $data_placeholder = itg_ads_get_prefilled_value($nid);
    $data_section = itg_ads_get_prefilled_section($nid);
    if (!is_null($dat) && $dat == $data_section[$dat]) {
      $result = array_merge($data_placeholder, $result);
    }
  } else { // Add case 
    $result = array_diff($data[$id], $data1);
  }

  return $result;
}

/**
 * Custom function to populate the second dropdown.
 * @param string $formdata
 * @param string $id
 * @return array $result
 */
function itg_ads_placeholder_values($formdata, $id = '') {
  if ($id == 'Home') {
    $template_name = 'page front';
  }
  if ($id == 'Rest') {
    $template_name = 'page rest of site';
  }

  if (!is_null($formdata)) {
    $dat = $formdata;
  }

  // Fetch query for Ads Placeholder
  $select = t('- None -');
  $data = array('_none' => $select);
  $data1 = array();
  $current_date = date("Y-m-d H:i:s");
  $vocab_name = 'Ads template placeholder';
  $query = db_select('taxonomy_term_data', 'tt');
  $query->join('taxonomy_vocabulary', 'tv', 'tv.vid = tt.vid');
  $query->join('field_data_field_ads_placeholder_values', 'fdapv', 'fdapv.entity_id = tt.tid');
  $query->condition('tv.name', $vocab_name, '=');
  $query->condition('tt.name', $template_name, '=');
  $query->fields('tt', array('tid', 'name'));
  $query->fields('fdapv', array('field_ads_placeholder_values_value'));
  $script_code = $query->execute()->fetchAll();
  foreach ($script_code as $val) {
    if ($val->name == 'page front') {
      $data['Home'][$val->field_ads_placeholder_values_value] = $val->field_ads_placeholder_values_value;
    }
    if ($val->name == 'page rest of site') {
      $data['Rest'][$val->field_ads_placeholder_values_value] = $val->field_ads_placeholder_values_value;
    }
  }
  //Fetech query to get already filled values of ads placeholder against template selection
  $query = db_select('field_data_field_ads_placeholder', 'ap');
  $query->fields('ap', array('field_ads_placeholder_value'));
  $query->join('field_data_field_ads_end_date', 'ed', 'ed.entity_id = ap.entity_id');
  $query->join('field_data_field_ads_template_selection', 'ts', 'ap.entity_id = ts.entity_id');
  $query->condition('ts.field_ads_template_selection_value', $id, '=');
  $query->condition('ed.field_ads_end_date_value', $current_date, '>');
  $place_code = $query->execute()->fetchAll();
  foreach ($place_code as $row) {
    $data1[$row->field_ads_placeholder_value] = $row->field_ads_placeholder_value;
  }

  if (arg(2) == 'edit') { //Edit case
    $result = array_diff($data[$id], $data1);
    $nid = arg(1);
    $data_placeholder = itg_ads_get_prefilled_value($nid);
    $data_template = itg_ads_get_prefilled($nid);

    if (!is_null($dat) && $dat == $data_template[$dat]) {
      $result = array_merge($data_placeholder, $result);
    }
  } else { // Add case 
    $result = array_diff($data[$id], $data1);
  }
  return $result;
}

/**
 * Implements hook_form_views_exposed_form_alter.
 * {@inheritdoc}
 */
function itg_ads_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form["#id"] == 'views-exposed-form-manage-ads-page') {
    $form['field_ads_end_date_value']['value']['#date_format'] = 'd/m/Y';
    $form['title']['#autocomplete_path'] = 'content-title-list/ads_management/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Placeholder Title'));
  }
}

/**
 * Implements hook_views_pre_render.
 * {@inheritdoc}
 */
function itg_ads_views_pre_render(&$view) {
  if ($view->name == "manage_ads") {
    //Get user information.
    global $user;
    $header_content = '';
    if (!in_array('Intern', $user->roles) && !in_array('Author/Guest', $user->roles) && !in_array('Subeditor/Sr.Sub', $user->roles)) {
      $header_content = '<span class="count">Count (' . $view->total_rows . ') </span>';
      $header_content .= l(t('Create Ads Placeholder'), 'node/add/ads-management', array('query' => array('destination' => arg(0))));
    }
    $view->attachment_before = $header_content;
  }
}

/**
 * Custom function on submit of Ads Management form.
 * @param array $form
 * @param array $form_state
 */
function alter_ad_submit_status_message(&$form, $form_state) {
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'ads-management') {
    $op = 'created';
  } else {
    $op = 'updated';
  }
  $ads_title = $form_state['node']->title;
  drupal_set_message(t('Ad <b>' . $ads_title . '</b> has been ' . $op . '.'));

  // TODO: check logic for this assignment.
  $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_ads_node_validate($node, $form, &$form_state) {
  $current_date = date("Y-m-d H:i:s");
  $current_time = strtotime($current_date);
  if ($node->type == 'ads_management') {
    $template = $node->field_ads_template_selection[LANGUAGE_NONE][0]['value'];
    $section_selection = $node->field_ads_section_selection[LANGUAGE_NONE][0]['tid'];
    $template_variants = $node->field_ads_template_variants[LANGUAGE_NONE][0]['tid'];

    //check on date values
    $start_date = strtotime($form_state['values']['field_ads_start_date'][LANGUAGE_NONE][0]['value']);
    $end_date = strtotime($form_state['values']['field_ads_end_date'][LANGUAGE_NONE][0]['value']);
    if ($end_date < $start_date) {
      form_set_error('field_ads_end_date', 'End date must be greater than or equal to Start date.');
    }
    if ($end_date < $current_time) {
      form_set_error('field_ads_end_date', 'End date must be greater than or equal to current date.');
    }
  }
}

/**
 * Show ad image using nid.
 * @return string
 */
function itg_ads_show_ad_image() {
  $node = node_load(arg(1));

  return theme('itg_ads', array('data' => $node));
}

/**
 * Custom method to get ad script.
 * @param string $page_type
 * @return string
 */
function get_ad_script($page_type) {
//	$dev_info = get_device_info();
//	$device = 'both';
//	if ($dev_info == 'mobile') {
//		$device = 'mobile';
//	}
//	if ($dev_info == 'website') {
//		$device = 'website';
//	}
  $arr = array();
  if (($page_type == 'Home') || ($page_type == 'Rest')) {
    $current_date = date("Y-m-d H:i:s");
    $query = db_select('field_data_field_ads_ad_code', 'ac');
    $query->fields('ac', array('field_ads_ad_code_value'));
    $query->fields('f', array('field_ads_placeholder_value'));
    $query->join('field_data_field_ads_template_selection', 'ts', 'ac.entity_id = ts.entity_id');
    $query->join('field_data_field_ads_placeholder', 'f', 'ac.entity_id = f.entity_id');
    $query->join('field_data_field_ads_end_date', 'ed', 'ed.entity_id = ac.entity_id');
    $query->join('field_data_field_ads_start_date', 'sd', 'sd.entity_id = ac.entity_id');
//		$query->join('field_data_field_ads_device_selection', 'ds', 'ds.entity_id = ac.entity_id');
//		$query->condition('ds.field_data_field_ads_device_selection', $device, '=');
    $query->condition('ts.field_ads_template_selection_value', $page_type, '=');
    $query->condition('sd.field_ads_start_date_value', $current_date, '<=');
    $query->condition('ed.field_ads_end_date_value', $current_date, '>');
    $script_code = $query->execute()->fetchAll();
    foreach ($script_code as $row) {
      $arr[$row->field_ads_placeholder_value] = $row->field_ads_ad_code_value;
    }
  } else {
    $current_date = date("Y-m-d H:i:s");
    $query = db_select('field_data_field_ads_ad_code', 'ac');
    $query->fields('ac', array('field_ads_ad_code_value'));
    $query->fields('f', array('field_ads_placeholder_value'));
    $query->join('field_data_field_ads_select_secton_option', 'ts', 'ac.entity_id = ts.entity_id');
    $query->join('field_data_field_ads_placeholder', 'f', 'ac.entity_id = f.entity_id');
    $query->join('field_data_field_ads_end_date', 'ed', 'ed.entity_id = ac.entity_id');
    $query->join('field_data_field_ads_start_date', 'sd', 'sd.entity_id = ac.entity_id');
//		$query->join('field_data_field_ads_device_selection', 'ds', 'ds.entity_id = ac.entity_id');
//		$query->condition('ds.field_data_field_ads_device_selection', $device, '=');
    $query->condition('ts.field_ads_select_secton_option_value', $page_type, '=');
    $query->condition('sd.field_ads_start_date_value', $current_date, '<=');
    $query->condition('ed.field_ads_end_date_value', $current_date, '>');
    $script_code = $query->execute()->fetchAll();
    foreach ($script_code as $row) {
      $arr[$row->field_ads_placeholder_value] = $row->field_ads_ad_code_value;
    }
  }

  return $arr;
}

/**
 * Custom function to get value of ads placeholder
 * @param int $nid
 * @return array
 */
function itg_ads_get_prefilled_value($nid) {
  $query = db_select('field_data_field_ads_placeholder', 'a');
  $query->fields('a', array('field_ads_placeholder_value'));
  $query->condition('a.entity_id', $nid, '=');
  $place_code = $query->execute()->fetchAll();
  foreach ($place_code as $row) {
    $data2[$row->field_ads_placeholder_value] = $row->field_ads_placeholder_value;
  }

  return $data2;
}

/**
 * Custom function to get value of template selection
 * @param int $nid
 * @return array
 */
function itg_ads_get_prefilled($nid) {
  $data3 = array();
  $query = db_select('field_data_field_ads_template_selection', 'b');
  $query->fields('b', array('field_ads_template_selection_value'));
  $query->condition('b.entity_id', $nid, '=');
  $place_code = $query->execute()->fetchAll();
  foreach ($place_code as $row) {
    $data3[$row->field_ads_template_selection_value] = $row->field_ads_template_selection_value;
  }

  return $data3;
}

/**
 * Custom function to get value of section selection
 * @param int $nid
 * @return array
 */
function itg_ads_get_prefilled_section($nid) {
  $data3 = array();
  $query = db_select('field_data_field_ads_section_selection', 'b');
  $query->fields('b', array('field_ads_section_selection_value'));
  $query->condition('b.entity_id', $nid, '=');
  $place_code = $query->execute()->fetchAll();
  foreach ($place_code as $row) {
    $data3[$row->field_ads_section_selection_value] = $row->field_ads_section_selection_value;
  }

  return $data3;
}

/**
 * Custom function to populate the second dropdown.
 * @param string $formdata
 * @param string $id
 * @return array $result
 */
function itg_ads_placeholder($form, $id = '') {
  if ($id == 'Photo') {
    $temp_name = 'page--section_photo';
  }
  if ($id == 'Video') {
    $temp_name = 'page--section_video';
  }
  if ($id == 'Default') {
    $temp_name = 'page--section_default';
  }

  // Fetch query for Ads Placeholder
  $select = t('- None -');
  $data['_none'] = '- None -';
  $query = db_select('taxonomy_term_data', 'tt');
  $query->join('itg_layout_tpl', 'tv', 'tv.section_name = tt.tid');
  $query->condition('tv.template_name', $temp_name, '=');
  $query->fields('tt', array('name', 'tid'));
  $query->fields('tv', array('template_name'));
  $script_code = $query->execute()->fetchAll();
  foreach ($script_code as $val) {
    $data[$val->tid] = $val->name;
  }
  $results = $data;

  return $results;
}

//function get_device_info() {
//	$useragent = $_SERVER['HTTP_USER_AGENT'];
//
//	if (preg_match('/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i', $useragent) || preg_match('/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i', substr($useragent, 0, 4))) {
//		return 'mobile';
//	}
//	else {
//		return 'website';
//	}
//}

/**
 * Custom function to populate the dropdown value for Template Selection.
 * @return array $result
 */
function get_all_list_of_section_page() {
  $terms = array();
  $terms_array = array();

  $v = taxonomy_vocabulary_machine_name_load('category_management');
  $query = new EntityFieldQuery();
  $result = $query
          ->entityCondition('entity_type', 'taxonomy_term')
          ->propertyCondition('vid', $v->vid)
          ->execute();

  if (!empty($result['taxonomy_term'])) {
    $terms = entity_load('taxonomy_term', array_keys($result['taxonomy_term']));
  }

  foreach ($terms as $key => $chunks) {
    $terms_array[$chunks->tid] = $chunks->name;
  }

  return $terms_array;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function itg_ads_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {

  if (isset($form['field_ad_master_template_section'][LANGUAGE_NONE])) {
    $option_array = array(
        '_none' => '- Select a value -',
        'Home' => 'Home Page',
        'Rest' => 'Rest of the Site',
    );

    $combined_final_array = $option_array + get_all_list_of_section_page();
    $form['field_ad_master_template_section'][LANGUAGE_NONE]['#options'] = $combined_final_array;

    if (isset($form['#entity']->field_ad_master_template_section['und'][0]['value']) && !empty($form['#entity']->field_ad_master_template_section['und'][0]['value'])) {
      $form['field_ad_master_template_section'][LANGUAGE_NONE]['#default_value'] = $form['#entity']->field_ad_master_template_section['und'][0]['value'];
    }
  }
}

function itg_ads_get_mode($type) {

  if ($type == 'Home' || $type == 'Rest') {
    $type_array = array($type);
  } else {
    $type_array = array('Rest', $type);
  }

  $array = array();
  $qry = db_select('field_data_field_ad_master_template_section', 'pf');
  $qry->leftjoin('field_data_field_ads_placeholder_values', 'fd', 'pf.entity_id = fd.entity_id');
  $all_names = $qry->fields('fd', array('field_ads_placeholder_values_value'))
          ->condition('pf.field_ad_master_template_section_value', $type_array, 'IN')
          ->execute()
          ->fetchAll();
  foreach ($all_names as $record) {
    $array[$record->field_ads_placeholder_values_value] = $record->field_ads_placeholder_values_value;
  }
  return $array;
}

/**
 * Implements after_build_validate().
 * {@inheritdoc}
 */
function itg_ads_rule_after_build_validate($form, &$form_state) {
//p('ll');


//  dpm($form_state['values']);
//  dpm($form_state['values']['field_ads_template_selection']['und'][0]['value']);
  $check_add_template_existance = check_add_template_existance($form_state['values']['field_ads_template_selection']['und'][0]['value']);

  if (isset($form_state['values']['nid']) && !empty($form_state['values']['nid']) && $form_state['values']['nid']!=$check_add_template_existance) {
        form_set_error('field_ads_template_selection','OOPS! Already added place holder for selected template.If you want to edit selected templete please '.l('click here!','node/'.$form_state['values']['nid'].'/edit'));
  } elseif(isset($_GET['q']) && !empty($_GET['q']) && $_GET['q']=='node/add/ads-management'){
    if(isset($check_add_template_existance) && !empty($check_add_template_existance)) {
              form_set_error('field_ads_template_selection','OOPS! Already added place holder for selected template.If you want to edit selected templete please '.l('click here!','node/'.$check_add_template_existance.'/edit'));

    }
    
  }



  $placeholder_data = array();
  $device_data = array();

  $syndication_mode = 'field_ads_placeholder';
  $syndication_rule_title = 'field_ads_template_selection';

  //foreach ($form['field_adds_code_holder'][LANGUAGE_NONE] as $key => $item) {
  //watchdog('test7878','<pre>' . print_r($form['field_adds_code_holder'][LANGUAGE_NONE][$key][$syndication_mode], true). '</pre>');
  //$form['field_adds_code_holder'][LANGUAGE_NONE][$key][$syndication_mode][LANGUAGE_NONE]['#value'] = $op;
  // }


  $lang = isset($form_state['values']['language']) ? $form_state['values']['language'] : LANGUAGE_NONE;
  foreach ($form_state['values']['field_adds_code_holder'][$lang] as $k => $item) {
    if ($k === 'add_more')
      continue; // skip loop if key is add_more
    $syndication_frequency = $item['field_syndication_frequency'][$lang][0]['value'];
    $maindata[] = array();

    if (isset($item['field_ads_placeholder'][$lang][0]['value']) && !empty($item['field_ads_placeholder'][$lang][0]['value'])) {

      $placeholder_data[] = $item['field_ads_placeholder'][$lang][0]['value'];
    }

    if (isset($item['field_ads_device_selection'][$lang][0]['value']) && !empty($item['field_ads_device_selection'][$lang][0]['value'])) {
      $device_data[] = $item['field_ads_device_selection'][$lang][0]['value'];
    }
  }



  $placeholder_data_final = array_filter($placeholder_data);
  $device_data_final = array_filter($device_data);

  // dpm($placeholder_data_final);
  // dpm($device_data_final);


  foreach ($placeholder_data_final as $placeholder_chunk_key => $placeholder_chunk) {
    $p_matched_key = NULL;
    $p_search_key = NULL;

    $p_search_key = $placeholder_chunk_key;

    //for ($i = 0; $i < count($placeholder_data_final); $i++) {
    foreach ($placeholder_data_final as $i => $placeholderinner_chunk) {

      if ($placeholder_data_final[$placeholder_chunk_key] == $placeholder_data_final[$i]) {
        $p_matched_key = $i;
      }


//      if ($p_search_key == $i) {
//        continue;
//      } else {
//        if ($placeholder_data_final[$placeholder_chunk_key] == $placeholder_data_final[$i]) {
//          $p_matched_key = $i;
//        }
//      }

      if (!empty($p_matched_key)) {
        if ($placeholder_chunk_key != $i) {

          if ($placeholder_data_final[$placeholder_chunk_key] == $placeholder_data_final[$i]) {
            // dpm("$placeholder_chunk_key = $i");
            //dpm("$placeholder_data_final[$placeholder_chunk_key] = $placeholder_data_final[$i]");
            //dpm("$device_data_final[$p_search_key]");
            switch ($device_data_final[$p_search_key]) {
              case 'mobile':
                if ($device_data_final[$p_matched_key] == 'mobile' || $device_data_final[$p_matched_key] == 'both') {
                  form_set_error('field_adds_code_holder][' . $lang . '][' . $p_matched_key . '][field_ads_placeholder', t('Ads Placeholder should be unique for all rows, please check row[' . ($p_matched_key + 1) . ']'));
                }
                break;
              case 'website':
                if ($device_data_final[$p_matched_key] == 'website' || $device_data_final[$p_matched_key] == 'both') {
                  form_set_error('field_adds_code_holder][' . $lang . '][' . $p_matched_key . '][field_ads_placeholder', t('Ads Placeholder should be unique for all rows, please check row[' . ($p_matched_key + 1) . ']'));
                }
                break;
              case 'both':
                if ($device_data_final[$p_matched_key] == 'mobile' || $device_data_final[$p_matched_key] == 'website' || $device_data_final[$p_matched_key] == 'both') {
                  form_set_error('field_adds_code_holder][' . $lang . '][' . $p_matched_key . '][field_ads_placeholder', t('Ads Placeholder should be unique for all rows, please check row[' . ($p_matched_key + 1) . ']'));
                }
                break;
            }
          }
        }
      }
    }
  }

//  if (count(array_unique(array_filter($maindata))) != count(array_filter($maindata))) {
//    // ads  has duplicates
//    form_set_error('field_adds_code_holder][' . $lang . '][' . $k . '][field_ads_placeholder', t('Ads Placeholder should be unique for all rows'));
//  }
}

function check_add_template_existance($template) {

  if (isset($template) && !empty($template)) {

    $query = db_select('field_data_field_ads_template_selection', 'b');
    $query->condition('b.field_ads_template_selection_value', $template);
    $query->condition('b.bundle', 'ads_management');
    $query->fields('b');
    $data = $query->execute()->fetchObject();
    if (isset($data->entity_id) && !empty($data->entity_id)) {
      return $data->entity_id;
    }
    return NULL;
  }
}