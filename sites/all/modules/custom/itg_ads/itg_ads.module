<?php

/**
 * @file
 * The ITG Ads module.
 *
 * Contains functionality for Ads management.
 */

/**
 * Implements hook_block_info(). 
 * {@inheritdoc}
 *
 * ##Code started for new block creation as per suggested sheet 6 block name have been given as follows##
 * 1.Page pusher 1x1.
 * 2.Overlay 1x1
 * 3.Super Banner (Top Nav) 728x90
 * 4.Super Banner (Bottom nav) 728x90
 * 5.Medium Rectangle-RHS1-300x250
 * 6.Medium Rectangle-RHS2-300x250
 * 
 * ## And corresponding machine names are given as follows ##
 * 1.ads_page_pusher_1x1
 * 2.ads_overlay_1x1
 * 3.ads_super_banner_top_nav_728x90
 * 4.ads_super_banner_bottomnav728x90
 * 5.ads_medium_rectangl_rhs1_300x250
 * 6.ads_medium_rectangl_rhs2_300x250
 * 
 */
module_load_include('inc', 'itg_ads', 'includes/custom_ads_handler');

/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_ads_block_info() {

// Start code for ads block configuration 

  $blocks['ads_page_pusher_1x1'] = array(
    'info' => t('Ads- Page pusher 1x1'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['ads_overlay_1x1'] = array(
    'info' => t('Ads- Overlay 1x1'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['ads_super_banner_top_nav_728x90'] = array(
    'info' => t('Ads- Super Banner (Top Nav) 728x90'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['ads_super_banner_bottomnav728x90'] = array(
    'info' => t('Ads- Super Banner (Bottom nav) 728x90'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['ads_medium_rectangl_rhs1_300x250'] = array(
    'info' => t('Ads- Medium Rectangle-RHS1-300x250'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['ads_medium_rectangl_rhs2_300x250'] = array(
    'info' => t('Ads- Medium Rectangle-RHS2-300x250'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * {@inheritdoc}
 */
function itg_ads_block_view($delta = '') {
  $block = array();
  $current_path = current_path();
  if (isset($current_path) && !empty($current_path)) {
    $current_path_array = explode('/', $current_path);
  }
  
  global $theme;
  
  switch ($delta) {

    case 'ads_page_pusher_1x1':
      $current_path_final = isset($current_path_array[0]) ? $current_path_array[0] : '';
      if ($current_path_final == 'user' || $current_path_final == 'personalization' || $current_path_final == 'tv-show' || $theme == 'itgadmin') {
        $block['content'] = '';
      }
      else {
        $ad_script = get_itg_page_name('Page pusher 1x1');
        $block['content'] = $ad_script;
      }
      break;

    // For Overlay 1x1
    case 'ads_overlay_1x1':      
      $current_path_final = isset($current_path_array[0]) ? $current_path_array[0] : '';
      if ($current_path_final == 'user' || $current_path_final == 'personalization' || $current_path_final == 'tv-show' || $theme == 'itgadmin') {
        $block['content'] = '';
      }
      else {
        $ad_script = get_itg_page_name('Overlay 1x1');
        $block['content'] = $ad_script;
      }
      break;

    // For Super Banner (Top Nav) 728x90
    case 'ads_super_banner_top_nav_728x90':
      $current_path_final = isset($current_path_array[0]) ? $current_path_array[0] : '';
      if ($current_path_final == 'user' || $current_path_final == 'personalization' || $current_path_final == 'tv-show' || $theme == 'itgadmin') {
        $block['content'] = '';
      }
      else {
        $ad_script = get_itg_page_name('Super Banner (Top Nav) 728x90');
        $block['content'] = $ad_script;
      }
      break;

    // For Super Banner (Bottom nav) 728x90
    case 'ads_super_banner_bottomnav728x90':
      $current_path_final = isset($current_path_array[0]) ? $current_path_array[0] : '';
      if ($current_path_final == 'user' || $current_path_final == 'personalization' || $current_path_final == 'tv-show' || $theme == 'itgadmin') {
        $block['content'] = '';
      }
      else {
        $ad_script = get_itg_page_name('Super Banner (Bottom nav) 728x90');
        $block['content'] = $ad_script;
      }
      break;

    // Medium Rectangle-RHS1-300x250
    case 'ads_medium_rectangl_rhs1_300x250':
      $status = drupal_get_http_header("status");      
      
      $current_path_final = isset($current_path_array[0]) ? $current_path_array[0] : '';
      if ($status == '404 Not Found' || $status == '403 Forbidden' || current_path() == 'user/login' || current_path() == 'user/registration' || current_path() == 'user' || $current_path_final == 'user' || $current_path_final == 'personalization' || $current_path_final == 'tv-show' || $current_path_final == 'product' || $current_path_final == 'cart' || $current_path_final == 'order-summary' || $current_path_final == 'order-confirmation' || $current_path_final == 'order' || $current_path_final == 'snap-post' || $theme == 'itgadmin') {
        $block['content'] = '';
      }
      else {
        $ad_script = get_itg_page_name('Medium Rectangle-RHS1-300x250');
        $block['content'] = $ad_script;
      }
      break;

    // Medium Rectangle-RHS2-300x250
    case 'ads_medium_rectangl_rhs2_300x250':
      $status = drupal_get_http_header("status");
      $current_path_final = isset($current_path_array[0]) ? $current_path_array[0] : '';
      if ($status == '404 Not Found' || $status == '403 Forbidden' || current_path() == 'user/login' || current_path() == 'user/registration' || current_path() == 'user' || $current_path_final == 'user' || $current_path_final == 'personalization' || $current_path_final == 'tv-show' || $current_path_final == 'product' || $current_path_final == 'cart' || $current_path_final == 'order-summary' || $current_path_final == 'order-confirmation' || $current_path_final == 'order' || $current_path_final == 'snap-post' || $theme == 'itgadmin') {
        $block['content'] = '';
      }
      else {
        $ad_script = get_itg_page_name('Medium Rectangle-RHS2-300x250');
        $block['content'] = $ad_script;
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_menu.
 * {@inheritdoc}
 */
function itg_ads_menu() {
  $items = array();
  $items['itg-ads/%'] = array(
    'title' => t('Ads'),
    'page callback' => 'itg_ads_show_ad_image',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['itg-ads-preview-ads'] = array(
    'title' => t('Ads'),
    'page callback' => 'itg_ads_preview_ads',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme.
 * {@inheritdoc}
 */
function itg_ads_theme($existing, $type, $theme, $path) {
  return array(
    'itg_ads' => array(
      'variables' => array('data' => NULL),
      'template' => 'templates/itg-ads',
    ),
    'ad_right_sidebar_block1' => array(
      'template' => 'ad-right-sidebar1',
      'path' => drupal_get_path('module', 'itg_ads') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'ad_right_sidebar_block2' => array(
      'template' => 'ad-right-sidebar2',
      'path' => drupal_get_path('module', 'itg_ads') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_ads_preview' => array(
      'template' => 'itg-ads-preview',
      'path' => drupal_get_path('module', 'itg_ads') . '/templates',
      'variables' => array('data' => NULL),
    ),
  );
}

/**
 * Implemens hook_form_FORM_ID_alter().
 * {@inheritdoc}
 */
function itg_ads_form_ads_management_node_form_alter(&$form, &$form_state, $form_id) {

  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'manage-ads', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );

  $form['actions']['preview_ads'] = array(
    '#markup' => l(t('Preview Ads'), 'itg-ads-preview-ads', array('attributes' => array('class' => 'form-submit itg-ads-preview-ads'))),
    '#weight' => 19,
  );

  $syndication_mode = 'field_ads_placeholder';
  $syndication_rule_title = 'field_ads_template_selection';
  $op = NULL;  // Initilization with null as default entry 
  $rule_title = NULL; // Initilization with null as default entry
  if (isset($form[$syndication_rule_title][LANGUAGE_NONE]['#entity']->field_ads_template_selection[LANGUAGE_NONE][0]['value'])) {
    $rule_title = $form[$syndication_rule_title][LANGUAGE_NONE]['#entity']->field_ads_template_selection[LANGUAGE_NONE][0]['value'];
  }
  $option_array = array(
    '_none' => '- Select a value -',
    'Home' => 'Home Page',
    'Rest' => 'Rest of the Site',
  );

  $combined_final_array = $option_array + get_all_list_of_section_page();

  $form[$syndication_rule_title][LANGUAGE_NONE]['#options'] = $combined_final_array;

  if (isset($rule_title)) {
    $form[$syndication_rule_title][LANGUAGE_NONE]['#default_value'] = $rule_title;
  }

  $form[$syndication_rule_title][LANGUAGE_NONE]['#ajax'] = array(
    'event' => 'change',
    'callback' => 'itg_ads_mode_ajax_callback',
    'wrapper' => $syndication_mode . '_replace',
  );

  $form['field_ads_template_selection']['#prefix'] = '<div id="itg_ads_ttype_replace">';
  $form['field_ads_template_selection']['#suffix'] = '</div>';

  $form['field_adds_code_holder']['#prefix'] = '<div id="' . $syndication_mode . '_replace">';
  $form['field_adds_code_holder']['#suffix'] = '</div>';

  $option_array_ds = array(
    '_none' => '- Select a value -',
  );

  //Get mode 
  if (isset($form_state['input'][$syndication_rule_title][LANGUAGE_NONE])) {
    $op = $option_array_ds + itg_ads_get_mode($form_state['input'][$syndication_rule_title][LANGUAGE_NONE]);
  }
  else if (isset($rule_title)) {
    $op = itg_ads_get_mode($rule_title);
  }

  // Getting total count of field collection   
  $total_count = 0;
  foreach ($form['field_adds_code_holder'][LANGUAGE_NONE] as $key => $item) {
    if (is_numeric($key)) {
      $total_count++;
    }
  }

  foreach ($form['field_adds_code_holder'][LANGUAGE_NONE] as $key => $item) {
    if (is_numeric($key)) {

      if ($key == 0 && $total_count <= 1) {
        unset($form['field_adds_code_holder'][LANGUAGE_NONE][$key]['remove_button']);
      }

      $syndication_mode_value = NULL;

      if (isset($form['field_adds_code_holder'][LANGUAGE_NONE][$key]['#entity']->field_ads_placeholder[LANGUAGE_NONE][0]['value'])) {
        $syndication_mode_value = $form['field_adds_code_holder'][LANGUAGE_NONE][$key]['#entity']->field_ads_placeholder[LANGUAGE_NONE][0]['value'];
      }

      $form['field_adds_code_holder'][LANGUAGE_NONE][$key][$syndication_mode][LANGUAGE_NONE]['#options'] = $op;
      if (isset($syndication_mode_value)) {
        $form['field_adds_code_holder'][LANGUAGE_NONE][$key][$syndication_mode][LANGUAGE_NONE]['#default_value'] = $syndication_mode_value;
      }

      unset($form['field_adds_code_holder'][LANGUAGE_NONE][$key][$syndication_mode]['#validated']);
    }
  }

  $form['#validate'][] = 'itg_ads_rule_after_build_validate';
  $form['#after_build'][] = 'itg_ads_after_build';
}

/**
 * Ajax callback for syndication_mode dropdown
 * @param array $form
 * @param array $form_state
 * @return $form;
 */
function itg_ads_mode_ajax_callback($form, $form_state) {
  return $form['field_adds_code_holder'];
}

/**
 * Ajax callback for ads placeholder dropdown.
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_ads_value_ajax_callback($form, $form_state) {
  return $form['field_ads_placeholder'];
}

/**
 * Ajax callback for Event roles dropdown.
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_ads_value_ajax($form, $form_state) {
  return $form['field_ads_placeholder'];
}

/**
 * Ajax callback for Event roles dropdown.
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_ads_value_ajaxs($form, $form_state) {
  return $form['field_ads_select_secton_option'];
}

/**
 * Implements hook_form_views_exposed_form_alter.
 * {@inheritdoc}
 */
function itg_ads_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form["#id"] == 'views-exposed-form-manage-ads-page') {
    $form['field_ads_end_date_value']['value']['#date_format'] = 'd/m/Y';
    $option_array = array(
      'All' => t('-Any-'),
      'Home' => t('Home Page'),
      'Rest' => t('Rest of the Site'),
    );

    $combined_final_array = $option_array + get_all_list_of_section_page();

    $form['field_ads_template_selection_value']['#options'] = $combined_final_array;
    $form['title']['#autocomplete_path'] = 'content-title-list/ads_management/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Placeholder Title'));
  }
}

/**
 * Implements hook_views_pre_render.
 * {@inheritdoc}
 */
function itg_ads_views_pre_render(&$view) {
  if ($view->name == "manage_ads") {
//Get user information.
    global $user;
    $header_content = '';
    if (!in_array('Intern', $user->roles) && !in_array('Author/Guest', $user->roles) && !in_array('Subeditor/Sr.Sub', $user->roles)) {
      $header_content = '<span class="count">Count (' . $view->total_rows . ') </span>';
      $header_content .= l(t('Create Ads Placeholder'), 'node/add/ads-management', array('query' => array('destination' => arg(0))));
    }

    foreach ($view->result as $key => $chunk_rows) {
      if (!isset($view->result[$key]->field_field_ads_end_date[0]['rendered']['#markup'])) {
        $view->result[$key]->field_field_ads_end_date[0]['rendered']['#markup'] = 'NA';
      }
    }

    $view->attachment_before = $header_content;
  }
}

/**
 * Custom function on submit of Ads Management form.
 * @param array $form
 * @param array $form_state
 */
function alter_ad_submit_status_message(&$form, $form_state) {
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'ads-management') {
    $op = 'created';
  }
  else {
    $op = 'updated';
  }
  $ads_title = $form_state['node']->title;
  drupal_set_message(t('Ad <b>' . $ads_title . '</b> has been ' . $op . '.'));

// TODO: check logic for this assignment.
  $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_ads_node_validate($node, $form, &$form_state) {
  $current_date = date("Y-m-d H:i:s");
  $current_time = strtotime($current_date);
  if ($node->type == 'ads_management') {
    $template = isset($node->field_ads_template_selection[LANGUAGE_NONE][0]['value']) ? $node->field_ads_template_selection[LANGUAGE_NONE][0]['value'] : NULL;
    $section_selection = isset($node->field_ads_section_selection[LANGUAGE_NONE][0]['tid']) ? $node->field_ads_section_selection[LANGUAGE_NONE][0]['tid'] : NULL;
    $template_variants = isset($node->field_ads_template_variants[LANGUAGE_NONE][0]['tid']) ? $node->field_ads_template_variants[LANGUAGE_NONE][0]['tid'] : NULL;

    //check on date values
    if (isset($form_state['values']['field_ads_start_date'][LANGUAGE_NONE][0]['value']) && !empty($form_state['values']['field_ads_start_date'][LANGUAGE_NONE][0]['value'])) {
      $start_date = strtotime($form_state['values']['field_ads_start_date'][LANGUAGE_NONE][0]['value']);
    }

    if (isset($form_state['values']['field_ads_end_date'][LANGUAGE_NONE][0]['value']) && !empty($form_state['values']['field_ads_end_date'][LANGUAGE_NONE][0]['value'])) {
      $end_date = strtotime($form_state['values']['field_ads_end_date'][LANGUAGE_NONE][0]['value']);
    }

    if (isset($end_date) && !empty($end_date)) {
      if ($end_date < $start_date) {
        form_set_error('field_ads_end_date', 'Expiry date must be greater than or equal to Start date.');
      }

      if ($end_date < $current_time) {
        form_set_error('field_ads_end_date', 'Expiry date must be greater than or equal to current date.');
      }
    }
  }
}

/**
 * Implements get_device_info().
 *  Getting device information
 * @return string $device
 */
function get_device_info() {
  $useragent = $_SERVER['HTTP_USER_AGENT'];

  if (preg_match('/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i', $useragent) || preg_match('/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i', substr($useragent, 0, 4))) {
    return 'mobile';
  }
  else {
    return 'website';
  }
}

/**
 * Custom function to populate the dropdown value for Template Selection.
 * @return array $result
 */
function get_all_list_of_section_page() {
  $terms = array();
  $terms_array = array();
  $query = db_select('taxonomy_term_data', 'td');
  $query->leftJoin('taxonomy_term_hierarchy', 'th', 'th.tid = td.tid');
  $query->leftJoin('itg_category_manager', 'icm', 'icm.tid = td.tid');
  $result = $query
      ->condition('td.vid', CATEGORY_MANAGMENT)
      ->condition('icm.status', 1)
      ->condition('th.parent', 0)
      ->orderBy('td.name')
      ->fields('td', array('tid', 'name'))
      ->execute();

  foreach ($result as $key => $chunks) {
    $terms_array[$chunks->tid] = $chunks->name;
  }

  return $terms_array;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function itg_ads_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field_ad_master_template_section'][LANGUAGE_NONE])) {
    $option_array = array(
      '_none' => t('- Select a value -'),
      'Home' => t('Home Page'),
      'Rest' => t('Rest of the Site'),
    );

    $combined_final_array = $option_array + get_all_list_of_section_page();
    $form['field_ad_master_template_section'][LANGUAGE_NONE]['#options'] = $combined_final_array;

    if (isset($form['#entity']->field_ad_master_template_section['und'][0]['value']) && !empty($form['#entity']->field_ad_master_template_section['und'][0]['value'])) {
      $form['field_ad_master_template_section'][LANGUAGE_NONE]['#default_value'] = $form['#entity']->field_ad_master_template_section['und'][0]['value'];
    }
    $form['#validate'][] = 'ads_form_validate_term_validate';
  }
}

/**
 * Ads template master form validate
 * @param array $form
 * @param array $form_state
 */
function ads_form_validate_term_validate($form, &$form_state) {
  /* TO DO for future use */
}

/**
 * Implements itg_ads_get_mode().
 *  Getting add mode
 * @param string $type
 * @return array $array;
 */
function itg_ads_get_mode($type) {

  if ($type == 'Home' || $type == 'Rest') {
    $type_array = array($type);
  }
  else {
    $type_array = array('Rest', $type);
  }

  $array = array();
  $qry = db_select('field_data_field_ad_master_template_section', 'pf');
  $qry->leftjoin('field_data_field_ads_placeholder_values', 'fd', 'pf.entity_id = fd.entity_id');
  $all_names = $qry->fields('fd', array('field_ads_placeholder_values_value'))
      ->condition('pf.field_ad_master_template_section_value', $type_array, 'IN')
      ->execute()
      ->fetchAll();

  foreach ($all_names as $record) {
    $array[$record->field_ads_placeholder_values_value] = $record->field_ads_placeholder_values_value;
  }
  return $array;
}

/**
 * Implements after_build_validate().
 * {@inheritdoc}
 */
function itg_ads_rule_after_build_validate($form, &$form_state) {

  $check_add_template_existance = check_add_template_existance($form_state['values']['field_ads_template_selection']['und'][0]['value']);
  $node_path = $_GET['q'];
  $node_path_array = explode('/', $_GET['q']);
  if (isset($form_state['values']['nid']) && !empty($form_state['values']['nid']) && $form_state['values']['nid'] != $check_add_template_existance) {
    form_set_error('field_ads_template_selection', t('OOPS! Already added place holder for selected template.If you want to edit selected templete please ' . l('click here!', 'node/' . $check_add_template_existance . '/edit')));
  }
  elseif (isset($_GET['q']) && !empty($_GET['q']) && $_GET['q'] == 'node/add/ads-management') {
    if (isset($check_add_template_existance) && !empty($check_add_template_existance)) {
      form_set_error('field_ads_template_selection', t('OOPS! Already added place holder for selected template.If you want to edit selected templete please ' . l('click here!', 'node/' . $check_add_template_existance . '/edit')));
    }
    elseif ($node_path_array[0] == 'node' && $node_path_array[2] == 'edit') {
      if ($node_path_array[1] != $check_add_template_existance) {
        form_set_error('field_ads_template_selection', t('OOPS! Already added place holder for selected template.If you want to edit selected templete please ' . l('click here!', 'node/' . $check_add_template_existance . '/edit')));
      }
    }
  }

  $placeholder_data = array();
  $device_data = array();

  $syndication_mode = 'field_ads_placeholder';
  $syndication_rule_title = 'field_ads_template_selection';

  $lang = isset($form_state['values']['language']) ? $form_state['values']['language'] : LANGUAGE_NONE;
  foreach ($form_state['values']['field_adds_code_holder'][$lang] as $k => $item) {
    if ($k === 'add_more')
      continue; // skip loop if key is add_more
    $syndication_frequency = isset($item['field_syndication_frequency'][$lang][0]['value']) ? $item['field_syndication_frequency'][$lang][0]['value'] : '';
    $maindata[] = array();

    if (isset($item['field_ads_placeholder'][$lang][0]['value']) && !empty($item['field_ads_placeholder'][$lang][0]['value'])) {
      $placeholder_data[] = $item['field_ads_placeholder'][$lang][0]['value'];
    }

    if (isset($item['field_ads_device_selection'][$lang][0]['value']) && !empty($item['field_ads_device_selection'][$lang][0]['value'])) {
      $device_data[] = $item['field_ads_device_selection'][$lang][0]['value'];
    }
  }

  $placeholder_data_final = array_filter($placeholder_data);
  $device_data_final = array_filter($device_data);

  foreach ($placeholder_data_final as $placeholder_chunk_key => $placeholder_chunk) {
    $p_matched_key = NULL;
    $p_search_key = NULL;

    $p_search_key = $placeholder_chunk_key;

    foreach ($placeholder_data_final as $i => $placeholderinner_chunk) {

      if ($placeholder_data_final[$placeholder_chunk_key] == $placeholder_data_final[$i]) {
        $p_matched_key = $i;
      }

      if (!empty($p_matched_key)) {
        if ($placeholder_chunk_key != $i) {

          if ($placeholder_data_final[$placeholder_chunk_key] == $placeholder_data_final[$i]) {

            switch ($device_data_final[$p_search_key]) {
              case 'mobile':
                if ($device_data_final[$p_matched_key] == 'mobile' || $device_data_final[$p_matched_key] == 'both') {
                  form_set_error('field_adds_code_holder][' . $lang . '][' . $p_matched_key . '][field_ads_placeholder', t('Ads Placeholder should be unique for all rows, please check row[' . ($p_matched_key + 1) . ']'));
                }
                break;
              case 'website':
                if ($device_data_final[$p_matched_key] == 'website' || $device_data_final[$p_matched_key] == 'both') {
                  form_set_error('field_adds_code_holder][' . $lang . '][' . $p_matched_key . '][field_ads_placeholder', t('Ads Placeholder should be unique for all rows, please check row[' . ($p_matched_key + 1) . ']'));
                }
                break;
              case 'both':
                if ($device_data_final[$p_matched_key] == 'mobile' || $device_data_final[$p_matched_key] == 'website' || $device_data_final[$p_matched_key] == 'both') {
                  form_set_error('field_adds_code_holder][' . $lang . '][' . $p_matched_key . '][field_ads_placeholder', t('Ads Placeholder should be unique for all rows, please check row[' . ($p_matched_key + 1) . ']'));
                }
                break;
            }
          }
        }
      }
    }
  }
}

/**
 * Check whether the template is already exist or not
 * @param string $template
 * @return int entity_id;
 */
function check_add_template_existance($template) {

  if (isset($template) && !empty($template)) {

    $query = db_select('field_data_field_ads_template_selection', 'b');
    $query->condition('b.field_ads_template_selection_value', $template);
    $query->condition('b.bundle', 'ads_management');
    $query->fields('b', array('entity_id'));

    $data = $query->execute()->fetchObject();
    if (isset($data->entity_id) && !empty($data->entity_id)) {
      return $data->entity_id;
    }

    return NULL;
  }
}

/**
 * Code start that select the placeholder device and code by passing paramator template ,  placeholde and device
 * @param string $page_name
 * @return int entity_id;
 */
function check_add_template_final($placeholder, $page_name) {
// $page_name can be Home, Rest or any other section id (it can be integer if it is category)
  if (isset($page_name) && !empty($page_name) && isset($placeholder) && !empty($placeholder)) {
    $data = array();
    try {

      $cur_date = date('Y-m-d H:i:s');

      $query = db_select('field_data_field_ads_template_selection', 'b');
      $query->leftJoin('field_data_field_adds_code_holder', 't', 'b.entity_id=t.entity_id');
      $query->leftJoin('field_data_field_ads_placeholder', 'p', 't.field_adds_code_holder_value=p.entity_id');
      $query->leftJoin('field_data_field_ads_device_selection', 'd', 't.field_adds_code_holder_value=d.entity_id');
      $query->leftJoin('field_data_field_ads_ad_code', 'c', 't.field_adds_code_holder_value=c.entity_id');
      $query->leftJoin('field_data_field_ads_start_date', 'sd', 'sd.entity_id=b.entity_id');
      $query->leftJoin('field_data_field_ads_end_date', 'ed', 'ed.entity_id=b.entity_id');
      $query->condition('b.field_ads_template_selection_value', $page_name);
      $query->condition('b.bundle', 'ads_management');
      $query->condition('p.field_ads_placeholder_value', $placeholder);
      $query->condition('sd.field_ads_start_date_value', $cur_date, '<=');
      $query->condition(db_or()->isNull('ed.field_ads_end_date_value')->condition('ed.field_ads_end_date_value', $cur_date, '>='));
      $query->fields('b', array('entity_id'));
      $query->fields('p', array('field_ads_placeholder_value'));
      $query->fields('d', array('field_ads_device_selection_value'));
      $query->fields('c', array('field_ads_ad_code_value'));
      $res = $query->execute();

      foreach ($res as $key => $placeholder_data) {
        $data[$placeholder_data->field_ads_placeholder_value][] = array('device' => $placeholder_data->field_ads_device_selection_value, 'code' => $placeholder_data->field_ads_ad_code_value);
      }

      return $data;
    }
    catch (Exception $e) {
      die($e->getMessage());
    }
  }
}

/**
 * Implements check_ads_placeholders().
 *  Check whether the master template is already exist or not
 * @param string $template
 * @return int entity_id;
 */
function check_ads_placeholders($templates) {

  if (isset($template) && !empty($template)) {
    $query = db_select('field_data_field_ad_master_template_section', 'b');
    $query->condition('b.field_ad_master_template_section_value', $template);
    $query->condition('b.bundle', 'ads_template_placeholder');
    $query->fields('b');
    $data = $query->execute()->fetchObject();
    if (isset($data->entity_id) && !empty($data->entity_id)) {
      return $data->entity_id;
    }
    return NULL;
  }
}

/**
 * Implements get_itg_page_name().
 *  This is for getting itg custom page name
 * @param string $placeholdername
 * @return array $ad_value;
 */
function get_itg_page_name($placeholder_name) {
  $arg = arg();
  $is_front_page = drupal_is_front_page();

  if (drupal_is_front_page()) {
    $page_name = t('Home');
  }
  else if ($arg[0] == 'taxonomy' && $arg[1] == 'term' && is_numeric($arg[2])) {
    $taxonomy_array = taxonomy_get_parents_all($arg[2]);
    $terms = array_reverse($taxonomy_array);
    $page_name = $terms[0]->tid;
  }
  else if ($arg[0] == 'node' && is_numeric($arg[1])) {
    $node_object = menu_get_object();
    $tid = !empty($node_object->field_primary_category[$node_object->language][0]['value']) ? $node_object->field_primary_category[$node_object->language][0]['value'] : '';
    $taxonomy_array = taxonomy_get_parents_all($tid);
    $terms = array_reverse($taxonomy_array);
    $page_name = !empty($terms[0]->tid) ? $terms[0]->tid : '';
  }
  else {
    $page_name = t('Rest');
  }

  $default_ros_value = drupal_json_decode(variable_get('itg_india_ros_default_val'));

  $ad_value_object = check_add_template_final($placeholder_name, $page_name);

  if (!empty($ad_value_object)) {
    $ad_value = $ad_value_object[$placeholder_name];
  }

  if (empty($ad_value)) {
    $now = new DateTime();

    if (isset($default_ros_value['ros_date_range_filter']['field_ads_start_date']) && !empty($default_ros_value['ros_date_range_filter']['field_ads_start_date'])) {
      $startdate = new DateTime($default_ros_value['ros_date_range_filter']['field_ads_start_date']);
    }

    if (isset($default_ros_value['ros_date_range_filter']['field_ads_end_date']) && !empty($default_ros_value['ros_date_range_filter']['field_ads_end_date'])) {
      $enddate = new DateTime($default_ros_value['ros_date_range_filter']['field_ads_end_date']);
    }

    // This is the case where start date and end date both have the date data
    if (isset($startdate) && !empty($startdate) && isset($enddate) && !empty($enddate)) {

      if ($startdate <= $now && $now <= $enddate) {
        $ad_value = $default_ros_value[$placeholder_name];
      }
      else {
        $ad_value = NULL;
      }
    }
    // End code for handling ROS when start and end data both are available
    // Case where only start date is available but end or expiry date is not decided by the user 
    else if (isset($startdate) && !empty($startdate) && !isset($enddate) && empty($enddate)) {
      if ($startdate <= $now) {
        $ad_value = $default_ros_value[$placeholder_name];
      }
      else {
        $ad_value = NULL;
      }
    }

    // End case where start date is available but end or expiry date is not decided by the user
  }

  $device = get_device_info();

  if (isset($ad_value)) {
    $code = get_desired_code_for_ads_placing($ad_value, $device);
  }
  else {
    $code = NULL;
  }
  return $code;
}

/*
 * Implements get_ad_of_placeholder().
 *  Getting all ads of selected placeholder on the basis of placeholder and page name
 * @param string $placeholdername
 * @param string $page_name
 * @return array $ads;
 */

function get_ad_of_placeholder($placeholder_name, $page_name) {

  $ad_nid = check_ads_placeholders($page_name);

  if (isset($template_id) && !empty($template_id)) {
    $node = node_load($template_id);
    foreach ($node->field_adds_code_holder[$node->language] as $chunks_data) {
      $entity = entity_load('field_collection_item', array($chunks_data['value']))[$chunks_data['value']];
      if ($entity->field_ads_placeholder['und'][0]['value'] == $placeholder_name && ($entity->field_ads_device_selection['und'][0]['value'] == 'both' || $entity->field_ads_device_selection['und'][0]['value'] == $device)) {
        return $entity->field_ads_ad_code['und'][0]['value'];
      }
    }
  }
}

/*
 * Implementation of hook_node_update().
 * {@inheritdoc}
 */

function itg_ads_node_update($node) {
  if (isset($node->type) && !empty($node->type) && $node->type == 'ads_management' && $node->field_ads_template_selection['und'][0]['value'] == 'Rest') {
    $default_ros_value_json = NULL;

    foreach ($node->field_adds_code_holder[$node->language] as $chunks_data) {
      $entity = entity_load('field_collection_item', array($chunks_data['value']))[$chunks_data['value']];
      $default_ros_value[$entity->field_ads_placeholder['und'][0]['value']][] = array('device' => $entity->field_ads_device_selection['und'][0]['value'], 'code' => $entity->field_ads_ad_code['und'][0]['value']);
    }
    
    $default_ros_value['ros_date_range_filter']['field_ads_start_date'] = $node->field_ads_start_date[$node->language][0]['value'];
    $default_ros_value['ros_date_range_filter']['field_ads_end_date'] = $node->field_ads_end_date[$node->language][0]['value'];
    $default_ros_value_json = drupal_json_encode($default_ros_value);
    variable_set('itg_india_ros_default_val', $default_ros_value_json);
  }
}

/*
 * Implementation of hook_node_insert().
 * {@inheritdoc}
 */

function itg_ads_node_insert($node) {
  if (isset($node->type) && !empty($node->type) && $node->type == 'ads_management' && $node->field_ads_template_selection['und'][0]['value'] == 'Rest') {
    $default_ros_value_json = NULL;

    foreach ($node->field_adds_code_holder[$node->language] as $chunks_data) {
      $entity = entity_load('field_collection_item', array($chunks_data['value']))[$chunks_data['value']];
      $default_ros_value[$entity->field_ads_placeholder['und'][0]['value']][] = array('device' => $entity->field_ads_device_selection['und'][0]['value'], 'code' => $entity->field_ads_ad_code['und'][0]['value']);
    }
    
    $default_ros_value['ros_date_range_filter']['field_ads_start_date'] = $node->field_ads_start_date[$node->language][0]['value'];
    $default_ros_value['ros_date_range_filter']['field_ads_end_date'] = $node->field_ads_end_date[$node->language][0]['value'];
    $default_ros_value_json = drupal_json_encode($default_ros_value);
    variable_set('itg_india_ros_default_val', $default_ros_value_json);
  }
}

/*
 * Implements get_desired_code_for_ads_placing().
 *  Getting ads code by using ad_value and device(device can be mobile and website)
 * @param string $ad_value
 * @param string $device
 * @return string $ads;
 */

function get_desired_code_for_ads_placing($ad_value, $device) {

  $code = '';
  if (!empty($ad_value)) {
    foreach ($ad_value as $chunk_values) {
      if ($chunk_values['device'] == $device || $chunk_values['device'] == 'both') {
        $code = $chunk_values['code'];
      }
    }
  }
  return $code;
}

/**
 * Implements get_header_body_start_end_code()
 *  This is the code that will return the header script and body script on the basisc of conditional section id as per business logic
 * @return array $adsheaderbody;
 */
function get_header_body_start_end_code() {

  $arg = arg();  // Getting all url arguments
  $is_front_page = drupal_is_front_page(); // Checker whether user is on front page or not it returns the flag only
  $page_name = NULL;  // Defining the page name as null 
  $show_external_flag = 0;
  if (drupal_is_front_page()) {
    $page_name = t('Home');
    $show_external_flag = 1;
  }
  else if ($arg[0] == 'taxonomy' && $arg[1] == 'term' && is_numeric($arg[2])) {
    $taxonomy_array = taxonomy_get_parents_all($arg[2]);
    $terms = array_reverse($taxonomy_array);
    $page_name = $terms[0]->tid;
    if ($arg[2] == $page_name) {
      $show_external_flag = 1;
    }
    else {
      $show_external_flag = 0;
    }
  }
  else if ($arg[0] == 'node' && is_numeric($arg[1])) {
    $node_object = menu_get_object();
    $node_nid = $node_object->nid;
    $node_type = $node_object->type;
    $tid = isset($node_object->field_primary_category[$node_object->language][0]['value']) ? $node_object->field_primary_category[$node_object->language][0]['value'] : NULL;
    if (isset($tid) && !empty($tid)) {
      $taxonomy_array = taxonomy_get_parents_all($tid);
      $terms = array_reverse($taxonomy_array);
      $page_name = $terms[0]->tid;
    }
    $show_external_flag = 0;
  }
  else {
    $page_name = t('Rest');
    $show_external_flag = 0;
  }

  $templatedata = check_add_template_existance($page_name);

  // Checking if Template is not available then rendering default template
  if (empty($templatedata)) {
    $templatedata = check_add_template_existance('Rest');
  }

  $adsheaderbody = array();

  $device_information = get_device_info();
  if (isset($templatedata) && !empty($templatedata)) {

    $ads_object = node_load($templatedata);

    // Code start for internal script 

    if ($device_information == 'website') {
      if (isset($ads_object->field_ads_headerscript[$ads_object->language])) {
        foreach ($ads_object->field_ads_headerscript[$ads_object->language] as $header) {
          if (strpos($header['value'], '[ITGD:ads:1]') && strpos($header['value'], '[ITGD:ads:2]')) {
            $section_header_s = 'ROS';
            $category_header_s = 'ROS';
            if($header_section = get_ads_headerscript_section($arg, $taxonomy_array, $node_object)){
              $section_geader_s = str_replace("'", "", $header_section['section_header_s']);
              $category_geader_s = str_replace("'", "", $header_section['category_geader_s']);
            }
            if (strpos($header['value'], '[ITGD:ads:1]')) {
              $header['value'] = str_replace('[ITGD:ads:1]', $section_geader_s, $header['value']);
            }
            if (strpos($header['value'], '[ITGD:ads:2]')) {
              $header['value'] = str_replace('[ITGD:ads:2]', $category_geader_s, $header['value']);
            }
            // for story
            if(isset($node_type) && $node_type = 'story') {
              if (strpos($header['value'], '[ITGD:ads:3]')) {
                $header['value'] = str_replace('[ITGD:ads:3]', $node_type , $header['value']);
              }
              if (strpos($header['value'], '[ITGD:ads:4]')) {
                $header['value'] = str_replace('[ITGD:ads:4]', $node_nid , $header['value']);
              }
            } else {
              $header['value'] = str_replace('[ITGD:ads:3]', '' , $header['value']);
              $header['value'] = str_replace('[ITGD:ads:4]', '' , $header['value']);
            }          
          }
          $adsheaderbody['header'][] = $header['value'];
        }
      }
    }

    if ($device_information == 'mobile') {
      if (isset($ads_object->field_ads_headerscript_mob[$ads_object->language])) {
        foreach ($ads_object->field_ads_headerscript_mob[$ads_object->language] as $header) {
          if (strpos($header['value'], '[ITGD:ads:1]') && strpos($header['value'], '[ITGD:ads:2]')) {
            $section_header_s = 'ROS';
            $category_header_s = 'ROS';
            if($header_section = get_ads_headerscript_section($arg, $taxonomy_array, $node_object)){
              $section_geader_s = str_replace("'", "", $header_section['section_header_s']);
              $category_geader_s = str_replace("'", "", $header_section['category_geader_s']);
            }
            if (strpos($header['value'], '[ITGD:ads:1]')) {
              $header['value'] = str_replace('[ITGD:ads:1]', $section_geader_s, $header['value']);
            }
            if (strpos($header['value'], '[ITGD:ads:2]')) {
              $header['value'] = str_replace('[ITGD:ads:2]', $category_geader_s, $header['value']);
            }
            // for story
            if(isset($node_type) && $node_type = 'story') {
              if (strpos($header['value'], '[ITGD:ads:3]')) {
                $header['value'] = str_replace('[ITGD:ads:3]', $node_type , $header['value']);
              }
              if (strpos($header['value'], '[ITGD:ads:4]')) {
                $header['value'] = str_replace('[ITGD:ads:4]', $node_nid , $header['value']);
              }
            } else {
              $header['value'] = str_replace('[ITGD:ads:3]', '' , $header['value']);
              $header['value'] = str_replace('[ITGD:ads:4]', '' , $header['value']);
            }
          }
          $adsheaderbody['header'][] = $header['value'];
        }
      }
    }
    if (isset($ads_object->field_ads_body_start[$ads_object->language])) {
      foreach ($ads_object->field_ads_body_start[$ads_object->language] as $bodystart) {
        $adsheaderbody['body_start'][] = $bodystart['value'];
      }
    }
    if (isset($ads_object->field_ads_body_close[$ads_object->language])) {
      foreach ($ads_object->field_ads_body_close[$ads_object->language] as $body_close) {
        $adsheaderbody['body_close'][] = $body_close['value'];
      }
    }

    // Code ends for internal script 
    // Code start for external script  
    // Checking $show_external_flag and rendering data on the basis of its value

    if ($show_external_flag == 1) {
      if (isset($ads_object->field_code_visibility_flag[$ads_object->language])) {
        foreach ($ads_object->field_code_visibility_flag[$ads_object->language] as $ads_viaibility) {
          $ads_viaibility['ads_viaibility_flag_external'] = $ads_viaibility['value'];
        }
      }
      if (isset($ads_object->field_ads_ex_headerscript[$ads_object->language])) {
        foreach ($ads_object->field_ads_ex_headerscript[$ads_object->language] as $header) {
          $adsheaderbody['ex_header'][] = $header['value'];
        }
      }
      if (isset($ads_object->field_ads_ex_body_start[$ads_object->language])) {
        foreach ($ads_object->field_ads_ex_body_start[$ads_object->language] as $bodystart) {
          $adsheaderbody['ex_body_start'][] = $bodystart['value'];
        }
      }
      if (isset($ads_object->field_ads_ex_body_close[$ads_object->language])) {
        foreach ($ads_object->field_ads_ex_body_close[$ads_object->language] as $body_close) {
          $adsheaderbody['ex_body_close'][] = $body_close['value'];
        }
      }
    }

    if ($show_external_flag == 0) {

      if (isset($ads_object->field_code_visibility_flag[$ads_object->language])) {
        foreach ($ads_object->field_code_visibility_flag[$ads_object->language] as $ads_viaibility) {

          if ($ads_viaibility['value'] == 'header') {
            foreach ($ads_object->field_ads_ex_headerscript[$ads_object->language] as $header) {
              $adsheaderbody['ex_header'][] = $header['value'];
            }
          }

          if ($ads_viaibility['value'] == 'body_start') {
            foreach ($ads_object->field_ads_ex_body_start[$ads_object->language] as $bodystart) {
              $adsheaderbody['ex_body_start'][] = $bodystart['value'];
            }
          }

          if ($ads_viaibility['value'] == 'body_close') {
            foreach ($ads_object->field_ads_ex_body_close[$ads_object->language] as $body_close) {
              $adsheaderbody['ex_body_close'][] = $body_close['value'];
            }
          }
        }
      }
    }

    // Code end for external script    
  }

  return $adsheaderbody;
}

/*
 * Implements itg_ads_after_build()
 * @param array $form
 * @param array $form_state
 * @return array $form;
 */

function itg_ads_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'itg_ads') . '/js/itg_ads.js', array('weight' => 1, 'scope' => 'footer'));
  return $form;
}

/**
 * Implements hook_views_data().
 */
function itg_ads_views_data() {
  $data['custom_ads_expiry_status']['table']['group'] = t('Custom');
  $data['custom_ads_expiry_status']['table']['join'] = array(
    // #global is a special flag which let's a table appear all the time.
    '#global' => array(),
  );

  $data['custom_ads_expiry_status']['custom_handler'] = array(
    'title' => t('Status'),
    'help' => t('Custom ads expiry status'),
    'field' => array(
      'handler' => 'views_handler_custom_ads_ex_status',
    ),
  );

  return $data;
}

/**
 * Implements itg_ads_preview_ads().
 */
function itg_ads_preview_ads($arg) {
  $renderabledata = itg_ads_get_renderable_prev_data($_REQUEST);
  echo "<div class='ads-preview-data'>";
  print $renderabledata['header_script'];
  print theme('itg_ads_preview', array('data' => $renderabledata));
  echo '</div>';
  drupal_exit();
}

/**
 * Implements itg_ads_get_renderable_prev_data().
 */
function itg_ads_get_renderable_prev_data($prev_raw_data) {
  $renderable_data = array();
  $renderable_data['title'] = $prev_raw_data['title'];

  $device_information = get_device_info();

  if ($device_information == 'website') {
    $renderable_data['header_script'] = $prev_raw_data['field_ads_headerscript'][LANGUAGE_NONE][0]['value'];
  }

  if ($device_information == 'mobile') {
    $renderable_data['header_script'] = $prev_raw_data['field_ads_headerscript_mob'][LANGUAGE_NONE][0]['value'];
  }

  // Adding code for ads 
  foreach ($prev_raw_data['field_adds_code_holder'][LANGUAGE_NONE] as $key => $chunks_data) {
    $renderable_data['code'][$chunks_data['field_ads_placeholder'][LANGUAGE_NONE]][] = array('device' => $chunks_data['field_ads_device_selection'][LANGUAGE_NONE], 'code' => $chunks_data['field_ads_ad_code'][LANGUAGE_NONE][0]['value']);
  }
  return $renderable_data;
}

/*
 * Function used to replace Ads code with key value pattern from section, category
 * and detail page like Story, photo & detail.
 * @param Array $arg
 * @param Array $data
 * @param Object $node_object
 * @return Array
 */
function get_ads_headerscript_section($arg, $data, $node_object){
	$return = FALSE;
	if ($arg[0] == "taxonomy" && $arg[1] == "term" && is_numeric($arg[2])) {
		$term_data = array_reverse($data);
    $taxname1 = preg_replace('/\s+/', '', $term_data[0]->name);
		if (count($term_data) > 1) {
      $taxname2 = preg_replace('/\s+/', '', $term_data[1]->name);
			$return['section_header_s'] = (!empty($term_data[0]->name) ? $taxname1 : 'ROS');
			$return['category_geader_s'] = (!empty($term_data[1]->name) ? $taxname1.$taxname2 : 'ROS');
		} else {
			$return['section_header_s'] = (!empty($term_data[0]->name) ? $taxname1 : 'ROS');
			$return['category_geader_s'] = $taxname1.'Home';
		}
	} else if ($arg[0] == "node" && is_numeric($arg[1])) {
		$term_data = array_reverse($data);
    $taxname1 = preg_replace('/\s+/', '', $term_data[0]->name);
		if (empty($node_object)) {
			$node_object = menu_get_object();
		}
		if (count($term_data) > 1 && !empty($term_data[0]->name)) {
			$return['section_header_s'] = (!empty($term_data[0]->name) ? $taxname1 : 'ROS');
			$return['category_geader_s'] = $taxname1.ucfirst($node_object->type);
		} else {
			$return['section_header_s'] = (!empty($term_data[0]->name) ? $taxname1 : 'ROS');
			$return['category_geader_s'] = (!empty($taxname1) ? ($taxname1.ucfirst($node_object->type)) : 'ROS');
		}
	}
	return $return;
}
