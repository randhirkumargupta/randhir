<?php

/**
 * @file : itg_loyalty_reward
 * 
 * Contains functionality for loyalty and rewards point.
 *
 */

/**
 * Implement hook_permission
 * @return type
 */
function itg_loyalty_reward_permission() {
  return array(
    'loyalty points configuration form' => array(
      'title' => t('Loyalty Points configuration Form'),
    ),
    'view product page' => array(
      'title' => t('View product listing page.')
    ),
  );
}

/**
 * Implement hook_menu
 * {@inheritdoc}
 */
function itg_loyalty_reward_menu() {
  // Configuration page menu.
  $items['loyalty-points-configuration'] = array(
    'title' => 'Loyalty Points Configuration Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('loyality_reward_points_configuration_form'),
    'access callback' => 'user_access',
    'access arguments' => array('loyalty points configuration form'),
    'file' => 'includes/itg_loyalty_reward_points_form.inc',
  );
  // Redeem points page.
  $items['redeem-points'] = array(
    'title' => 'Redeem Points',
    'page callback' => 'itg_loyalty_reward_redeem_points',
    'access arguments' => array('view product page'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/itg_loyalty_reward.product.inc'
  );
  // Cart page.
  $items['cart'] = array(
    'title' => 'Shopping Cart',
    'page callback' => 'itg_loyalty_reward_cart',
    'access arguments' => array('view product page'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/itg_loyalty_reward.product.inc'
  );
  // Add to cart callback
  $items['cart/add/%'] = array(
    'page callback' => 'itg_loyalty_reward_addtocart',
    'page arguments' => array(2, 3),
    'access arguments' => array('view product page'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_loyalty_reward.product.inc',
  );
  // Cart remove product.
  $items['cart/delete/%'] = array(
    'page callback' => 'itg_loyalty_reward_removecart',
    'page arguments' => array(2, 3),
    'access arguments' => array('view product page'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_loyalty_reward.product.inc',
  );
  $items['checkout'] = array(
    'title' => 'Checkout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_loyalty_reward_checkout_form'),
    'access arguments' => array('view product page'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/itg_loyalty_reward.checkout.inc',
  );
  $items['order'] = array(
    'title' => 'Redemption History',
    'page callback' => 'itg_loyalty_reward_order',
    'access arguments' => array('view product page'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/itg_loyalty_reward.product.inc',
  );
  $items['test-points'] = array(
    'title' => 'Test Points',
    'page callback' => 'itg_loyalty_reward_testpoints',
    'access arguments' => array('view product page'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/itg_loyalty_reward_earn.point.inc',
  );
  $items['earn-loyalty-point'] = array(
    'page callback' => 'itg_loyalty_reward_earnpoint',
    'access arguments' => array('view product page'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_loyalty_reward_earn.point.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_loyalty_reward_theme($existing, $type, $theme, $path) {
  $themes = array(
    'itg_loyalty_reward_product_notification_mail' => array(
      'variables' => array('node' => NULL),
      'template' => 'templates/loyalty-rewards-product-expiration-mail',
    ),
    'itg_loyalty_reward_redeem_points' => array(
      'template' => 'itg-loyalty-reward-redeem-points',
      'path' => drupal_get_path('module', 'itg_loyalty_reward') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_loyalty_reward_cart_block' => array(
      'template' => 'itg-loyalty-reward-cart-block',
      'path' => drupal_get_path('module', 'itg_loyalty_reward') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_loyalty_reward_cart' => array(
      'template' => 'itg-loyalty-reward-cart',
      'path' => drupal_get_path('module', 'itg_loyalty_reward') . '/templates',
      'variables' => array('data' => NULL),
    ),
  );

  return $themes;
}

/**
 * Implements hook_form_alter
 * {@inheritdoc}
 */
function itg_loyalty_reward_form_alter(&$form, &$form_state, $form_id) {

  // Alter for "loyalty_points_configuration_form"
  if ($form_id == 'loyality_reward_points_configuration_form') {
    drupal_set_title(t('Loyalty Points Configuration Form'));
    $form['#attributes']['class'] = array('node-form');
    $form['actions']['submit']['#value'] = 'Save';
  }

  // Alter for "loyalty_and_rewards_node_form"
  if ($form_id == 'loyalty_and_rewards_node_form') {

    drupal_set_title(t('Add New Item:'));
    unset($form['#metatags']);
    unset($form['actions']['preview']);

    // Add cancel button
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'lrp-manage-items', array('attributes' => array('class' => 'button'))),
      '#weight' => 21,
      '#value' => t('Cancel'),
    );
    $form['actions']['submit']['#submit'][] = 'itg_loyalty_reward_submit_handler_for_redirect';
    $form['#after_build'][] = 'itg_loyalty_reward_form_after_build';
  }
}

/**
 * Custom submit callback for alter message after operation.
 */
function itg_loyalty_reward_submit_handler_for_redirect($form, &$form_state) {

  // Unset drupal default messages
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }

  // Unset destination
  unset($_GET['destination']);

  // Check for edit and add node
  if (arg(2) == 'edit') {
    $op = 'updated successfully';
  }
  else {
    $op = 'added successfully';
  }

  $form_state['redirect'] = 'lrp-manage-items';
  drupal_set_message(t('Item <strong>@ideatitle</strong> has been @operation.', array('@ideatitle' => $form_state['node']->title, '@operation' => $op)));
}

/**
 * Implements hook_form_after_build
 * {@inheritdoc}
 */
function itg_loyalty_reward_form_after_build($form, &$form_state) {
  global $user, $base_url;

  //Extract type of node
  if (arg(0) == 'node') {
    if (arg(1) == 'add') {
      $type = arg(2);
      $nid = '';
    }
    else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }

  //Array used in itg_loyalty_reward.js
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;
  drupal_add_js(array('itg_loyalty_reward' => array('settings' => $settings)), array('type' => 'setting'));
  //Add JS for itg_loyalty_reward
  drupal_add_js(drupal_get_path('module', 'itg_loyalty_reward')
      . '/js/itg_loyalty_reward.js', array('weight' => 1));

  //Unset SEF URL field
  $form['path']['#access'] = FALSE;

  //Unset metatag description
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags'][LANGUAGE_NONE]['basic']['#title']);
  unset($form['metatags'][LANGUAGE_NONE]['basic']['#description']);
  return $form;
}

/**
 * Implements hook_views_pre_render
 * {@inheritdoc}
 */
function itg_loyalty_reward_views_pre_render(&$view) {
  // Add "Add new Item" button on listing page of items
  if ($view->name == "lrp_manage_items") {
    $header_content_loyalty = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_loyalty .= l(t('Add new Item'), 'node/add/loyalty-and-rewards');
    $view->attachment_before = $header_content_loyalty;
  }  
}

/**
 * Implements hook_views_exposed_form_alter
 * {@inheritdoc}
 */
function itg_loyalty_reward_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-lrp-manage-items-page') {
    // Call function autocomplete to show matching titles
    $form['title']['#autocomplete_path'] = 'content-title-list/loyalty_and_rewards/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Product Title'));
  }
  if ($form['#id'] == 'views-exposed-form-product-page') {
    $arg = arg();
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'itg_loyalty_reward') . '/js/itg_loyalty_reward_cart.js',
    );
    $form['itg-points'] = array(
      '#type' => 'select',
      '#options' => array(
        '0-500' => '0-500',
        '501-1000' => '501-1000',
        '1001-10000' => '1001-10000'
      ),
      '#default_value' => $arg[1],
    );    
    $form['field_lrp_loyalty_points_value']['#prefix'] = '<div style="display:none">';
    $form['field_lrp_loyalty_points_value']['#suffix'] = '</div>';
  }
}

/**
 * Implementation of hook_node_insert
 * {@inheritdoc}
 */
function itg_loyalty_reward_node_insert($node) {
  switch ($node->type) {
    case 'loyalty_and_rewards':
      $query = db_insert('itg_loyalty_reward_cron');
      $query->fields(array(
        'nid' => $node->nid,
        'type' => $node->type,
        'scheduled_time' => strtotime($node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] . ' + 23 hours'),
        'status' => 0,
        'created' => time()
      ));
      $query->execute();
      break;

    default:
      break;
  }
}

/**
 * Implementation of hook_node_update
 * {@inheritdoc}
 */
function itg_loyalty_reward_node_update($node) {
  switch ($node->type) {
    case 'loyalty_and_rewards':
      $curr_time = time();
      $product_expiry_date = strtotime($node->field_story_expiry_date[LANGUAGE_NONE][0]['value']);

      // If product expiry date is update and set to future
      if ($product_expiry_date > $curr_time) {
        db_update('itg_loyalty_reward_cron')
            ->fields(array(
              'status' => 1,
              'scheduled_time' => strtotime($node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] . ' + 23 hours')
            ))
            ->condition('nid', $node->nid, '=')
            ->execute();
      }
      break;

    default:
      break;
  }
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_loyalty_reward_cronapi($op, $job = NULL) {
  $items['itg_loyalty_reward_product_expiry_notification'] = array(
    'description' => 'Send mail before 24 hours for product expiration (Loyalty) ',
    'callback' => 'itg_loyalty_reward_product_expiry_notification_callback',
  );
  return $items;
}

/**
 * Send mail to siteadmin and editor before 24 hours of product expiration
 */
function itg_loyalty_reward_product_expiry_notification_callback() {

  // Include itg_loyalty_reward mail file to send mail
  module_load_include('inc', 'itg_loyalty_reward', 'includes/itg_loyalty_reward_mail');

  $current_time = time();

  $query = db_select('itg_loyalty_reward_cron', 'c');
  $query->fields('c')
      ->condition('c.status', 0, '=');
  $result = $query->execute();

  // Fetch node to send notification mail
  while ($record = $result->fetchAssoc()) {
    $end_date = $record['scheduled_time'];
    $diff = $end_date - $current_time;
    $diff_in_hours = round($diff / ( 60 * 60 ));
    if ($diff_in_hours > 0) {
      if ($diff_in_hours <= 24) {
        itg_loyalty_reward_send_mail_product_expiration($record['nid']);
      }
    }
  }
}

/**
 * Get reward points details of a user
 * @param type $uid
 * @return array
 */
function itg_loyalty_reward_user_details($uid) {
  $user_details = array(
    'total_earned_so_far' => 500,
    'redeemed_points' => 300,
    'lrp_content_share' => 432,
    'lrp_content_like' => 233,
    'lrp_content_visit' => 878,
    'lrp_follow_itg_on_social_sites' => 523,
    'lrp_newsletter_subscription' => 100,
    'lrp_ugc_contribution' => 150,
    'lrp_online_registration_for_any_events' => 645,
    'lrp_participation_in_poll_campaign_survey' => 123,
    'lrp_refer_a_friend' => 42,
  );
  return $user_details;
}

/**
 * Implements hook_block_info().
 *
 * {@inheritdoc}.
 */
function itg_loyalty_reward_block_info() {
  // Cart item block.
  $blocks['itg_cart_block'] = array(
    'info' => t('Cart'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  // Common header for all pages.
  $blocks['itg_loyalty_reward_header'] = array(
    'info' => t('Loyalty Redumption Header'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * {@inheritdoc}.
 */
function itg_loyalty_reward_block_view($delta = '') {
  global $user;
  $block = array();
  switch ($delta) {
    case 'itg_cart_block':
      $data = _get_cart_item($user->uid, 'total');
      $block['content'] = theme('itg_loyalty_reward_cart_block', array('data' => $data));
      break;
    case 'itg_loyalty_reward_header':
      $user_fields = user_load($user->uid);
      // Render user picture.
      $data['profile_pic'] = theme(
          'image_style', array(
        'style_name' => 'user_picture',
        'path' => $user_fields->field_user_picture['und'][0]['uri'],
          )
      );
      // Load user name    
      $f_name = $user_fields->field_first_name['und'][0]['value'];
      $l_name = $user_fields->field_last_name['und'][0]['value'];
      $data['full_name'] = $f_name . ' ' . $l_name;
      // user logout link
      $data['logout'] = l(t('Logout'), 'user/logout');
      $block['content'] = theme('itg_loyalty_reward_redeem_points', array('data' => $data));
  }

  return $block;
}

/**
 * Get cart items total from database.
 *
 * @param int $uid
 *   User id of current user.
 * @param string $option
 *   An optional value th check whether it should return count of full record.
 *
 * @return array
 *   Array of items.
 */
function _get_cart_item($uid, $option = NULL) {
  $itg_query = db_select('itg_loyalty_reward_cart', 'itg');
  $itg_query->fields('itg', array('nid'));
  $itg_query->condition('uid', $uid);
  if ($option == 'total') {
    $data = 0;
    $data = $itg_query->execute()->rowCount();
  }
  else {
    $itg_query->fields('itg', array('nid'));
    $itg_result = $itg_query->execute()->fetchAll();
    $data = array();
    foreach ($itg_result as $value) {
      $data[] = $value->nid;
    }
  }

  return $data;
}

/**
 * get cart items from database.
 *
 * @param int $uid
 *   Current user id.
 * @return array
 *   Array of product details.
 */
function _get_cart_full_details($uid) {
  $data = array();
  $itg_query = db_select('itg_loyalty_reward_cart', 'itg');
  $itg_query->fields('itg', array('product_information', 'quintity'))
      ->condition('uid', $uid);
  $itg_result = $itg_query->execute()->fetchAll();
  foreach ($itg_result as $value) {
    $data[] = array(
      'product' => unserialize($value->product_information),
      'quantity' => $value->quintity
    );
  }

  return $data;
}

/**
 * Implements hook_views_query_alter().
 *
 * {@inheritdoc}.
 */
function itg_loyalty_reward_views_query_alter(&$view, &$query) {
  $arg = arg();
  if ($view->name === 'product' && !isset($_GET['field_lrp_category_value']) && ($arg[1] == '0-500' || $arg[1] == '501-1000' || $arg[1] == '1001-10000')) {
    $filter_value = explode('-', $arg[1]);
    $query->where[1]['conditions'][2] = array(
      'field' => 'field_data_field_lrp_loyalty_points.field_lrp_loyalty_points_value',
      'value' => $filter_value,
      'operator' => 'BETWEEN',
    );
  }
}
