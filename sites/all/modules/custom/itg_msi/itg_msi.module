<?php

/**
 * @file
 * The ITG MSI module.
 *
 * Contains functionality related to magazine, supplement and issue.
 *
 */

/**
 * Implement hook_permission
 * @return type
 */
function itg_msi_permission() {
    return array(
        'custom view unpublished content' => array(
            'title' => t('Custom View Unpublished Content'),
            'restrict access' => TRUE
        )
    );
}

/**
 * Implement hook_menu
 * @return string
 */
function itg_msi_menu() {

    $items['check-duplicate-title/%'] = array(
        'page callback' => 'itg_msi_check_duplicate_title',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_msi.inc',
    );

    $items['content/%/autocomplete'] = array(
        'page callback' => 'itg_msi_autocomplete_content',
        'access arguments' => array('access itg story'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_msi.inc',
    );

    $items['get_tid'] = array(
        'page callback' => 'itg_msi_get_term_from_name',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_msi.inc',
    );
    
    $items['admin/config/show_web_exclusive'] = array(
      'title' => 'Show Web Exclusive',
      'description' => 'Show Web Exclusive',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('itg_msi_show_web_exclusive_form'),
      'access arguments' => array('administer itg_term settings'),
      'file' => 'includes/itg_msi.inc',
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['magazine'] = array(
        'page callback' => 'itg_msi_magazine_page',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'includes/itg_msi.inc',
    );

    return $items;
}

/* * *************************Form Related hooks******************************** */

/**
 * Implement hook_form_alter
 * @param Array $form
 * @param Array $form_state
 * @param String $form_id
 */
function itg_msi_form_alter(&$form, &$form_state, $form_id) {
    global $user;

    //Set destination for magazine form
    if ($form_id == 'magazine_node_form') {
        $destination = 'manage-magazines';
        $form['title']['#description'] = '<p>' . t('Please enter magazine title.') . '</p>';
        $form['actions']['submit']['#submit'][] = 'itg_msi_issue_form_custom_submit';
        //$form['field_print_magazine_issue_date']['#access'] = false;
        unset($form['field_print_magazine_issue_date']);
    }

    //Set destination for supplement form
    if ($form_id == 'supplement_node_form') {
      if($user->uid != 1) {
      $form['field_story_source_type']['#attributes']['class'][] = 'element-hidden';
      }
        $destination = 'manage-supplements';
        $form['title']['#description'] = '<p>' . t('Please enter supplement title.') . '</p>';
        $form['actions']['submit']['#submit'][] = 'itg_msi_issue_form_custom_submit_callback';
        //
        $form['field_supp_issue']['#required'] = FALSE;
        $form['field_issue_supp_large_image']['#required'] = FALSE;
        $form['field_issue_supp_small_image']['#required'] = FALSE;
        $form['field_supp_issue']['#access'] = FALSE;
        $form['field_issue_supp_large_image']['#access'] = FALSE;
        $form['field_issue_supp_small_image']['#access'] = FALSE;
        $form['group_supp_import_xml']['#access'] = FALSE;
        $form['field_supp_import_xml']['#access'] = FALSE;
    }

    //Set destination for issue form
    if ($form_id == 'issue_node_form') {
      if($user->uid != 1) {
      $form['field_story_source_type']['#attributes']['class'][] = 'element-hidden';
      }
        unset($form['title']);
        $destination = 'manage-issues';
        $form['actions']['submit']['#submit'][] = 'itg_msi_issue_form_custom_submit_callback';
    }

    //Add cancel button for magazine, supplement and issue
    if ($form_id == 'magazine_node_form' || $form_id == 'supplement_node_form' || $form_id == 'issue_node_form') {

        //Hide Publish label from magazine and supplement form
        unset($form['field_magazine_publish'][LANGUAGE_NONE]['#title']);
        unset($form['field_supp_publish'][LANGUAGE_NONE]['#title']);

        //Add cancel button to magazine, supplement and issue form
        $form['actions']['cancel'] = array(
            '#markup' => l(t('Close'), $destination, array('attributes' => array('class' => 'button'))),
            '#weight' => 21,
            '#value' => t('Close'),
        );

        //Add submit handler for redirect form to their corresponding page after node has been created susccessfully.
        $form['actions']['submit']['#submit'][] = '_submit_handler_for_redirect';

        //Call function after build
        $form['#after_build'][] = 'itg_msi_form_after_build';
    }
}

/**
 * Custom submit callback for redirecting breaking news form.
 */
function itg_msi_issue_form_custom_submit($form, &$form_state) {
    if (isset($_SESSION['messages']['status'])) {
        unset($_SESSION['messages']['status']);
    }
    // code insert image in custom table
    $node_id = $form_state['node']->nid;

    if (arg(2) == 'edit') {
        $op = 'updated.';
    }
    else {
        $op = 'created.';
    }

    if ($form_state['node']->type == 'issue') {

        $title = date('d/m/Y', strtotime($form_state['node']->field_issue_title[LANGUAGE_NONE][0]['value']));
    }
    else {
        $title = $form_state['node']->title;
    }
    $content_type = ucwords($form_state['node']->type);
    drupal_set_message(t($content_type . ' <strong>' . $title . '</strong> has been ' . $op));
}

/**
 * Custom submit callback for redirecting breaking news form.
 */
function itg_msi_issue_form_custom_submit_callback($form, &$form_state) {
    if (isset($_SESSION['messages']['status'])) {
        unset($_SESSION['messages']['status']);
    }

    if (arg(2) == 'edit') {
        $op = 'updated.';
    }
    else {
        $op = 'created.';
    }

    if ($form_state['node']->type == 'issue') {
        $title = date('d/m/Y', strtotime($form_state['node']->field_issue_title[LANGUAGE_NONE][0]['value']));
    }
    else {
        $title = $form_state['node']->title;
    }
    $content_type = ucwords($form_state['node']->type);
    drupal_set_message(t($content_type . ' <strong>' . $title . '</strong> has been ' . $op));
}

/**
 * After build function for magazine, supplement and issue
 * @param Array $form
 * @param Array $form_state
 * @return Array
 */
function itg_msi_form_after_build($form, &$form_state) {
    global $user, $base_url;
    $form['original_image_fids'] = array(
        '#type' => 'hidden',
        '#value' => $form_state['input']['original_image_fids'],
        '#attributes' => array('id' => 'original_image_fids', 'name' => 'original_image_fids'),
    );
    //Extract type of node
    if (arg(0) == 'node') {
        if (arg(1) == 'add') {
            $type = arg(2);
            $nid = '';
        }
        else {
            $node = node_load(arg(1));
            $type = $node->type;
            $nid = arg(1);
        }
    }

    //Array used in itg_msi.js
    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;
    $settings['type'] = ucfirst($type);
    $settings['nid'] = $nid;

    drupal_add_js(array('itg_msi' => array('settings' => $settings)), array('type' => 'setting'));

    //Add JS for magazine, supplement and issue
    drupal_add_js(drupal_get_path('module', 'itg_msi') . '/js/itg_msi.js', array('weight' => 1, 'scope' => 'footer'));

    //Unset metatag description
    unset($form['metatags']['intro_text']['#markup']);
    unset($form['metatags'][LANGUAGE_NONE]['basic']['#title']);
    unset($form['metatags'][LANGUAGE_NONE]['basic']['#description']);

    unset($form['field_supp_import_xml'][LANGUAGE_NONE]['#file_upload_title']);
    unset($form['field_field_issue_import_xml'][LANGUAGE_NONE]['#file_upload_title']);

    return $form;
}

/**
 * Implement hook_form_id_alter
 * @param Array $form
 * @param Array $form_state
 * @param Array $form_id
 */
function itg_msi_form_issue_node_form_alter(&$form, &$form_state, $form_id) {

    $magazine_field = 'field_issue_magazine';
    $supplement_field = 'field_issue_supplement';

    // Set magazine on edit and trigger action
    if (isset($form[$magazine_field]['und']['#default_value'][0]) && !isset($form_state['triggering_element'])) {
        $magazine_id = $form[$magazine_field]['und']['#default_value'][0];
    }
    else {
        $magazine_id = $form_state['input'][$magazine_field][LANGUAGE_NONE];
    }

    // Add ajax on magazine field 
    $form[$magazine_field][LANGUAGE_NONE]['#ajax'] = array(
        'event' => 'change',
        'callback' => 'itg_msi_magazine_ajax_callback',
        'wrapper' => $supplement_field . '_replace',
    );

    // Setup supplement select
    $form[$supplement_field][LANGUAGE_NONE]['#prefix'] = '<div id="' . $supplement_field . '_replace">';
    $form[$supplement_field][LANGUAGE_NONE]['#suffix'] = '</div>';
    if (function_exists('itg_common_dropdown_supplement')) {
        $form[$supplement_field][LANGUAGE_NONE]['#options'] = itg_common_dropdown_supplement($magazine_id);
    }
}

/**
 * Ajax callback for supplement
 * @param Array $form
 * @param Array $form_state
 */
function itg_msi_magazine_ajax_callback($form, $form_state) {
    return $form['field_issue_supplement'];
}

/* * *****************************View Related hooks**************************** */

/**
 * Implement hook_views_pre_render
 * @param Object $view
 */
function itg_msi_views_pre_render(&$view) {
    //Add "Create Magazine" button on listing page of magazine
    if ($view->name == "manage_magazines") {
        $header_content_magazine = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
        $header_content_magazine .= '<a href="./node/add/magazine">Create Magazine</a>';
        $view->attachment_before = $header_content_magazine;
    }

    //Add "Create Supplement" button on listing page of supplement
    if ($view->name == "manage_supplements") {
        $header_content_supplement = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
        $header_content_supplement .= '<a href="./node/add/supplement">Create Supplement</a>';
        $view->attachment_before = $header_content_supplement;
    }

    //Add "Create Issue" button on listing page of issue
    if ($view->name == "manage_issues") {
        drupal_add_js(drupal_get_path('module', 'jquery_update') . '/replace/ui/ui/minified/jquery.ui.datepicker.min.js', array('scope' => 'footer'));
        $header_content_issue = '<a href="/admin/config/show_web_exclusive">Show Web Exclusive</a>';
        $header_content_issue .= '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
        $header_content_issue .= '<a href="./node/add/issue">Create Issue</a>';
        $view->attachment_before = $header_content_issue;
    }

    if ($view->name == "magazine_top_story") {
        foreach ($view->result as $magazine_top_story) {
            if (function_exists(itg_msi_get_lock_story_status)) {
                $lock_story = itg_msi_get_lock_story_status($magazine_top_story->nid, 'lock_story');
            }
            if (!empty($lock_story)) {
                $magazine_top_story->field_field_story_extra_large_image[0]['rendered']['#path']['path'] = 'http://subscriptions.intoday.in/subscriptions/itoday/ite_offer_mailer.jsp?source=ITHomepage';
            }
        }
    }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * @param Array $form
 * @param Array $form_state
 * @param String $form_id
 */
function itg_msi_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

    if ($form['#id'] == 'views-exposed-form-manage-magazines-page' || $form['#id'] == 'views-exposed-form-manage-supplements-page') {
        if ($form_state['view']->name == 'manage_magazines') {
            $type = 'magazine';
        }
        if ($form_state['view']->name == 'manage_supplements') {
            $type = 'supplement';
        }
        //Call function autocomplete to show matching titles
        $form['title']['#autocomplete_path'] = 'content-title-list/' . $type . '/autocomplete';
        $form['title']['#attributes'] = array('placeholder' => t('Title'));
    }


    //Add aotocomplete on issue title
    if ($form['#id'] == 'views-exposed-form-manage-issues-page') {        

        if ($form_state['view']->name == 'manage_issues') {
            $type = 'issue';
        }
        
        $form['title']['#autocomplete_path'] = 'content/' . $type . '/autocomplete';
        $form['field_issue_title_value']['value']['#attributes'] = array('placeholder' => t('Title'));
    }
    if ($form['#id'] == 'views-exposed-form-issue-listing-page-1') {
        $form['title']['#attributes'] = array('placeholder' => t('Title'));
        $form['nid']['#attributes'] = array('placeholder' => t('Nid'));
    }
    if ($form['#id'] == 'views-exposed-form-supplement-listing-page-1') {
        $form['title']['#attributes'] = array('placeholder' => t('Title'));
        $form['nid']['#attributes'] = array('placeholder' => t('Nid'));
    }
    if ($form['#id'] == "views-exposed-form-category-of-stroy-base-magazin-widget-issue-category-magazin-widget") {
        $form['field_story_issue_date_value']['value']['#date_format'] = 'd-m-Y';
    }
    if ($form['#id'] == "views-exposed-form-category-of-stroy-base-magazin-widget-issue-magazin-widget-list") {
        $form['field_story_issue_date_value']['value']['#date_format'] = 'd-m-Y';
    }
    if ($form['#id'] == 'views-exposed-form-supplement-base-magazin-widget-supplement-base-magazin-widget') {
        $form['field_story_issue_date_value']['value']['#date_format'] = 'd-m-Y';
    }
    if ($form['#id'] == 'views-exposed-form-supplement-base-magazin-widget-supplement-base-magazin-widget-list') {
        $form['field_story_issue_date_value']['value']['#date_format'] = 'd-m-Y';
    }
}

/* * *****************************Node Related hooks**************************** */

/**
 * Implement hook_node_view
 * @param object $node
 * @param string $view_mode
 * @param string $langcode
 */
function itg_msi_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'issue' && $view_mode != 'search_index') {
      drupal_set_title(date('d/m/Y', strtotime($node->title)));
  }
}

/**
 * Implement hook_node_access
 * @param object $node
 * @param string $op
 * @param array $account
 * @return string
 */
function itg_msi_node_access($node, $op, $account) {
    // We're only bothered about the 'view' operation at the moment
    if ($op == 'view') {
        // If the user has access to our new permission, let 'em at it
        if (user_access('custom view unpublished content', $account)) {
            return NODE_ACCESS_ALLOW;
        }
    }

    // For everything else let the system decide.
    return NODE_ACCESS_IGNORE;
}

/**
 * Implement hook_node_insert
 * @param Object $node
 */
function itg_msi_node_insert($node) {
    switch ($node->type) {
        case 'supplement':
            module_load_include('inc', 'itg_msi', 'create_issue_xml');
            _create_issue_using_xmlfile($node, 'insert');
            break;

        case 'issue':
            module_load_include('inc', 'itg_msi', 'create_issue_xml');
            _create_issue_using_xmlfile($node, 'insert');
            break;

        default:
            break;
    }
}

/**
 * Implement hook_node_update
 * @param Object $node
 */
function itg_msi_node_update($node) {
    switch ($node->type) {
        case 'supplement':
            module_load_include('inc', 'itg_msi', 'create_issue_xml');
            _create_issue_using_xmlfile($node, 'update');
            break;

        case 'issue':
            module_load_include('inc', 'itg_msi', 'create_issue_xml');
            _create_issue_using_xmlfile($node, 'update');
            break;

        default:
            break;
    }
}

/**
 * Implement hook_node_presave
 * @param Object $node
 */
function itg_msi_node_presave($node) {

    //Publish/Unpublish functionality for supplement
    if ($node->type == 'supplement') {
        if ($node->is_new == 1) {
            $node->status = $node->field_supp_publish[LANGUAGE_NONE][0]['value'];
        }
        else {
            $publish = $node->field_supp_publish[LANGUAGE_NONE][0]['value'] ? 1 : 0;
            $node->status = $publish;
            field_attach_update('node', $node);
        }
    }

    //Publish/Unpublish functionality for magazine
    if ($node->type == 'magazine') {
        if ($node->is_new == 1) {
            $node->status = $node->field_magazine_publish[LANGUAGE_NONE][0]['value'];
        }
        else {
            $publish = $node->field_magazine_publish[LANGUAGE_NONE][0]['value'] ? 1 : 0;
            $node->status = $publish;
            field_attach_update('node', $node);
        }
    }
    //Set date in title
    if ($node->type == 'issue') {
      $node->title = $node->field_issue_title[LANGUAGE_NONE][0]['value'];
      if ($node->is_new == 1) {
        $node->status = $node->field_issue_publish[LANGUAGE_NONE][0]['value'];
      }
      else {
        $publish = $node->field_issue_publish[LANGUAGE_NONE][0]['value'] ? 1 : 0;
        $node->status = $publish;
        field_attach_update('node', $node);
      }
    }
}

/**
 * Implement hook_node_validate
 * @param Object $node
 * @param Array $form
 * @param Array $form_state
 */
function itg_msi_node_validate($node, $form, &$form_state) {

    if ($node->type == 'magazine' || $node->type == 'supplement') { // Validate duplicacy on titles for magazine and supplement
        $title = $form_state['values']['title'];
        if (isset($node->nid)) {
            $results = db_select('node')->fields('node', array('title'))->condition('title', $title, '=')->condition('type', $node->type)->condition('nid', $node->nid, '!=')->execute();
        }
        else {
            $results = db_select('node')->fields('node', array('title'))->condition('title', $title, '=')->condition('type', $node->type)->execute();
        }

        $matches = array();
        foreach ($results as $result) {
            $matches[$result->title] = check_plain($result->title);
        }

        //Set error for duplicacy
        if (isset($matches) && !empty($matches)) {
            form_set_error('title', t('@contenttype title <strong>@contenttitle</strong> is already exist.', array('@contenttype' => ucfirst($node->type), '@contenttitle' => $title)));

            //Change message order for type "Magazine"
            if ($node->type == 'magazine') {
                $message_arr = $_SESSION['messages']['error'];
                $message_arr_new = array($message_arr[1], $message_arr[0]);
                $_SESSION['messages']['error'] = $message_arr_new;
            }
        }

        if ($node->type == 'supplement') {
            //If issue is already exist, throw an error
            $is_issue_exist = itg_msi_check_for_issue_existence($node, 'supplement');
            if (!$is_issue_exist) {
                form_set_error('field_supp_issue', t('This issue doesn\'t exist. Please select another issue to map supplement.'));
            }
        }
    }

    //Case: Issue creation (If issue is already exist, throw an error) 
  if ($node->type == 'issue') {
    if (arg(2) == 'edit') {
      $is_issue_exist = itg_msi_check_for_issue_existence($node, 'issue', arg(1));
    }
    else {
      $is_issue_exist = itg_msi_check_for_issue_existence($node, 'issue', NULL);
    }

    if ($is_issue_exist) {
      form_set_error('field_supp_issue', t('This issue is already exist.'));
    }

    if (!empty($node->field_field_issue_import_xml)) {
      foreach ($node->field_field_issue_import_xml[LANGUAGE_NONE] as $f_key => $f_val_arr) {
        $file_name_arr[] = file_load($f_val_arr['fid'])->filename;
      }
      $file_arr = array_count_values($file_name_arr);
      $i = 11;
      foreach ($file_arr as $file_name => $times) {
        if ($times > 1) {
          form_set_error('field_field_issue_import_xml'.$i, t('FileName <strong>@filename</strong> is being uploaded @times times. Please upload single file once.', array('@filename' => $file_name, '@times' => $times)));
        }
        $i++;
      }
    }
  }

  // Validate XML 
    if ($node->type == 'issue' || $node->type == 'supplement') {

        if ($node->type == 'supplement') {
            $file = $node->field_supp_import_xml[LANGUAGE_NONE];
            $field = 'field_supp_import_xml';
        }

        if ($node->type == 'issue') {
            $file = $node->field_field_issue_import_xml[LANGUAGE_NONE];
            $field = 'field_field_issue_import_xml';
        }

        foreach ($file as $result) {
            $xml_file = file_load($result['fid']);

            $fileuri = file_create_url($xml_file->uri);
            $xml = simplexml_load_file($fileuri, 'SimpleXMLElement', LIBXML_NOCDATA);

            if (!empty($xml)) {
                //Get XML unique UID
                foreach ($xml->attributes() as $key => $value) {
                    $xml_uid = $value;
                }
                // get issue data from xml file:-
                $xml_issue_date = str_replace('/', '-', trim($xml->IssueDate));
                $xm_issue_date_timestamp = date('Y-m-d 00:00:00', strtotime($xml_issue_date));
                // Get issue date from node
                if ($node->type == 'supplement') {
                    $issue_date = $node->field_supp_issue[LANGUAGE_NONE][0]['value'];
                    $node_supplement_name = $node->title;
                }
                elseif ($node->type == 'issue') {
                    $node_supplement_name_for_issue = array();
                    $issue_date = $node->field_issue_title[LANGUAGE_NONE][0]['value'];
                    foreach($node->field_issue_supplement[LANGUAGE_NONE] as $key=> $supplement) {
                      $node_supplement_id = $node->field_issue_supplement[LANGUAGE_NONE][$key]['target_id'];
                      if (!empty($node_supplement_id)) {
                          $node_supplement_name_for_issue[] = itg_msi_get_supplement_name($node_supplement_id);
                      }
                    }
                }
                if (!empty($issue_date)) {
                    $node_issue_date = date('Y-m-d 00:00:00', strtotime($issue_date));
                }
                // Get supplement
                $xml_supplement = trim((string) $xml->Supplement);

                //Get City
                $city = trim($xml->City);
                $city_tid = itg_msi_get_term_from_name($city, 'city');

                //Get Parent Category
                $section = trim($xml->Section);
                $section_tid = itg_msi_get_term_from_name($section, 'category_management');


                //Get kicker, headline, byline and body from this array($xml_other)
                foreach ($xml as $key => $value) {
                    $xml_other[strtolower($key)] = $value;
                }

                $byline = trim($xml_other['byline']->p);
                $byline_id = itg_msi_get_nid_using_title_type(trim($xml_other['byline']->p), 'reporter');

                $headline = htmlentities(strip_tags(trim(preg_replace('/\s+/', ' ', $xml_other['headline']->p))));

                //Add check for required fields

                if (empty($xml_supplement) && ($node->type != 'issue')) { // empty supplement in file
                    form_set_error($field . '10' . $result['fid'], t('No Supplement found in the file <strong>@xmlfilename</strong>. Please upload file with correct Supplement and try again.', array('@xmlfilename' => $xml_file->filename)));
                }
                elseif ((!empty($xml_supplement) && itg_msi_exist_supplement($xml_supplement) == 0) && ($node_supplement_name != $xml_supplement) && (($node->type != 'issue'))) {
                    form_set_error($field . '10' . $result['fid'], t('Supplement in the file <strong>@xmlfilename</strong> is not exists in system. Please upload file with correct Supplement and try again.', array('@xmlfilename' => $xml_file->filename)));
                }                

                if ($node_issue_date != $xm_issue_date_timestamp) { // Xml file issue date is not equal to node issue date.
                    form_set_error($field . '9' . $result['fid'], t('No Date found in the file <strong>@xmlfilename</strong>. Please upload file with correct IssueDate and try again.', array('@xmlfilename' => $xml_file->filename)));
                }
                
                if (empty($section)) {
                    form_set_error($field . '4' . $result['fid'], t('No section found in the file <strong>@xmlfilename</strong>. Please upload file with section and try again.', array('@xmlfilename' => $xml_file->filename)));
                }
                if (empty($section_tid) && !empty($section)) {
                    form_set_error($field . '5' . $result['fid'], t('Section <strong>@sectionname</strong> in the file @xmlfilename doesn\'t exist in our database. Please choose another section and try again.', array('@sectionname' => $section, '@xmlfilename' => $xml_file->filename)));
                }
                
                if (empty($headline) || $headline == 'NA') {
                    form_set_error($field . '8' . $result['fid'], t('No story headline found in the file <strong>@xmlfilename</strong>. Please upload file with story headline and try again.', array('@xmlfilename' => $xml_file->filename)));
                }
            }
            else {
                if ($xml_file->uri) {
                    form_set_error($field, t('File <strong>@xmlfilename</strong> is a invalid xml file. Please try with another file.', array('@xmlfilename' => $xml_file->filename)));
                }
            }
        }
    }
}

/**
 * Implements function for get node title
 */
function itg_msi_get_supplement_name($supp_id) {
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->condition('n.nid', $supp_id, '=');
    $query->condition('n.type', 'supplement', '=');
    $result = $query->execute()->fetchField();
    return $result;
}

/**
 * Implements function for check exist supplement
 * @param string $xml_supplement
 */
function itg_msi_exist_supplement($xml_supplement) {
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->condition('n.title', '%' . db_like($xml_supplement) . '%', 'LIKE');
    //$query->condition('n.status', 1, '=');
    $query->condition('n.type', 'supplement', '=');
    $result = $query->execute()->fetchField();
    if (!empty($result)) {
        return 1;
    }
    else {
        return 0;
    }
}

/* * ************************Common Functionality******************************* */

/**
 * Redirect node to their manage pages after node creation
 * @param Array $form
 * @param Array $form_state
 */
function _submit_handler_for_redirect($form, &$form_state) {

    unset($_GET['destination']); // Unset destination

    switch ($form['#form_id']) {
        case 'magazine_node_form':
            $form_state['redirect'] = 'manage-magazines';
            break;

        case 'supplement_node_form':
            $form_state['redirect'] = 'manage-supplements';
            break;

        case 'issue_node_form':
            $form_state['redirect'] = 'manage-issues';
            break;
    }
}

/**
 * Get tid using term name and vocubulary name
 * @param String $term_name
 * @param String $vocabulary_name
 * @return Integer
 */
function itg_msi_get_term_from_name($term_name, $vocabulary_name) {
    $arr_terms = array_values(taxonomy_get_term_by_name($term_name, $vocabulary_name));
    $tid = $arr_terms[0]->tid;
    return $tid;
}

/**
 * Get nid of a node using title and type
 * @param String $title
 * @param String $type
 * @return Int $nid
 */
function itg_msi_get_nid_using_title_type($title, $type) {
    $entity_arr = entity_load('node', array(), array('type' => $type, 'title' => $title));
    foreach ($entity_arr as $key => $val) {
        $nid = $entity_arr[$key]->nid;
    }
    return $nid;
}

/**
 * Check issue existence, if yes return TRUE else FALSE
 * @param Object $node
 * @return boolean
 */
function itg_msi_check_for_issue_existence($node, $type, $nid = NULL) {

    if ($type == 'supplement') {
        $issue_title = $node->field_supp_issue[LANGUAGE_NONE][0]['value'];
    }
    else {
        $issue_title = $node->field_issue_title[LANGUAGE_NONE][0]['value'];
    }

    if (!empty($nid)) {
        $result = db_select('field_data_field_issue_title', 'it')
                ->fields('it', array('entity_id'))
                ->condition('field_issue_title_value', db_like($issue_title) . '%', 'LIKE')
                ->condition('entity_id', $nid, '!=')
                ->execute()
                ->fetchAssoc();
    }
    else {
        $result = db_select('field_data_field_issue_title', 'it')
                ->fields('it', array('entity_id'))
                ->condition('field_issue_title_value', db_like($issue_title) . '%', 'LIKE')
                ->execute()
                ->fetchAssoc();
    }
    if ($result['entity_id']) {
        return TRUE; //Return TRUE if issue is already exist with same name
    }
    else {
        return FALSE;
    }
}

/**
 * Used in views: Manage issues and Manage Supplements
 * List of mapped stories with supplements
 * @param Object $row
 * @return String
 */
function itg_msi_show_mapped_stories($row) {
    $result = db_select('field_data_field_story_select_supplement', 'si')
            ->fields('si', array('entity_id'))
            ->condition('field_story_select_supplement_target_id', $row->nid, '=')
            ->execute();
    while ($record = $result->fetchAssoc()) {
        $entity_id[] = $record['entity_id'];
    }
    $count = count($entity_id);
    $text = 'List Stories(' . $count . ')';
    $path = 'supplement-listing/' . $row->type . '/' . $row->nid;

    //Prepare link for list associated stoies to this node
    if ($count < 1) {
        return $text;
    }
    else {
        return l($text, $path, array('attributes' => array('target' => '_blank')));
    }
}

/**
 * Used in views: Manage issues and Manage Supplements
 * List of mapped stories with issue
 * @param Object $row
 * @return String
 */
function itg_msi_show_issue_mapped_stories($row) {
    $subQuery = db_select('field_data_field_issue_title', 'issue_title')
            ->fields('issue_title', array('field_issue_title_value'))
            ->condition('issue_title.entity_id', $row->nid, '=')
            ->condition('issue_title.bundle', 'issue', '=');
    $query = db_select('field_data_field_story_issue_date', 'issue_date_story');
    $query->fields('issue_date_story', array('entity_id'));
    $query->condition('issue_date_story.field_story_issue_date_value', $subQuery, 'IN');
    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
        $entity_id[] = $record['entity_id'];
    }
    $count = count($entity_id);
    $text = 'List Stories(' . $count . ')';
    $path = 'issue-listing/' . $row->type . '/' . $row->nid;

    //Prepare link for list associated stoies to this node
    if ($count < 1) {
        return $text;
    }
    else {
        return l($text, $path, array('attributes' => array('target' => '_blank')));
    }
}

/**
 * Implements function return nid of issue and supplement
 * @param int $nid
 * @param string $type
 */
function itg_msi_return_date_val($nid) {
    $query = db_select('field_data_field_issue_title', 'issue_title')
            ->fields('issue_title', array('field_issue_title_value'))
            ->condition('issue_title.entity_id', $nid, '=')
            ->condition('issue_title.bundle', 'issue', '=');
    $results = $query->execute()->fetchField();
    $result = explode(' 00:', $results);
    return $result[0];
}

/**
 * Get fids of files associated with a node
 * @return Array
 */
function itg_msi_get_associated_fid_node($node, $xml_uid) {

    if ($xml_uid) {
        $result = db_select('itg_msi_node_xml', 'fn')
                ->fields('fn', array('fid'))
                ->condition('nid', $node->nid, '=')
                ->condition('xml_uid', $xml_uid, '=')
                ->execute();
    }
    else {
        $result = db_select('itg_msi_node_xml', 'fn')
                ->fields('fn', array('fid'))
                ->condition('nid', $node->nid, '=')
                ->execute();
    }

    while ($record = $result->fetchAssoc()) {
        $fid[] = $record['fid'];
    }
    return $fid;
}

/**
 * Implements hook_block_info()
 * {@inheritdoc}
 */
function itg_msi_block_info() {
    $blocks['magazine_calendar'] = array(
        'info' => t('Magazine Calendar Block'),
    );
    return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_msi_block_view($delta = '') {
    global $user;
    $block = array();
    $data = itg_msi_calendar_data();
    switch ($delta) {
        case 'magazine_calendar':
            $block['content'] = theme('magazine_calendar_template_block', array('data' => $data));
            break;
    }

    return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_msi_theme($existing, $type, $theme, $path) {
    $themes = array(
        'magazine_calendar_template_block' => array(
            'template' => 'magazine-calendar-template',
            'path' => drupal_get_path('module', 'itg_msi') . '/templates',
            'variables' => array('data' => NULL),
        ),
         'magazine' => array(
            'render element' => 'elements',
            'template' => 'magazine',
            'path' => drupal_get_path('module', 'itg_msi') . '/templates',
        ),
    );
    return $themes;
}

/**
 * Implements function for get years for calendar on magazine
 * @return array
 */
function itg_msi_calendar_data() {
    $cur_year = date('Y', strtotime('+15 days'));
    $years = $cur_year - 1975;
    for ($i = 0; $i <= $years; $i++) {
        $output_year[] = $cur_year--;
    }
    return $output_year;
}

/**
 * Implement function for get last issue of year in calander
 */
function itg_msi_last_issue_calendar($current_year) {
  $present_date = date('Y-m-d', time());
  $query = db_select('node', 'n');
  $query->fields('ft', array('field_issue_title_value'));
  $query->leftJoin('field_data_field_issue_title', 'ft', 'ft.entity_id = n.nid');
  $query->condition('ft.field_issue_title_value', '%' . db_like($current_year) . '%', 'LIKE');
  //$query->condition('ft.field_issue_title_value', $present_date, '<');
  $query->orderBy('ft.field_issue_title_value', 'DESC');
  $query->condition('n.type', 'issue', '=');
  $query->condition('n.status', 1, '=');
  $query->range(0, 1);
  $output = $query->execute()->fetchField();
  $result = strtotime($output);
  return date('d-m-Y', $result);
}

/**
 * Implements function for get current or running issue date in view
 * @return string
 */
function itg_msi_last_week_issue() {
    if((arg(0) == 'magazine') && empty(arg(1))){
      $output = itg_msi_get_current_issue();
    }
    elseif ((arg(0) == 'magazine') && !empty(arg(1))) {
        if(itg_msi_validate_date(arg(1), 'd-m-Y')) {
          $issue_date_time = strtotime(arg(1));
          $issue_date = date('Y-m-d', $issue_date_time);
        }else{
          $issue_date = date('Y-m-d', time());
        }
        $output = $issue_date.' 00:00:00';
//        $query = db_select('field_data_field_issue_title', 'ft');
//        $query->fields('ft', array('field_issue_title_value'));
//        $query->condition('ft.field_issue_title_value', '%' . db_like($issue_date) . '%', 'LIKE');
//        $query->orderBy('ft.field_issue_title_value', 'DESC');
//        //$query->range(0, 1);
//        $output = $query->execute()->fetchField();
    }
    $result = explode(' 00:', $output);
    return $result[0];
}

/**
 * Implement function for check date
 * @param str $date
 * @param str $format
 * @return bool
 */
function itg_msi_validate_date($date, $format = 'Y-m-d H:i:s')
{
    $d = DateTime::createFromFormat($format, $date);
    return $d && $d->format($format) == $date;
}

/**
 * Implements function for get next upcoming issue
 * @return string
 */
function itg_msi_next_week_issue() {
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_issue_title', 'ft', 'ft.entity_id = n.nid');
    $query->fields('ft', array('field_issue_title_value'));
    $query->orderBy('ft.field_issue_title_value', 'DESC');
    $query->condition('n.type', 'issue', '=');
    $query->condition('n.status', 1, '=');
    $query->range(0, 1);
    $result = strtotime($query->execute()->fetchField());
    $cur_year = strtotime("+7 day", $result);
    $date_format_result = format_date($cur_year, $type = 'itg', $format = '', $timezone = NULL, $langcode = NULL);
    return $date_format_result;
}

/**
 * Implements function for itg_msi_issue_attribute_date
 * @return string
 */
function itg_msi_issue_attribute_date() {
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_issue_title', 'ft', 'ft.entity_id = n.nid');
    $query->fields('ft', array('field_issue_title_value'));
    $query->orderBy('ft.field_issue_title_value', 'DESC');
    $query->condition('n.type', 'issue', '=');
    $query->condition('n.status', 1, '=');
    $query->range(0, 1);
    $result = strtotime($query->execute()->fetchField());
    $result = $query->execute()->fetchField();
    return $result;
}

/**
 * Implements function for get current date issue.
 * @return string
 */
function itg_msi_get_current_time_issue() {
  $year_15_days_ago = date('Y', strtotime('+15 days'));
  $result = '';
  if ($year_15_days_ago == date('Y')) {
    $year_arr = !empty(arg(1)) ? explode('-', arg(1)) : '';
    $current_time = !empty($year_arr[2]) ? $year_arr[2] : date('Y-m-d', time());
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_issue_title', 'ft', 'ft.entity_id = n.nid');
    $query->fields('ft', array('field_issue_title_value'));
    $query->condition('ft.field_issue_title_value', $current_time, '=');
    $query->condition('n.type', 'issue', '=');
    $query->condition('n.status', 1, '=');
    $result = $query->execute()->fetchField();
  }
  return $result;
}

/**
 * Implements hook_views_query_alter()
 * {@inheritdoc}
 */
function itg_msi_views_query_alter(&$view, &$query) {
  if ($view->name == 'latest_issue_magzine' && $view->current_display == 'page') {
    $query->where[1]['conditions'][2]['value'][':field_data_field_issue_title_field_issue_title_value'] = itg_msi_last_week_issue();
  }
  if ($view->name == 'magazine_top_story' && $view->current_display == 'block') {
    /*$issue_date = $query->where[0]['conditions'][0]['value'][':field_data_field_story_issue_date_field_story_issue_date_value4'];
    $chk_wid_val = itg_msi_check_magazine_widget($issue_date);
    if (empty($chk_wid_val)) {
      unset($query->where[1]['conditions'][4]);
      unset($query->orderby[0]);
    }*/
  }
  elseif ($view->name == 'magazine_top_story' && $view->current_display == 'block_3') {
    $year_arr = !empty(arg(1)) ? arg(1) : '';
    if (empty($year_arr)) {
      $year = itg_msi_issue_attribute_date();
      $issue_date = strip_tags(date('Y-m-d', strtotime($year)));
    }
    else {
      $issue_date = strip_tags(date('Y-m-d', strtotime($year_arr)));
    }
    $chk_wid_val = itg_msi_check_magazine_widget($issue_date);
    if (empty($chk_wid_val)) {
      unset($query->where[1]['conditions'][4]);
      unset($query->orderby[0]);
    }
  }
  elseif ($view->name == 'magazine_top_story' && $view->current_display == 'block_1') {
    /*$issue_date = $query->where[0]['conditions'][0]['value'][':field_data_field_story_issue_date_field_story_issue_date_value2'];
    $chk_wid_val = itg_msi_check_magazine_widget($issue_date);
    if (!empty($chk_wid_val)) {
      unset($query->orderby[1]);
    }
    else {
      unset($query->where[1]['conditions'][4]);
      unset($query->orderby[0]);
    }*/
  }
  elseif ($view->name == 'magazine_top_story' && $view->current_display == 'block_2') {
    $year_arr = !empty(arg(1)) ? arg(1) : '';
    if (empty($year_arr)) {
      $year = itg_msi_issue_attribute_date();
      $issue_date = strip_tags(date('Y-m-d', strtotime($year)));
    }
    else {
      $issue_date = strip_tags(date('Y-m-d', strtotime($year_arr)));
    }
    $chk_wid_val = itg_msi_check_magazine_widget($issue_date);
    if (!empty($chk_wid_val)) {
      unset($query->orderby[1]);
    }
    else {
      unset($query->where[1]['conditions'][4]);
      unset($query->orderby[0]);
    }
  }
  if ($view->name == 'issue_listing' && $view->current_display == 'page_1') {
    $arg = arg();
    if (function_exists('itg_msi_return_date_val')) {
      $value = itg_msi_return_date_val(arg(2));
    }
    $query->where[0]['conditions'][0]['value'][':field_data_field_story_issue_date_field_story_issue_date_value'] = $value;
    $query->where[0]['conditions'][0]['value'][':field_data_field_story_issue_date_field_story_issue_date_value1'] = $value;
  }
  if ($view->name == 'supplement_listing' && $view->current_display == 'page_1') {
    $value = arg(2);
    $query->where[0]['conditions'][0]['value'][':field_data_field_story_select_supplement_field_story_select_supplement_target_id'] = $value;
  }
}

/**
 * Implement function for check widget exist
 */
function itg_msi_check_magazine_widget($issue_date) {
    $query = db_select('itg_widget_order', 'iwo');
    $query->fields('iwo', array('nid'));
    $query->condition('widget', 'issue_magazin_widget', '=');
    $query->condition('extra', $issue_date, '=');
    $result = $query->execute()->fetchAll();
    return $result;
}

/**
 * Implements function for get current issue date.
 * @return string
 */
function itg_msi_get_current_issue() {
  //$current_issue = itg_msi_get_current_time_issue();
  $current_issue = itg_msi_issue_attribute_date();
  if (!empty($current_issue)) {
    $output = $current_issue;
  }
  else {
    $year_15_days_ago = date('Y', strtotime('+15 days'));
    if ($year_15_days_ago > date('Y')) {
      $last_issue_ass_story_date = itg_msi_issue_attribute_date();
      $current_time = date('Y-m-d', strtotime($last_issue_ass_story_date));
      $condition_type = '=';
    }
    else {
      $cur_year = !empty(arg(1)) ? arg(1) : '';
      if (arg(0) != 'magazine' && !empty($cur_year)) {
        $current_time = date('Y-m-d', strtotime(date($cur_year)));
      }
      else {
        $current_time = date('Y-m-d', time());
      }
      $condition_type = '<';
    }
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_issue_title', 'ft', 'ft.entity_id = n.nid');
    $query->fields('ft', array('field_issue_title_value'));
    $query->condition('ft.field_issue_title_value', $current_time, $condition_type);
    $query->orderBy('ft.field_issue_title_value', 'DESC');
    $query->condition('n.type', 'issue', '=');
    $query->condition('n.status', 1, '=');
    $query->range(0, 1);
    $output = $query->execute()->fetchField();
  }
  return $output;
}

/**
 * Implement function for get issue based story according category on magazine page
 * @param string $issue_date
 * @return array
 */
function itg_msi_issue_category_data($issue_date, $extract_nids = array()) {
  $time = strtotime($issue_date);
  $issue_date_cat = date('d-m-Y', $time);
  $query = db_select('itg_widget_order', 'itg_order');
  $query->fields('itg_order', array('cat_id'));
  $query->condition('itg_order.extra', '%' . db_like($issue_date_cat) . '%', 'LIKE');
  $query->condition('itg_order.widget', 'issue_primary_category_magazin_widget', '=');
  $query->orderBy('itg_order.weight', ASC);
  $results = $query->execute()->fetchAll();
  if (!empty($results)) {
    foreach ($results as $value) {
      $cat_id = $value->cat_id;
      $query = db_select('node', 'n');
      $query->join('field_data_field_story_issue_date', 'issue_date', 'n.nid = issue_date.entity_id');
      $query->join('field_data_field_primary_category', 'story_section', 'n.nid = story_section.entity_id');
      $query->join('taxonomy_term_data', 'term_name', 'story_section.field_primary_category_value = term_name.tid');
      $query->join('itg_widget_order', 'itg_order', 'n.nid = itg_order.nid');
      $query->leftJoin('field_data_field_story_extra_large_image', 'story_large_image', 'n.nid = story_large_image.entity_id');
      $query->leftJoin('file_managed', 'f_managed', 'f_managed.fid = story_large_image.field_story_extra_large_image_fid');
      $query->leftJoin('field_data_field_story_short_headline', 'fssh', 'n.nid = fssh.entity_id');
      $query->fields('fssh', array('field_story_short_headline_value'));
      $query->fields('n', array('nid', 'title', 'status'));
      $query->fields('f_managed', array('fid', 'uri'));
      $query->fields('term_name', array('name'));
      $query->condition('story_section.bundle', 'story', '=');
      $query->condition(db_or()->isnotNull('issue_date.field_story_issue_date_value'));
      $query->condition('issue_date.field_story_issue_date_value', '%' . db_like($issue_date) . '%', 'LIKE');
      $query->condition('story_section.field_primary_category_value', $cat_id);
      $query->condition('itg_order.widget', 'section_wise_widget', '=');
      $query->condition('n.status', 1, '=');
      $query->orderBy('itg_order.weight', DESC);
      $query->orderBy('n.nid', DESC);
      $results = $query->execute();
      foreach ($results as $value) {
        $result[$cat_id][] = $value;
      }
    }
  }
  else {
    $query = db_select('node', 'n');
    $query->join('field_data_field_story_issue_date', 'issue_date', 'n.nid = issue_date.entity_id');
    $query->join('field_data_field_primary_category', 'story_section', 'n.nid = story_section.entity_id');
    $query->join('itg_widget_order', 'itg_order', 'n.nid = itg_order.nid');
    $query->join('taxonomy_term_data', 'term_name', 'story_section.field_primary_category_value = term_name.tid');
    $query->leftJoin('field_data_field_story_extra_large_image', 'story_large_image', 'n.nid = story_large_image.entity_id');
    $query->leftJoin('file_managed', 'f_managed', 'f_managed.fid = story_large_image.field_story_extra_large_image_fid');
    $query->leftJoin('field_data_field_story_short_headline', 'fssh', 'n.nid = fssh.entity_id');
    $query->fields('fssh', array('field_story_short_headline_value'));
    $query->fields('n', array('nid', 'title', 'status'));
    $query->fields('issue_date', array('field_story_issue_date_value'));
    $query->fields('f_managed', array('fid', 'uri'));
    $query->fields('story_section', array('field_primary_category_value'));
    $query->fields('term_name', array('name'));
    $query->condition(db_or()->isnotNull('issue_date.field_story_issue_date_value'));
    $query->condition('issue_date.field_story_issue_date_value', '%' . db_like($issue_date) . '%', 'LIKE');
    $query->condition('story_section.bundle', 'story', '=');
    $query->condition('n.status', 1, '=');
    $query->condition('itg_order.widget', 'section_wise_widget', '=');
    $query->orderBy('itg_order.weight', DESC);
    $query->orderBy('n.nid', DESC);
    $results = $query->execute();
    foreach ($results as $value) {
      $result[$value->field_primary_category_value][] = $value;
    }
  }
  return $result;
}

/**
 * Implement function for get issue based story according supplement on magazine page
 * @param string $issue_date
 * @return array
 */
function itg_msi_issue_suppliment_data($issue_date, $extract_nids = array()) {
  $time = strtotime($issue_date);
  $issue_date_cat = date('d-m-Y', $time);
  $query = db_select('itg_widget_order', 'itg_order');
  $query->fields('itg_order', array('nid'));
  $query->condition('itg_order.extra', '%' . db_like($issue_date_cat) . '%', 'LIKE');
  $query->condition('itg_order.widget', 'issue_supplement_magazin_widget', '=');
  $query->orderBy('itg_order.weight', ASC);
  $results = $query->execute()->fetchAll();
  if (!empty($results)) {
    foreach ($results as $value) {
      $supp_id = $value->nid;
      $query = db_select('node', 'n');
      $query->join('field_data_field_story_issue_date', 'issue_date', 'n.nid = issue_date.entity_id');
      $query->join('field_data_field_story_select_supplement', 'story_supplement', 'n.nid = story_supplement.entity_id');
      $query->join('itg_widget_order', 'itg_order', 'n.nid = itg_order.nid');
      $query->leftJoin('field_data_field_story_extra_large_image', 'story_large_image', 'n.nid = story_large_image.entity_id');
      $query->leftJoin('file_managed', 'f_managed', 'f_managed.fid = story_large_image.field_story_extra_large_image_fid');
      $query->leftJoin('field_data_field_story_short_headline', 'fssh', 'n.nid = fssh.entity_id');
      $query->fields('n', array('nid', 'title'));
      $query->fields('issue_date', array('field_story_issue_date_value'));
      $query->fields('f_managed', array('fid', 'uri'));
      $query->fields('fssh', array('field_story_short_headline_value'));
      $query->fields('story_supplement', array('field_story_select_supplement_target_id'));
      $query->condition('n.status', 1, '=');
      $query->condition('issue_date.field_story_issue_date_value', '%' . db_like($issue_date) . '%', 'LIKE');
      $query->condition('story_supplement.field_story_select_supplement_target_id', $value->nid);
      $query->condition('itg_order.widget', 'section_wise_widget', '=');
      $query->orderBy('itg_order.weight', DESC);
      $query->orderBy('n.nid', DESC);
      $results = $query->execute();
      foreach ($results as $value) {
        $result[$supp_id][] = $value;
      }
    }
    //print_r($result);die;
  }
  else {
    $query = db_select('node', 'n');
    $query->join('field_data_field_story_issue_date', 'issue_date', 'n.nid = issue_date.entity_id');
    $query->join('field_data_field_story_select_supplement', 'story_supplement', 'n.nid = story_supplement.entity_id');
    $query->join('itg_widget_order', 'itg_order', 'n.nid = itg_order.nid');
    $query->leftJoin('field_data_field_story_extra_large_image', 'story_large_image', 'n.nid = story_large_image.entity_id');
    $query->leftJoin('file_managed', 'f_managed', 'f_managed.fid = story_large_image.field_story_extra_large_image_fid');
    $query->leftJoin('field_data_field_story_short_headline', 'fssh', 'n.nid = fssh.entity_id');
    $query->fields('n', array('nid', 'title'));
    $query->fields('issue_date', array('field_story_issue_date_value'));
    $query->fields('f_managed', array('fid', 'uri'));
    $query->fields('story_supplement', array('field_story_select_supplement_target_id'));
    $query->fields('fssh', array('field_story_short_headline_value'));
    $query->condition('n.status', 1, '=');
    $query->condition(db_or()->isnotNull('story_supplement.field_story_select_supplement_target_id'));
    $query->condition('issue_date.field_story_issue_date_value', '%' . db_like($issue_date) . '%', 'LIKE');
    $query->condition('itg_order.widget', 'section_wise_widget', '=');
    $query->orderBy('itg_order.weight', DESC);
    $query->orderBy('n.created', DESC);
    $results = $query->execute();
    foreach ($results as $value) {
      $result[$value->field_story_select_supplement_target_id][] = $value;
    }
  }
  return $result;
}

/*
 * Implements itg_msi_issue_suppliment_title
 * @param int $nid
 */

function itg_msi_issue_suppliment_title($nid) {
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->condition('n.nid', $nid, '=');
    $result = $query->execute()->fetchField();
    return t($result);
}

/*
 * Implements itg_msi_get_lock_story_status
 * @param int $nid
 * @param string $val
 */

function itg_msi_get_lock_story_status($nid, $val) {
  if(!empty($nid)) {
    $query = db_select('field_data_field_story_configurations', 'c');
    $query->fields('c', array('field_story_configurations_value'));
    $query->condition('c.entity_id', $nid, '=');
    $query->condition('c.bundle', 'story', '=');
    $query->condition('c.field_story_configurations_value', $val, '=');
    $result = $query->execute()->fetchField();
    return $result;
  }
}

/**
 * Implements hook_views_api().
 *
 * {@inheritdoc}.
 */
function itg_msi_views_api() {
    return array(
        'api' => 3,
    );
}

function _get_nid_from_title($title) {
    return db_select('node' , 'n')
      ->fields('n' , array("nid"))
      ->condition("n.title" , $title)->execute()->fetchField();
}

function get_latest_isssue_data(){
	$last_week_date = itg_msi_last_week_issue();
	$last_week_date = date("Y-m-d", strtotime($last_week_date));
	$query = db_select('field_data_field_issue_title', 't');
	$query->join('field_data_field_issue_large_cover_image', 'fi', 'fi.entity_id = t.entity_id');
	$query->fields('t');
	$query->fields('fi', array('field_issue_large_cover_image_fid'));
	$query->condition('t.field_issue_title_value',  '%' . db_like($last_week_date) . '%', 'LIKE');
	$query->range(0, 1);
	$result = $query->execute()->fetchAll();
	return $result;
	//print_r($result);die;
}
