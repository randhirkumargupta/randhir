<?php

/**
 * @file
 * Module file for ITG Photo Gallery functionality.
 */

/**
 * Implements hook_form_alter().
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_photogallery_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'photogallery_node_form') {

    unset($form['field_story_extra_small_image']);
    $form['field_story_category'][LANGUAGE_NONE]['#title'] = '<label for="edit-title">' . $form['field_story_category'][LANGUAGE_NONE]['#title'] . ' <span title="This field is required." class="form-required">*</span></label>';
    //code for common syndication field hide
    drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-field-story-syndication").hide();
              jQuery("#edit-field-story-expert-description").hide();              
            });', array('type' => 'inline', 'scope' => 'footer'));

    $form['upload'] = array(
      '#type' => 'plupload',
      '#weight' => 21,
//      '#imgfilevalidate' => array(
//        'file_validate_extensions' => array("png gif jpg jpeg"),
//      ),
      '#upload_validators' => array(
        'file_validate_extensions' => array("png gif jpg jpeg"),
      ),
//      '#states' => array(
//        'visible' => array(
//          ':input[name="field_bulk_media_upload[und][1]"]' => array('checked' => TRUE),
//        ),
//      ),
      '#description' => t('88x66 smallest size of image.'),
    );
    $form['field_common_audio_file']['#states'] = array(
      'visible' => array(
        ':input[name="field_common_audio[und][1]"]' => array('checked' => TRUE),
      ),
    );
    $form['field_credit_name']['#states'] = array(
      'visible' => array(
        ':input[name="field_credit_to_all[und][1]"]' => array('checked' => TRUE),
      ),
    );

    if (!isset($_REQUEST['destination'])) {
      $destination = '';
    }
    else {
      $destination_array = explode('?', $_REQUEST['destination']);
      $destination = $destination_array[0];
    }

//      $form['actions']['cancel'] = array(
//        '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
//        '#weight' => 20,
//      );

    $form['actions']['submit']['#submit'][] = 'itg_photogallery_form_custom_callback';

    $form['field_story_extra_large_image']['#ajax'] = array(
      'callback' => 'ajax_example_simplest_callback',
      'wrapper' => 'replace_textfield_div',
    );
    $form['#validate'][] = 'itg_photogallery_custom_validate';
    $form['#after_build'][] = 'itg_photogallery_after_build';
  }
}

/**
 * Custom submit callback for redirecting story form.
 * @param array $form
 * @param array $form_state
 */
function itg_photogallery_form_custom_callback($form, &$form_state) {

  $workbench_current_state = $form_state['node']->workbench_moderation_state_new;
  $node_type = ucfirst($form_state['node']->type);
  $node_type = str_replace("_", " ", $node_type);
  $title = ucfirst($form_state['node']->title);

  if ($form_state['node']->field_story_facebook_video['und'][0]['fid']) {
    $fids[] = $form_state['node']->field_story_facebook_video['und'][0]['fid'];
  }
  if ($form_state['node']->field_story_twitter_video['und'][0]['fid']) {
    $fids[] = $form_state['node']->field_story_twitter_video['und'][0]['fid'];
  }
  // start use video /publish
  if (!empty($fids)) {
    foreach ($fids as $video_fid) {
      if ($video_fid != '' && is_numeric($video_fid)) {
        $query = db_select('dailymotion_response_details', 'drd');
        $query->fields('drd', array('fid', 'video_id'));
        $query->condition('fid', $video_fid, '=');
        $dailymotion_video_result = $query->execute()->fetchAssoc();
        if (empty($dailymotion_video_result['fid'])) {
          // Video not uploaded on dailymotion
          $file_details = file_load($video_fid);
          $real_path = drupal_realpath($file_details->uri);
          $response = itg_videogallery_dailymotion($real_path, $file_details->uri, $video_fid, $tags_value, $node_id);
          // Perform playlist and tags when new video create.
          $response_result['video_id'] = $response['id'];
          $response_result['fid'] = $response['fid'];
          $nid = db_insert('dailymotion_response_details')
              ->fields(array(
                'title' => $response['title'],
                'channel' => $response['channel'],
                'fid' => $response['fid'],
                'tags' => $response['tags'],
                'video_id' => $response['id'],
                'nid' => $node_id,
                'upload_time' => REQUEST_TIME,
                'video_duration' => $response['duration'],
                'dailymotion_published' => 1,
                'type' => 'local',
                'name' => $file_details->filename,
              ))
              ->execute();
          itg_videogallery_unlink_video_playlist($response_result, $playlist_name, $tags_value);
          itg_videogallery_edit_dailymotion($response_result, $playlist_name, $node_id);
        }
        else {
          // Video uploaded on dailymotion
          // Updating status of video
          $api = itg_videogallery_dailymotion_api();
          $api->post('/video/' . $dailymotion_video_result['video_id'], array('published' => true));

          try {
            $num_updated = db_update('dailymotion_response_details') // Table name no longer needs {}
                ->fields(array(
                  'dailymotion_published' => 1,
                ))
                ->condition('fid', $dailymotion_video_result['fid'], '=')
                ->execute();
          } catch (Exception $e) {
            
          }

          itg_videogallery_unlink_video_playlist($dailymotion_video_result, $playlist_name, $tags_value);
          itg_videogallery_edit_dailymotion($dailymotion_video_result, $playlist_name, $node_id);
        }
      }
    }
  }

  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  $request_destination = $_REQUEST['destination'];
  $redirect_path = $_REQUEST['destination'];

  if ($request_destination == 'published-photogallery') {
    $redirect_path .= "?field_story_syndication_value_op=all";
  }

  $msg = itg_custom_message($node_type, $workbench_current_state, arg(1), $title, $redirect_path);
}

/**
 * After build for story form.
 * @param array $form
 * @param array $form_state
 * @return array $form
 */
function itg_photogallery_after_build($form, &$form_state) {
  $query_array = array();
  $form['field_gallery_image'][LANGUAGE_NONE]['#title'] = $form['field_gallery_image'][LANGUAGE_NONE]['#title'] . ' <span title="This field is required." class="form-required">*</span>
';
  if (!isset($_REQUEST['destination'])) {
    $destination = '';
  }
  else {
    $destination_array = explode('?', $_REQUEST['destination']);
    $destination = $destination_array[0];
    if ($destination == 'published-photogallery') {
      $query_array = array("field_story_syndication_value_op" => "all");
    }
  }

  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), $destination, array("query" => $query_array, 'attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );
  global $user, $base_url;

  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;

  drupal_add_js(array('itg_photogallery' => array('settings' => $settings)), array('type' => 'setting'));
  if (arg(0) != 'unpublished-photogallery') {
    drupal_add_js(drupal_get_path('module', 'itg_photogallery') . '/upload.js', array('weight' => 2));
  }
  drupal_add_js(drupal_get_path('module', 'itg_photogallery') . '/js/itg_photogallery.js', array('weight' => 3));

  return $form;
}

/**
 * Implements custom validate for client title
 * @param array $form
 * @param array $form_state
 */
function itg_photogallery_custom_validate(&$form, &$form_state) {
  foreach ($form_state['field']['field_gallery_image']['und']['entity'] as $key => $filed_collection) {
    $fids[] = $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_images['und'][0]['fid'];
  }
  $newfid = array_filter($fids);
  if (empty($newfid)) {
    form_set_error('field_images', 'Gallery image is required.');
  }
}

/* Implements hook_node_validate().
 * {@inheritdoc}
 */

function itg_photogallery_node_validate($node, $form, &$form_state) {

  // Code for redirection url validation
  if ($node->type == 'photogallery') {
    // Code for category validation.
    if (empty($node->field_story_category[LANGUAGE_NONE][0]['tid'])) {
      form_set_error('edit-field-story-category-und-hierarchical-select-selects-0', t("Section field is required."));
    }
  }
}

/**
 * Implements views header link 
 * {@inheritdoc}
 */
function itg_photogallery_views_pre_render(&$view) {
  if ($view->name == "manage_photogallery") {
    global $user; // Get user information
    $photo_content = '';
    $photo_content = l('Create Photogallery', 'node/add/photogallery', array('query' => array('destination' => 'manage-photogallery')));
    $view->attachment_before = $photo_content;
  }
}

/**
 * Implements hook_field_attach_form().
 * {@inheritdoc}
 */
function itg_photogallery_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $arg = arg();
  if (isset($arg[3]) && is_numeric($arg[3])) {
    $node = node_load($arg[3]);
    $personalization = count($node->field_ugc_personalization_photo['und']);
    $_SESSION['personalization_node'] = $node;
  }
  $options = array('language' => field_valid_language($langcode));
  // Merge default options.
  $default_options = array(
    'default' => FALSE,
    'deleted' => FALSE,
    'language' => NULL,
  );
  $options += $default_options;
  list(,, $bundle) = entity_extract_ids($entity_type, $entity);
  $instances = _field_invoke_get_instances($entity_type, $bundle, $options);
  // Iterate through the instances.
  $return = array();
  foreach ($instances as $instance) {
    // field_info_field() is not available for deleted fields, so use
    // field_info_field_by_id().
    $field = field_info_field_by_id($instance['field_id']);
    $field_name = $field['field_name'];

    //If we are looking at our field type and specific widget type, and we are multiple entries
    if (($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) && ($field['type'] == "field_collection")) {
      if ($field['bundles']['node'][0] == "photogallery") {
        //  drupal_add_js(drupal_get_path('module', 'itg_photogallery') . '/upload.js', array('weight' => 2));
        //Check just in case the button is here, and add another #submit function
        if (isset($form[$field['field_name']]['und']['add_more'])) {
          // add a simple select list, this defaults to numb 3
          $form[$field['field_name']]['add_more_number'] = array(
            '#type' => 'select',
            '#title' => t('Add more no.'),
            '#options' => drupal_map_assoc(range(0, 100)),
            '#default_value' => isset($personalization) ? $personalization - 1 : 1,
            '#attributes' => array('style' => 'display:none;'),
          );
          if (isset($personalization)) {
            $form[$field['field_name']]['und']['add_more']['#submit'][] = 'itg_personalization_field_add_more_submit';
          }
          else {
            $form[$field['field_name']]['und']['add_more']['#submit'][] = 'itg_photogallery_field_add_more_submit';
          }
          $form[$field['field_name']]['und']['add_more']['#value'] = 'Add more rows';
        }
      }
    }
  }
}

/**
 * Implements hook_form_submit().
 * @global object $user
 * @param array $form
 * @param array $form_state
 */
function itg_photogallery_field_add_more_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];

  // Alter the number of widgets to show. items_count = 0 means 1.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  //get the number from the select
  $numbtoadd = $form[$field_name]['add_more_number']['#value'];
  if ($numbtoadd) {
    $field_state['items_count'] += $numbtoadd - 1;
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
    $form_state['rebuild'] = TRUE;
  }
  $node = drupal_rebuild_form('photogallery_node_form', $form_state, $old_form = NULL);

  $fids = array();
  foreach ($node['upload']['#value'] as $img) {
    // Save media file.
    $scheme = variable_get('file_default_scheme', 'public') . '://';
    $source = $img['tmppath'];

    $directory = '';
    $destination = file_stream_wrapper_uri_normalize($scheme . $directory . $img['name']);
    $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
    global $user;
    // Create the file object.
    $uri = file_stream_wrapper_uri_normalize($destination);
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $file = new StdClass;
    $file->uid = $user->uid;
    $file->filename = basename($uri);
    $file->uri = $uri;
    $file->filemime = file_get_mimetype($uri);
    $file->filesize = @filesize($uri);
    $file->timestamp = REQUEST_TIME;
    // $file->status = FILE_STATUS_PERMANENT;
    $file->is_new = TRUE;
    $file->status = FILE_STATUS_PERMANENT;
    $fids[] = file_save($file);
    file_usage_add($file, 'file', 'field_collection_item', '1');
  }
  $key_val = 0;
  foreach ($fids as $file_id) {

    $file_ids[$key_val]['fid'] = $file_id->fid;
    $file_ids[$key_val]['filename'] = $file_id->filename;
    $key_val++;
  }
  $i = 0;

  foreach ($form_state['field']['field_gallery_image']['und']['entity'] as $key => $filed_collection) {
    if (!isset($filed_collection->field_images['und'])) {
      $filename = $file_ids[$i]['filename'];
      $newFileName = substr($filename, 0, (strrpos($filename, ".")));
      //$filed_collection->field_images['und'][0]['fid'] = $file_ids[$i];
      //$form_state['field']['field_gallery_image']['und']['entity'][$key]->field_image_caption['und'][0]['value'] = $newFileName;
      $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_images['und'][0]['fid'] = $file_ids[$i]['fid'];
      // $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_images['und'][0]['alt'] = $newFileName;
      // $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_images['und'][0]['title'] = $newFileName;
      // $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_gallery_small_image['und'][0]['fid'] = $file_ids[$i]['fid'];   
      if ($file_ids[$i]['filename'] != "") {
        $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_credit['und'][0]['value'] = $_POST['field_credit_name']['und'][0]['value'];
        $photo_by = explode(') (', $_POST['field_photo_by'][LANGUAGE_NONE]);
        $photo_byline = explode(')', $photo_by[1]);
        $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_photo_byline['und'][0]['target_id'] = $photo_byline[0];
        if(!empty($_POST['field_common_audio_file'][LANGUAGE_NONE][0]['fid'])){
          $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_audio['und'][0]['fid'] = $_POST['field_common_audio_file'][LANGUAGE_NONE][0]['fid'];
        }
      }
      $i++;
    }
  }
}

/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_photogallery_block_info() {
  $blocks['photogallery_tab_form_block'] = array(
    'info' => t('Photogallery Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['photo_menu_landing_block'] = array(
    'info' => t('Photo landing page menu'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * {@inheritdoc}
 */
function itg_photogallery_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'photogallery_tab_form_block':
      $block['content'] = theme('photogallery_tab_form_display_block', array('data' => $data));
      break;
    case 'photo_menu_landing_block':
      $block['content'] = theme('Photo_landing_menu_block', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_photogallery_theme($existing, $type, $theme, $path) {
  $themes = array(
    'photogallery_tab_form_display_block' => array(
      'template' => 'photogallery-form-tab-template',
      'path' => drupal_get_path('module', 'itg_photogallery') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'photogallery_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'photogallery-node-form',
      'path' => drupal_get_path('module', 'itg_photogallery') . '/templates',
      'render element' => 'form',
    ),
    'Photo_landing_menu_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'Photo-landing-menu-block',
      'path' => drupal_get_path('module', 'itg_photogallery') . '/templates',
      'render element' => 'form',
    ),
  );

  return $themes;
}

/**
 * Implements function for get uri by fid
 */
function _itg_photogallery_fid($fid) {
  $query = db_select('file_managed', 'fm');
  $query->fields('fm', array('uri'));
  $query->condition('fid', $fid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for return byline and photoby
 */
function itg_photogallery_byline_photoby($type, $id) {
  $result = '';
  if ($type == "node") {
    $query = db_select('node', 'n');
    $field = $query->fields('n', array('title'));
    $condition = $query->condition('nid', $id, '=');
    $result = $query->execute()->fetchField();
  }
  elseif ($type == 'photoby') {
    $query = db_select('taxonomy_term_data', 'td');
    $field = $query->fields('td', array('name'));
    $condition = $query->condition('tid', $id, '=');
    $result = $query->execute()->fetchField();
  }
  return $result;
}

/**
 * Implement hook_form_views_exposed_form_alter
 * @param Array $form
 * @param Array $form_state
 */
function itg_photogallery_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  //Get the Form Id
  if ($form['#id'] == 'views-exposed-form-photo-gallery-management-page' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-1' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-3' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-8' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-6' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-5' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-2' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-9' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-7' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-4') {
    //$form['#after_build'][] = 'itg_breaking_news_views_exposed_after_build';
    $form['title']['#autocomplete_path'] = 'content-title-list/photogallery/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
    $form['nid']['#autocomplete_path'] = 'content-nid-list/photogallery/autocomplete';
    $form['nid']['#attributes'] = array('placeholder' => t('Gallery ID'));
  }
  if ($form['#id'] == 'views-exposed-form-photo-gallery-management-page-1'
      || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-3'
      || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-4'
      || $form['#id'] == 'views-exposed-form-photo-gallery-management-page'
      || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-7')
    
    {
    unset($form['field_featured_value_op']['#options']);
    $new_options = array(
      'or' => '- Any -',
      'and' => 'Yes',
      'empty' => 'No',
    );
    $form['field_featured_value_op']['#options'] = $new_options;
    drupal_add_js(drupal_get_path('module', 'itg_photogallery') . '/js/itg_photogallery_expose_filter.js', 'file');
    drupal_add_css(".form-item-field-featured-value {display:none !important}","inline");
  }
}

function itg_photogallery_form_field_gallery_image_form_alter(&$form, &$form_state, $form_id) {
  pr($form);
}

/**
 * Implement hook_node_presave
 * {@inheritdoc}
 */
function itg_photogallery_node_presave($node) {
  if ($node->type == 'photogallery' && isset($node->field_gallery_image['und'])) {
    foreach ($node->field_gallery_image['und']as $delta => $field) {
      if ($node->field_gallery_image[LANGUAGE_NONE][$delta]['field_image_syndication'][LANGUAGE_NONE][0]['value'] == 'yes') {
        $node->field_story_syndication[LANGUAGE_NONE][0]['value'] = 'yes';
      }
    }
  }
}

/**
 * {@inheritdoc}
 */
function itg_photogallery_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'photogallery' && $_GET['category'] != '') {
    // Category view on landing page
    drupal_add_js("jQuery('#block-itg-photogallery-photo-menu-landing-block ul li').live('click', function(){
               var section_id = jQuery(this).val();
               jQuery('#block-itg-photogallery-photo-menu-landing-block ul li a').removeClass('active');
               jQuery('#edit-field-story-category-tid').val(section_id); 
               jQuery('#edit-field-story-category-tid').trigger('change');
               jQuery(this).find('a').addClass('active');
           });", array('type' => 'inline', 'scope' => 'footer'));
    drupal_add_js("jQuery(document).ready(function(){
               jQuery('#edit-field-story-category-tid').val(" . $_GET['category'] . "); 
               jQuery('#edit-field-story-category-tid').trigger('change');
               jQuery('#block-itg-photogallery-photo-menu-landing-block ul li').each(function() {
                  if(jQuery(this).val() == " . $_GET['category'] . "){
                      jQuery(this).find('a').addClass('active');
                    }
              });
           });", array('type' => 'inline', 'scope' => 'footer'));
  }

  if ($node->type == "photogallery") {
    // Views render on video template
    if (!empty($_GET['category']) && !empty($_GET['sid'])) {
      $view_output = views_embed_view('photo_list_of_category', 'block_1');
    }
    else {
      if(!empty($node->field_primary_category[LANGUAGE_NONE]) && isset($node->field_primary_category[LANGUAGE_NONE])){
        $sec = $node->field_primary_category[LANGUAGE_NONE][0]['value'];
      }else{
      foreach ($node->field_story_category[LANGUAGE_NONE] as $sections) {
        $section .= $sections['tid'] . '+';
      }
      $sec = rtrim($section, '+');
      }
      $view_output = views_embed_view('photo_list_of_category', 'block_3', $sec);
    }
    $node->view_output = $view_output;
  }
}

/**
 * Implement widget alter()
 * {@inheritdoc} 
 */
function itg_photogallery_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($form_state['build_info']['form_id'] == ('photogallery_node_form' || 'videogallery_node_form')) {
    // If this is an image field type of instance 'field_image_top'
    if ($context['field']['field_name'] == ('field_story_extra_large_image' || 'field_story_large_image' || 'field_story_medium_image' || 'field_story_small_image' || 'field_story_extra_small_image')) {
      // Loop through the element children (there will always be at least one).
      foreach (element_children($element) as $key => $child) {
        $element[$key]['#process'][] = 'itg_photogallery_image_field_widget_process';
      }
    }
  }
}

/**
 * Implement function widget process
 * @param array $element
 * @param array $form_state
 * @param array $form
 * @return string
 */
function itg_photogallery_image_field_widget_process($element, &$form_state, $form) {
  $element['alt']['#attributes']['title'] = 'Alternate text';
  $element['title']['#attributes']['title'] = 'Title';
  return $element;
}
