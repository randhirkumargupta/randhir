<?php

/**
 * @file
 * The ITG Reporter module.
 *
 * Contains functionality for Reporter.
 *
 */

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_reporter_cronapi($op, $job = NULL) {

  $items['itg-remove-byline-content'] = array(
    'description' => 'Remove junk byline.',
    'callback' => 'itg_remove_byline_content',
    'file' => 'include/itg_remove_byline_content.inc',
  );

  return $items;
}

/**
 * Implements hook_menu().
 * @return array
 */
function itg_reporter_menu() {

  $items['content-email-list/%/autocomplete'] = array(
    'page callback' => 'itg_reporter_get_content_email',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['content-twitter-list/%/autocomplete'] = array(
    'page callback' => 'itg_reporter_get_twitter_handle',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements Author releated nodes.
 * @return array
 */

function itg_reporter_apaache_solr($nid=''){
  $str =  '!sm_field_reporter_publish_id: "" AND sm_field_reporter_publish_id:'.$nid.' OR sm_field_reporter_publish_id:'.$nid.',* OR sm_field_reporter_publish_id:*,'.$nid.',* OR sm_field_reporter_publish_id:*,'.$nid;

  $field = '_version_,entity_id,bundle,label,sm_field_reporter_publish_id,path,url,path_alias,dm_field_itg_content_publish_dat,sm_field_custom_story_extra_large_url,sm_original_image_url,sm_field_custom_story_large_url,sm_field_custom_story_medium_large_url,sm_field_custom_story_small_large_url,sm_field_custom_story_extra_small_url,ds_created';
  $solr = apachesolr_get_solr();
  $query = apachesolr_drupal_query("custom");
  $query->addParam("fq", '(' . $str . ')');
  $query->addParam("fl", $field);
  $query->addParam('sort', "ds_created DESC");
  $query->addParam('rows', '100000');
  $query->addFilter("bundle", "story");
  $query->addFilter("bs_status", true);
  $response = $query->search();
  $raw_results = $response->response->docs;;
  if(!empty($raw_results))
    return $raw_results;
  else
    return array();
}

/**
 * Implements People releated story type nodes.
 * @return array
 */
function itg_reporter_people_apache_solr($term='', $type = ''){
 // echo $str =  '!sm_vid_Tags: "" AND sm_vid_Tags:"'.$term.'" OR sm_vid_Tags:"'.$term.'",* OR sm_vid_Tags:*,"'.$term.'",* OR sm_vid_Tags:*,"'.$term.'"';
  $str =  '!sm_vid_Tags: "" AND sm_vid_Tags:*"'.$term.'"*';

  $field = '_version_,entity_id,bundle,label,sm_field_reporter_publish_id,path,url,path_alias,dm_field_itg_content_publish_dat,sm_field_custom_story_extra_large_url,sm_original_image_url,sm_field_custom_story_large_url,sm_field_custom_story_medium_large_url,sm_field_custom_story_small_large_url,sm_field_custom_story_extra_small_url,sm_field_video_duration,sm_vid_Tags,ds_created,im_field_photo_enable';
  $solr = apachesolr_get_solr();
  $query = apachesolr_drupal_query("custom");
  $query->addParam("fq", '(' . $str . ')');
  $query->addParam("fl", $field);
  $query->addParam('sort', "ds_created DESC");
  $query->addParam('rows', '100000');
  $query->addFilter("bundle",$type);
  $query->addFilter("bs_status", true);
  $response = $query->search();
  $raw_results = $response->response->docs;;
  if(!empty($raw_results))
    return $raw_results;
  else
    return array();
}

/**
 * Implements People releated video type nodes.
 * @return array
 */
// function itg_reporter_people_video_solr($term=''){
//     $str =  '!sm_vid_Tags: "" AND sm_vid_Tags:"'.$term.'" OR sm_vid_Tags:"'.$term.'",* OR sm_vid_Tags:*,"'.$term.'",* OR sm_vid_Tags:*,"'.$term.'"';

//   $field = '_version_,entity_id,bundle,label,sm_field_reporter_publish_id,path,url,path_alias,dm_field_itg_content_publish_dat,sm_field_custom_story_extra_large_url,sm_original_image_url,sm_field_custom_story_large_url,sm_field_custom_story_medium_large_url,sm_field_custom_story_small_large_url,sm_field_custom_story_extra_small_url';
//   $solr = apachesolr_get_solr();
//   $query = apachesolr_drupal_query("custom");
//   $query->addParam("fq", '(' . $str . ')');
//   $query->addParam("fl", $field);
//   $query->addParam('sort', "ds_created DESC");
//   $query->addParam('rows', '100000');
//   $query->addFilter("bundle", "videogallery");
//   $query->addFilter("bs_status", true);
//   $response = $query->search();
//   $raw_results = $response->response->docs;;
//   if(!empty($raw_results))
//     return $raw_results;
//   else
//     return array();
// }


/**
 * Implements hook_block_info().
 * @return array
 */
function itg_reporter_block_info() {
  $blocks['reporter_tab_form_block'] = array(
    'info' => t('Reporter Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_reporter_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'reporter_tab_form_block':
      $block['content'] = theme('reporter_tab_form_display_block', array('data' => ''));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_reporter_theme($existing, $type, $theme, $path) {
  $themes = array(
    'reporter_tab_form_display_block' => array(
      'template' => 'reporter-form-tab-template',
      'path' => drupal_get_path('module', 'itg_reporter') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'reporter_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'reporter-node-form',
      'path' => drupal_get_path('module', 'itg_reporter') . '/templates',
      'render element' => 'form',
    ),
  );

  return $themes;
}

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_reporter_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'reporter_node_form') {
    $node_type = $form['#node']->type;
    // code to change page title on node edit
    if (!empty($form['nid']['#value']) && arg(2) == 'edit') {
      if ($node_type == 'reporter') {
        $node_type = ucfirst('Byline');
        $node_title = $form['#node']->title;
        $edit_title = t('Edit ') . $node_type . ' - ' . $node_title;
        drupal_set_title($edit_title);
      }
    }
    else {
      $node_type = ucfirst('Byline');
      $add_title = t('Create ') . $node_type;
      drupal_set_title($add_title);
    }
    $form['field_byline_company'][LANGUAGE_NONE]['#ajax'] = array(
          'callback' => 'change_byline_department_ajax_callback',
          'wrapper' => 'dropdown-byline_departent',
        );
    $form['field_byline_department']['#prefix'] = '<div id="dropdown-byline_departent">';
    $form['field_byline_department']['#suffix'] = '</div>';
    if (isset($form_state['node']) && isset($form_state['node']->field_byline_company) && !empty($form_state['node']->field_byline_company[LANGUAGE_NONE][0]['tid'])) {
        $company_tid = $form_state['node']->field_byline_company[LANGUAGE_NONE][0]['tid'];
    }
    if (isset($form_state['values']) && !empty($form_state['values']['field_byline_company'][LANGUAGE_NONE][0]['tid'])) {
        $company_tid = $form_state['values']['field_byline_company'][LANGUAGE_NONE][0]['tid'];
    }
    $byline_dept_arr_opt = array();
    if (!empty($company_tid)) {
        $byline_dept_arr = get_byline_department_by_company($company_tid);
        if (!empty($byline_dept_arr)) {
            foreach ($byline_dept_arr as $key => $value) {
                $byline_dept_arr_opt[trim($value->entity_id)] = trim($value->name);
            }
            $form['field_byline_department'][LANGUAGE_NONE]['#options'] = $byline_dept_arr_opt;
        }
    }
    $form['field_byline_department'][LANGUAGE_NONE]['#options'] = $byline_dept_arr_opt;
    if (!($form_state['reporter_popup_form'])) {
      $form['#after_build'][] = 'itg_reporter_after_build';
    }

    $destination = 'byline-list';
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
      '#weight' => 21,
      '#value' => t('Cancel'),
    );

    $form['#validate'][] = 'itg_reporter_custom_validate';
  }

  $frm_array = array('cooking_tips_node_form', 'story_node_form', 'videogallery_node_form', 'food_news_node_form', 'recipe_node_form', 'survey_node_form', 'quiz_node_form', 'photogallery_node_form');
  if (in_array($form_id, $frm_array)) {
    if (!empty($form['field_story_reporter'][LANGUAGE_NONE])) {
      foreach ($form['field_story_reporter'][LANGUAGE_NONE] as $key => $buzz_item) {
        if (!empty($buzz_item['target_id']['#default_value'])) {
          preg_match('#\((.*?)\)#', $buzz_item['target_id']['#default_value'], $match);
          $form['field_story_reporter'][LANGUAGE_NONE][$key]['target_id']['#default_value'] = itg_autocomplete_byline($match[1]);
        }
      }
    }

    if (!empty($form['field_photo_by'][LANGUAGE_NONE]['#default_value'])) {
      preg_match('#\((.*?)\)#', $form['field_photo_by'][LANGUAGE_NONE]['#default_value'], $match);
      $form['field_photo_by'][LANGUAGE_NONE]['#default_value'] = itg_autocomplete_byline($match[1]);
    }
  }

  if($form_id == 'videogallery_node_form') {
     if (!empty($form['field_video_anchor'][LANGUAGE_NONE])) {
      foreach ($form['field_video_anchor'][LANGUAGE_NONE] as $key => $buzz_item) {
        if (!empty($buzz_item['target_id']['#default_value'])) {
          preg_match('#\((.*?)\)#', $buzz_item['target_id']['#default_value'], $match);
          $form['field_video_anchor'][LANGUAGE_NONE][$key]['target_id']['#default_value'] = itg_autocomplete_byline($match[1]);
        }
      }
    }
  }

  if ($form_id == 'photogallery_node_form') {
    foreach ($form['field_gallery_image']['und'] as $key => $val) {
      if (isset($val['field_photo_byline']['und'])) {
        if (isset($val['field_photo_byline']['und']['#default_value']) && !empty($val['field_photo_byline']['und']['#default_value'])) {
          $exp_val = explode(',', $val['field_photo_byline']['und']['#default_value']);
          $final_name = array();
          foreach ($exp_val as $chuck) {
            preg_match('#\((.*?)\)#', $chuck, $match);
            $final_name[] = itg_autocomplete_byline($match[1]);
          }
          $final_implode = implode(', ', $final_name);
          $form['field_gallery_image']['und'][$key]['field_photo_byline']['und']['#default_value'] = $final_implode;
        }
      }
    }

    foreach ($form['field_gallery_image']['und'] as $key => $val) {
      if (isset($val['field_photo_by']['und'])) {
        if (isset($val['field_photo_by']['und']['#default_value']) && !empty($val['field_photo_by']['und']['#default_value'])) {
          $exp_val = explode(',', $val['field_photo_by']['und']['#default_value']);
          $final_name = array();
          foreach ($exp_val as $chuck) {
            preg_match('#\((.*?)\)#', $chuck, $match);
            $final_name[] = itg_autocomplete_byline($match[1]);
          }
          $final_implode = implode(', ', $final_name);
          $form['field_gallery_image']['und'][$key]['field_photo_by']['und']['#default_value'] = $final_implode;
        }
      }
    }
  }
}

/**
 * Implements custom validate for client title
 * @param array $form
 * @param array $form_state
 */
function itg_reporter_custom_validate(&$form, &$form_state) {
  if (!empty($form_state['values']['field_reporter_movie_name'][LANGUAGE_NONE][0]['name'])) {
    foreach ($form_state['values']['field_reporter_movie_name'][LANGUAGE_NONE] as $key => $value) {
      $movie_name = $form_state['values']['field_reporter_movie_name'][LANGUAGE_NONE][$key]['name'];
      $movie_vid = $form_state['values']['field_reporter_movie_name'][LANGUAGE_NONE][$key]['vid'];
      $exist = itg_reporter_movie_term_status($movie_name, $movie_vid);
      if (empty($exist)) {
        form_set_error('field_reporter_movie_name', 'Please enter valid movie name');
      }
    }
  }
}

/**
 * Implements itg_reporter_movie_term_status().
 */
function itg_reporter_movie_term_status($movie_name, $movie_vid) {
  $itg_query = db_select('taxonomy_term_data', 'tr');
  $itg_query->condition('vid', $movie_vid, '=')
            ->condition('name', $movie_name, '=')
            ->fields('tr', array('tid'));

  $itg_result = $itg_query->execute()->fetchField();
  if ($itg_result != '') {
    return $itg_result;
  }

  return '';
}
/**
 * Implement hook_after_build
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_reporter_after_build($form, &$form_state) {

  global $user, $base_url;

  // get anchor id based on category name
  $tid = ANCHOR_TID;
  $tid_poli = POLITICIAN_TID;
  $tid_repo = REPORTER_TID;
  // alter label name
  $form['title']['#title'] = t('Name');
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['politician'] = $tid_poli;
  $settings['anchor'] = $tid;
  $settings['reporter'] = $tid_repo;
  $settings['ntype'] = $form['type']['#value'];
  drupal_add_js(array('itg_reporter' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_reporter') . '/js/itg_reporter.js', array('scope' => 'footer'));
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js', array('scope' => 'footer'));
  return $form;
}

/**
 * Implements hook_views_pre_render
 * {@inheritdoc}
 */
function itg_reporter_views_pre_render(&$view) {
  if ($view->name == "byline_list") {
    $header_content = l(t('Create Byline'), 'node/add/reporter', array('query' => array('destination' => 'byline-list')));
    $view->attachment_before = $header_content;
  }
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_reporter_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-byline-list-page') {
    $form['title']['#autocomplete_path'] = 'content-title-list/reporter/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Name'));
    $form['field_reporter_email_id_value']['#autocomplete_path'] = 'content-email-list/reporter/autocomplete';
    $form['field_reporter_email_id_value']['#attributes'] = array('placeholder' => t('Email id'));
    $form['field_reporter_twitter_handle_value']['#autocomplete_path'] = 'content-twitter-list/reporter/autocomplete';
    $form['field_reporter_twitter_handle_value']['#attributes'] = array('placeholder' => t('Twitter Handle'));
  }
}

/**
 * callback for all the reporter email id
 * @param $email
 */
function itg_reporter_get_content_email($email) {
  if (strlen(trim($email)) > 0) {
    $content_type = arg(1);
    $options = '';
    $email = strtolower(trim($email));
    $query = db_select('field_data_field_reporter_email_id', 'fe');
    $query->fields('fe', array('field_reporter_email_id_value'));
    $query->condition('field_reporter_email_id_value', '%' . $email . '%', 'LIKE');
    $query->condition('fe.bundle', $content_type, '=');
    $query->range(0, 20);

    $result = $query->execute();

    while ($record = $result->fetchAssoc()) {
      $options[$record['field_reporter_email_id_value']] = $record['field_reporter_email_id_value'];
    }

    drupal_json_output($options);
  }
}

/**
 * callback for all the reporter twitter handle
 * @param $twitter
 */
function itg_reporter_get_twitter_handle($twitter) {
  if (strlen(trim($twitter)) > 0) {
    $content_type = arg(1);
    $options = '';
    $twitter = strtolower(trim($twitter));
    $query = db_select('field_data_field_reporter_twitter_handle', 'ft');
    $query->fields('ft', array('field_reporter_twitter_handle_value'));
    $query->condition('field_reporter_twitter_handle_value', '%' . $twitter . '%', 'LIKE');
    $query->condition('ft.bundle', $content_type, '=');
    $query->range(0, 20);

    $result = $query->execute();

    while ($record = $result->fetchAssoc()) {
      $options[$record['field_reporter_twitter_handle_value']] = $record['field_reporter_twitter_handle_value'];
    }

    drupal_json_output($options);
  }
}

/**
 * Implements hook_node_presave().
 *
 * {@inheritdoc}.
 */
function itg_reporter_node_presave($node) {
    //set custom path alias
  if (itg_workflow_stop_node_update_batch_for_widgets()) {
    return;
  }
  if ($node->type == 'reporter' && !empty($node->nid)) {
    $previous_value = node_load($node->nid);
    $previous_title = $previous_value->title;
    $new_title = $node->title;
    $previous_twitter_handle = $previous_value->field_reporter_twitter_handle[LANGUAGE_NONE][0]['value'];
    $new_twitter_handle = $node->field_reporter_twitter_handle[LANGUAGE_NONE][0]['value'];

    // condition for title update
    if (($previous_title != $new_title) || ($previous_twitter_handle != $new_twitter_handle)) {
      $nids = itg_reporter_get_all_story_nid($node->nid);
      foreach ($nids as $value) {
        $story_node = node_load($value);
        // code for title replace
        $story_byline = $story_node->field_itg_common_by_line_name[LANGUAGE_NONE][0]['value'];
        $story_byline_exp = explode(',', trim($story_byline));
        $final_name_arr = recursive_array_replace($previous_title, $new_title, $story_byline_exp);
        $final_name = implode(',', $final_name_arr);

        // code for twitter handle replace
        $story_twitter = $story_node->field_itg_common_by_line_twitter[LANGUAGE_NONE][0]['value'];
        $story_twitter_exp = explode(',', trim($story_twitter));
        $final_twitter_arr = recursive_array_replace($previous_twitter_handle, $new_twitter_handle, $story_twitter_exp);
        $final_twitter = implode(',', $final_twitter_arr);

        $story_node->field_itg_common_by_line_name[LANGUAGE_NONE][0]['value'] = $final_name;
        $story_node->field_itg_common_by_line_twitter[LANGUAGE_NONE][0]['value'] = $final_twitter;
        field_attach_update('node', $story_node);
      }
    }
  }
}

/**
 * Implement recursive_array_replace
 * @param string $find
 * @param string $replace
 * @param array $array
 */
function recursive_array_replace($find, $replace, $array) {
  if (!is_array($array)) {
    return str_replace($find, $replace, $array);
  }
  $newArray = array();
  foreach ($array as $key => $value) {
    $newArray[$key] = recursive_array_replace($find, $replace, $value);
  }
  return $newArray;
}

/**
 * Implement itg_reporter_get_all_story_nid
 * @param int $source_id
 */
function itg_reporter_get_all_story_nid($source_id) {

  $query = db_select('field_data_field_common_by_line_reporter_id', 'c');
  $query->fields('c', array('entity_id'));
  $query->condition('c.field_common_by_line_reporter_id_value', '%' . $source_id . '%', 'LIKE');
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $options[] = $record['entity_id'];
  }

  return $options;
}

/**
 * Implement itg_autocomplete_byline
 * @param array $id
 */
function itg_autocomplete_byline($id) {
  $reporter_name = db_select('node', 'n');
  $reporter_name->leftJoin('field_data_field_reporter_email_id', 're', 'n.nid = re.entity_id');
  $reporter_name->fields('n', array('title', 'nid'));
  $reporter_name->fields('re', array('field_reporter_email_id_value'));
  $reporter_name->condition('n.type', 'reporter', '=');
  $reporter_name->condition('n.nid', $id, '=');
  $result = $reporter_name->execute();
  //$name_format = array();
  $record = $result->fetchAssoc();
  $r_title = ucfirst($record['title']);
  $r_nid = strtolower($record['nid']);

  if (!empty($record['field_reporter_email_id_value'])) {
    $name_format = $r_title . '(' . $record['field_reporter_email_id_value'] . ')(' . $r_nid . ')';
  }
  else {
    $name_format = $r_title . '(' . $r_nid . ')';
  }

  return $name_format;
}

/**
 * Implements hook_node_validate().
 *
 * {@inheritdoc}.
 */
function itg_reporter_node_validate($node, $form, &$form_state) {
  if ($node->type == 'reporter') {
    $occupation = $node->field_celebrity_pro_occupation['und'];
    $flag = FALSE;
    if (count($occupation) >= 1) {
      foreach ($occupation as $term) {
        $occ_name = taxonomy_term_load($term['tid']);
        if ($occ_name->name == 'Celebrity') {
          $flag = TRUE;
        }
        if (strtolower($occ_name->name) == 'reporter') {
          $reporter_flag = TRUE;
        }
      }
    }
    // make moview field mandotory.
    $errors = array_filter($node->field_reporter_movie_name['und']);
    $profile_type = $node->field_reporter_profile_type[LANGUAGE_NONE][0]['value'];
    if ($flag && empty($errors)) {
      form_set_error('field_reporter_movie_name', 'Movie name is required.');
    }

    if ($reporter_flag && empty($profile_type)) {
      form_set_error('field_reporter_profile_type', 'Profile is required.');
    }
  }
}

/**
 * Function for ajax callback
 * @param array $form
 * @param array $form_state
 * @return array
 */
function change_byline_department_ajax_callback($form, &$form_state) {
   return $form['field_byline_department'];
}


/**
 * Function is used to get byline company from byline department
 * @param int $tid
 * @return boolean or array
 */
function get_byline_department_by_company($tid = null) {
    if (empty($tid)) {
        return FALSE;
    }
    $query = db_select('field_data_field_byline_company', 'bc');
    $query->fields('bc', array('entity_id'));
    $query->fields('ttd', array('name'));
    $query->join('taxonomy_term_data', 'ttd', 'bc.entity_id = ttd.tid');
    $query->condition('bc.field_byline_company_tid', $tid, '=');
    $query->condition('bc.bundle', 'byline_department', '=');
    $query->condition('bc.entity_type', 'taxonomy_term', '=');
    $query_result = $query->execute()->fetchAll();
    return $query_result;
}
