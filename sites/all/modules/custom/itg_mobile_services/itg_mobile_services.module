<?php

/**
 * Implementation of hook_form_alter().
 * {@inheritdoc}
 */
function itg_mobile_services_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'clients_creation_node_form':
      $form['title']['#type'] = 'hidden';
      $form['title']['#default_value'] = 'client';
      $form['metatags']['#type'] = 'hidden';
      unset($form['actions']['preview']);

      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'clients-listing', array(
          'attributes' => array(
            'class' => 'button'
          )
        )),
        '#weight' => 21,
        '#value' => t('Cancel')
      );

      $form['#validate'][] = 'itg_mobile_clients_validator';
      $form['#after_build'][] = 'itg_mobile_client_after_build';
      $form['#submit'][] = 'itg_mobile_client_after_submit';

      if (empty($_GET['destination'])) {
        $_GET['destination'] = 'clients-listing';
      }

      break;
    case 'service_creation_node_form':
      unset($form['#metatags']);
      unset($form['actions']['preview']);

      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'service-listing', array(
          'attributes' => array(
            'class' => 'button'
          )
        )),
        '#weight' => 21,
        '#value' => t('Cancel')
      );

      $form['field_service_regional']['#states'] = array(
        'visible' => array(
          ':input[name="field_service_type[und]"]' => array('checked' => TRUE),
        ),
      );

      $form['field_service_fetch_link']['#states'] = array(
        'visible' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '1'),
        ),
        'required' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '1'),
        ),
      );

      $form['group_service_ftp']['#states'] = array(
        'visible' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
        'required' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
      );

      $form['field_ftp_ip_address']['#states'] = array(
        'visible' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
        'required' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
      );

      $form['field_ftp_username']['#states'] = array(
        'visible' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
        'required' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
      );

      $form['field_ftp_password']['#states'] = array(
        'visible' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
        'required' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
      );

      $form['field_email_address']['#states'] = array(
        'visible' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '3'),
        ),
        'required' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '3'),
        ),
      );


      drupal_add_js("jQuery(document).ready(function(){ jQuery('#edit-field-story-expiry-date-und-0-value-datepicker-popup-2').datepicker({minDate:0}).attr('readonly','readonly');  });", 'inline');

      $form['#validate'][] = 'itg_mobile_services_validator';

      $form['#after_build'][] = 'itg_mobile_service_after_build';

      if (empty($_GET['destination'])) {
        $_GET['destination'] = 'service-listing';
      }
      break;

    case 'client_service_association_node_form':
      unset($form['#metatags']);
      unset($form['actions']['preview']);
      $form['title']['#type'] = 'hidden';
      $form['title']['#default_value'] = 'service association';

      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'service-association-listing', array(
          'attributes' => array(
            'class' => 'button'
          )
        )),
        '#weight' => 21,
        '#value' => t('Cancel')
      );

      $form['field_service_title']['#prefix'] = '<div id="service_title_replace_wrapper">';
      $form['field_service_title']['#suffix'] = '</div>';

      $form['field_service_char_limit']['#prefix'] = '<div id="char_limit_replace_wrapper">';
      $form['field_service_char_limit']['#suffix'] = '</div>';

      $form['field_service_association_title'][LANGUAGE_NONE]['#ajax'] = array(
        'callback' => 'itg_mobile_services_custom_callback',
        'method' => 'replace', // the data would replace the field
        'effect' => 'fade',
        'event' => 'change', // On change of the selection this action would take place
      );

      $form['field_client_selection'][LANGUAGE_NONE]['#ajax'] = array(
        'callback' => 'itg_mobile_content_selection_callback',
        'event' => 'change', // On change of the selection this action would take place
      );

      $form['#validate'][] = 'itg_mobile_client_association_validator';
      $form['#after_build'][] = 'itg_service_association_after_build';
      $form['#submit'][] = 'itg_mobile_client_association_submit';

      break;
    case 'vas_service_content_node_form':
      $form['metatags']['#type'] = 'hidden';

      if (isset($form['nid']['#value'])) {
        drupal_add_js("jQuery(document).ready(function(){jQuery('#edit-field-service-content-und-0-field-service-content-date-und-0-value-datepicker-popup-1, #edit-field-service-association-title-und, #edit-field-story-client-title-und-0-value--2, #edit-field-service-frequency-date-und-0-value-datepicker-popup-1, #edit-field-service-frequency-date-und-0-value2-datepicker-popup-1').addClass('itg-disabled');  });", 'inline');
        drupal_add_js("jQuery(document).ready(function(){jQuery('#edit-field-service-frequency-und').addClass('itg-disabled-radio');  });", 'inline');
      }

      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'service-content-listing', array(
          'attributes' => array(
            'class' => 'button'
          )
        )),
        '#weight' => 21,
        '#value' => t('Cancel')
      );

      $form['#prefix'] = '<div id="client_error_wrapper">';
      $form['#suffix'] = '</div>';

      $form['title']['#prefix'] = '<div id="client_entity_wrapper">';
      $form['title']['#suffix'] = '</div>';

      $form['field_service_association_title'][LANGUAGE_NONE]['#ajax'] = array(
        'callback' => 'itg_mobile_content_custom_callback',
        'wrapper' => 'client_entity_wrapper',
        'effect' => 'fade',
        'event' => 'change', // On change of the selection this action would take place
      );


      $form['content_enable_button'] = array(
        '#type' => 'button',
        '#weight' => 8,
        '#value' => t('Genrate Content'),
        '#attributes' => array(
          'id' => 'content-enable-button',
        ),
      );

      $form['reset_date_button'] = array(
        '#type' => 'button',
        '#weight' => 8,
        '#value' => t('Reset Date'),
        '#attributes' => array(
          'id' => 'reset-date-button',
        ),
      );

      $form['content_format'] = array(
        '#type' => 'hidden',
        '#value' => '',
        '#attributes' => array(
          'id' => 'content-format-hidden',
        ),
      );

      $form['#validate'][] = 'itg_mobile_association_validator';
      $form['#after_build'][] = 'itg_service_content_after_build';
      $form['#submit'][] = 'itg_mobile_vas_service_content_submit';
      if (empty($_GET['destination'])) {
        $_GET['destination'] = 'service-content-listing';
      }
      break;
  }
  return $form;
}

/**
 * Implements hook_node_insert().
 * {@inheritdoc}
 */
function itg_mobile_services_node_insert($node) {
  if ($node->type == 'client_service_association') {
    itg_mobile_services_token_insert($node);
  }
}

/**
 * Implements hook_node_update().
 * {@inheritdoc}
 */
function itg_mobile_services_node_update($node) {
  if ($node->type == 'client_service_association') {
    itg_mobile_services_token_update($node);
  }
}

/**
 * Implement function itg_mobile_services_token_insert().
 * @param object $node of node elements   
 */
function itg_mobile_services_token_insert($node) {
  global $user;
  global $base_url;
  $timestamp = strtotime("now");
  $six_digit_random_number = mt_rand(100000, 999999);
  $timestamps = date("Y-m-d H:i:s");

  $node_nid = $node->nid;
  $client_selection = $node->field_client_selection;
  $field_client_selection = $client_selection[LANGUAGE_NONE];
  $association_title = $node->field_service_association_title;
  $association_nid = $association_title[LANGUAGE_NONE][0]['target_id'];

  $client_name = '';

  $node = node_load($association_nid);
  $delivery_mode = ($node->field_service_delivery_mode) ? $node->field_service_delivery_mode[LANGUAGE_NONE][0]['value'] : '';
  $service_frequency = ($node->field_service_frequency) ? $node->field_service_frequency[LANGUAGE_NONE][0]['value'] : '1';
  $content_sharing_mode = ($node->field_content_sharing_mode) ? $node->field_content_sharing_mode[LANGUAGE_NONE][0]['value'] : '';
  $service_fetch_link = ($node->field_service_fetch_link) ? $node->field_service_fetch_link[LANGUAGE_NONE][0]['value'] : '';
  $ftp_ip_address = ($node->field_ftp_ip_address) ? $node->field_ftp_ip_address[LANGUAGE_NONE][0]['value'] : '';
  $ftp_username = ($node->field_ftp_username) ? $node->field_ftp_username[LANGUAGE_NONE][0]['value'] : '';
  $ftp_password = ($node->field_ftp_password) ? $node->field_ftp_password[LANGUAGE_NONE][0]['value'] : '';
  $service_email_address = ($node->field_email_address) ? $node->field_email_address[LANGUAGE_NONE][0]['value'] : '';
  $service_expiry_date = ($node->field_story_expiry_date) ? $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] : '';


  foreach ($field_client_selection as $key => $client) {
    $token = sha1($client . $association_nid . $timestamp . $six_digit_random_number);

    $id = db_insert('itg_client_token')
        ->fields(array(
          'nid' => $node_nid,
          'cid' => $client,
          'sid' => $association_nid,
          'delivery_mode' => $delivery_mode,
          'service_frequency' => $service_frequency,
          'content_sharing_mode' => $content_sharing_mode,
          'service_fetch_link' => $service_fetch_link,
          'ftp_ip_address' => $ftp_ip_address,
          'ftp_username' => $ftp_username,
          'ftp_password' => $ftp_password,
          'service_email_address' => $service_email_address,
          'service_expiry_date' => $service_expiry_date,
          'token' => $token,
          'custom_sharing_url' => $base_url . '/mobile_services/token/' . $token,
          'created_by' => $user->name,
          'reset_by' => '',
          'created_date' => $timestamps
        ))
        ->execute();
  }
}

/**
 * Implement function itg_mobile_services_token_update().
 * @param object $node of node elements   
 */
function itg_mobile_services_token_update($node) {
  global $user;
  global $base_url;
  $timestamp = strtotime("now") . "_";
  $six_digit_random_number = mt_rand(100000, 999999);
  $timestamps = date("Y-m-d H:i:s");

  $node_nid = $node->nid;
  $client_selection = $node->field_client_selection;
  $field_client_selection = $client_selection[LANGUAGE_NONE];
  $association_title = $node->field_service_association_title;
  $association_nid = $association_title[LANGUAGE_NONE][0]['target_id'];

  $client_name = '';
  $node = node_load($association_nid);
  $delivery_mode = ($node->field_service_delivery_mode) ? $node->field_service_delivery_mode[LANGUAGE_NONE][0]['value'] : '';
  $service_frequency = ($node->field_service_frequency) ? $node->field_service_frequency[LANGUAGE_NONE][0]['value'] : '1';
  $content_sharing_mode = ($node->field_content_sharing_mode) ? $node->field_content_sharing_mode[LANGUAGE_NONE][0]['value'] : '';
  $service_fetch_link = ($node->field_service_fetch_link) ? $node->field_service_fetch_link[LANGUAGE_NONE][0]['value'] : '';
  $ftp_ip_address = ($node->field_ftp_ip_address) ? $node->field_ftp_ip_address[LANGUAGE_NONE][0]['value'] : '';
  $ftp_username = ($node->field_ftp_username) ? $node->field_ftp_username[LANGUAGE_NONE][0]['value'] : '';
  $ftp_password = ($node->field_ftp_password) ? $node->field_ftp_password[LANGUAGE_NONE][0]['value'] : '';
  $service_email_address = ($node->field_email_address) ? $node->field_email_address[LANGUAGE_NONE][0]['value'] : '';
  $service_expiry_date = ($node->field_story_expiry_date) ? $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] : '';


  foreach ($field_client_selection as $key => $value) {

    $token = sha1($client . $association_nid . $timestamp . $six_digit_random_number);
    $check_token = itg_mobile_service_check_token($value['target_id'], $association_nid);

    if ($check_token) {
      $id = db_update('itg_client_token')
          ->fields(array(
            'delivery_mode' => $delivery_mode,
            'service_frequency' => $service_frequency,
            'content_sharing_mode' => $content_sharing_mode,
            'ftp_ip_address' => $ftp_ip_address,
            'ftp_username' => $ftp_username,
            'ftp_password' => $ftp_password,
            'service_email_address' => $service_email_address,
            'service_expiry_date' => $service_expiry_date,
            'token' => $token,
            'custom_sharing_url' => $base_url . '/mobile_services/token/' . $token,
            'reset_by' => $user->name,
            'updated_date' => $timestamps  # use REQUEST_TIME or time() here if you want the date as a long
          ))
          ->condition('cid', $value['target_id'], '=')
          ->condition('sid', $association_nid, '=')
          ->execute();
    }
    else {
      $id = db_insert('itg_client_token')
          ->fields(array(
            'nid' => $node_nid,
            'cid' => $client,
            'sid' => $association_nid,
            'delivery_mode' => $delivery_mode,
            'service_frequency' => $service_frequency,
            'content_sharing_mode' => $content_sharing_mode,
            'service_fetch_link' => $service_fetch_link,
            'ftp_ip_address' => $ftp_ip_address,
            'ftp_username' => $ftp_username,
            'ftp_password' => $ftp_password,
            'service_email_address' => $service_email_address,
            'service_expiry_date' => $service_expiry_date,
            'token' => $token,
            'custom_sharing_url' => $base_url . '/mobile_services/token/' . $token,
            'created_by' => $user->name,
            'reset_by' => '',
            'created_date' => $timestamps
          ))
          ->execute();
    }
  }
}

/**
 * Implement submit function itg_mobile_vas_service_content_submit().
 * @param array $form
 * @param array $form_state
 * @return array $form
 */
function itg_mobile_vas_service_content_submit($form, &$form_state) {
  global $user;
  $form_state['redirect'] = 'service-association-listing';
  $association_nid = $form_state['values']['field_service_association_title'][LANGUAGE_NONE][0]['target_id'];

  if ($association_nid) {
    $node = node_load($association_nid);
    $form_state['values']['title'] = $node->title;
  }
  return $form;
}

/**
 * Implement submit function itg_mobile_client_association_submit().
 * @param array $form
 * @param array $form_state
 * @return array $form
 */
function itg_mobile_client_association_submit($form, &$form_state) {
  global $user;
  $association_nid = $form_state['values']['field_service_association_title'][LANGUAGE_NONE][0]['target_id'];
  if ($association_nid) {
    $node = node_load($association_nid);
  }
  return $form;
}

/**
 * Implement validate function itg_mobile_client_association_validator().
 * @param array $form
 * @param array $form_state
 */
function itg_mobile_client_association_validator($form, &$form_state) {

  $node_nid = $form['nid']['#value'];
  $association_nid = $form_state['values']['field_service_association_title'][LANGUAGE_NONE][0]['target_id'];

  $field_client_selection = $form_state['values']['field_client_selection'][LANGUAGE_NONE];
  $client_name = '';
  foreach ($field_client_selection as $key => $value) {

    $target_id = $value['target_id'];

    $query = db_select('node', 'node')->fields('cs', array('field_client_selection_target_id'));
    $query->leftJoin('field_data_field_client_selection', 'cs', "node.nid = cs.entity_id");
    $query->leftJoin('field_data_field_service_association_title', 'sat', "node.nid = sat.entity_id");
    $query->condition('sat.field_service_association_title_target_id', $association_nid, '=');
    $query->condition('cs.field_client_selection_target_id', $target_id, '=');
    if (!empty($node_nid)) {
      $query->condition('node.nid', $node_nid, '<>');
    }

    $query->condition('node.type', array('client_service_association'), 'IN');
    $query->range(0, 1);
    $result = $query->execute();
    $record = $result->fetchAssoc();

    $target_id = ($record['field_client_selection_target_id']) ? $record['field_client_selection_target_id'] : '';

    if ($target_id) {
      $node = node_load($target_id);
      if ($node->title) {
        $client_name .= $node->title . ", ";
      }
    }

    $client_name = rtrim($client_name, ',');
  }

  if ($client_name) {
    form_set_error('field_client_selection', $client_name . 'is already associated this service');
  }
}

/**
 * Implement validate function itg_mobile_services_validator().
 * @param array $form
 * @param array $form_state
 */
function itg_mobile_services_validator($form, &$form_state) {
  $short_description = trim($form_state['values']['field_short_description'][LANGUAGE_NONE][0]['value']);
  if (strlen($short_description) > 255) {
    form_set_error('field_short_description', t('Your text contains more than 255 characters'));
  }

  $sharing_mode = trim($form_state['values']['field_content_sharing_mode'][LANGUAGE_NONE][0]['value']);
  switch ($sharing_mode) {
    // Web url Case
    case '1':
      echo "fetch_link =" . $fetch_link = trim($form_state['values']['field_service_fetch_link'][LANGUAGE_NONE][0]['value']);
      if (empty($fetch_link)) {
        form_set_error('field_service_fetch_link', t('Fetch link (our server) field is required.'));
      }
      if (!preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i", $fetch_link)) {
        form_set_error('field_service_fetch_link', t('Invalid URL.'));
      }
      break;

    // FTP case
    case '2':
      $ftp_ip_address = trim($form_state['values']['field_ftp_ip_address'][LANGUAGE_NONE][0]['value']);
      $ftp_username = trim($form_state['values']['field_ftp_username'][LANGUAGE_NONE][0]['value']);
      $ftp_password = trim($form_state['values']['field_ftp_password'][LANGUAGE_NONE][0]['value']);

      if (empty($ftp_ip_address)) {
        form_set_error('field_ftp_ip_address', t('FTP IP Address Required.'));
      }
      if (!filter_var($ftp_ip_address, FILTER_VALIDATE_IP)) {
        form_set_error('field_ftp_ip_address', t('FTP IP Address is not valid.'));
      }

      if (empty($ftp_username)) {
        form_set_error('field_ftp_username', t('FTP Username Required.'));
      }
      if (!preg_match('/^(?=.*[A-Za-z])[A-Za-z0-9!@#$%]{8,}$/', $ftp_username)) {
        form_set_error('field_ftp_username', t('FTP Username must be minimum 8 digit alphanumeric and without space.'));
      }
      if (empty($ftp_password)) {
        form_set_error('field_ftp_password', t('FTP Password Required.'));
      }
      if (!preg_match('/^(?=.*[A-Za-z])[A-Za-z0-9!@#$%]{8,}$/', $ftp_password)) {
        form_set_error('field_ftp_password', t('FTP Password must be minimum 8 digit alphanumeric and without space.'));
      }
      break;
    // Mail to case
    case '3':
      $email_address = trim($form_state['values']['field_email_address'][LANGUAGE_NONE][0]['value']);
      if (empty($email_address)) {
        form_set_error('field_email_address', t('Mail to Required.'));
      }
      // Validate email                
      if (!filter_var($email_address, FILTER_VALIDATE_EMAIL)) {
        form_set_error('field_email_address', t('Please enter valid email address.'));
      }
  }
}

/**
 * Implement validate function itg_mobile_association_validator().
 * @param array $form
 * @param array $form_state
 */
function itg_mobile_association_validator($form, &$form_state) {
  $validate = FALSE;
  $node_nid = isset($form_state['node']->nid) ? $form_state['node']->nid : '';
  $target_id = trim($form_state['values']['field_service_association_title'][LANGUAGE_NONE][0]['target_id']);
  $frequency = $form_state['values']['field_service_frequency'][LANGUAGE_NONE][0]['value'];
  $start_date = $form_state['values']['field_service_frequency_date'][LANGUAGE_NONE][0]['value'];
  $end_date = $form_state['values']['field_service_frequency_date'][LANGUAGE_NONE][0]['value2'];
  $exist_service_content = itg_mobile_services_check_exist_content($node_nid, $target_id, $start_date, $end_date);

  if ($frequency == 1) {
    drupal_add_js("jQuery(document).ready(function(){ jQuery('#edit-field-service-frequency').show(); });", 'inline');
  }
  else if ($frequency > 1) {
    if (empty($start_date) && empty($end_date)) {
      $validate = TRUE;
      drupal_add_js("jQuery(document).ready(function(){ jQuery('#edit-field-service-frequency').show(); jQuery('#field-service-content-values').hide();});", 'inline');
    }
  }

  if (isset($exist_service_content)) {
    form_set_error('field_service_association_title', t('Service content already exist please&nbsp;') . l(t('click here'), 'node/' . $exist_service_content . '/edit'));
  }

  $form_state['redirect'] = 'service-content-listing';
  if (empty($validate) && isset($target_id)) {

    $result = get_service_association($target_id);
    $record = $result->fetchAssoc();
    $entity_id = ($record['entity_id']) ? $record['entity_id'] : '';
    if ($entity_id) {

      $node = node_load($entity_id);
      $service_content_type = field_get_items('node', $node, 'field_service_content_type');
      drupal_add_js("jQuery(document).ready(function(){ jQuery('#edit-field-story-expert-description').hide(); jQuery('#edit-field-story-large-image').hide();jQuery('#edit-field-service-audio').hide();jQuery('#edit-field-service-video').hide();});", 'inline');
      foreach ($service_content_type as $key => $value) {

        $content_type = field_view_value('node', $node, 'field_service_content_type', $service_content_type[$key], array());
        $content_result = render($content_type);
        $content_type_val = str_replace(' ', '', trim(strtolower($content_result)));


        if ($content_type_val == 'text') {
          drupal_add_js("jQuery(document).ready(function(){ jQuery('.field-name-field-story-expert-description').show(); });", 'inline');
        }

        if ($content_type_val == 'image') {
          drupal_add_js("jQuery(document).ready(function(){ jQuery('.field-name-field-story-large-image').show();});", 'inline');
        }

        if ($content_type_val == 'video') {
          drupal_add_js("jQuery(document).ready(function(){ jQuery('.field-name-field-service-video').show();});", 'inline');
        }

        if ($content_type_val == 'audio') {
          drupal_add_js("jQuery(document).ready(function(){ jQuery('.field-name-field-service-audio').show();});", 'inline');
        }

        if ($content_type_val == 'wap(image,text,videoandaudio)') {
          drupal_add_js("jQuery(document).ready(function(){ jQuery('.field-name-field-story-expert-description').show(); jQuery('.field-name-field-story-large-image').show();jQuery('.field-name-field-service-audio').show();jQuery('.field-name-field-service-video').show();});", 'inline');
        }
      }
    }
  }
}

/**
 * Implement validate function itg_mobile_clients_validator().
 * @param array $form
 * @param array $form_state
 */
function itg_mobile_clients_validator($form, &$form_state) {
  $mobile_number = trim($form_state['values']['field_mobile_number'][LANGUAGE_NONE][0]['value']);
  $tech_mobile_number = trim($form_state['values']['field_contact_tech_mobile_number'][LANGUAGE_NONE][0]['value']);

  if (isset($mobile_number) && strlen($mobile_number) > 0) {
    if (!preg_match('/^[0-9]{9,10}$/', $mobile_number)) {
      form_set_error('field_mobile_number', t('Business Mobile Numbers should contain 10 digits'));
    }
  }

  if (isset($tech_mobile_number) && strlen($tech_mobile_number) > 0) {
    if (!preg_match('/^[0-9]{9,10}$/', $tech_mobile_number)) {
      form_set_error('field_contact_tech_mobile_number', t('Technical Mobile Numbers should contain 10 digits'));
    }
  }

  $valid_email = $form_state['values']['field_email_address'][LANGUAGE_NONE][0]['value'];
  $valid_tech_email_address = $form_state['values']['field_contact_tech_email_address'][LANGUAGE_NONE][0]['value'];
  if (!empty($valid_email) && !valid_email_address($valid_email)) {
    form_set_error('field_email_address', 'Sorry. Your Business email address,' . $valid_email . ' is not valid.');
  }

  if (!empty($valid_tech_email_address) && !valid_email_address($valid_tech_email_address)) {
    form_set_error('field_contact_tech_email_address', 'Sorry. Your Technical email address,' . $valid_tech_email_address . ' is not valid.');
  }

  $nid = '';
  if ($form_state['values']['field_client_title'][LANGUAGE_NONE]) {
    $short_description = $form_state['values']['field_client_short_description'][LANGUAGE_NONE][0]['value'];
    $title = $form_state['values']['title'] = taxonomy_term_load(trim($form_state['values']['field_client_title'][LANGUAGE_NONE][0]['tid']))->name . "-" . trim($short_description);

    $type = $form_state['node']->type;
    $nid = $form_state['node']->nid;
    // Check for duplicate node titles
    if (itg_common_check_duplicate_title($title, $type, $nid)) {
      form_set_error('title', t('<strong>@contenttitle</strong> is already exist.', array('@contenttitle' => $title)));
    }
  }
}

/**
 * Implement validate function itg_mobile_service_validator().
 * @param array $form
 * @param array $form_state
 */
function itg_mobile_service_validator($form, &$form_state) {

  $valid_email = $form_state['values']['field_email_address'][LANGUAGE_NONE][0]['value'];
  if (!empty($valid_email) && !valid_email_address($valid_email)) {
    form_set_error('field_email_address', 'Sorry. Your email address ' . $valid_email . ', is not valid.');
  }
}

/**
 * Implements after build function().
 * @param array $form
 * @param array $form_state
 * @return array $form
 */
function itg_service_association_after_build($form, &$form_state) {
  $form_state['redirect'] = 'service-association-listing';
  drupal_add_js(drupal_get_path('module', 'itg_mobile_services') . '/js/itg_mobile_new_service.js', array('weight' => 4, 'scope' => 'footer'));
  $form['path']['#access'] = FALSE;
  $form['field_service_title'][LANGUAGE_NONE][0]['value']['#attributes']['readonly'] = 'readonly';
  $form['field_service_char_limit'][LANGUAGE_NONE][0]['value']['#attributes']['readonly'] = 'readonly';
  return $form;
}

/**
 * Implements after build function().
 * @param array $form
 * @param array $form_state
 * @return array $form
 */
function itg_service_content_after_build($form, &$form_state) {
  global $base_url;
  $form['field_service_association_title'][LANGUAGE_NONE]['#options'] = itg_mobile_services_get_assoc_service();
  if (isset($form_state['values']['field_service_association_title'][LANGUAGE_NONE])) {
    if (is_array($form_state['values']['field_service_association_title'][LANGUAGE_NONE])) {
      $association_nid = isset($form_state['values']['field_service_association_title'][LANGUAGE_NONE][0]) ? (int) $form_state['values']['field_service_association_title'][LANGUAGE_NONE][0] : '';
    }
    else {
      $association_nid = $form_state['values']['field_service_association_title'][LANGUAGE_NONE];
    }

    if ($association_nid) {
      $result = get_service_association($association_nid);
      $entity_id = '';
      $record = $result->fetchAssoc();
      $entity_id = $record['entity_id'];
      if (isset($entity_id)) {
        $node = node_load($entity_id);
        $service_content_type = field_get_items('node', $node, 'field_service_content_type');
        $content_format = '';
      }
    }
  }
  $form['field_story_expert_description'][LANGUAGE_NONE][0]['value']['#title'] = '<label for="edit-field-story-expert-description-und-0-value">Content <span class="form-required" title="This field is required.">*</span></label>';
  $form['field_story_large_image'][LANGUAGE_NONE][0]['#title'] = '<label for="edit-field-story-large-image-und-0-upload">Content image <span class="form-required" title="This field is required.">*</span></label>';
  $form['field_service_audio'][LANGUAGE_NONE][0]['#title'] = '<label for="edit-field-service-audio-und-0-upload">Content Audio <span class="form-required" title="This field is required.">*</span></label>';
  $form['field_service_video'][LANGUAGE_NONE][0]['#title'] = '<label for="edit-field-service-video-und-0-upload">Content Video <span class="form-required" title="This field is required.">*</span></label>';
  $form['field_story_expert_description']['#suffix'] = '<span id="remain"></span>';

  if (isset($service_content_type)) {
    foreach ($service_content_type as $service_content_type_val) {
      $final_val[] = $service_content_type_val['value'];
    }
    $settings['service_content_type'] = $final_val;
  }
  else {
    $settings['service_content_type'] = '';
  }
  if ($form['nid']['#value']) {
    $settings['service_content_edit_mode'] = TRUE;
  }
  else {
    $settings['service_content_edit_mode'] = FALSE;
  }
  drupal_add_js(array('itg_mobile_services' => array('settings' => $settings)), array('type' => 'setting', 'scope' => 'footer'));
  drupal_add_js(drupal_get_path('module', 'itg_mobile_services') . '/js/itg_mobile_service.js', array('weight' => 3, 'scope' => 'footer'));
  $form['path']['#access'] = FALSE;
  $form['title']['#attributes']['readonly'] = 'readonly';
  $form['field_story_client_title'][LANGUAGE_NONE][0]['value']['#attributes']['readonly'] = 'readonly';
  $form_state['redirect'] = 'service-content-listing';
  return $form;
}

/**
 * after_build itg_mobile_client_after_submit
 * @param array $form
 * @param array reference $form_state
 * @return array $form
 */
function itg_mobile_client_after_submit($form, &$form_state) {
  $form_state['redirect'] = 'clients-listing';
  return $form;
}

/**
 * Implements after build function().
 * @param array $form
 * @param array $form_state
 * @return array $form
 */
function itg_mobile_client_after_build($form, &$form_state) {
  $form['path']['#access'] = FALSE;
  $form_state['redirect'] = 'clients-listing';
  return $form;
}

/**
 * Implements after build function().
 * @param array $form
 * @param array $form_state
 * @return array $form
 */
function itg_mobile_service_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'itg_mobile_services') . '/js/itg_mobile_new_service.js', array('weight' => 4, 'scope' => 'footer'));
  $form['path']['#access'] = FALSE;
  $form['field_story_expiry_date']['#attributes'] = array('readonly' => 'readonly');
  $form_state['redirect'] = 'service-listing';
  return $form;
}

/**
 * ajax service callback for itg_mobile_content_custom_callback
 * @param array $form
 * @param array reference $form_state
 * @return array $form
 */
function itg_mobile_content_custom_callback(&$form, &$form_state) {
  $form_state['redirect'] = 'service-content-listing';
  $commands = array();
  $association_nid = $form_state['values']['field_service_association_title'][LANGUAGE_NONE][0]['target_id'];
  if ($association_nid) {
    $result = get_service_association($association_nid);
    $name = '';
    $entity_id = '';

    while ($record = $result->fetchAssoc()) {
      $service_title = $record['title'];
      $entity_id = $record['entity_id'];
      $client_node = node_load($record['field_client_selection_target_id']);
      $client_selection_val = str_replace(' ', '', trim($client_node->title));
      $name .= $client_selection_val . ",";
    }
    if (empty($entity_id)) {
      $form['title']['#description'] = 'service not associated.';
      $commands[] = ajax_command_replace("#client_entity_wrapper", render($form['title']));
      $page = array('#type' => 'ajax', '#commands' => $commands);
      ajax_deliver($page);
      exit;
    }
    else {

      $node = node_load($entity_id);
      $service_content_type = field_get_items('node', $node, 'field_service_content_type');
      $content_format = '';
      $commands[] = ajax_command_invoke('#edit-field-service-content-und-0-remove-button', 'hide');
      $commands[] = ajax_command_invoke('#edit-field-service-frequency', 'show');
      foreach ($service_content_type as $key => $value) {
        $content_type = field_view_value('node', $node, 'field_service_content_type', $service_content_type[$key], array());
        $content_result = render($content_type);
        $content_type_val = str_replace(' ', '', trim(strtolower($content_result)));
        $content_format .= $content_type_val . ',';
      }
      $client_name = rtrim($name, ',');
      $commands[] = ajax_command_invoke('#content-format-hidden', 'val', array($content_format));
      $form['title']['#value'] = $service_title;
      $form['field_story_client_title']['und'][0]['value']['#value'] = $client_name;
      $commands[] = ajax_command_replace("#edit-field-story-client-title", render($form['field_story_client_title']));
      $commands[] = ajax_command_replace("#client_entity_wrapper", render($form['title']));
      $page = array('#type' => 'ajax', '#commands' => $commands);
      ajax_deliver($page);
      exit;
    }
  }
}

/**
 * ajax service callback for itg_mobile_content_enable
 * @param array $form
 * @param array reference $form_state
 * @return array $form
 */
function itg_mobile_content_enable(&$form, &$form_state) {
  $form_state['redirect'] = 'service-content-listing';
  $commands = array();
  $association_nid = $form_state['values']['field_service_association_title'][LANGUAGE_NONE][0]['target_id'];
  $frequency = $form_state['values']['field_service_frequency'][LANGUAGE_NONE][0]['value'];
  $start_date = $form_state['values']['field_service_frequency_date'][LANGUAGE_NONE][0]['value'];
  $end_date = $form_state['values']['field_service_frequency_date'][LANGUAGE_NONE][0]['value2'];
  $days = (strtotime($end_date) - strtotime($start_date)) / (60 * 60 * 24);
  if ($days) {
    $commands[] = ajax_command_invoke('#field-service-content-add-more-wrapper', 'show');
    $commands[] = ajax_command_invoke('.field-name-field-service-content .field-add-more-submit', 'trigger');
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
    exit;
  }
}

/**
 * ajax service callback for itg_mobile_content_selection_callback
 * @param array $form
 * @param array reference $form_state
 * @return array $form
 */
function itg_mobile_content_selection_callback(&$form, &$form_state) {
  $form_state['redirect'] = 'service-association-listing';
  $node_nid = $form['nid']['#value'];
  $association_nid = $form_state['values']['field_service_association_title'][LANGUAGE_NONE][0]['target_id'];
  $field_client_selection = $form_state['values']['field_client_selection'][LANGUAGE_NONE];

  foreach ($field_client_selection as $key => $value) {
    $target_id = $value['target_id'];
    $query = db_select('node', 'node')->fields('cs', array('field_client_selection_target_id'));
    $query->leftJoin('field_data_field_client_selection', 'cs', "node.nid = cs.entity_id");
    $query->leftJoin('field_data_field_service_association_title', 'sat', "node.nid = sat.entity_id");
    $query->condition('sat.field_service_association_title_target_id', $association_nid, '=');
    $query->condition('cs.field_client_selection_target_id', $target_id, '=');
    if (!empty($node_nid)) {
      $query->condition('node.nid', $node_nid, '<>');
    }

    $query->condition('node.type', array('client_service_association'), 'IN');
    $query->range(0, 1);
    $result = $query->execute();
    $record = $result->fetchAssoc();
    $target_id = ($record['field_client_selection_target_id']) ? $record['field_client_selection_target_id'] : '';
    if ($target_id) {
      $node = node_load($target_id);
      if ($node->title) {
        $client_name .= $node->title . ", ";
      }
    }
    $client_name = rtrim($client_name, ',');
  }

  if ($client_name) {
    return array(
      '#type' => 'ajax',
      '#commands' => array(
        ajax_command_remove("#edit-field-service-association-title .error", "<span class='error'>" . $client_name . " is already associated this service</span>"),
        ajax_command_append("#edit-field-service-association-title", "<span class='error'>" . $client_name . " is already associated this service</span>")
      )
    );
  }
}

/**
 * ajax service callback for itg_mobile_services_custom_callback
 * @param array $form
 * @param array reference $form_state
 * @return array $form
 */
function itg_mobile_services_custom_callback($form, &$form_state) {
  $nid = $form_state['values']['field_service_association_title'][LANGUAGE_NONE][0]['target_id'];
  $node = node_load($nid);
  $form_state['redirect'] = 'service-association-listing';
  $service_title = $node->field_service_title[LANGUAGE_NONE][0]['value'];
  $service_char_limit = $node->field_service_char_limit[LANGUAGE_NONE][0]['value'];
  $form['field_service_title'][LANGUAGE_NONE][0]['value']['#value'] = ($service_title) ? $service_title : '';
  $form['field_service_char_limit'][LANGUAGE_NONE][0]['value']['#value'] = ($service_char_limit) ? $service_char_limit : '';

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#service_title_replace_wrapper", render($form['field_service_title'])),
      ajax_command_replace("#char_limit_replace_wrapper", render($form['field_service_char_limit']))
    )
  );
}

/**
 * Implements hook_field_group_build_pre_render_alter.
 * @param array $element
 */
function itg_mobile_services_field_group_build_pre_render_alter(&$element) {
  if (isset($element['#form_id'])) {
    if ($element['#form_id'] == 'service_creation_node_form') {
      $element['group_service_ftp']['#states'] = array(
        'visible' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
        'required' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
      );

      $element['group_service_ftp']['#id'] = 'group_service_ftp';
    }
  }
}

/**
 * Implement hook_views_pre_render
 * @param Object $view
 */
function itg_mobile_services_views_pre_render(&$view) {
  //Add "Create Client" button on listing page of Client Details
  if (isset($view->name) && $view->name == "clients_details") {
    if (isset($view->current_display) && $view->current_display == "page") {
      $header_content_client = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
      $header_content_client .= l(t('Create Client'), 'node/add/clients-creation', array('query' => array('destination' => 'clients-listing')));
      $header_content_client .= '<span class="client-services">&nbsp;' . l(t('Associate Client & Services'), 'node/add/client-service-association', array('query' => array('destination' => 'clients-listing'))) . '&nbsp;</span>';
    }
    elseif (isset($view->current_display) && $view->current_display == "page_1") {
      $header_content_client = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
      $header_content_client .= l(t('Create Service'), 'node/add/service-creation', array('query' => array('destination' => 'service-listing')));
    }
    elseif (isset($view->current_display) && $view->current_display == "page_2") {
      $header_content_client = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
      $header_content_client .= l(t('Associate Client & Services'), 'node/add/client-service-association', array('query' => array('destination' => 'service-association-listing')));
    }
    elseif (isset($view->current_display) && $view->current_display == "page_3") {
      $header_content_client = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
      $header_content_client .= l(t('Create Content'), 'node/add/vas-service-content', array('query' => array('destination' => 'service-content-listing')));
    }
    if (isset($header_content_client)) {
      $view->attachment_before = $header_content_client;
    }
  }
}

/**
 * Implements hook_menu().
 * @return array $items 
 */
function itg_mobile_services_menu() {
  $items['countchar_validation'] = array(
    'page callback' => 'itg_countchar_validation',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['mobile_services/feed-generator-of-content'] = array(
    'page callback' => 'mobile_services_generator_of_content',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_mobile_services.inc',
  );
  $items['mobile_services/%/autocomplete'] = array(
    'page callback' => 'itg_mobile_services_get_content_title',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
  );

  $items['mobile_services/token/%'] = array(
    'page callback' => 'mobile_services_generator_data',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_mobile_services.inc',
  );

  $items['mobile_services/token/list'] = array(
    'page callback' => 'mobile_services_token_list',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_mobile_services.inc',
  );

  return $items;
}

/**
 * Implements ajax callback function for itg_countchar_validation
 * @print array $result 
 */
function itg_countchar_validation() {
  $nodeid = $_POST['nidvalue'];
  $query = db_select('field_data_field_service_char_limit', 'fc');
  $query->fields('fc', array('field_service_char_limit_value'));
  $query->condition('entity_id', $nodeid, '=');
  $result = $query->execute()->fetchField();
  echo $result;
}

/**
 * Implementation of hook_form_views_exposed_form_alter().
 * @param array $form
 * @param array reference $form_state
 */
function itg_mobile_services_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  switch ($form['#id']) {
    case 'views-exposed-form-clients-details-page':
      $form['field_client_title_tid']['#attributes'] = array(
        'placeholder' => t('Title')
      );
      break;
    case 'views-exposed-form-clients-details-page-1':
      $form['title']['#attributes'] = array(
        'placeholder' => t('Title')
      );
      $form['title']['#autocomplete_path'] = 'content-title-list/service_creation/autocomplete';
      break;
    case 'views-exposed-form-clients-details-page-3':
      $form['title']['#attributes'] = array(
        'placeholder' => t('Title')
      );
      $form['title']['#autocomplete_path'] = 'content-title-list/create_content/autocomplete';
      break;
    case 'views-exposed-form-clients-details-page-2':
      $form['field_service_title_value']['#attributes'] = array(
        'placeholder' => t('Title')
      );

      $form['field_service_association_title_target_id']['#autocomplete_path'] = 'mobile_services/service_creation/autocomplete';
      break;
  }
}

/**
 * custom get_service_association
 * @param int $target_id
 * @return array $query
 */
function get_service_association($target_id) {
  if (empty($target_id)) {
    return '';
  }
  $query = db_select('node', 'node')
      ->fields('service_asso', array('title'))
      ->fields('sat', array('entity_id'))
      ->fields('cs', array('field_client_selection_target_id', 'revision_id'));

  $query->leftJoin('field_data_field_client_selection', 'cs', "node.nid = cs.entity_id");
  $query->leftJoin('field_data_field_service_association_title', 'sat', "node.nid = sat.entity_id");
  $query->Join('node', 'service_asso', "sat.field_service_association_title_target_id = service_asso.nid");
  $query->condition('sat.field_service_association_title_target_id', $target_id, '=');
  $query->condition('node.type', array('client_service_association'), 'IN');
  $query->range(0, 10);
  return $query->execute();
}

/**
 * callback for all the mobile service association of title
 * @param type $title
 */
function itg_mobile_services_get_content_title($title) {
  if (strlen(trim($title)) > 0) {
    $content_type = arg(1);
    $options = '';
    $title = strtolower(trim($title));
    $query = db_select('node', 'n');
    $query->fields('n', array('title', 'nid'));
    $query->condition('title', '%' . $title . '%', 'LIKE');
    $query->condition('n.type', $content_type, '=');
    $query->range(0, 20);

    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
      $options[$record['title'] . '(' . $record['nid'] . ')'] = $record['title'];
    }
    drupal_json_output($options);
  }
}

/**
 * Implementation of hook_views_query_alter
 * @param Object reference $view
 * @param array reference $query
 */
function itg_mobile_services_views_query_alter(&$view, &$query) {
  if (isset($view->name) && $view->name === 'clients_details' && $view->current_display == 'page_2') {
    if (isset($_GET['field_service_association_title_target_id'])) {
      $association = explode('(', $_GET['field_service_association_title_target_id']);
      $association = rtrim($association['1'], ')');
      $association_condition = $association;
      if (isset($view->query->where[1]['conditions'][1]['field'])) {
        foreach ($query->where[1]['conditions'] as $idx => $condition) {
          if (!is_object($condition['field']) && $condition['field'] == 'field_data_field_service_association_title.field_service_association_title_target_id') {
            $view->query->where[1]['conditions'][$idx]['value'] = $association_condition;
          }
        }
      }
    }
  }
}

/**
 * Get check service token by token
 * @param type $cid
 * @param type $association_nid  
 */
function itg_mobile_service_check_token($cid, $association_nid) {
  return $entity_id = db_select('itg_client_token', 't')
          ->fields('t', array('id'))
          ->condition('cid', $cid, '=')
          ->condition('sid', $association_nid, '=')
          ->range(0, 1)->execute()->rowCount();
}

/**
 * Get all services association for itg_mobile_services_get_assoc_service
 * @return type $options
 *   
 */
function itg_mobile_services_get_assoc_service() {
  $query = db_query("SELECT DISTINCT node.title AS node_title, node.created AS node_created, node.nid AS nid FROM 
node node
INNER JOIN field_data_field_service_association_title field_data_field_service_association_title ON node.nid = field_data_field_service_association_title.field_service_association_title_target_id AND (field_data_field_service_association_title.entity_type = 'node' AND field_data_field_service_association_title.deleted = '0')
INNER JOIN node field_service_association_title_node ON field_data_field_service_association_title.entity_id = field_service_association_title_node.nid
LEFT JOIN field_data_field_story_expiry_date field_data_field_story_expiry_date ON node.nid = field_data_field_story_expiry_date.entity_id AND (field_data_field_story_expiry_date.entity_type = 'node' AND field_data_field_story_expiry_date.deleted = '0')
WHERE (( (node.status = '1') AND (node.type IN  (:type)) AND (field_data_field_story_expiry_date.field_story_expiry_date_value >= now()) ))
ORDER BY node_created DESC", array(':type' => 'service_creation'));

  $result = $query->fetchAll();
  $options['_none'] = '- Select a value -';
  foreach ($result as $val) {
    $options[$val->nid] = $val->node_title;
  }
  return $options;
}

/**
 * Implements hook_field_attach_form().
 * @param type $entity_type
 * @param type $entity
 * @param array $form
 * @param array $form_state
 * @param type $langcode
 */
function itg_mobile_services_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {

  $options = array('language' => field_valid_language($langcode));
  // Merge default options.
  $default_options = array(
    'default' => FALSE,
    'deleted' => FALSE,
    'language' => NULL,
  );
  $options += $default_options;
  list(,, $bundle) = entity_extract_ids($entity_type, $entity);
  $instances = _field_invoke_get_instances($entity_type, $bundle, $options);
  // Iterate through the instances.
  $return = array();
  foreach ($instances as $instance) {
    // field_info_field() is not available for deleted fields, so use
    // field_info_field_by_id().
    $field = field_info_field_by_id($instance['field_id']);
    $field_name = $field['field_name'];
    //If we are looking at our field type and specific widget type, and we are multiple entries
    if (($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) && ($field['type'] == "field_collection")) {
      if ($field['bundles']['node'][0] == "vas_service_content") {
        //Check just in case the button is here, and add another #submit function
        if (isset($form[$field['field_name']]['und']['add_more'])) {
          // add a simple select list, this defaults to numb 3
          $form[$field['field_name']]['add_more_number'] = array(
            '#type' => 'select',
            '#options' => drupal_map_assoc(range(0, 100)),
            '#default_value' => 1,
            '#attributes' => array('style' => 'display:none;'),
          );
          $form[$field['field_name']]['und']['add_more']['#submit'][] = 'itg_mobile_services_field_add_more_submit';
          $form[$field['field_name']]['und']['add_more']['#value'] = 'Add more rows';
        }
      }
    }
  }
}

/**
 * callback for itg_mobile_services_field_add_more_submit
 * @param array $form
 * @param array reference $form_state
 */
function itg_mobile_services_field_add_more_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];
  // Alter the number of widgets to show. items_count = 0 means 1.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  //get the number from the select
  $numbtoadd = $form[$field_name]['add_more_number']['#value'];
  if ($numbtoadd) {
    $field_state['items_count'] += $numbtoadd;
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
    $form_state['rebuild'] = TRUE;
  }
  drupal_rebuild_form('vas_service_content_node_form', $form_state, $old_form = NULL);
  $start_date = str_replace('/', '-', $form_state['input']['field_service_frequency_date'][LANGUAGE_NONE][0]['value']['date']);
  $end_date = str_replace('/', '-', $form_state['input']['field_service_frequency_date'][LANGUAGE_NONE][0]['value2']['date']);
  $node_nid = isset($form_state['node']->nid) ? $form_state['node']->nid : '';
  $sid = trim($form_state['values']['field_service_association_title'][LANGUAGE_NONE]);
  $get_exist_content = itg_mobile_services_get_exist_content($sid, $start_date, $end_date);
  while ($record = $get_exist_content->fetchAssoc()) {
    $entity_id = $record['entity_id'];
    $service_details = entity_load('field_collection_item', array($entity_id));
    $date_key_arr = explode(' ', $service_details[$entity_id]->field_service_content_date['und'][0]['value']);
    $date_key = $date_key_arr[0];
    $service_content_details[$date_key]['startdate'] = $service_details[$entity_id]->field_service_content_date['und'][0]['value'];
    $service_content_details[$date_key]['content'] = $service_details[$entity_id]->field_story_expert_description['und'][0]['value'];
    $service_content_details[$date_key]['image'] = $service_details[$entity_id]->field_story_large_image['und'][0]['fid'];
    $service_content_details[$date_key]['video'] = $service_details[$entity_id]->field_service_video['und'][0]['fid'];
    $service_content_details[$date_key]['audio'] = $service_details[$entity_id]->field_service_audio['und'][0]['fid'];
    $service_content_details[$date_key]['entity_id'] = $entity_id;
  }
  $i = -1;
  foreach ($form_state['field']['field_service_content']['und']['entity'] as $key => $filed_collection) {
    if (is_numeric($key)) {
      $date = date_create($start_date);
      date_add($date, date_interval_create_from_date_string($i . " days"));
      $tomorrow = date_format($date, "m/d/Y");
      $schema_tomorrow = date_format($date, "Y-m-d");
      $tomorrow_date = isset($service_content_details[$schema_tomorrow]['startdate']) ? $service_content_details[$schema_tomorrow]['startdate'] : $tomorrow;
      $form_state['field']['field_service_content']['und']['entity'][$key]->field_service_content_date['und'][0]['value'] = $tomorrow_date;
      $form_state['field']['field_service_content']['und']['entity'][$key]->field_story_expert_description['und'][0]['value'] = $service_content_details[$schema_tomorrow]['content'];
      $form_state['field']['field_service_content']['und']['entity'][$key]->field_story_large_image['und'][0]['fid'] = $service_content_details[$schema_tomorrow]['image'];
      $form_state['field']['field_service_content']['und']['entity'][$key]->field_service_video['und'][0]['fid'] = $service_content_details[$schema_tomorrow]['video'];
      $form_state['field']['field_service_content']['und']['entity'][$key]->field_service_audio['und'][0]['fid'] = $service_content_details[$schema_tomorrow]['audio'];
      $i++;
    }
  }

  $settings['service_content_first_row_hide'] = TRUE;
  drupal_add_js(array('itg_mobile_services' => array('settings' => $settings)), array('type' => 'setting', 'scope' => 'footer'));
  drupal_add_js(drupal_get_path('module', 'itg_mobile_services') . '/js/itg_mobile_service.js', array('weight' => 3, 'scope' => 'footer'));
}

/**
 * custom callback for check exist content
 * @param int $sid
 * @param string $start_time
 * @param string $end_time
 * @return int entity_id 
 */
function itg_mobile_services_check_exist_content($node_nid, $sid, $start_time, $end_time) {
  $query = db_select('field_data_field_service_frequency_date', 'sf');
  $query->fields('sf', array('entity_id'));
  $query->leftJoin('field_data_field_service_association_title', 'sat', "sf.entity_id = sat.entity_id");
  $query->condition('field_service_association_title_target_id', $sid, '=');
  $query->condition('sf.field_service_frequency_date_value', $start_time, '=');
  $query->condition('sf.field_service_frequency_date_value2', $end_time, '=');
  if ($node_nid) {
    $query->condition('sf.entity_id', $node_nid, '<>');
  }
  $query->range(0, 1);
  $result = $query->execute();
  $record = $result->fetchAssoc();
  return $record['entity_id'];
}

/**
 * custom callback for get exist content
 * @param int $sid
 * @param string $start_time
 * @param string $end_time
 * @return int entity_id 
 * */
function itg_mobile_services_get_exist_content($sid, $start_time, $end_time) {
  $start_time = date_create($start_time);
  $start_time = date_format($start_time, "Y-m-d") . " 00:00:00";

  $end_time = date_create($end_time);
  $end_time = date_format($end_time, "Y-m-d") . " 00:00:00";

  $query = db_select('field_data_field_service_content', 'sc');
  $query->fields('cd', array('entity_id'));
  $query->leftJoin('field_data_field_service_association_title', 'sat', "sc.entity_id = sat.entity_id");
  $query->leftJoin('field_data_field_service_content_date', 'cd', "sc.field_service_content_value = cd.entity_id");
  $query->condition('field_service_association_title_target_id', $sid, '=');
  $query->condition('cd.field_service_content_date_value', array($start_time, $end_time), 'BETWEEN');

  $query->range(0, 50);
  $result = $query->execute();
  return $result;
}
