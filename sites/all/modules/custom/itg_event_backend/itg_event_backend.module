<?php

/**
 * @file
 * ITG Event backend module.
 *
 * Provides customizations and functions for Event Backend.
 *
 */

/**
 * Implementation of hook_form_alter().
 * {@inheritdoc}
 */
function itg_event_backend_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "event_backend_node_form") {
    $form['#after_build'][] = 'itg_event_backend_after_build';
    array_unshift($form['#validate'], "itg_event_backend_node_form_validate");
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'manage-event-backend', array('attributes' => array('class' => 'button'))),
      '#weight' => -10,
    );

    // Node redirection code
    if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration' || $form_state['storage']['step'] == 'step_program_schedule' || $form_state['storage']['step'] == 'step_sponsor' || $form_state['storage']['step'] == 'step_media' || $form_state['storage']['step'] == 'step_highlights' || $form_state['storage']['step'] == 'step_first' || $form_state['storage']['step'] == 'step_second')) {
      $form['actions']['submit']['#submit'][] = 'itg_event_backend_configuration_redirect';
    }
    if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration')) {
      $form['actions']['submit']['#weight'] = -10;
    }
    else {
      $form['actions']['submit']['#weight'] = 10;
    }
    //add extra save button
    if (arg(0) == "node" && arg(2) == "edit" && is_numeric(arg(1))) {
      $form['actions']['submit2'] = array(
        '#type' => 'submit',
        '#name' => 'second_submit',
        '#value' => t('Save'),
        '#access' => TRUE,
        '#submit' => array('node_form_submit', 'itg_event_backend_second_submit'),
        '#weight' => -9,
      );
    }
    $form['actions']['cancel']['#weight'] = -10;
    if ((arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == "edit") && $form['#node']->status == 1) {
      $form['field_event_start_date']['#attributes']['class'][] = 'date-disabled';
      $form['field_event_close_date']['#attributes']['class'][] = 'date-disabled';
      $form['field_story_expiry_date']['#attributes']['class'][] = 'date-disabled';
      $form['field_registration_close_date']['#attributes']['class'][] = 'date-disabled';
    }

    if (!empty($form['nid']['#value']) && arg(2) == 'edit') {
      $node_type = 'Event';
      $node_type = str_replace("_", " ", $node_type);
      $node_type = ucfirst($node_type);
      $node_title = $form['#node']->title;
      $edit_title = 'Edit ' . $node_type . ' - ' . $node_title;
      drupal_set_title($edit_title);
    }
    // Current step save in session variable
    if (isset($form_state['storage']['step'])) {
      $_SESSION['current_step'] = $form_state['storage']['step'];
    }
  }
  if ($form_id == 'sponsor_node_form') {
    $form['actions']['submit']['#submit'][] = 'itg_sponsor_alter_submit_status_message';
    $form['#after_build'][] = 'itg_event_backend_sponsor';
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'manage-sponsor', array('attributes' => array('class' => 'button'))),
      '#weight' => 20,
    );
  }
}

/**
 * Implements alter message function().
 * @param array $form
 * @param array $form_state
 */
function itg_sponsor_alter_submit_status_message(&$form, $form_state) {
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'sponsor') {
    $op = 'created';
  }
  else {
    $op = 'updated';
  }
  $sponsor_title = $form_state['node']->title;
  drupal_set_message(t('Sponsor <b>' . $sponsor_title . '</b> has been ' . $op . '.'));
  $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * Implements custom validate for event backend.
 * @param array $form
 * @param array $form_state
 */
function itg_event_backend_node_form_validate($form, &$form_state) {
  $start_date = strtotime($form_state['values']['field_event_start_date'][LANGUAGE_NONE][0]['value']);
  $end_date = strtotime($form_state['values']['field_event_close_date'][LANGUAGE_NONE][0]['value']);
  $registration_close = strtotime($form_state['values']['field_registration_close_date'][LANGUAGE_NONE][0]['value']);
  $registration_start = strtotime($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value']);

  if ($registration_close <= $registration_start) {
    form_set_error('field_story_expiry_date', t('Registration start date must be less than registration close date.'));
  }
  if ($end_date <= $start_date) {
    form_set_error('field_event_close_date', t('Event close date must be greater than event start date & time.'));
  }
  if ($registration_close >= $end_date) {
    form_set_error('field_registration_close_date', t('Registration close date must be less than event close date.'));
  }

  $event_type = $form_state['values']['field_event_type'][LANGUAGE_NONE][0]['value'];
  if ($event_type == 'paid' && $form_state['values']['field_group_registration_fee_5'][LANGUAGE_NONE][0]['value'] == '') {
    form_set_error('field_group_registration_fee_5', t('Group Registration Fee (upto 5) is required.'));
  }

  if ($event_type == 'paid' && $form_state['values']['field_group_registration_fee_10'][LANGUAGE_NONE][0]['value'] == '') {
    form_set_error('field_group_registration_fee_10', t('Group Registration Fee (upto 10) is required.'));
  }

  if ($event_type == 'paid' && $form_state['values']['field_individual_registration_fe'][LANGUAGE_NONE][0]['value'] == '') {
    form_set_error('field_individual_registration_fe', t('Individual Registration Fee is required.'));
  }

  // Fees validation for registration
  if ($event_type == 'paid' && $form_state['values']['field_individual_registration_fe'][LANGUAGE_NONE][0]['value'] > $form_state['values']['field_group_registration_fee_5'][LANGUAGE_NONE][0]['value']) {
    form_set_error('field_individual_registration_fe', t('Individual Registration Fee should be less then Group Registration Fee (upto 5)'));
  }

  if ($event_type == 'paid' && $form_state['values']['field_group_registration_fee_5'][LANGUAGE_NONE][0]['value'] > $form_state['values']['field_group_registration_fee_10'][LANGUAGE_NONE][0]['value']) {
    form_set_error('field_group_registration_fee_5', t('Group Registration Fee (upto 5) should be less then Group Registration Fee (upto 10).'));
  }

  if (($event_type == 'paid' || $event_type == 'free') && $form_state['values']['field_no_of_tickets'][LANGUAGE_NONE][0]['value'] == '') {
    form_set_error('field_no_of_tickets', t('Please enter No. of Tickets'));
  }

  // time validation
  foreach ($form_state['values']['field_program_schedule'][LANGUAGE_NONE] as $key => $value) {
    $start_time = $form_state['values']['field_program_schedule'][LANGUAGE_NONE][$key]['field_start_time'][LANGUAGE_NONE][0]['value'];
    $end_time = $form_state['values']['field_program_schedule'][LANGUAGE_NONE][$key]['field_start_time'][LANGUAGE_NONE][0]['value2'];
    if ($start_time > $end_time) {
      drupal_get_messages();
      form_set_error('field_start_time', t('Start time must be less than end time.'));
    }
  }
  // URL validation
  if (isset($form_state['values']['field_story_url'][LANGUAGE_NONE]) && $form_state['values']['field_story_url'][LANGUAGE_NONE][0]['value'] != '') {
    if (!preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i", $form_state['values']['field_story_url'][LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_story_url', t('Invalid event URL .'));
    }
  }
  // media validation
  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_media')) {
    foreach ($form_state['values']['field_event_media'][LANGUAGE_NONE] as $key => $value) {
      if (is_numeric($key)) {
        if ($form_state['values']['field_event_media'][LANGUAGE_NONE][$key]['field_browse_or_upload'][LANGUAGE_NONE][0]['value'] == 'photo' && $form_state['values']['field_event_media'][LANGUAGE_NONE][$key]['field_quiz_answer_image'][LANGUAGE_NONE][0]['fid'] == 0) {
          form_set_error('field_quiz_answer_image', t('Photo is required'));
        }
        elseif ($form_state['values']['field_event_media'][LANGUAGE_NONE][$key]['field_browse_or_upload'][LANGUAGE_NONE][0]['value'] == 'video' && $form_state['values']['field_event_media'][LANGUAGE_NONE][$key]['field_poll_question_video'][LANGUAGE_NONE][0]['fid'] == 0) {
          form_set_error('field_poll_question_video', t('Video is required'));
        }
        elseif ($form_state['values']['field_event_media'][LANGUAGE_NONE][$key]['field_browse_or_upload'][LANGUAGE_NONE][0]['value'] == 'audio' && $form_state['values']['field_event_media'][LANGUAGE_NONE][$key]['field_audio'][LANGUAGE_NONE][0]['fid'] == 0) {
          form_set_error('field_audio', t('Audio is required'));
        }
      }
    }
  }
}

/**
 * After build for sponsor form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_event_backend_sponsor($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'itg_event_backend') . '/js/itg_event_sponsor.js', array('weight' => 3));
  global $user, $base_url;
  unset($form['metatags']['intro_text']['#markup']);
  $form['path']['pathauto']['#title'] = t('Generate automatic Sef URL');
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_event_sponsor' => array('settings' => $settings)), array('type' => 'setting'));
  $form['title']['#title'] = 'Sponsor Title';
  return $form;
}

/**
 * After build for Event backend form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_event_backend_after_build($form, &$form_state) {
  // add extra save button
  if (arg(0) == "node" && arg(2) == "edit" && is_numeric(arg(1))) {
    $form['actions']['submit2'] = array(
      '#type' => 'submit',
      '#name' => 'second_submit',
      '#value' => t('Save'),
      '#access' => TRUE,
      '#submit' => array('node_form_submit', 'itg_event_backend_second_submit'),
      '#weight' => -9,
    );
  }
  drupal_add_js(drupal_get_path('module', 'itg_event_backend') . '/js/itg_event_backend.js', array('weight' => 3));
  if (isset($form_state['values']['nid'])) {
    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['node_id'] = $form_state['values']['nid'];
    drupal_add_js(array('itg_event_backend_nid' => array('settings' => $settings)), array('type' => 'setting'));
  }
  global $user, $base_url;
  unset($form['metatags']['intro_text']['#markup']);
  $form['path']['pathauto']['#title'] = t('Generate automatic Sef URL');
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_event_backend' => array('settings' => $settings)), array('type' => 'setting'));

  $end_date = strtotime('+1 day', strtotime($form_state['values']['field_event_close_date'][LANGUAGE_NONE][0]['value']));
  $start_date = $form_state['values']['field_event_start_date'][LANGUAGE_NONE][0]['value'];
  $end_date_new = date('Y-m-d', $end_date);
  $start_date_new = explode(' ', $start_date);
  $options_daywise = itg_event_backend_date_interval($start_date_new[0], $end_date_new);
  $highlight_options = array('_none' => t('- Select Daywise -'));
  $media_options = array('_none' => t('- Select Daywise -'));
  foreach ($form['field_program_schedule'][LANGUAGE_NONE] as $key => $program) {
    if (is_numeric($key)) {
      $program_daywise = $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
      $program_title = $form['field_program_schedule'][LANGUAGE_NONE][$key]['#entity']->field_story_expert_name[LANGUAGE_NONE][0]['value'];
      $start_time = date('H:i', strtotime($form['field_program_schedule'][LANGUAGE_NONE][$key]['#entity']->field_start_time[LANGUAGE_NONE][0]['value']));
      $end_time = date('H:i', strtotime($form['field_program_schedule'][LANGUAGE_NONE][$key]['#entity']->field_start_time[LANGUAGE_NONE][0]['value2']));
      $day_value = explode(':', $program_daywise);
      $highlight_options[$program_daywise . '--' . $program_title . '--' . $start_time . '--' . $end_time] = t($day_value[0] . ' - ' . $program_title . ' - ' . $start_time . ' to ' . $end_time);
      $media_options[$program_daywise] = t($program_daywise);
      if (isset($form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'])) {
        $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
        $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
      }
      unset($form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event']['#validated']);
      $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#options'] = $options_daywise;
    }
  }

  foreach ($form['field_event_highlights'][LANGUAGE_NONE] as $key => $program) {
    if (is_numeric($key)) {
      if (isset($form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'])) {
        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
      }
      if (isset($form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#entity']->field_programe_title[LANGUAGE_NONE][0]['value'])) {
        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#entity']->field_programe_title[LANGUAGE_NONE][0]['value'];
        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#default_value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#entity']->field_programe_title[LANGUAGE_NONE][0]['value'];
      }

      $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#options'] = $options_daywise;
      $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#options'] = $highlight_options;

      $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event']['#validated'] = TRUE;
    }
  }
  // event media
  foreach ($form['field_event_media'][LANGUAGE_NONE] as $key => $program) {
    if (is_numeric($key)) {
      if (isset($form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'])) {
        $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
        $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
      }

      $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#options'] = $media_options;
      $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event']['#validated'] = TRUE;
    }
  }
  // Next and Save button access according steps step_configuration
  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration')) {
    $form['actions']['submit2']['#access'] = FALSE;
    $form['actions']['preview']['#access'] = FALSE;
    $form['actions']['delete']['#access'] = FALSE;
    $form['path']['#prefix'] = '<h2 id="title-metatags" class="story-title">Meta Tags</h2>';
  }
  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_program_schedule' || $form_state['storage']['step'] == 'step_sponsor' || $form_state['storage']['step'] == 'step_media' || $form_state['storage']['step'] == 'step_highlights' || $form_state['storage']['step'] == 'step_first' || $form_state['storage']['step'] == 'step_second')) {
    $form['actions']['submit']['#access'] = TRUE;
    $form['actions']['submit']['#value'] = 'Next';
    $form['actions']['next']['#access'] = FALSE;
    if (isset($form['actions']['delete'])) {
      $form['actions']['delete']['#access'] = FALSE;
    }
  }

  $form['title']['#title'] = 'Event Title';
  $form['field_group_registration_fee_5']['#states'] = array(
    'visible' => array(
      ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
    ),
    'required' => array(
      ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
    ),
  );
  $form['field_group_registration_fee_10']['#states'] = array(
    'visible' => array(
      ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
    ),
    'required' => array(
      ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
    ),
  );
  $form['field_individual_registration_fe']['#states'] = array(
    'visible' => array(
      ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
    ),
    'required' => array(
      ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
    ),
  );
  $form['field_no_of_tickets']['#states'] = array(
    'visible' => array(
      array(':input[name="field_event_type[und]"]' => array('value' => 'paid')),
      'OR',
      array(':input[name="field_event_type[und]"]' => array('value' => 'free')),
    ),
    'required' => array(
      array(':input[name="field_event_type[und]"]' => array('value' => 'paid')),
      'OR',
      array(':input[name="field_event_type[und]"]' => array('value' => 'free')),
    ),
  );

  return $form;
}

/**
 * Implements custom submit for redirect
 * @param array $form
 * @param array $form_state
 */
function itg_event_backend_configuration_redirect($form, &$form_state) {
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration')) {
    $form_state['redirect'] = 'manage-event-backend';
  }
  elseif (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_sponsor')) {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_highlights')));
  }
  elseif (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_media')) {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_configuration')));
  }
  elseif (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_highlights')) {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_media')));
  }
  elseif (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_first')) {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_second')));
  }
  elseif (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_second')) {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_program_schedule')));
  }
  else {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_sponsor')));
  }
}

/**
 * Implements function itg_event_backend_second_submit().
 * @param array $form
 * @param array $form_state
 */
function itg_event_backend_second_submit($form, &$form_state) {
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  if (isset($form_state['storage']['step'])) {
    $current_step = $form_state['storage']['step'];
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => $current_step)));
  }
}

/**
 * Imlements function for dynamic options.
 * @param string $start_date the start of the date range
 * @param string $end_date the end of the date range
 * @param string $format DateTime format, default is Y-m-d
 * @return array returns every date between $startDate and $endDate, formatted as "Y-m-d"
 */
function itg_event_backend_date_interval($start_date, $end_date, $format = "d-m-Y") {
  $begin = new DateTime($start_date);
  $end = new DateTime($end_date);
  $interval = new DateInterval('P1D'); // 1 Day
  $date_range = new DatePeriod($begin, $interval, $end);

  $range = array('_none' => t('- Select Daywise -'));
  $i = 1;
  foreach ($date_range as $date) {
    $range['Day-' . $i . ':' . $date->format($format)] = t('Day-' . $i . ':' . $date->format($format));
    $i++;
  }

  return $range;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_event_backend_theme($existing, $type, $theme, $path) {
  $themes = array(
    'itg_event_backend_tab_form_display_block' => array(
      'template' => 'itg-event-backend-form-tab-template',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'sponsor_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'sponsor-node-form',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'render element' => 'form',
    ),
    'itg_event_sponsor_tab_form_display_block' => array(
      'template' => 'itg-event-backend-form-sponsor-tab-template',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'variables' => array('data' => NULL),
    ),
  );
  return $themes;
}

/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_event_backend_block_info() {
  $blocks['event_backend_tab_form_block'] = array(
    'info' => t('event backend Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['sponsor_tab_form_block'] = array(
    'info' => t('sponsor Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * {@inheritdoc}
 */
function itg_event_backend_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'event_backend_tab_form_block':
      $block['content'] = theme('itg_event_backend_tab_form_display_block', array('data' => ''));
      break;
    case 'sponsor_tab_form_block':
      $block['content'] = theme('itg_event_sponsor_tab_form_display_block', array('data' => ''));
      break;
  }

  return $block;
}

/**
 * Implements hook_views_pre_render()
 * {@inheritdoc}
 */
function itg_event_backend_views_pre_render(&$view) {
  if ($view->name == "Event_backend" && $view->current_display == 'page') {
    $event_content = '';
    $event_content .= '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $event_content .= l(t('Create Event'), 'node/add/event-backend');
    $view->attachment_before = $event_content;
  }
  if ($view->name == "Sponsor" && $view->current_display == 'page') {
    $sponsor_content = '';
    $sponsor_content .= '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $sponsor_content .= l(t('Create Sponsor'), 'node/add/sponsor', array('query' => array('destination' => 'manage-sponsor')));
    $view->attachment_before = $sponsor_content;
  }
}

/**
 * Implement hook_form_FORM_ID_alter().
 * {@inheritdoc}
 */
function itg_event_backend_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Get the Form Id
  if ($form["#id"] == 'views-exposed-form-Event-backend-page' || $form['#id'] == 'views-exposed-form-Event-backend-page-1') {
    $form['title']['#autocomplete_path'] = 'content-title-list/event_backend/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
  if ($form["#id"] == 'views-exposed-form-Sponsor-page') {
    $form['title']['#autocomplete_path'] = 'content-title-list/sponsor/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
}

/**
 * Implements hook_node_access().
 * {@inheritdoc}
 */
function itg_event_backend_node_access($node, $op, $account) {
  $node_edit = FALSE;
  $current_time = time();
  $registration_close = strtotime($node->field_event_close_date[LANGUAGE_NONE][0]['value']);
  if ($current_time > $registration_close) {
    $node_edit = TRUE;
  }

  if (isset($node->type) && ($node->type == 'event_backend') && $node_edit) {
    if ($op == 'update') {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}
