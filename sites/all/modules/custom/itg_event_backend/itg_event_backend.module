<?php

/**
 * @file
 * ITG Event backend module.
 *
 * Provides customizations and functions for Event Backend.
 *
 */

/**
 * Implementation of hook_form_alter().
 * @param array $form 
 * @param array reference $form_state
 * @param type $form_id
 * @return array $form
 */
function itg_event_backend_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "event_backend_node_form") {

    $form['#after_build'][] = 'itg_event_backend_after_build';
    //$form['#validate'][] = 'itg_event_backend_node_form_validate';
    array_unshift($form['#validate'], "itg_event_backend_node_form_validate");
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'manage-event-backend', array('attributes' => array('class' => 'button'))),
      '#weight' => 20,
    );
    if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration' || $form_state['storage']['step'] == 'step_program_schedule')) {
       // $form['#submit'][] = 'custom_node_submit';
         $form['actions']['submit']['#submit'][] = 'itg_event_backend_configuration_redirect'; 
   }
   // Current step save in session variable
   if (isset($form_state['storage']['step'])){
      $_SESSION['current_step'] = $form_state['storage']['step'];
   }
  }
  if($form_id == 'sponsor_node_form'){
      $form['#after_build'][] = 'itg_event_backend_sponsor';
      $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'manage-sponsor', array('attributes' => array('class' => 'button'))),
      '#weight' => 20,
    );
  }
}

function itg_event_backend_node_form_validate($form, &$form_state) {
  $startdate = strtotime($form_state['values']['field_event_start_date'][LANGUAGE_NONE][0]['value']);
  $enddate = strtotime($form_state['values']['field_event_close_date'][LANGUAGE_NONE][0]['value']);
  if($enddate < $startdate){
    form_set_error('field_event_close_date', 'Close Date must greater then start date.');
  }

  $event_type = $form_state['values']['field_event_type'][LANGUAGE_NONE][0]['value'];
  if($event_type == 'paid' && $form_state['values']['field_group_registration_fee_5'][LANGUAGE_NONE][0]['value'] == ''){
    form_set_error('field_group_registration_fee_5', 'Group Registration Fee (upto 5) is required.');
  }
  
 if($event_type == 'paid' && $form_state['values']['field_group_registration_fee_10'][LANGUAGE_NONE][0]['value'] == ''){
    form_set_error('field_group_registration_fee_10', 'Group Registration Fee (upto 10) is required.');
  }
  
 if($event_type == 'paid' && $form_state['values']['field_individual_registration_fe'][LANGUAGE_NONE][0]['value'] == ''){
    form_set_error('field_individual_registration_fe', 'Individual Registration Fee is required.');
  }
}

/**
 * After build for sponsor form.
 * @param array $form
 * @param array $form_state
 */
function itg_event_backend_sponsor($form, &$form_state){
  drupal_add_js(drupal_get_path('module', 'itg_event_backend') . '/js/itg_event_sponsor.js', array('weight' => 3));
  global $user, $base_url;
  unset($form['metatags']['intro_text']['#markup']);
  $form['path']['pathauto']['#title'] = t('Generate automatic Sef URL');
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_event_sponsor' => array('settings' => $settings)), array('type' => 'setting'));
  $form['title']['#title'] = 'Sponsor Title';
  return $form;
}

/**
 * After build for Event backend form.
 * @param array $form
 * @param array $form_state
 */
function itg_event_backend_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'itg_event_backend') . '/js/itg_event_backend.js', array('weight' => 3));
  global $user, $base_url;
  unset($form['metatags']['intro_text']['#markup']);
  $form['path']['pathauto']['#title'] = t('Generate automatic Sef URL');
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_event_backend' => array('settings' => $settings)), array('type' => 'setting'));

  $endDate = strtotime('+1 day', strtotime($form_state['values']['field_event_close_date'][LANGUAGE_NONE][0]['value']));
  $startDate = $form_state['values']['field_event_start_date'][LANGUAGE_NONE][0]['value'];
  $endDate_new = date('Y-m-d', $endDate);
  $startDate_new = explode(' ', $startDate);
  $options_daywise = itg_event_backend_date_interval($startDate_new[0], $endDate_new);
  foreach ($form['field_program_schedule'][LANGUAGE_NONE] as $key => $program) {
    if (is_numeric($key)) {
      // p($form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_events']);
      $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#options'] = $options_daywise;
      $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event']['#validated'] = TRUE;
    }
  }

//event hightlights
  foreach ($form['field_event_highlights'][LANGUAGE_NONE] as $key => $program) {
    if (is_numeric($key)) {
      $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#options'] = $options_daywise;
      $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event']['#validated'] = TRUE;
    }
  }
//event media
  foreach ($form['field_event_media'][LANGUAGE_NONE] as $key => $program) {
    if (is_numeric($key)) {
      $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#options'] = $options_daywise;
      $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event']['#validated'] = TRUE;
    }
  }
  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_first' || $form_state['storage']['step'] == 'step_second' || $form_state['storage']['step'] == 'step_program_schedule' || $form_state['storage']['step'] == 'step_sponsor' || $form_state['storage']['step'] == 'step_highlights' || $form_state['storage']['step'] == 'step_media')) {
    $form['actions']['submit']['#access'] = FALSE;
    $form['actions']['preview']['#access'] = FALSE;
    $form['actions']['delete']['#access'] = FALSE;
  }
  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_program_schedule')) {
    $form['actions']['submit']['#access'] = TRUE;
    $form['actions']['submit']['#value'] = 'Next';
    $form['actions']['next']['#access'] = FALSE;
  }
 
  
  $form['title']['#title'] = 'Event Title';
  $form['field_group_registration_fee_5']['#states'] = array(
      'visible' => array(
        ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
      ),
      'required' => array(
        ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
      ),
    );
  $form['field_group_registration_fee_10']['#states'] = array(
      'visible' => array(
        ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
      ),
       'required' => array(
        ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
      ),
    );
  $form['field_individual_registration_fe']['#states'] = array(
      'visible' => array(
        ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
      ),
      'required' => array(
        ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
      ),
    );
   
  return $form;
}

/**
 * Implements custom submit for redirect
 * @param array $form
 * @param array $form_state
 */

function itg_event_backend_configuration_redirect($form, &$form_state) {
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration')) {


    $form_state['redirect'] = 'manage-event-backend';
  }
  else {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_sponsor')));
  }
}

/**
 * Implements hook_node_insert().
 * @param Object $node
 */
function itg_event_backend_node_insert($node) {
  if ($node->type == "event_backend") {
    drupal_goto('node/' . $node->nid . '/edit', array('query' => array('step' => 'step_sponsor')));
  //  $_REQUEST['destination'] = 'node/' . $node->nid . '/edit?step=step_sponsor';
  }
}

/**
 * Returns every date between two dates as an array
 * @param string $startDate the start of the date range
 * @param string $endDate the end of the date range
 * @param string $format DateTime format, default is Y-m-d
 * @return array returns every date between $startDate and $endDate, formatted as "Y-m-d"
 */
function itg_event_backend_date_interval($startDate, $endDate, $format = "Y-m-d") {
  $begin = new DateTime($startDate);
  $end = new DateTime($endDate);
  $interval = new DateInterval('P1D'); // 1 Day
  $dateRange = new DatePeriod($begin, $interval, $end);

  $range = [];
  $range = array('_none' => t('- Select Daywise -'));
  $i = 1;
  foreach ($dateRange as $date) {
    $range['Day-' . $i . ':' . $date->format($format)] = t('Day-' . $i . ':' . $date->format($format));
    $i++;
  }

  return $range;
}

/**
 * Implements hook_theme().
 */
function itg_event_backend_theme($existing, $type, $theme, $path) {
  $themes = array(
    'itg_event_backend_tab_form_display_block' => array(
      'template' => 'itg-event-backend-form-tab-template',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'sponsor_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'sponsor-node-form',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'render element' => 'form',
    ),
    'itg_event_sponsor_tab_form_display_block' => array(
      'template' => 'itg-event-backend-form-sponsor-tab-template',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'variables' => array('data' => NULL),
    ),
  );
  return $themes;
}

/**
 * Implements hook_block_info().
 */
function itg_event_backend_block_info() {
  $blocks['event_backend_tab_form_block'] = array(
    'info' => t('event backend Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  $blocks['sponsor_tab_form_block'] = array(
    'info' => t('sponsor Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function itg_event_backend_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'event_backend_tab_form_block':
      $block['content'] = theme('itg_event_backend_tab_form_display_block', array('data' => $data));
      break;
    case 'sponsor_tab_form_block':
      $block['content'] = theme('itg_event_sponsor_tab_form_display_block', array('data' => $data));
      break;
  }

  return $block;
}

/**
 * Implements views header link 
 *
 */
function itg_event_backend_views_pre_render(&$view) {
  if ($view->name == "Event_backend" && $view->current_display == 'page') {
    global $user; // Get user information
    $event_content = '';
   //array('query' => array('destination' => 'manage-event-backend'))
    $event_content = l(t('Create Event'), 'node/add/event-backend');
    $view->attachment_before = $event_content;
  }
  if ($view->name == "Sponsor" && $view->current_display == 'page') {
    global $user; // Get user information
    $sponsor_content = '';
    $sponsor_content = l(t('Create Sponsor'), 'node/add/sponsor', array('query' => array('destination' => 'manage-sponsor')));
    $view->attachment_before = $sponsor_content;
  }
}
/**
 * Implement hook_form_FORM_ID_alter().
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_event_backend_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  //Get the Form Id
  if ($form["#id"] == 'views-exposed-form-Event-backend-page') {
    $form['title']['#autocomplete_path'] = 'content-title-list/event_backend/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
  if ($form["#id"] == 'views-exposed-form-Sponsor-page') {
    $form['title']['#autocomplete_path'] = 'content-title-list/sponsor/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
}
