<?php

/**
 * @file
 * ITG Event backend module.
 *
 * Provides customizations and functions for Event Backend.
 *
 */

/**
 * Implementation of hook_form_alter().
 * {@inheritdoc}
 */
function itg_event_backend_form_alter(&$form, &$form_state, $form_id) {
  // Form alter for event backend node
  if ($form_id == "event_backend_node_form") {

    $form['field_story_expiry_date'][LANGUAGE_NONE][0]['#title'] = $form['field_story_expiry_date'][LANGUAGE_NONE][0]['#title'] . ' <span class="form-required">*</span>';
    $form['field_registration_close_date'][LANGUAGE_NONE][0]['#title'] = $form['field_registration_close_date'][LANGUAGE_NONE][0]['#title'] . ' <span class="form-required">*</span>';

    if ($form['field_step_completion']['und'][0]['value']['#default_value'] == '0') {
      $form['actions']['itg_custom_button'] = array(
        '#type' => 'submit',
        '#value' => t('Save as Draft'),
        '#submit' => array('node_form_submit', 'itg_event_backend_save_as_draft_submit_callback'),
        '#weight' => -8,
      );
    }
    $form['actions']['submit']['#submit'][] = 'itg_event_save_initial_speaker_weight';
    if (isset($_GET['button_action']) || $form_state['clicked_button']['#name'] == 'previous') {
      //Hijack our errors so they don't display normally.
      $errors = form_get_errors();
      //Only rebuild form if there are actually errors that we need to display
      if (!empty($errors)) {
        $form_state['errors'] = $errors;
        $form_state['rebuild'] = TRUE;
      }
      // Remove all error messages
      drupal_get_messages('error');
      // Get the array of errors and reset them
      $errors = &drupal_static("form_set_error", array());
      // Make sure that each error should be applied to the field
      foreach (array_keys($errors) as $field) {
        unset($errors[$field]);
      }
    }

    $form['#after_build'][] = 'itg_event_backend_after_build';
    array_unshift($form['#validate'], "itg_event_backend_node_form_validate");
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'manage-event-backend', array('attributes' => array('class' => 'button'))),
      '#weight' => 20,
    );

    if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration')) {
      $form['actions']['submit']['#submit'][] = 'itg_event_alter_submit_status_message';
    }
    // Node redirection code
    if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration' || $form_state['storage']['step'] == 'step_program_schedule' || $form_state['storage']['step'] == 'step_sponsor' || $form_state['storage']['step'] == 'step_media' || $form_state['storage']['step'] == 'step_highlights' || $form_state['storage']['step'] == 'step_first' || $form_state['storage']['step'] == 'step_second')) {
      $form['actions']['submit']['#submit'][] = 'itg_event_backend_configuration_redirect';
    }
    if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration')) {
      $form['actions']['submit']['#weight'] = -10;
    }
    else {
      $form['actions']['submit']['#weight'] = 10;
    }

    //add extra save button
    if (arg(0) == "node" && arg(2) == "edit" && is_numeric(arg(1))) {
      $form['actions']['submit2'] = array(
        '#type' => 'submit',
        '#name' => 'second_submit',
        '#value' => t('Save'),
        '#access' => TRUE,
        '#submit' => array('node_form_submit', 'itg_event_backend_second_submit', 'itg_event_alter_submit_status_message', 'itg_event_save_initial_speaker_weight'),
        '#weight' => -9,
        '#attributes' => array('id' => array('save_btn')),
      );
    }
    if (arg(1) == 'add') {
      $form['actions']['submit2'] = array(
        '#type' => 'submit',
        '#name' => 'second_submit',
        '#value' => t('Next'),
        '#access' => TRUE,
        '#submit' => array('node_form_submit', 'itg_event_backend_frist_form_submit', 'itg_event_save_initial_speaker_weight'),
        '#weight' => -9,
        '#attributes' => array('id' => array('save_btn')),
      );
      drupal_add_css("input#edit-submit , input[data-id=edit-submit]{display:none !important}", 'inline');
    }
    $form['actions']['cancel']['#weight'] = 20;
    if ((arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == "edit") && $form['#node']->status == 1) {
      $form['field_event_start_date']['#attributes']['class'][] = 'date-disabled';
      $form['field_event_close_date']['#attributes']['class'][] = 'date-disabled';
      // $form['field_story_expiry_date']['#attributes']['class'][] = 'date-disabled';
      // $form['field_registration_close_date']['#attributes']['class'][] = 'date-disabled';
    }

    if (!empty($form['nid']['#value']) && arg(2) == 'edit') {
      $nid = $form['nid']['#value'];
      $node_obj = node_load($nid);
      $step_completion = $node_obj->field_step_completion['und'][0]['value'];
      $node_type = 'Event';
      $node_type = str_replace("_", " ", $node_type);
      $node_type = ucfirst($node_type);
      $node_title = $form['#node']->title;
      if ($step_completion == '2') {
        $edit_title = 'Edit ' . $node_type . ' - ' . $node_title;
        drupal_set_title($edit_title);
      }
      else {
        $edit_title = 'Create' . ' ' . $node_type;
        drupal_set_title($edit_title);
      }
    }
    // Current step save in session variable
    if (isset($form_state['storage']['step'])) {
      $_SESSION['current_step'] = $form_state['storage']['step'];
    }
    // Add block of speekar order reorder.
    if (isset($_GET['step']) && $_GET['step'] == 'step_configuration' && is_numeric(arg(1))) {
      $color_box_query = array("width" => "900", "height" => "600", "iframe" => "true", "current_event" => arg(1) , "scrolling" => "no");
      $color_box_class = array("class" => array("colorbox-load anchor-order-reorder"));
      $link_text = l(t('Click here'), "speaker-order-reorder/" . arg(1), array('query' => $color_box_query, 'attributes' => $color_box_class));
      $link_text .= l(t('Past Speaker'), "itg-event-past-spekars", array('query' => $color_box_query, 'attributes' => $color_box_class));

      $link = '<div class="form-item form-type-textfield form-item-field-e-associate-highlights-und">
        <label for="widget-order-reorder">' . t("Speaker Order/Reorder") . ' </label>
        ' . $link_text . '
     </div>';
      drupal_add_css("a.anchor-order-reorder {text-decoration:underline !important}", "inline");
      $form['field_e_associate_highlights']['#suffix'] = "<div class='form-wrapper speaker-order-reorder'>$link</div>";
    }

    $form['field_config_photo']['#access'] = FALSE;
    $form['field_config_video']['#access'] = FALSE;
    $color_box_query_config = array("width" => "900", "height" => "600", "iframe" => "true");
    $color_box_class_config = array("class" => array("colorbox-load anchor-order-reorder"));
    $link_text_config = l(t('Click here'), "event-registration-config/" . arg(1), array('query' => $color_box_query_config, 'attributes' => $color_box_class_config));
    if (isset($_GET['step']) && $_GET['step'] == 'step_second' && is_numeric(arg(1))) {
      $form['registration_config'] = array(
        '#type' => 'item',
        '#title' => t('Registration form configuration'),
        '#markup' => $link_text_config,
        '#weight' => 10,
      );
      // add field in step
      $form['#steps']['step_second']->children[] = 'registration_config';
      $form['#step_children']['registration_config'] = 'step_second';
    }
    // url alias checkbox uncheck after node publish
    if(arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
      $node_status = itg_event_backend_node_status(arg(1));
      if($node_status == 1){
        $form['#node']->path['pathauto'] = 0;
        drupal_add_js('jQuery("#edit-path-pathauto").attr("checked", false);', array('type' => 'inline', 'scope' => 'footer'));
      }
    }
  }

  // Form alter for sponsor node
  if ($form_id == 'sponsor_node_form') {
    drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-path").hide();                           
            });', array('type' => 'inline', 'scope' => 'footer'));
    $form['actions']['submit']['#submit'][] = 'itg_sponsor_alter_submit_status_message';
    $form['#after_build'][] = 'itg_event_backend_sponsor';
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'manage-sponsor', array('attributes' => array('class' => 'button'))),
      '#weight' => 20,
    );
  }

  // Form alter for event configurations node
  if ($form_id == 'heighlights_node_form') {
    unset($form['#metatags']);
    unset($form['actions']['preview']);
    $form['#after_build'][] = 'itg_event_backend_highlights_after_build';
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'manage-highlights', array('attributes' => array('class' => 'button'))),
      '#weight' => 20,
    );
  }
}

/**
 * Implements itg_event_backend_save_as_draft_submit_callback
 * @param type $form
 * @param array $form_state
 */
function itg_event_backend_save_as_draft_submit_callback($form, &$form_state) {
  $redirect_path = 'node/' . $form_state['values']['nid'] . '/edit?destination=' . $_GET['destination'];
  $_GET['destination'] = $redirect_path;
}

/**
 * Implements alter message function().
 * @param array $form
 * @param array $form_state
 */
function itg_event_alter_submit_status_message(&$form, $form_state) {
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'event-backend') {
    $op = 'created';
  }
  else {
    $op = 'updated';
  }
  $sponsor_title = $form_state['node']->title;
  drupal_set_message(t('Event <b>' . $sponsor_title . '</b> has been ' . $op . '.'));
  $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * Implements alter message function().
 * @param array $form
 * @param array $form_state
 */
function itg_sponsor_alter_submit_status_message(&$form, $form_state) {
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'sponsor') {
    $op = 'created';
  }
  else {
    $op = 'updated';
  }
  $sponsor_title = $form_state['node']->title;
  drupal_set_message(t('Sponsor <b>' . $sponsor_title . '</b> has been ' . $op . '.'));
  $_GET['destination'] = $_REQUEST['destination'];
}

/**
 * Implements custom validate for event backend.
 * @param array $form
 * @param array $form_state
 */
function itg_event_backend_node_form_validate($form, &$form_state) {
  // Keep steps in a array
  $previous_step = "";
  $steps = array(
    'step_first',
    'step_second',
    'step_program_schedule',
    'step_sponsor',
    'step_highlights',
    'step_media',
    'step_configuration'
  );
  // Check if clicked button is previous
  if (isset($_GET['step']) || $form_state['clicked_button']['#name'] == 'previous') {
    $current_step = array_search($_GET['step'], $steps);
    $previous_step = $steps[$current_step - 1];
    if (isset($_POST['previous'])) {
      // If user in on frist step (on Step1-Basic Details) and press prev button then redirect user.
      // to add node form.
      if (arg(1) == 'add') {
        drupal_goto('node/add/event-backend');
      }
      // Other wise redirect user to edit  node form.
      else {
        drupal_goto("node/" . arg(1) . "/edit", array('query' => array('step' => $previous_step, 'button_action' => 'back')));
      }
    }
  }
  /*if (!isset($form['field_event_highlights']['#tabwise'])) {
    foreach ($form_state['values']['field_event_highlights'][LANGUAGE_NONE] as $key => $event_highlights) {
      if (is_numeric($key)) {
        if (!empty($form_state['values']['field_event_highlights'][LANGUAGE_NONE][$key]['field_associate_story_event_high'][LANGUAGE_NONE][0]['target_id'])) {
          $event_high_value[$key] = $form_state['values']['field_event_highlights'][LANGUAGE_NONE][$key]['field_associate_story_event_high'][LANGUAGE_NONE][0]['target_id'];
        }
        if (!empty($event_high_value) && isset($event_high_value)) {
          if (count(array_unique($event_high_value)) < count($event_high_value)) {
            form_set_error('field_event_highlights][' . LANGUAGE_NONE . '][' . $key . '][field_associate_story_event_high', t('You have already selected this story'));
          }
        }
      }
    }
  }*/

  if(!empty($form_state['values']['field_event_tabs'])){
    foreach ($form_state['values']['field_event_tabs'][LANGUAGE_NONE] as $key => $event_tabs) {
      if (is_numeric($key)) {
        if ($form_state['values']['field_event_tabs'][LANGUAGE_NONE][$key]['field_tab_sef_tab_url'][LANGUAGE_NONE][0]['value'] == 'tab_url') {
          if((strpos($url, 'http') !== 0) && !filter_var($form_state['values']['field_event_tabs'][LANGUAGE_NONE][$key]['field_tab_url'][LANGUAGE_NONE][0]['value'], FILTER_VALIDATE_URL)) {
              form_set_error('field_event_tabs][' . LANGUAGE_NONE . '][' . $key . '][	field_tab_url', t('Please enter valid Tab External URL.'));  
            }
        }
      }
    }
  }

  
  
  $start_date = strtotime($form_state['values']['field_event_start_date'][LANGUAGE_NONE][0]['value']);
  $end_date = strtotime($form_state['values']['field_event_close_date'][LANGUAGE_NONE][0]['value']);
  $registration_close = strtotime($form_state['values']['field_registration_close_date'][LANGUAGE_NONE][0]['value']);
  $registration_start = strtotime($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value']);
  $current_date = time();
  if (empty($form_state['values']['field_registration_close_date'][LANGUAGE_NONE][0]['value']['time']) && (isset($form_state['values']['field_registration_close_date'][LANGUAGE_NONE][0]['value']['time'])) || empty($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value']['time']) && isset($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value']['time'])) {
    drupal_get_messages();
    if (empty($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value']['time']) && (isset($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value']['time']))) {
      form_set_error('field_story_expiry_date', t('Please enter time in Start date'));
    }
    if (empty($form_state['values']['field_registration_close_date'][LANGUAGE_NONE][0]['value']['time']) && (isset($form_state['values']['field_registration_close_date'][LANGUAGE_NONE][0]['value']['time']))) {
      form_set_error('field_registration_close_date', t('Please enter time in Close date'));
    }
  }

  if ($form_state['values']['field_registration_date_checkbox'][LANGUAGE_NONE][0]['value'] == 1) {
    if (empty($form_state['values']['field_story_expiry_date'][LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_story_expiry_date', t('Registration start date is required.'));
    }

    if (empty($form_state['values']['field_registration_close_date'][LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_registration_close_date', t('Registration close date is required.'));
    }
  }
  // node insert validation
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'event-backend') {
    if ($current_date >= $start_date) {
      // for data seeding //form_set_error('field_event_start_date', t('Event start date must be greater than current date & time.'));
    }
    if ($current_date >= $end_date) {
      // for data seeding //form_set_error('field_event_close_date', t('Event close date must be greater than current date & time.'));
    }
    if ($current_date >= $registration_start && !empty($registration_start)) {
     // for data seeding // form_set_error('field_story_expiry_date', t('Registration start date must be greater than current date & time.'));
    }
    if ($current_date >= $registration_close && !empty($registration_close)) {
      // for data seeding //form_set_error('field_registration_close_date', t('Registration close date must be greater than current date & time.'));
    }
  }
  /*elseif (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
    $status = itg_event_backend_node_status(arg(1));
    //if ($status != 1) {
    if ($current_date >= $start_date) {
      form_set_error('field_event_start_date', t('Event start date must be greater than current date & time.'));
    }
    if ($current_date >= $end_date) {
      form_set_error('field_event_close_date', t('Event close date must be greater than current date & time.'));
    }
    if ($current_date >= $registration_start && !empty($registration_start)) {
      form_set_error('field_story_expiry_date', t('Registration start date must be greater than current date & time.'));
    }
    if ($current_date >= $registration_close && !empty($registration_close)) {
      form_set_error('field_registration_close_date', t('Registration close date must be greater than current date & time.'));
    }
    //}
  }*/

  if ($registration_close <= $registration_start && (!empty($registration_close) || !empty($registration_start))) {
    form_set_error('field_story_expiry_date', t('Registration start date must be less than registration close date.'));
  }

  if ($end_date <= $start_date) {
    form_set_error('field_event_close_date', t('Event close date must be greater than event start date & time.'));
  }
  if ($registration_close >= $end_date) {
    form_set_error('field_registration_close_date', t('Registration close date must be less than event close date.'));
  }

  $event_type = $form_state['values']['field_event_type'][LANGUAGE_NONE][0]['value'];
  $early_bird_check = $form_state['values']['field_early_bird'][LANGUAGE_NONE][0]['value']; //early_bird_offer

  if ($event_type == 'paid') {
    foreach ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE] as $key => $field_collection_reg) {
      if (is_numeric($key)) {
          if($early_bird_check != 'early_bird_offer') {
            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_participate_type'][LANGUAGE_NONE][0]['tid'] == '') {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_participate_type', t('Ticket Type is required for group '.($key + 1)));
            }
            
            // check duplicate ticket type
            if (!empty($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_participate_type'][LANGUAGE_NONE][0]['tid'])) {
              $ticket_type_value[$key] = $form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_participate_type'][LANGUAGE_NONE][0]['tid'];
            }
            if (!empty($ticket_type_value) && isset($ticket_type_value)) {
              if (count(array_unique($ticket_type_value)) < count($ticket_type_value)) {
                form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_participate_type', t('You have selected duplicate ticket type.'));
              }
            }
            
            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_individual_registration_fe'][LANGUAGE_NONE][0]['value'] == '') {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_individual_registration_fe', t('Individual Registration Fee is required group '.($key + 1)));
            }

            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_group_registration_fee_5'][LANGUAGE_NONE][0]['value'] == '') {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_group_registration_fee_5', t('Group Registration Fee (for 5 member) is required group '.($key + 1)));
            }

            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_group_registration_fee_10'][LANGUAGE_NONE][0]['value'] == '') {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_group_registration_fee_10', t('Group Registration Fee (upto 10 member) is required group '.($key + 1)));
            }
            

            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_individual_registration_fe'][LANGUAGE_NONE][0]['value'] > $form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_group_registration_fee_5'][LANGUAGE_NONE][0]['value']) {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_individual_registration_fe', t('Individual Registration Fee should be less then Group Registration Fee (for 5 member) group '.($key + 1)));
            }

            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_group_registration_fee_5'][LANGUAGE_NONE][0]['value'] > $form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_group_registration_fee_10'][LANGUAGE_NONE][0]['value']) {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_group_registration_fee_5', t('Group Registration Fee (for 5 member) should be less then Group Registration Fee (upto 10 member) group '.($key + 1)));
            }

            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_group_registration_fee_10'][LANGUAGE_NONE][0]['value'] == '') {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_group_registration_fee_10', t('Group Registration Fee (upto 10 member) is required group '.($key + 1)));
            }
          }
      }
    }
  }
  /*   * **Early Bird Offer Fields****** */
  if ($event_type == 'paid') {
    foreach ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE] as $key => $field_collection_reg) {
      if (is_numeric($key)) {
        if($early_bird_check == 'early_bird_offer') {
    
            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_participate_type'][LANGUAGE_NONE][0]['tid'] == '') {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_participate_type', t('Ticket Type is required group '.($key + 1)));
            }
            // check duplicate ticket type
            if (!empty($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_participate_type'][LANGUAGE_NONE][0]['tid'])) {
              $ticket_type_value[$key] = $form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_participate_type'][LANGUAGE_NONE][0]['tid'];
            }
            if (!empty($ticket_type_value) && isset($ticket_type_value)) {
              if (count(array_unique($ticket_type_value)) < count($ticket_type_value)) {
                form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_participate_type', t('You have selected duplicate ticket type.'));
              }
            }
            
            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_early_bird_individual_regi'][LANGUAGE_NONE][0]['value'] == '') {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_early_bird_individual_regi', t('Early Bird Individual Registration Fee is required group '.($key + 1)));
            }

            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_early_bird_group_registrat'][LANGUAGE_NONE][0]['value'] == '') {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_early_bird_group_registrat', t('Early Bird Group Registration Fee (for 5 member) is required group '.($key + 1)));
            }

            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_early_bird_group_10_reg'][LANGUAGE_NONE][0]['value'] == '') {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_early_bird_group_10_reg', t('Early Bird Group Registration Fee (upto 10 member) is required group '.($key + 1)));
            }
            
            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_early_bird_individual_regi'][LANGUAGE_NONE][0]['value'] > $form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_early_bird_group_registrat'][LANGUAGE_NONE][0]['value']) {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][	field_early_bird_individual_regi', t('Early Bird Individual Registration Fee should be less then Early Bird Group Registration Fee (for 5 member) group '.($key + 1)));
            }

            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_early_bird_group_registrat'][LANGUAGE_NONE][0]['value'] > $form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_early_bird_group_10_reg'][LANGUAGE_NONE][0]['value']) {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_early_bird_group_registrat', t('Early Bird Group Registration Fee (for 5 member) should be less then Early Bird Group Registration Fee (upto 10 member) group '.($key + 1)));
            }

            if ($form_state['values']['field_ticket_group_type'][LANGUAGE_NONE][$key]['field_early_bird_group_10_reg'][LANGUAGE_NONE][0]['value'] == '') {
              form_set_error('field_ticket_group_type][' . LANGUAGE_NONE . '][' . $key . '][field_early_bird_group_10_reg', t('Early Bird Group Registration Fee (upto 10 member) is required group '.($key + 1)));
            }
        }
      }
    }
  }

  if (($event_type == 'paid' || $event_type == 'free') && $form_state['values']['field_no_of_tickets'][LANGUAGE_NONE][0]['value'] == '' && (isset($form_state['storage']['step']) && $form_state['storage']['step'] == "step_second") && (!isset($form['field_no_of_tickets']['#tabwise']))) {
    form_set_error('field_no_of_tickets', t('Please enter No. of Tickets'));
  }

  // time validation
  foreach ($form_state['values']['field_program_schedule'][LANGUAGE_NONE] as $key => $value) {
    $start_time = $form_state['values']['field_program_schedule'][LANGUAGE_NONE][$key]['field_start_time'][LANGUAGE_NONE][0]['value'];
    $end_time = $form_state['values']['field_program_schedule'][LANGUAGE_NONE][$key]['field_start_time'][LANGUAGE_NONE][0]['value2'];
    if(is_object($end_time)) {
      drupal_get_messages();
      form_set_error('field_program_schedule][' . LANGUAGE_NONE . '][' . $key . '][field_start_time', t('Start time must be less than end time.'));
    }else {
    if ($start_time > $end_time) {
      drupal_get_messages();
      form_set_error('field_program_schedule][' . LANGUAGE_NONE . '][' . $key . '][field_start_time', t('Start time must be less than end time.'));
     }
    }
  }
  // media validation
  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_media') && (!isset($form['field_event_media']['#tabwise']))) {
    foreach ($form_state['values']['field_event_media'][LANGUAGE_NONE] as $key => $value) {
      if (is_numeric($key)) {
        if ($form_state['values']['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE][0]['value'] == '') {
          form_set_error('field_event_media][' . LANGUAGE_NONE . '][' . $key . '][field_daywise_event', t('Daywise is required.'));
        }
      }
    }
  }
}

/**
 * After build for sponsor form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_event_backend_sponsor($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'itg_event_backend') . '/js/itg_event_sponsor.js', array('weight' => 3, 'scope' => 'footer'));
  global $user, $base_url;
  unset($form['metatags']['intro_text']['#markup']);
  $form['path']['pathauto']['#title'] = t('Generate automatic Sef URL');
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_event_sponsor' => array('settings' => $settings)), array('type' => 'setting'));
  $form['title']['#title'] = 'Sponsor Title';
  return $form;
}

/**
 * Custom functions form after build for "event_configurations"
 * @param array $form
 * @param array $form_state
 * @return boolean
 */
function itg_event_backend_highlights_after_build($form, &$form_state) {
  $form['field_highlights'][LANGUAGE_NONE]['#title'] = '<div style="float:left">Add highligths:</div>';
  $form['path']['#access'] = FALSE;
  return $form;
}

/**
 * After build for Event backend form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_event_backend_after_build($form, &$form_state) {
  // add extra save button
  global $base_url;
  if (arg(0) == "node" && arg(2) == "edit" && is_numeric(arg(1))) {
    $form['actions']['submit2'] = array(
      '#type' => 'submit',
      '#name' => 'second_submit',
      '#value' => t('Save'),
      '#attributes' => array('id' => array('save_btn')),
      '#access' => TRUE,
      '#submit' => array('node_form_submit', 'itg_event_backend_second_submit'),
      '#weight' => -9,
    );
  }
  drupal_add_js(drupal_get_path('module', 'itg_event_backend') . '/js/itg_event_backend.js', array('weight' => 3, 'scope' => 'footer'));
  if (isset($form_state['values']['nid'])) {
    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['node_id'] = $form_state['values']['nid'];
    drupal_add_js(array('itg_event_backend_nid' => array('settings' => $settings)), array('type' => 'setting'));
  }
  global $user, $base_url;
  unset($form['metatags']['intro_text']['#markup']);
  $form['path']['pathauto']['#title'] = t('Generate automatic Sef URL');
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_event_backend' => array('settings' => $settings)), array('type' => 'setting'));

  $end_date = @strtotime('+1 day', strtotime($form_state['values']['field_event_close_date'][LANGUAGE_NONE][0]['value']));
  $start_date = $form_state['values']['field_event_start_date'][LANGUAGE_NONE][0]['value'];
  $end_date_new = date('Y-m-d', $end_date);
  $start_date_new = @explode(' ', $start_date);
  $options_daywise = itg_event_backend_date_interval($start_date_new[0], $end_date_new);
  $highlight_options = array('_none' => t('- Select Daywise -'));
  $media_options = array('_none' => t('- Select Daywise -'));
  foreach ($form['field_program_schedule'][LANGUAGE_NONE] as $key => $program) {
    if (is_numeric($key)) {
      $program_daywise = $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
      $program_title = $form['field_program_schedule'][LANGUAGE_NONE][$key]['#entity']->field_story_expert_name[LANGUAGE_NONE][0]['value'];
      $start_time = date('H:i', strtotime($form['field_program_schedule'][LANGUAGE_NONE][$key]['#entity']->field_start_time[LANGUAGE_NONE][0]['value']));
      $end_time = date('H:i', strtotime($form['field_program_schedule'][LANGUAGE_NONE][$key]['#entity']->field_start_time[LANGUAGE_NONE][0]['value2']));
      $day_value = explode(':', $program_daywise);
      $highlight_options[$program_daywise . '--' . $program_title . '--' . $start_time . '--' . $end_time] = t($day_value[0] . ' - ' . $program_title . ' - ' . $start_time . ' to ' . $end_time);
      //$media_options[$program_daywise] = t($program_daywise);
      $media_options = $highlight_options;
//      if (isset($form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'])) {
//        $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
//        $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
//      }
      
      
       if (!empty($form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'])) {
       if((empty($form_state['input']['field_program_schedule']['und'][$key]['field_daywise_event']['und'])) && $form_state['input']['field_program_schedule']['und'][$key]['field_daywise_event']['und'] != $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value']) {
        $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
        $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
       }else{
        $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form_state['input']['field_program_schedule']['und'][$key]['field_daywise_event']['und'];
        
       }
      }
      unset($form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event']['#validated']);
      $form['field_program_schedule'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#options'] = $options_daywise;
    }
  }

  foreach ($form['field_event_highlights'][LANGUAGE_NONE] as $key => $program) {
    if (is_numeric($key)) {
//      if (isset($form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'])) {
//        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
//        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
//      }
      
       if (!empty($form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'])) {
       if((empty($form_state['input']['field_event_highlights']['und'][$key]['field_daywise_event']['und'])) && $form_state['input']['field_event_highlights']['und'][$key]['field_daywise_event']['und'] != $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value']) {
        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
       }else{
        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form_state['input']['field_event_highlights']['und'][$key]['field_daywise_event']['und'];
        
       }
      }
      
       if (!empty($form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#entity']->field_programe_title[LANGUAGE_NONE][0]['value'])) {
       if((empty($form_state['input']['field_event_highlights']['und'][$key]['field_programe_title']['und'])) && $form_state['input']['field_event_highlights']['und'][$key]['field_programe_title']['und'] != $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#entity']->field_programe_title[LANGUAGE_NONE][0]['value']) {
        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#entity']->field_programe_title[LANGUAGE_NONE][0]['value'];
        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#default_value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#entity']->field_programe_title[LANGUAGE_NONE][0]['value'];
       }else{
        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#value'][0] = $form_state['input']['field_event_highlights']['und'][$key]['field_programe_title']['und'];
        
       }
      }
//      if (isset($form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#entity']->field_programe_title[LANGUAGE_NONE][0]['value'])) {
//        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#entity']->field_programe_title[LANGUAGE_NONE][0]['value'];
//        $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#default_value'][0] = $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#entity']->field_programe_title[LANGUAGE_NONE][0]['value'];
//      }

      $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#options'] = $options_daywise;
      $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_programe_title'][LANGUAGE_NONE]['#options'] = $highlight_options;

      $form['field_event_highlights'][LANGUAGE_NONE][$key]['field_daywise_event']['#validated'] = TRUE;
    }
  }
  // event media
  foreach ($form['field_event_media'][LANGUAGE_NONE] as $key => $program) {
    if (is_numeric($key)) {
      $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#title'] = $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#title'] . '<span title="This field is required." class="form-required"> *</span>';
      
      $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#options'] = $media_options;
      $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event']['#validated'] = TRUE;
//      if (isset($form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'])) {
//        $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
//        $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
//      }
//      
      
      if (!empty($form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'])) {
       if((empty($form_state['input']['field_event_media']['und'][$key]['field_daywise_event']['und'])) && $form_state['input']['field_event_media']['und'][$key]['field_daywise_event']['und'] != $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value']) {
        $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
        $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
       }else{
        $form['field_event_media'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form_state['input']['field_event_media']['und'][$key]['field_daywise_event']['und'];
        
       }
      }

      }
  }

  // event sponsors Daywise
  $sponsor_options_event_wise = array('event_wise_sponsor' => 'Event Wise Sponsor');
  $media_options_sponsor = $media_options + $sponsor_options_event_wise;
  foreach ($form['field_associate_sponsors'][LANGUAGE_NONE] as $key => $program) {
    if (is_numeric($key)) {
      $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#title'] = $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#title'];// . '<span title="This field is required." class="form-required"></span>';
      $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#options'] = $media_options_sponsor;
      $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event']['#validated'] = TRUE;
    if (!empty($form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'])) {
      if((empty($form_state['input']['field_associate_sponsors']['und'][$key]['field_daywise_event']['und'])) && $form_state['input']['field_associate_sponsors']['und'][$key]['field_daywise_event']['und'] != $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value']) {
        $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
        $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
      }else{
        $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#value'][0] = $form_state['input']['field_associate_sponsors']['und'][$key]['field_daywise_event']['und'];
        //$form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#default_value'][0] = $form['field_associate_sponsors'][LANGUAGE_NONE][$key]['field_daywise_event'][LANGUAGE_NONE]['#entity']->field_daywise_event[LANGUAGE_NONE][0]['value'];
      }
      }
      }
  }

  // Next and Save button access according steps step_configuration
  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration')) {
    $form['actions']['submit2']['#access'] = FALSE;
    $form['actions']['preview']['#access'] = FALSE;
    $form['actions']['delete']['#access'] = FALSE;
    $form['metatags']['#prefix'] = '<h2 id="title-metatags" class="story-title">SEO Meta Tags</h2>';
    $form['field_e_from_the_chairman']['#prefix'] = '<h2 id="title-from_the_chairman" class="story-title">From the chairman Details</h2>';
  }
  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_program_schedule' || $form_state['storage']['step'] == 'step_sponsor' || $form_state['storage']['step'] == 'step_media' || $form_state['storage']['step'] == 'step_highlights' || $form_state['storage']['step'] == 'step_first' || $form_state['storage']['step'] == 'step_second')) {
    $form['actions']['submit']['#access'] = TRUE;
    $form['actions']['submit']['#value'] = 'Next';
    $form['actions']['next']['#access'] = FALSE;
    if (isset($form['actions']['delete'])) {
      $form['actions']['delete']['#access'] = FALSE;
    }
  }

  $form['title']['#title'] = 'Event Title';

  $form['field_ticket_group_type']['#states'] = array(
    'visible' => array(
      ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
    ),
  );
  $form['field_early_bird']['#states'] = array(
    'visible' => array(
      ':input[name="field_event_type[und]"]' => array('value' => 'paid'),
    ),
  );
  $form['field_no_of_tickets']['#states'] = array(
    'visible' => array(
      array(':input[name="field_event_type[und]"]' => array('value' => 'paid')),
      'OR',
      array(':input[name="field_event_type[und]"]' => array('value' => 'free')),
    ),
    'required' => array(
      array(':input[name="field_event_type[und]"]' => array('value' => 'paid')),
      'OR',
      array(':input[name="field_event_type[und]"]' => array('value' => 'free')),
    ),
  );

  $form['field_registration_close_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_registration_date_checkbox[und][1]"]' => array('checked' => TRUE),
    ),
  );

  $form['field_story_expiry_date']['#states'] = array(
    'visible' => array(
      ':input[name="field_registration_date_checkbox[und][1]"]' => array('checked' => TRUE),
    ),
  );

  $max_delta_config = $form['field_ticket_group_type'][LANGUAGE_NONE]['#max_delta'] + 1;

  //Hide add more button, if ticket are not available
  if (isset($max_delta_config) && $max_delta_config >= 4) {
    unset($form['field_ticket_group_type']['und']['add_more']);
  }

  return $form;
}

/**
 * Implements custom submit for redirect
 * @param array $form
 * @param array $form_state
 */
function itg_event_backend_configuration_redirect($form, &$form_state) {
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  if (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_configuration')) {
    $form_state['redirect'] = 'manage-event-backend';
  }
  elseif (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_sponsor')) {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_highlights')));
  }
  elseif (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_media')) {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_configuration')));
  }
  elseif (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_highlights')) {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_media')));
  }
  elseif (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_first')) {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_second')));
  }
  elseif (isset($form_state['storage']['step']) && ($form_state['storage']['step'] == 'step_second')) {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_program_schedule')));
  }
  else {
    drupal_get_messages();
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_sponsor')));
  }
}

/**
 * Implements function itg_event_backend_second_submit().
 * @param array $form
 * @param array $form_state
 */
function itg_event_backend_second_submit($form, &$form_state) {
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  if (isset($form_state['storage']['step'])) {
    $current_step = $form_state['storage']['step'];
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => $current_step)));
  }
}

/**
 * Implements function itg_event_backend_second_submit().
 * @param array $form
 * @param array $form_state
 */
function itg_event_backend_frist_form_submit($form, &$form_state) {
  // To hide status messgae.
  drupal_get_messages('status');
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  if (isset($form_state['storage']['step'])) {
    $form_state['redirect'] = array('node/' . $form_state['values']['nid'] . '/edit', array('query' => array('step' => 'step_second', 'from' => 'frist_step')));
  }
}

/**
 * Imlements function for dynamic options.
 * @param string $start_date the start of the date range
 * @param string $end_date the end of the date range
 * @param string $format DateTime format, default is Y-m-d
 * @return array returns every date between $startDate and $endDate, formatted as "Y-m-d"
 */
function itg_event_backend_date_interval($start_date, $end_date, $format = "d-m-Y") {
  $begin = new DateTime($start_date);
  $end = new DateTime($end_date);
  $interval = new DateInterval('P1D'); // 1 Day
  $date_range = new DatePeriod($begin, $interval, $end);

  $range = array('_none' => t('- Select Daywise -'));
  $i = 1;
  foreach ($date_range as $date) {
    $range['Day-' . $i . ':' . $date->format($format)] = t('Day-' . $i . ':' . $date->format($format));
    $i++;
  }

  return $range;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_event_backend_theme($existing, $type, $theme, $path) {
  $themes = array(
    'itg_event_backend_tab_form_display_block' => array(
      'template' => 'itg-event-backend-form-tab-template',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'event_header_menu' => array(
      'template' => 'event-header-menu',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
    ),
    'event_header_adds' => array(
      'template' => 'event-header-adds',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
    ),
    'sponsor_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'sponsor-node-form',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'render element' => 'form',
    ),
    'itg_event_sponsor_tab_form_display_block' => array(
      'template' => 'itg-event-backend-form-sponsor-tab-template',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_program_schedule_tab' => array(
      'template' => 'itg-program-schedule-tab',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'itg_program_post_event' => array(
      'template' => 'itg-program-post-event',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'tweet_right_sidebar_event' => array(
      'template' => 'tweet-right-sidebar-event',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
    ),
    'event_registration' => array(
      'template' => 'event-registration',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
    ),
    'event_sign_and_win' => array(
      'template' => 'event-sign-and-win',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
    ),
    'event_flashback' => array(
      'template' => 'event-flashback',
      'path' => drupal_get_path('module', 'itg_event_backend') . '/templates',
    ),
  );
  return $themes;
}

/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_event_backend_block_info() {
  $blocks['event_backend_tab_form_block'] = array(
    'info' => t('event backend Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['event_header_menu'] = array(
    'info' => t('Event Header Menu'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['event_header_adds'] = array(
    'info' => t('Event Header Add'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['sponsor_tab_form_block'] = array(
    'info' => t('sponsor Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['program_tab_block'] = array(
    'info' => t('Program Schedule Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['post_event_block'] = array(
    'info' => t('Post Event block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['ad_right_sidebar_event'] = array(
    'info' => t('Ad right sidebar event'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['tweet_right_sidebar_event'] = array(
    'info' => t('Tweet Right Sidebar Event'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['event_registration'] = array(
    'info' => t('Event Registration'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['event_sign_and_win'] = array(
    'info' => t('Event Sign And Win'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['event_flashback'] = array(
    'info' => t('Event Flashback'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['highlights_block'] = array(
    'info' => t('Highlights Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * {@inheritdoc}
 */
function itg_event_backend_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'event_backend_tab_form_block':
      $block['content'] = theme('itg_event_backend_tab_form_display_block', array('data' => ''));
      break;
    case 'event_header_menu':
      $block['content'] = theme('event_header_menu', array('data' => itg_event_backend_get_event_node('node')));
      break;
    case 'event_header_adds':
      $block['content'] = theme('event_header_adds', array('data' => ''));
      break;
    case 'sponsor_tab_form_block':
      $block['content'] = theme('itg_event_sponsor_tab_form_display_block', array('data' => ''));
      break;
    case 'program_tab_block':
      $block['content'] = theme('itg_program_schedule_tab', array('data' => itg_event_backend_program_schedule_tab()));
      break;
    case 'post_event_block':
      $block['content'] = theme('itg_program_post_event', array('data' => itg_event_backend_program_schedule_tab()));
      break;
    case 'ad_right_sidebar_event':
      $page_name = 'Rest';
      $data = '';
      $block['content'] = theme('ad_right_sidebar_block1', array('data' => $data));
      break;
    case 'tweet_right_sidebar_event':
      $twitter_content = itg_event_backend_twitter_data();
      if (!empty($twitter_content)) {
        $block['content'] = theme('tweet_right_sidebar_event', array('data' => $twitter_content));
      }
      break;
    case 'event_registration':
      module_load_include('inc', 'itg_event_registration', 'includes/itg_event_registration');
      $block['content'] = itg_event_registration_form();
      break;
    case 'event_sign_and_win':
      $block['content'] = theme('event_sign_and_win');
      break;
    case 'event_flashback':
      $block['content'] = theme('event_flashback');
      break;
    case 'highlights_block':
      $block['content'] = itg_event_backend_live_content();
      break;
  }

  return $block;
}

/**
 * Implements hook_views_pre_render()
 * {@inheritdoc}
 */
function itg_event_backend_views_pre_render(&$view) {
  if ($view->name == "Event_backend" && ($view->current_display == 'page' || $view->current_display == 'page_2' || $view->current_display == 'page_3')) {
    $event_content = '';
    $event_content .= '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $event_content .= l(t('Create Event'), 'node/add/event-backend');
    $view->attachment_before = $event_content;
  }
  if ($view->name == "Sponsor" && $view->current_display == 'page') {
    $sponsor_content = '';
    $sponsor_content .= '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $sponsor_content .= l(t('Create Sponsor'), 'node/add/sponsor', array('query' => array('destination' => 'manage-sponsor')));
    $view->attachment_before = $sponsor_content;
  }
  if ($view->name == "manage_event_configuration") {
    $event_conf = '';
    $event_conf .= '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $event_conf .= l(t('Add Event Domain'), 'admin/structure/domain/create', array('query' => array('destination' => 'manage-event-configuration')));
    $event_conf .= l(t('Configure New Event'), 'node/add/event-configurations', array('query' => array('destination' => 'manage-event-configuration')));
    $view->attachment_before = $event_conf;
  }
  if ($view->name == "manage_heighlights") {
    $event_heighlights = '';
    $event_heighlights .= '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $event_heighlights .= l(t('Add Highlights'), 'node/add/heighlights', array('query' => array('destination' => 'manage-highlights')));
    $view->attachment_before = $event_heighlights;
  }
  if ($view->name == "event_types_listing") {
    $event_type_listing = '';
    $event_type_listing .= '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $event_type_listing .= l(t('Add Event Type'), 'admin/structure/taxonomy/event_type/add', array('query' => array('destination' => 'event-types-listing')));
    $view->attachment_before = $event_type_listing;
  }
}

/**
 * Implement hook_form_FORM_ID_alter().
 * {@inheritdoc}
 */
function itg_event_backend_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Get the Form Id
  if ($form["#id"] == 'views-exposed-form-Event-backend-page' || $form['#id'] == 'views-exposed-form-Event-backend-page-1') {
    //$form['title']['#autocomplete_path'] = 'content-title-list/event_backend/autocomplete';
    $form['title']['#autocomplete_path'] = 'content-title-event/active/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
  if ($form["#id"] == 'views-exposed-form-Event-backend-page-2' || $form["#id"] == 'views-exposed-form-Event-backend-page-3') { // for event close and draft
    $form['title']['#autocomplete_path'] = 'content-title-event/close/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
  if ($form["#id"] == 'views-exposed-form-Sponsor-page') {
    $form['title']['#autocomplete_path'] = 'content-title-list/sponsor/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }

  if ($form["#id"] == 'views-exposed-form-event-types-listing-page') {
    $form['name']['#autocomplete_path'] = 'texonomy/40/autocomplete';
    $form['name']['#attributes'] = array('placeholder' => t('Event Type'));
  }

  if ($form["#id"] == 'views-exposed-form-Event-backend-page') {
    $form['event_type'] = array(
      '#type' => 'select',
      '#title' => t('Event Type'),
      '#options' => array('0' => t('--SELECT--'), 'upcoming' => t('Upcoming'), 'live' => t('Live')),
      '#prefix' => '<div id="custom-event-type">',
      '#suffix' => '</div>'
    );
    drupal_add_js("jQuery(document).ready(function() { jQuery('#custom-event-type').width('125'); });", array('type' => 'inline', 'scope' => 'footer'));
  }
  if ($form["#id"] == 'views-exposed-form-Event-backend-page-2') {
    $form['event_types'] = array(
      '#type' => 'hidden',
      '#title' => t('Closed'),
      '#value' => 'closed'
    );
  }
  if ($form["#id"] == 'views-exposed-form-Event-backend-page-3') {
    $form['event_types'] = array(
      '#type' => 'hidden',
      '#title' => t('Draft'),
      '#value' => 'draft'
    );
  }
}

/**
 * Get all configured domains
 * @return type
 */
function itg_event_backend_get_all_configure_domain() {
  $query = db_select('field_data_field_ec_select_domain', 'd');
  $query->fields('d', array('field_ec_select_domain_value'));
  $result = $query->execute();

  while ($record = $result->fetchAssoc()) {
    $domains[] = $record['field_ec_select_domain_value'];
  }
  return $domains;
}

/**
 * Implements hook_node_access().
 * {@inheritdoc}
 */
function itg_event_backend_node_access($node, $op, $account) {
  $node_edit = FALSE;
  $current_time = time();
  if (isset($node->type) && ($node->type == 'event_backend')) {
    $registration_close = strtotime($node->field_event_close_date[LANGUAGE_NONE][0]['value']);
    if ($current_time > $registration_close) {
      $node_edit = TRUE;
    }
  }

  if (isset($node->type) && ($node->type == 'event_backend') && $node_edit) {

    if ($op == 'update' && !(SITE_ADMIN)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implement hook_node_insert 
 * {@inheritdoc}
 */
function itg_event_backend_node_insert($node) {
  if ($node->type == 'event_backend') {
    $event_start_date_time = strtotime($node->field_event_start_date[LANGUAGE_NONE][0]['value']);
    itg_event_backend_insert_event_publish_details($node->nid, $event_start_date_time, 'insert');
  }
}

/**
 * Implements hook_node_update
 * {@inheritdoc}
 */
function itg_event_backend_node_update($node) {
  if ($node->type == 'event_backend') {
    event_url_save($node);
    if ($node->domains != '1' && $_GET['step'] == 'step_configuration') {
      //itg_event_backend_insert_into_redirect($node);
    }
    $event_start_date_time = strtotime($node->field_event_start_date[LANGUAGE_NONE][0]['value']);
    itg_event_backend_insert_event_publish_details($node->nid, $event_start_date_time, 'update');
    $query_param = drupal_get_query_parameters();
    if ($query_param['step'] == 'step_configuration') {
      $node->field_step_completion[LANGUAGE_NONE][0]['value'] = '2';
      field_attach_update('node', $node);
    }
  }
}

/**
 * Insert and update cron table for event publishing action through cron
 * @param int $nid
 * @param int $event_start_date
 * @param string $op
 */
function itg_event_backend_insert_event_publish_details($nid, $event_start_date, $op) {
  if (db_table_exists('itg_event_publish_cron')) {
    if ($op == 'insert') {
      db_insert('itg_event_publish_cron')
          ->fields(array(
            'nid' => $nid,
            'event_start_date' => $event_start_date,
            'status' => 0,
            'created' => time()
          ))
          ->execute();
    }
    else {
      db_update('itg_event_publish_cron')
          ->fields(array(
            'event_start_date' => $event_start_date,
          ))
          ->condition('nid', $nid, '=')
          ->execute();
    }
  }
}

/**
 * Implement function for get program schedule on home page
 */
function itg_event_backend_program_schedule_tab() {
  $event_id = itg_event_backend_get_event_node();
  if (!empty($event_id) && itg_event_backend_get_node_type($event_id) == 'event_backend') {
    $node = node_load($event_id);
    $counter = 0;
    foreach ($node->field_program_schedule[LANGUAGE_NONE] as $program_schedule) {
      $ans_detail = entity_load('field_collection_item', array($program_schedule['value']));
      $old_keys = explode(':', $ans_detail[$program_schedule['value']]->field_daywise_event[LANGUAGE_NONE][0]['value']);
      $keys = explode('Day-', $old_keys[0]);
      if ($ans_detail[$program_schedule['value']]->field_daywise_event[LANGUAGE_NONE][0]['value'] != $key) {
        $val[$keys[1]][$counter]['daywise'] = $ans_detail[$program_schedule['value']]->field_daywise_event[LANGUAGE_NONE][0]['value'];
        $val[$keys[1]][$counter]['session_title'] = $ans_detail[$program_schedule['value']]->field_story_expert_name[LANGUAGE_NONE][0]['value'];
        $val[$keys[1]][$counter]['start_time'] = format_date(strtotime($ans_detail[$program_schedule['value']]->field_start_time[LANGUAGE_NONE][0]['value']), $type = 'itg_time', $format = '', $timezone = NULL, $langcode = NULL);
        $val[$keys[1]][$counter]['end_time'] = format_date(strtotime($ans_detail[$program_schedule['value']]->field_start_time[LANGUAGE_NONE][0]['value2']), $type = 'itg_time', $format = '', $timezone = NULL, $langcode = NULL);
        $val[$keys[1]][$counter]['speaker'] = $ans_detail[$program_schedule['value']]->field_select_speaker[LANGUAGE_NONE];
      }
      else {
        $val[$keys[1]][$counter]['daywise'] = $ans_detail[$program_schedule['value']]->field_daywise_event[LANGUAGE_NONE][0]['value'];
        $val[$keys[1]][$counter]['session_title'] = $ans_detail[$program_schedule['value']]->field_story_expert_name[LANGUAGE_NONE][0]['value'];
        $val[$keys[1]][$counter]['start_time'] = format_date(strtotime($ans_detail[$program_schedule['value']]->field_start_time[LANGUAGE_NONE][0]['value']), $type = 'itg_time', $format = '', $timezone = NULL, $langcode = NULL);
        $val[$keys[1]][$counter]['end_time'] = format_date(strtotime($ans_detail[$program_schedule['value']]->field_start_time[LANGUAGE_NONE][0]['value2']), $type = 'itg_time', $format = '', $timezone = NULL, $langcode = NULL);
        $val[$keys[1]][$counter]['speaker'] = $ans_detail[$program_schedule['value']]->field_select_speaker[LANGUAGE_NONE];
      }
      $key = $ans_detail[$program_schedule['value']]->field_daywise_event[LANGUAGE_NONE][0]['value'];
      $counter++;
    }
    return $val;
  }
}

/**
 * Implements function for get speaker details
 * @param int $spk_id
 * @return array
 */
function itg_event_backend_get_speaker_details($spk_id) {
  $query = db_select('node', 'n');
  $query->fields('n', array('title', 'nid'));
  $query->fields('fm', array('uri'));
  $query->fields('designation', array('field_story_new_title_value'));
  $query->leftJoin('field_data_field_story_extra_large_image', 'pic', 'pic.entity_id = n.nid');
  $query->leftJoin('file_managed', 'fm', 'fm.fid = pic.field_story_extra_large_image_fid');
  $query->leftJoin('field_data_field_story_new_title', 'designation', 'n.nid = designation.entity_id');
  $query->condition('n.nid', $spk_id, '=');
  // $query->condition('designation.bundle', 'reporter', '=');
  $result = $query->execute()->fetchAll();
  $result[0]->occupation_speaker = itg_event_backend_occupation_home($spk_id);
  return $result;
}

/**
 * Implements function for get occupation on event home page
 */
function itg_event_backend_occupation_home($spk_id) {
  $occupation_query = db_select('field_data_field_celebrity_pro_occupation', 'occupation');
  $occupation_query->fields('ttm', array('name'));
  $occupation_query->leftjoin('taxonomy_term_data', 'ttm', 'ttm.tid = occupation.field_celebrity_pro_occupation_tid');
  $occupation_query->condition('occupation.entity_id', $spk_id, '=');
  $occu_result = $occupation_query->execute();
  $occu_name = '';
  if (!empty($occu_result)) {
    foreach ($occu_result as $o_res) {
      $occupation_name[] = $o_res->name;
    }
    $occu_name = implode(' / ', $occupation_name);
  }
  return $occu_name;
}

/**
 * Implement function for get session video photo
 * @param str $daywise
 * @return array
 */
function itg_event_backend_get_session_photo_video($daywise) {
  $query = db_select('node', 'n');
  $query->join('field_data_field_event_media', 'media', 'n.nid = media.entity_id');
  $query->join('field_data_field_daywise_event', 'daywise', 'daywise.entity_id = media.field_event_media_value');
  $query->fields('daywise', array('field_daywise_event_value'));
  $query->fields('media', array('field_event_media_value'));
  $query->condition('daywise.field_daywise_event_value', $daywise, '=');
  $result = $query->execute();
  foreach ($result as $value) {
    $daywise_detail = entity_load('field_collection_item', array($value->field_event_media_value));
    if (!empty($daywise_detail[$value->field_event_media_value]->field_event_photo)) {
      $session['photo'][] = $daywise_detail[$value->field_event_media_value]->field_event_photo[LANGUAGE_NONE][0]['target_id'];
    }
    if ($daywise_detail[$value->field_event_media_value]->field_event_video) {
      $session['video'][] = $daywise_detail[$value->field_event_media_value]->field_event_video[LANGUAGE_NONE][0]['target_id'];
    }
    if ($daywise_detail[$value->field_event_media_value]->field_event_audio) {
      $session['audio'][] = $daywise_detail[$value->field_event_media_value]->field_event_audio[LANGUAGE_NONE][0]['target_id'];
    }
  }
  return $session;
}

/**
 * Implement function for get session video photo
 * @param str $daywise
 * @return array
 */
function itg_event_backend_get_session_sponsor($daywise) {
  $query = db_select('node', 'n');
  $query->join('field_data_field_associate_sponsors', 'media', 'n.nid = media.entity_id');
  $query->join('field_data_field_daywise_event', 'daywise', 'daywise.entity_id = media.field_associate_sponsors_value');
  $query->fields('daywise', array('field_daywise_event_value'));
  $query->fields('media', array('field_associate_sponsors_value'));
  $query->condition('daywise.field_daywise_event_value', $daywise, '=');
  $result = $query->execute();
  foreach ($result as $value) {

    $daywise_detail = entity_load('field_collection_item', array($value->field_associate_sponsors_value));
    if (!empty($daywise_detail[$value->field_associate_sponsors_value]->field_choose_sponsor)) {
      $session['sponsor'] = $daywise_detail[$value->field_associate_sponsors_value]->field_choose_sponsor[LANGUAGE_NONE][0]['target_id'];
    }
  }
  return $session;
}

/**
 * Implement function to get associated story
 * @return arrayy
 */
function itg_event_backend_get_session_story_title($daywise, $font_color) {

  $query = db_select('node', 'n');
  $query->join('field_data_field_event_highlights', 'eh', 'n.nid = eh.entity_id');
  $query->join('field_data_field_programe_title', 'pt', 'pt.entity_id = eh.field_event_highlights_value');
  $query->fields('pt', array('field_programe_title_value'));
  $query->fields('n', array('nid'));
  $query->fields('eh', array('field_event_highlights_value'));
  $query->condition('pt.field_programe_title_value', $daywise, '=');
  $result = $query->execute();
  $key = 0;
  foreach ($result as $value) {
    $daywise_detail = entity_load('field_collection_item', array($value->field_event_highlights_value));
    $story_nid = $daywise_detail[$value->field_event_highlights_value]->field_associate_story_event_high[LANGUAGE_NONE][0]['target_id'];
    $story_title = itg_common_get_node_title($story_nid);
    $story_detail = itg_event_get_story_details($story_nid);
    $session[$key]['story_title'] = l(t($story_title), 'node/' . $story_nid, array("attributes" => array("target" => "_blank", "style" => "color: $font_color; width:100%"), 'html' => TRUE));
    $session[$key]['story_details'] = $story_detail;
    $key++;
  }
  return $session;
}

/**
 * Implement function to get associated story
 * @return array
 */
function itg_event_backend_get_session_story_title_move_field($daywise, $font_color) { 
  $query = db_select('node', 'n');
  $query->join('field_data_field_event_media', 'media', 'n.nid = media.entity_id');
  $query->join('field_data_field_daywise_event', 'daywise', 'daywise.entity_id = media.field_event_media_value');
  $query->fields('daywise', array('field_daywise_event_value'));
  $query->fields('media', array('field_event_media_value'));
  $query->condition('daywise.field_daywise_event_value', $daywise, '=');
  $result = $query->execute();
  $key = 0;
  foreach ($result as $value) {
    $daywise_detail = entity_load('field_collection_item', array($value->field_event_media_value));
    $story_nid = $daywise_detail[$value->field_event_media_value]->field_associate_story_event_new[LANGUAGE_NONE][0]['target_id'];
    $story_title = itg_common_get_node_title($story_nid);
    $story_detail = itg_event_get_story_details($story_nid);
    $session[$key]['story_title'] = l(t($story_title), 'node/' . $story_nid, array("attributes" => array("target" => "_blank", "style" => "color: $font_color; width:100%"), 'html' => TRUE));
    $session[$key]['story_details'] = $story_detail;
    $key++;
  }
  return $session;
}

/**
 * Implement function for story node details.
 * @param type int
 * @return array
 */
function itg_event_get_story_details($nid) {
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_story_extra_large_image', 'extra_large_img', 'extra_large_img.entity_id = n.nid');
  $query->leftJoin('field_data_field_story_kicker_text', 'story_kicker', 'story_kicker.entity_id = n.nid');
  $query->leftJoin('file_managed', 'fm', 'fm.fid = extra_large_img.field_story_extra_large_image_fid');
  $query->fields('extra_large_img', array('field_story_extra_large_image_fid'));
  $query->fields('n', array('title', 'nid'));
  $query->fields('story_kicker', array('field_story_kicker_text_value'));
  $query->fields('fm', array('uri'));
  $query->condition('n.nid', $nid, '=');
  $result = $query->execute();
  foreach ($result as $rel) {
    $resu['uri'] = $rel->uri;
    $resu['kicker'] = $rel->field_story_kicker_text_value;
    $resu['nid'] = $rel->nid;
  }
  return $resu;
}

/**
 * {@inheritdoc}
 */
function itg_event_backend_menu() {
  $items['itg-event-test'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
  );

  $items['programme'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['event/%/%/programme'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['speakers'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['event/%/%/speakers'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['sponsors'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['event/%/%/sponsors'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['sing-and-win'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['event/%/%/sing-and-win'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['flashback'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['event/%/%/flashback'] = array(
    'page callback' => 'itg_event_backend_page',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['speaker-details'] = array(
    'page callback' => 'itg_event_backend_page',
    'title' => 'Speaker Details',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['event/%/%/speaker-details'] = array(
    'page callback' => 'itg_event_backend_page',
    'title' => 'Speaker Details',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['sponsor-details'] = array(
    'page callback' => 'itg_event_backend_page',
    'title' => 'Sponsor Details',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  $items['event/%/%/sponsor-details'] = array(
    'page callback' => 'itg_event_backend_page',
    'title' => 'Sponsor Details',
    'access callback' => TRUE,
    'theme callback' => 'itg_event_backend_default_node_theme',
  );
  return $items;
}

/**
 * Implement callback for theme
 */
function itg_event_backend_default_node_theme() {
  return 'itg';
}

/**
 * Return value for all tabs
 * @return string
 */
function itg_event_backend_page() {
  return '';
}

/**
 * Implementation of hook_views_query_alter
 * @param object reference $view
 * @param object reference $query
 */
function itg_event_backend_views_query_alter(&$view, &$query) {
  if ($view->name === 'past_speaker_event' && $view->current_display == 'block_1') {
    if ($query->where[1]['conditions'][2]['field'] == 'itg_widget_order.cat_id') {
      $query->where[1]['conditions'][2]['value'] = arg(1);
    }
  }

  if (isset($view->name) && $view->name === 'Event_backend') {
    if (isset($_GET['event_types']) && $_GET['event_types'] == 'closed') {
      $joins = new views_join;
      $joins->construct('field_data_field_event_close_date', 'node', // left table
          'nid', // left field
          'entity_id', // field
          '', 'LEFT'
      );

      // Add join to query; 'node' is the left table name
      $view->query->add_relationship('field_data_field_event_close_date', $joins, 'node');

      $today_date = date("Y-m-d H:i:s");
      $event_end_where_condition = array(
        'field' => "field_data_field_event_close_date.field_event_close_date_value",
        'value' => $today_date,
        'operator' => '<=',
      );

      array_push($query->where[1]['conditions'], $event_end_where_condition);
    }elseif(empty($_GET['event_types'])) {
      $joins = new views_join;
      $joins->construct('field_data_field_event_close_date', 'node', // left table
          'nid', // left field
          'entity_id', // field
          '', 'LEFT'
      );

      // Add join to query; 'node' is the left table name
      $view->query->add_relationship('field_data_field_event_close_date', $joins, 'node');

      $today_date = date("Y-m-d H:i:s");
      $event_end_where_condition = array(
        'field' => "field_data_field_event_close_date.field_event_close_date_value",
        'value' => $today_date,
        'operator' => '>=',
      );

      array_push($query->where[1]['conditions'], $event_end_where_condition);
    }

    if (isset($_GET['event_type'])) {
      $event_type = $_GET['event_type'];
      if (!empty($event_type)) {
        $join = new views_join;
        $join->construct('field_data_field_event_start_date', 'node', // left table
            'nid', // left field
            'entity_id', // field
            '', 'LEFT'
        );

        // Add join to query; 'node' is the left table name
        $view->query->add_relationship('field_data_field_event_start_date', $join, 'node');

        if ($event_type == 'upcoming') {
          ///$start_date = date("Y-m-d", strtotime("- 1 day"));
          $start_date = date("Y-m-d H:i:s");
          $event_start_where_condition = array(
            'field' => "field_data_field_event_start_date.field_event_start_date_value",
            'value' => $start_date,
            'operator' => '>=',
          );
          array_push($query->where[1]['conditions'], $event_start_where_condition);
        }
        elseif ($event_type == 'live') {
          $joins = new views_join;
          $joins->construct('field_data_field_event_close_date', 'node', // left table
              'nid', // left field
              'entity_id', // field
              '', 'LEFT'
          );

          // Add join to query; 'node' is the left table name
          $view->query->add_relationship('field_data_field_event_close_date', $joins, 'node');

          $today_date = date("Y-m-d H:i:s");

          $event_start_where_condition = array(
            'field' => "field_data_field_event_start_date.field_event_start_date_value",
            'value' => $today_date,
            'operator' => '<=',
          );
          $event_end_where_condition = array(
            'field' => "field_data_field_event_close_date.field_event_close_date_value",
            'value' => $today_date,
            'operator' => '>=',
          );

          array_push($query->where[1]['conditions'], $event_start_where_condition);
          array_push($query->where[1]['conditions'], $event_end_where_condition);
        }
      }
    }
  }
}

/**
 * Return event id using domain
 * @global string $base_url
 * @return int
 */
function itg_event_backend_get_event_node($whole_node = NULL) {
  global $base_url;
  $arg = arg();
  $node = '';
  if (module_exists('redirect')) {

    if (!empty($whole_node)) {
      if ($arg[0] == 'event') {
        $path = drupal_lookup_path("source", $arg[1] . '/' . $arg[2]);
        $event_nid = explode('/', $path);
        $node = node_load($event_nid[1]);
      }
      elseif (!empty($arg[1]) && is_numeric($arg[1]) && $arg[0] == 'node') {
        $node = node_load($arg[1]);
      }

      return $node;
    }
    else {
      if ($arg[0] == 'event') {
        $path = drupal_lookup_path("source", $arg[1] . '/' . $arg[2]);
        $event_nid = explode('/', $path);
        $node = node_load($event_nid[1]);
        return $node->nid;
      }
      elseif (!empty($arg[1]) && is_numeric($arg[1]) && $arg[0] == 'node') {
        return $arg[1];
      }
    }
  }
}

/**
 * Get actual hostname, while host is virtual host
 * @return boolean
 */
function itg_event_get_host_name() {
  global $base_url;
  $arg = arg();
  if ($arg[0] == 'event') {
    $host = $base_url . '/' . $arg[1] . '/' . $arg[2];
  }
  elseif (!empty($arg[1]) && is_numeric($arg[1]) && $arg[0] == 'node') {
    $host = $base_url . '/' . drupal_get_path_alias('node/' . $arg[1]);
  }

  return $host;
}

/**
 * Get host for all events(This function is calling from backend(View: managa-event-backend))
 * @global string $base_url
 * @param type $nid
 * @return string
 */
function itg_event_get_host_name_for_all_events($nid = NULL) {
  global $base_url;

  $running_on_domain = itg_event_backend_get_redirect_record('source', 'node/' . $nid);
  if (!empty($running_on_domain)) {
    $host = $running_on_domain['redirect'];
  }
  else {
    $host = $base_url . '/' . drupal_get_path_alias('node/' . $nid);
  }
  return $host;
}

/**
 * Get redirect table value
 * @param string $c_name
 * @param string $c_val
 * @return array
 */
function itg_event_backend_get_redirect_record($c_name, $c_val) {
  $records = '';
  $query = db_select('redirect', 'r')
      ->fields('r');
  $query->condition('r.' . $c_name, $c_val, '=');
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $records['source'] = $record['source'];
    $records['redirect'] = $record['redirect'];
  }
  return $records;
}

/**
 * Get all domains associated with nodes
 * @param string $except_this_node
 * @return array
 */
function itg_event_backend_get_redirect_all_domains($except_this_node = NULL) {
  $query = db_select('redirect', 'r')
      ->fields('r');
  if ($except_this_node) {
    $query->condition('r.source', $except_this_node, '!=');
  }
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $redirect_arr = explode('://', $record['redirect']);
    $records[] = @$redirect_arr[1];
  }
  return $records;
}

/**
 * Vikul content
 * @param int $nid
 * @return string
 */
function itg_event_backend_vukkul_content($nid) {
  $page_id = $nid;
  $node = node_load($page_id);
  $user_details = user_load($node->uid);
  $event_author_name = $user_details->name;
  $n_title = "Event: " . $node->title;
  $unique_id = $node->type . '_' . $node->nid;
  $author = base64_encode($event_author_name);
  drupal_add_js('https://vuukle.com/js/vuukle.js', array('type' => 'external', 'scope' => 'footer'));
  $output = '<script type="text/javascript">

               var UNIQUE_ARTICLE_ID = "' . $unique_id . '";

               var SECTION_TAGS =  "Event";

               var ARTICLE_TITLE = "' . $n_title . '";

               var GA_CODE = "UA-795349-17";

               var VUUKLE_API_KEY = "dc34b5cc-453d-468a-96ae-075a66cd9eb7";

               var TRANSLITERATE_LANGUAGE_CODE = ""; //"en" for English, "hi" for hindi

               var VUUKLE_COL_CODE = "d00b26";

               var ARTICLE_AUTHORS = "' . $author . '";

               create_vuukle_platform(VUUKLE_API_KEY, UNIQUE_ARTICLE_ID, "0", SECTION_TAGS, ARTICLE_TITLE, TRANSLITERATE_LANGUAGE_CODE , "1", "", GA_CODE, VUUKLE_COL_CODE, ARTICLE_AUTHORS);

               </script>';
  return $output;
}

/**
 * Insert into redirect and domain table 
 * @global object $user
 * @param object $node
 */
function itg_event_backend_insert_into_redirect($node) {
  
}

/**
 * Check existing record in domain source
 * @param int $nid
 * @return boolean
 */
function itg_event_backend_check_old_rec($nid) {
  $query = db_select('domain_source', 'd');
  $query->fields('d', array('nid'));
  $query->condition('d.nid', $nid, '=');
  $nid = $query->execute()->fetchField();
  if ($nid) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Render Event header adds block
 * @return array
 */
function itg_event_backend_header_add_block() {
  $block = module_invoke('itg_event_backend', 'block_view', 'event_header_adds');
  return render($block['content']);
}

/**
 * Impement function for conver number to words
 * @param type int
 * @return str
 */
function itg_event_backend_convert_number_to_words($number) {

  $hyphen = '-';
  $conjunction = ' and ';
  $separator = ', ';
  $negative = 'negative ';
  $decimal = ' point ';
  $dictionary = array(
    0 => 'zero',
    1 => 'one',
    2 => 'two',
    3 => 'three',
    4 => 'four',
    5 => 'five',
    6 => 'six',
    7 => 'seven',
    8 => 'eight',
    9 => 'nine',
    10 => 'ten',
    11 => 'eleven',
    12 => 'twelve',
    13 => 'thirteen',
    14 => 'fourteen',
    15 => 'fifteen',
    16 => 'sixteen',
    17 => 'seventeen',
    18 => 'eighteen',
    19 => 'nineteen',
    20 => 'twenty',
    30 => 'thirty',
    40 => 'fourty',
    50 => 'fifty',
    60 => 'sixty',
    70 => 'seventy',
    80 => 'eighty',
    90 => 'ninety',
    100 => 'hundred',
    1000 => 'thousand',
    1000000 => 'million',
    1000000000 => 'billion',
    1000000000000 => 'trillion',
    1000000000000000 => 'quadrillion',
    1000000000000000000 => 'quintillion'
  );

  if (!is_numeric($number)) {
    return false;
  }

  if (($number >= 0 && (int) $number < 0) || (int) $number < 0 - PHP_INT_MAX) {
    // overflow
    trigger_error(
        'convert_number_to_words only accepts numbers between -' . PHP_INT_MAX . ' and ' . PHP_INT_MAX, E_USER_WARNING
    );
    return false;
  }

  if ($number < 0) {
    return $negative . convert_number_to_words(abs($number));
  }

  $string = $fraction = null;

  if (strpos($number, '.') !== false) {
    list($number, $fraction) = explode('.', $number);
  }

  switch (true) {
    case $number < 21:
      $string = $dictionary[$number];
      break;
    case $number < 100:
      $tens = ((int) ($number / 10)) * 10;
      $units = $number % 10;
      $string = $dictionary[$tens];
      if ($units) {
        $string .= $hyphen . $dictionary[$units];
      }
      break;
    case $number < 1000:
      $hundreds = $number / 100;
      $remainder = $number % 100;
      $string = $dictionary[$hundreds] . ' ' . $dictionary[100];
      if ($remainder) {
        $string .= $conjunction . convert_number_to_words($remainder);
      }
      break;
    default:
      $baseUnit = pow(1000, floor(log($number, 1000)));
      $numBaseUnits = (int) ($number / $baseUnit);
      $remainder = $number % $baseUnit;
      $string = convert_number_to_words($numBaseUnits) . ' ' . $dictionary[$baseUnit];
      if ($remainder) {
        $string .= $remainder < 100 ? $conjunction : $separator;
        $string .= convert_number_to_words($remainder);
      }
      break;
  }

  if (null !== $fraction && is_numeric($fraction)) {
    $string .= $decimal;
    $words = array();
    foreach (str_split((string) $fraction) as $number) {
      $words[] = $dictionary[$number];
    }
    $string .= implode(' ', $words);
  }

  return $string;
}

/**
 * Implement function for get old event flasback
 */
function itg_event_backend_flashback($curr_event_id, $menu_font_color, $event_type) {
  $current_date_time = date('Y-m-d H:i:s');
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title', 'created'));
  $query->join('field_data_field_event_close_date', 'event_close_date', 'event_close_date.entity_id = n.nid');
  $query->join('field_data_field_event_types', 'event_types', 'event_types.entity_id = n.nid');
  $query->fields('event_close_date', array('field_event_close_date_value'));
  $query->condition('n.type', 'event_backend', '=');
  $query->condition('n.nid', $curr_event_id, '!=');
  $query->condition('event_close_date.field_event_close_date_value', $current_date_time, '<');
  $query->condition('event_types.field_event_types_tid', $event_type, '=');
  $query->condition('n.status', 1, '=');
  $query->orderBy('n.created', 'DESC');
  $result = $query->execute();
  $flash_back_link = '';
  $count = 1;
  foreach ($result as $value) {
    if($count == 1) {
    $flash_back_link_top_nid = $value->nid;
    }
    $flash_back_link .= '<li>' . l(t($value->title), 'node/' . $value->nid, array('attributes' => array('target' => '_blank', "style" => "color:$menu_font_color"))) . '</li>';
  $count++;
  }

  $output = '';
  if (!empty($flash_back_link)) {
    $output['menu'] = '<ul>' . $flash_back_link . '</ul>';
    $output['top'] = $flash_back_link_top_nid;
  }
  return $output;
}

/**
 * Implement function for get redirect node in flashback
 * @param type array
 * @param type array
 * @return array
 */
function itg_event_backend_redirect_flashback($val, $detail) {
  if (count($val) > 0) {
    $query = db_select('redirect', 'r');
    $query->fields('r');
    $query->condition('r.source', $val, 'IN');
    $result = $query->execute();
    $count = 0;
    foreach ($result as $rel) {
      $past_event[$count] = $detail[$rel->source];
      $past_event[$count]['redirect'] = $rel->redirect;
      $count++;
    }
    return $past_event;
  }
}

/**
 * Implement function to get current event domain
 * @param type int
 * @return string
 */
function itg_event_backend_current_event_domain($nid) {
  $query = db_select('redirect', 'r');
  $query->fields('r', array('redirect'));
  $query->condition('r.source', $nid, '=');
  $result = $query->execute()->fetchCol();
  return $result;
}

/**
 * Highlights block for event
 */
function itg_event_backend_get_highlights_block() {
  $block = module_invoke('itg_event_backend', 'block_view', 'highlights_block');
  print render($block['content']);
}

/**
 * Get highlights block content for live event
 * @return string
 */
function itg_event_backend_highlights_block_content() {
  $nid = itg_event_backend_get_event_node();
  if (db_table_exists('field_data_field_e_associate_highlights')) {
    $query = db_select('field_data_field_e_associate_highlights', 'fh');
    $query->fields('fh', array('field_e_associate_highlights_target_id'));
    $query->condition('fh.entity_id', $nid, '=');
    $highlights_nid = $query->execute()->fetchField();
    $highlights_node = node_load($highlights_nid);

    $output = '';
    $output .= '<div class="highlight-box"><h2 class = "highlights-heading">Highlights</h2><div class="wrap-listing">';
    $text = '';
    foreach ($highlights_node->field_highlights[LANGUAGE_NONE] as $highlights_arr) {
      $highlights_detail = entity_load('field_collection_item', array($highlights_arr['value']));
      if (!empty($highlights_detail[$highlights_arr['value']]->field_highlights_url[LANGUAGE_NONE][0]['value'])) {
        $text .= '<div class="h-list">' . l($highlights_detail[$highlights_arr['value']]->field_highlights_text[LANGUAGE_NONE][0]['value'], $highlights_detail[$highlights_arr['value']]->field_highlights_url[LANGUAGE_NONE][0]['value'], array('attributes' => array('target' => '_blank'))) . itg_event_backend_highlights_like_dislike($highlights_arr['value']) . '</div>';
      }
      else {
        $text .= '<div class="h-list">' . $highlights_detail[$highlights_arr['value']]->field_highlights_text[LANGUAGE_NONE][0]['value'] . itg_event_backend_highlights_like_dislike($highlights_arr['value']) . '</div>';
      }
    }

    $output .= $text . '</div></div>';
    return $output;
  }
}

/**
 * Like and dislike button for highlights on event page
 * @param int $unique_id
 * @return string
 */
function itg_event_backend_highlights_like_dislike($unique_id, $datatype = NULL, $nid = NULL) {
  $arg = arg();
  if (function_exists('itg_flag_get_count')) {
    $mongo_like_dislike = itg_flag_get_count($unique_id);
    //$dislike = itg_flag_get_count($unique_id, 'dislike_count');
  }
  // get migrated count
  //node type check for migrated content
  $type = itg_event_backend_get_node_type($arg[1]);
  if (function_exists('itg_get_migrated_like_count')) {
    if($type == 'photogallery') {
    $migrated_count = itg_get_migrated_like_count($nid);
    } else {
    $migrated_count = itg_get_migrated_like_count($unique_id); 
    }
  }

  $sum_of_likes = $mongo_like_dislike['like_count'] + $migrated_count[0]['like_count'];
  $sum_of_dislikes = $mongo_like_dislike['dislike_count'] + $migrated_count[0]['dislike_count'];
  $like_count_common = '(' . $sum_of_likes . ')';
  $dislike_count_common = '(' . $sum_of_dislikes . ')';

  $pid = "voted_" . $unique_id;
  $like = "no-of-likes_" . $unique_id;
  $dislike = "no-of-dislikes_" . $unique_id;

  $like_btn = '<div class="agbutton"><button class="btn-highlights-like" id="like_count" data-rel="' . $unique_id . '" data-type="'.$datatype.'"><i class="fa fa-thumbs-o-up"></i> <span id="' . $like . '">' . $like_count_common . '</span></button>';
  $dislike_btn = '<button class="btn-highlights-dislike" id="dislike_count" data-rel="' . $unique_id . '" data-type="'.$datatype.'"><i class="fa fa-thumbs-o-down"></i> <span id="' . $dislike . '">' . $dislike_count_common . '</span></button>';
  $error_msg = '<p class="error-msg" id="' . $pid . '"></p></div>';
  return $like_btn . $dislike_btn . $error_msg;
}

/**
 * Get event live whole content
 * @return string
 */
function itg_event_backend_live_content() {
  $nid = itg_event_backend_get_event_node();
  $title = itg_common_get_node_title($nid);
  if (module_exists('itg_live_tv')) {
    $banner_video = itg_live_tv_page_video();
  }
  $video = '<div class="row top-block-highlight"><div class="highlights-video col-md-7"><h2 class="live-event-title">' . $title . '</h2><div class="live-event-video">' . $banner_video . '</div></div>';
  $highlights_content = '<div class="highlights-container col-md-5">' . itg_event_backend_highlights_block_content() . '</div></div>';
  return $video . $highlights_content;
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_event_backend_cronapi($op, $job = NULL) {
  $items['itg_event_backend_publish_event'] = array(
    'description' => 'Publish Event',
    'callback' => 'itg_event_backend_publish_event_callback',
  );
  return $items;
}

/**
 * Publish event automatically through cron
 */
function itg_event_backend_publish_event_callback() {
  $current_time = time();

  if (db_table_exists('itg_event_publish_cron')) {
    $query = db_select('itg_event_publish_cron', 'e');
    $query->fields('e')
        ->condition('e.status', 0, '=');
    $result = $query->execute();

    // Fetch node to publish
    while ($record = $result->fetchAssoc()) {
      $event_start_date = $record['event_start_date'];
      if ($current_time >= $event_start_date) {
        db_update('node')
            ->fields(array(
              'status' => 1,
            ))
            ->condition('nid', $record['nid'], '=')
            ->execute();

        // Update cron table
        db_update('itg_event_publish_cron')
            ->fields(array(
              'status' => 1,
            ))
            ->condition('nid', $record['nid'], '=')
            ->execute();
      }
    }
  }
}

/*
 * Implementation of hook_form_FORM_ID_alter
 * {@inheritdoc}
 */

function itg_event_backend_form_taxonomy_form_term_alter(&$form, &$form_state) {
  if (is_array($form['#term']) && count($form['#term']) > 0) {
    if (isset($form['#term']['vocabulary_machine_name']) && $form['#term']['vocabulary_machine_name'] == 'event_type') {
      drupal_set_title('Event Type');
      $destination = 'event-types-listing';
      $delete_destination = 'texonomy/confirm/ajax/' . trim($form['#term']['tid']);
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $destination, array(
          'attributes' => array(
            'class' => 'button'
          )
        )),
        '#weight' => 21,
        '#value' => t('Cancel')
      );
      unset($form['tags']);
      unset($form['#metatags']);
      $form['description']['#access'] = FALSE;
      $form['relations']['#access'] = FALSE;
      $form['tags']['und']['#metatags']['#access'] = FALSE;
    }
  }
}

/**
 * Implements function for event twitter block
 */
function itg_event_backend_twitter_data() {
  $event_id = itg_event_backend_get_event_node();
  if (!empty($event_id) && itg_event_backend_get_node_type($event_id) == 'event_backend') {
    $query = db_select('field_data_field_event_twitter', 'event_twitter');
    $query->fields('event_twitter', array('field_event_twitter_value'));
    $query->condition('entity_id', $event_id, '=');
    $query->condition('bundle', 'event_backend', '=');
    $result = $query->execute()->fetchField();
    return $result;
  }
}

/* * *
 * Implements function for get node type
 */

function itg_event_backend_get_node_type($nid) {
  $query = db_select('node', 'n');
  $query->fields('n', array('type'));
  $query->condition('nid', $nid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements alter message function().
 * @param array $form
 * @param array $form_state
 */
function itg_event_save_initial_speaker_weight(&$form, $form_state) {
  $field_program_schedule = $form_state['values']['field_program_schedule']['und'];
  $target_id = itg_event_get_target_id_of_speakers($field_program_schedule);
  $widget_name = "itg_event_speaker_widget";
  $cat_id = arg(1);
  if (!empty($target_id)) {
    if ($cat_id != 'add') {
      // Delete unused speakers
      db_delete('itg_widget_order')
          ->condition('nid', array($target_id), 'NOT IN')
          ->condition('widget', $widget_name)
          ->condition('cat_id', $cat_id)
          ->execute();
    }
    // Below node is will save in cat_id of itg_widget_order_table.
    foreach ($target_id as $node_data) {
      $node_in_widget = itg_event_backend_is_node_in_widget($node_data, $cat_id, $widget_name);
      if ($node_in_widget) {
        continue;
      }
      else {
        try {
          $weight_data = itg_event_backend_get_min_weight($widget_name, $cat_id);
          db_insert('itg_widget_order')
              ->fields(array(
                'nid' => $node_data,
                'cat_id' => $cat_id,
                'weight' => --$weight_data,
                'widget' => 'itg_event_speaker_widget',
              ))->execute();
        }
        catch (Exception $ex) {
          drupal_set_message($ex->getMessage());
        }
      }
    }
  }
}

/**
 * Function returns weight corossponding to speaker.
 * @param string $type
 * @param int $cat_id
 * @return int
 */
function itg_event_backend_get_min_weight($type, $cat_id) {
  $max_query = db_select('itg_widget_order');
  $max_query->addExpression('MIN(weight)');
  $max_query->condition('widget', $type);
  $max_query->condition('cat_id', $cat_id);
  $max_result = $max_query->execute()->fetchField();
  return isset($max_result) ? $max_result : 1;
}

/**
 * Returns number of rows.
 * @param int $nid
 * @param int $cat_id
 * @param string $widget
 * @return int
 */
function itg_event_backend_is_node_in_widget($nid, $cat_id, $widget) {
  $count = 0;
  if (!empty($nid) && !empty($widget)) {
    $query = db_select('itg_widget_order', 'iwo')
        ->fields('iwo', array('nid'))
        ->condition('iwo.nid', $nid)
        ->condition('iwo.cat_id', $cat_id)
        ->condition('iwo.widget', $widget);
    $count = $query->execute()->rowCount();
  }
  return $count;
}

/**
 * Function returns field collections target id of speakars.
 * @param array $field_program_schedule
 * @return array
 */
function itg_event_get_target_id_of_speakers($field_program_schedule) {
  $target_id = array();
  if (!empty($field_program_schedule)) {
    foreach ($field_program_schedule as $key => $field_select_speaker) {
      $spekar_target_id_array = $field_select_speaker['field_select_speaker']['und'];
      foreach ($spekar_target_id_array as $target_id_value) {
        $target_id[] = $target_id_value['target_id'];
      }
    }
  }
  return $target_id;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function itg_widget_form_views_form_event_speaker_order_reorder_block_1_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = "update_itg_widget_order_table_data_for_speaker";
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function itg_widget_form_views_form_event_speaker_order_reorder_page_11_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = "update_itg_widget_order_table_data_for_speaker";
}

/**
 * Function for save new order in custom table itg_widget_order for we may suggest widget.
 *
 * @param array $form
 * @param array $form_state
 */
function update_itg_widget_order_table_data_for_speaker($form, &$form_state) {
  // Take draggable view input value after submit the form.
  $draggable_view_data = $form_state['input']['draggableviews'];
  $widget = 'itg_event_speaker_widget';
  $cat_id = arg(1);
  $weightcount = 0;
  foreach ($draggable_view_data as $key => $value) {
    $weightcount = $weightcount + $value['weight'];
  }

  // If made change is order then save otherwise skip to save.
  if ($weightcount) {
    db_delete('itg_widget_order')
        ->condition('widget', $widget)
        ->condition('cat_id', $cat_id)
        ->execute();

    // Get extra , nid , content type from custom_table because it will further use to insert again.
    foreach ($draggable_view_data as $key => $value) {
      if ($weightcount > 0) {
        try {
          db_insert('itg_widget_order')
              ->fields(array(
                'weight' => $value['weight'],
                'nid' => $value['id'],
                'widget' => $widget,
                'cat_id' => $cat_id,
              ))
              ->execute();
        }
        catch (Exception $ex) {
          drupal_set_message($ex->getMessage());
        }
      }
    }
  }
  else {
    drupal_set_message(t("This order already saved"));
  }
}

/**
 * Implementation of hook_node_delete().
 * {@inheritdoc}
 */
function itg_event_backend_node_delete($node) {
  // Delete Reporter frpom custom table while deleting it.
  if ($node->type == 'reporter') {
    db_delete('itg_widget_order')
        ->condition('nid', $node->nid)
        ->condition('widget', 'itg_event_speaker_widget')
        ->execute();
  }
}

/**
 * Implements get node status
 */
function itg_event_backend_node_status($nid) {
  $query = db_select('node', 'n');
  $query->fields('n', array('status'));
  $query->condition('n.status', 1, '=');
  $query->condition('n.nid', $nid, '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implements function for alias save in event according custom menu (working on node update).
 * @param type object
 */
function event_url_save($node) {
  $steps = array('home', 'programme', 'sponsors', 'speakers', 'registration', 'sponsor-details', 'speaker-details', 'sing-and-win', 'flashback');
  $created_year = date('Y', $node->created);
  if ($_GET['step'] == 'step_first') {
    $event_title = $node->path['alias'];
  }
  else {
    $event_title = $node->path['alias'];
  }

  foreach ($steps as $step) {
    if ($step == 'home') {
      $check_alias = $event_title;
    }
    else {
      $check_alias = $event_title . '/' . $step;
    }
    if (itg_event_backend_alias_check($check_alias)) {
      if ($step == 'home') {
        
      }
      else {
        $alias_s = $event_title . '/' . $step;
        $source = 'event/' . $event_title . '/' . $step;
        itg_event_backend_save_alias($source, $alias_s);
      }
    }
  }
}

/**
 * Implement function for check existing alias
 * @param type str
 * @return boolean
 */
function itg_event_backend_alias_check($alias) {
  $query = db_select('url_alias', 'ua');
  $query->fields('ua', array('pid'));
  //$query->condition('alias', $alias, '=');
  $query->condition('alias', '%' . db_like($alias), 'LIKE');
  $result = $query->execute()->fetchField();
  if (empty($result)) {
    return TRUE;
  }
}

/**
 * Implement function for path alias save events
 * @param type str
 * @param type str
 */
function itg_event_backend_save_alias($source, $alias) {
  $path = array('source' => $source, 'alias' => $alias);
  path_save($path);
}

/**
 * {@inheritdocs}.
 */
function itg_event_backend_token_info() {
  $info['tokens']['node']['event_title'] = array(
    'name' => t('Event Content type'),
    'description' => t('Node title for event'), // this is so you see it in the big list
  );
  return $info;
}

/**
 * {@inheritdocs}
 */
function itg_event_backend_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
    $sanitize = !empty($options['sanitize']);
    if ($type == 'node' && !empty($data['node'])) {
        $node = $data['node'];
  
        foreach ($tokens as $name => $original) {
            switch ($name) {
                    case 'event_title':
                    $toreplace = $node->title;
                    $replacements[$original] = $toreplace;
                    break;
            }
        }
    }
    return $replacements;
}

/**
 * Implement function for Tab Title
 */
function itg_event_backend_tab_title($node, $tab_sef) {

   foreach ($node->field_event_tabs['und'] as $imagecollection){
    $value = field_collection_item_load($imagecollection['value'], $reset = FALSE);
    if($tab_sef == $value->field_tab_sef[LANGUAGE_NONE][0]['value']) {
    $tab_value[$value->field_tab_sef[LANGUAGE_NONE][0]['value']]['tab_name'] = $value->field_tab_name[LANGUAGE_NONE][0]['value'];
    $tab_value[$value->field_tab_sef[LANGUAGE_NONE][0]['value']]['tab_title'] = $value->field_tab_title[LANGUAGE_NONE][0]['value'];
    $tab_value[$value->field_tab_sef[LANGUAGE_NONE][0]['value']]['tab_sef_url_radio'] = $value->field_tab_sef_tab_url[LANGUAGE_NONE][0]['value'];
    $tab_value[$value->field_tab_sef[LANGUAGE_NONE][0]['value']]['tab_sef'] = $value->field_tab_sef[LANGUAGE_NONE][0]['value'];
    $tab_value[$value->field_tab_sef[LANGUAGE_NONE][0]['value']]['tab_url'] = $value->field_tab_url[LANGUAGE_NONE][0]['value'];
    $tab_value[$value->field_tab_sef[LANGUAGE_NONE][0]['value']]['tab_description'] = $value->field_tabs_description[LANGUAGE_NONE][0]['value'];
    }
  }
  return $tab_value;
}

/**
 * Implement function for Tab menu
 */
function itg_event_backend_tab_name_menu($node, $menu_font_color, $tab_menu_font) {
    $path_alias = drupal_get_path_alias('node/'.  $node->nid);
    $flash_back_link = '<ul>';
    $flash_back_link_top = '';
    $key = 0;
   foreach ($node->field_event_tabs['und'] as $imagecollection){
    $value = field_collection_item_load($imagecollection['value'], $reset = FALSE);
    if($value->field_tab_sef_tab_url[LANGUAGE_NONE][0]['value'] == 'tab_sef') {
      if($key == 0) {
        if(!empty($value->field_tab_sef[LANGUAGE_NONE][0]['value']) && !empty($value->field_tab_name[LANGUAGE_NONE][0]['value'])){
          $flash_back_link_top = l('<i class="fa fa-ellipsis-h" aria-hidden="true"></i>', $path_alias, array('html' => TRUE, 'query' => array('tab' => $value->field_tab_sef[LANGUAGE_NONE][0]['value']), 'attributes' => array("style" => "color:$tab_menu_font")));
        }
      }
      if(!empty($value->field_tab_sef[LANGUAGE_NONE][0]['value']) && !empty($value->field_tab_name[LANGUAGE_NONE][0]['value'])){
        $flash_back_link .= '<li>' . l(t($value->field_tab_name[LANGUAGE_NONE][0]['value']), $path_alias, array('query' => array('tab' => $value->field_tab_sef[LANGUAGE_NONE][0]['value']), 'attributes' => array("style" => "color:$menu_font_color"))) . '</li>';
      }
    }elseif($value->field_tab_sef_tab_url[LANGUAGE_NONE][0]['value'] == 'tab_url') {
      $external_url = $value->field_tab_url[LANGUAGE_NONE][0]['value'];
       if($key == 0) {
         if(!empty($value->field_tab_url[LANGUAGE_NONE][0]['value']) && !empty($value->field_tab_name[LANGUAGE_NONE][0]['value'])){
          $flash_back_link_top =  l('<i class="fa fa-ellipsis-h" aria-hidden="true"></i>', $external_url, array('html' => TRUE, 'external' => TRUE, 'attributes' => array('target' => '_blank', "style" => "color:$tab_menu_font")));
         }
       }
       if(!empty($value->field_tab_url[LANGUAGE_NONE][0]['value']) && !empty($value->field_tab_name[LANGUAGE_NONE][0]['value'])){
          $flash_back_link .= '<li>' . l(t($value->field_tab_name[LANGUAGE_NONE][0]['value']), $external_url, array('external' => TRUE, 'attributes' => array('target' => '_blank', "style" => "color:$menu_font_color"))) . '</li>';
       }
    }
    $key++;
  }
  $flash_back_link .= '</ul>';
  $all_link = array('tab_top_menu' => $flash_back_link_top, 'tab_menu' => $flash_back_link);
  return $all_link;
}