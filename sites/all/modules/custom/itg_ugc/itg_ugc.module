<?php

/**
 * @file
 * The ITG UGC module.
 *
 * Contains functionality related to User Generated Content.
 *
 */

module_load_include('inc', 'itg_ugc', 'include/ugc_inqueue_content_list');
module_load_include('inc', 'itg_ugc', 'include/ugc_reject_content_list');

/**
 * Implements hook_menu().
 */
function itg_ugc_menu() {
  $items['ugc-title/%/reject'] = array(
    'page callback' => 'itg_ugc_node_status_update',
    'page arguments' => array(1),
    'access arguments' => array('access reject ugc content link'),
    'type' => MENU_CALLBACK,
  );
  
  $items['ugc-inqueue-content'] = array(
    'title' => 'Manage UGC',
    'page callback' => 'itg_ugc_inqueue_content',
    'access arguments' => array('access ugc list link'),
    'type' => MENU_CALLBACK,
    'file' => 'include/ugc_inqueue_content_list.inc',
  );
  
  $items['ugc-reject-content'] = array(
    'title' => 'Manage UGC',
    'page callback' => 'itg_ugc_reject_content',
    'access arguments' => array('access ugc list link'),
    'type' => MENU_CALLBACK,
    'file' => 'include/ugc_reject_content_list.inc',
  );
  
  $items['ugc-view-content/%'] = array(
    'title' => 'Manage UGC',
    'page callback' => 'itg_ugc_view_content',
    'page arguments' => array(1),
    'access arguments' => array('access ugc list link'),
    'type' => MENU_CALLBACK,
  );

  $items['ugc-thank-you'] = array(
    'page callback' => 'itg_ugc_thank_you',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission.
 */
function itg_ugc_permission() {
  return array(
    'access reject ugc content link' => array(
      'title' => t('Ugc reject permission'),
      'description' => t('Ugc reject permission.'),
    ),
    'access ugc list link' => array(
      'title' => t('Ugc list link  permission'),
      'description' => t('Ugc list link permission.'),
    ),
  );
}

/**
 * Implements hook_rules_action_info().
 *
 * @return array
 */
function itg_ugc_rules_action_info() {
  return array(
    'itg_ugc_send_follow_story_content_mail' => array(
      'label' => t('Send Mail to users for story content'),
      'parameter' => array(
        'node' => array('type' => 'node', 'label' => t('Current Node')),
      ),
      'group' => t('ITG'),            
    ),
  );
}

/**
 * Implements callback function for 'itg_ugc_send_follow_story_content_mail'
 * @param type $node
 */
function itg_ugc_send_follow_story_content_mail($node) {
  if ($node->type == 'story')
  {
    if (isset($node->op)) {
    $get_user_id = itg_get_follow_story_user($node->nid, 1);
    if(!empty($get_user_id)) {
      foreach ($get_user_id as $follow_user) {

        module_load_include('inc', 'itg_ugc', 'include/itg_follow_story_mail');
        
        if (function_exists('itg_mail_templates_get_mailcontent')) {
          $mail_data = itg_mail_templates_get_mailcontent($node, 'Follow Story');
          $mail_subject = $mail_data->field_mail_subject_follwo_story[LANGUAGE_NONE][0]['value'];
        }

        $mail_contents = itg_follow_story_get_mail_content($node);
        $mail_content = preg_replace("/\[([^\[\]]++|(?R))*+\]/", "", $mail_contents);
        $params = array(
          'body' => $mail_content,
          'subject' => $mail_subject,
        );

        $to = itg_get_user_email_by_id($follow_user);
//        $to = 'gourav.walia@kelltontech.com';
        if (!empty($to))
        {
          $mail = drupal_mail('itg_ugc_user', 'send_mail_to_follow_story_user', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
//          if ($mail['result'])
//          {
//            return TRUE;
//          }
//          else
//          {
//            $error_msg = 'Failed to send the email!';
//            watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
//            return FALSE;
//          }
        }
      }
    }
    }
  }
}

/**
 * Implements itg_get_user_email_by_id
 * @param int $uid
 */
function itg_get_user_email_by_id($uid) {
  $query = db_select('users', 'u')
            ->fields('u', array('mail'))
            ->condition('u.uid', $uid, '=');
  return $query->execute()->fetchField();
}

/**
 * Implement hook_form_alter
 * {@inheritdoc}
 */
function itg_ugc_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  
// get id of ugc content
  $url_nid = arg(3);
  $ugc_heading = '';
  // condition for front user 
  if ($user->uid == 0 && !empty($_GET['type']) && $form_id == 'ugc_node_form') {
    $form['field_ugc_ctype']['#attributes']['class'][] = 'element-hidden';
    if (isset($_GET['type'])) {
      $form['ugc_head'] = array(
       '#weight' => -1,   
       '#markup' => '<div class="ugc-top-heading"><h2>Post Your Content</h2></div>');
      $form['field_ugc_ctype'][LANGUAGE_NONE]['#default_value'] = $_GET['type'];
    }
    $form['field_section']['#weight'] = 3;
    $form['#attributes']['class'][] = 'ugc-custom-wrapper';
  }


  if (empty($form['nid']['#value'])) {
    // prefill input value in blog form
    if ($form_id == 'blog_node_form' && !empty($url_nid)) {
      // get node values
     ;
      $mongo_details = itg_ugc_content_details($url_nid);

      $form['title']['#default_value'] = $mongo_details['title'];
      $form['field_blog_long_description'][LANGUAGE_NONE][0]['#default_value'] = $mongo_details['description'];
      $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $mongo_details['unid'];
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $mongo_details['section'];
    }

    // prefill input value in story form
    if ($form_id == 'story_node_form' && !empty($url_nid)) {
      // get node values
      $mongo_details = itg_ugc_content_details($url_nid);
      $ugc_user_name = $mongo_details['name'];
      $form['title']['#default_value'] = $mongo_details['title'];
      $form['field_story_long_head_line'][LANGUAGE_NONE][0]['value']['#value'] = $mongo_details['title'];
      $form['field_story_short_headline'][LANGUAGE_NONE][0]['value']['#value'] = $mongo_details['title'];
      $form['body'][LANGUAGE_NONE][0]['#default_value'] = $mongo_details['description'];
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $mongo_details['unid'];
      if($user->uid != 1) {
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#prefix'] = '<div style="display: none">';
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#suffix'] = '</div>';
      }
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_stroy_city'][LANGUAGE_NONE]['#default_value'] = $mongo_details['city'];
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $mongo_details['section'];
      if (!empty($ugc_user_name)) {
        $form['field_story_reporter']['#prefix'] = '<div class="main-cont">';
        $form['field_story_reporter']['#suffix'] = '<span class="byline">' . $ugc_user_name . ' (UGC User)</span></div>';
      }
    }

    // prefill input value in videogallery form
    if ($form_id == 'videogallery_node_form' && !empty($url_nid)) {
      // get node values
      drupal_add_css(".page-node-add-videogallery #field-video-upload-values tbody tr:first-child {display:block !important};
      ", 'inline');
      $mongo_details = itg_ugc_content_details($url_nid);
      $ugc_user_name = $mongo_details['name'];
      $form['title']['#default_value'] = $mongo_details['title'];
      $form['field_story_short_headline'][LANGUAGE_NONE][0]['value']['#default_value'] = $mongo_details['title'];
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $mongo_details['unid'];
      if($user->uid != 1) {
        $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#prefix'] = '<div style="display: none">';
        $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#suffix'] = '</div>';
      }
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_stroy_city'][LANGUAGE_NONE]['#default_value'] = $mongo_details['city'];
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $mongo_details['section'];
      if (!empty($ugc_user_name)) {
        $form['field_story_reporter']['#prefix'] = '<div class="main-cont">';
        $form['field_story_reporter']['#suffix'] = '<span class="byline">' . $ugc_user_name . ' (UGC User)</span></div>';
      }
      // assign value in first field collection item
      foreach ($form['field_video_upload']['und'] as $delta => $field) {
        if (is_numeric($delta)) {
          // assign value in first field collection item
          $form['field_video_upload'][LANGUAGE_NONE][$delta]['field_videogallery_video_upload'][LANGUAGE_NONE][0]['#default_value']['fid'] = $mongo_details['video'];
        }
      }
    }

    // prefill input value in podcast form
    if ($form_id == 'podcast_node_form' && !empty($url_nid)) {
      // get node values
      $mongo_details = itg_ugc_content_details($url_nid);
      $ugc_user_name = $mongo_details['name'];
      $form['title']['#default_value'] = $mongo_details['title'];
      $form['field_story_short_headline'][LANGUAGE_NONE][0]['value']['#default_value'] = $mongo_details['title'];
      $form['field_podcast_kicker_message'][LANGUAGE_NONE][0]['#default_value'] = $mongo_details['description'];
      $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $mongo_details['unid'];
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $mongo_details['section'];
      foreach ($form['field_podcast_audio_upload']['und'] as $delta => $field) {
        if (is_numeric($delta)) {
          // assign value in first field collection item
          $form['field_podcast_audio_upload'][LANGUAGE_NONE][$delta]['field_podcast_upload_audio_file'][LANGUAGE_NONE][0]['#default_value']['fid'] = $mongo_details['audio'];
        }
      }
    }

    // prefill input value in photogallery form
    if ($form_id == 'photogallery_node_form' && !empty($url_nid)) {
      // get node values
      $mongo_details = itg_ugc_content_details($url_nid);
      $form['title']['#default_value'] = $mongo_details['title'];
      $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $mongo_details['unid'];
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_gallery_kicer'][LANGUAGE_NONE][0]['#default_value'] = $mongo_details['description'];
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $mongo_details['section'];
      if(!empty($mongo_details['multiple_image'])) {
        $multiple_image = explode(',', $mongo_details['multiple_image']);
        $multiple_caption = explode(',', $mongo_details['image_caption']);
        $default_setting_img_array = $form['field_gallery_image'][LANGUAGE_NONE][0];
        foreach ($multiple_image as $key => $value) {
          if ($key != 0) {
            $form['field_gallery_image'][LANGUAGE_NONE][$key] = $default_setting_img_array;
          }
          $form['field_gallery_image'][LANGUAGE_NONE][$key]['field_images'][LANGUAGE_NONE][0]['#default_value'] = (array) file_load($value);
          $form['field_gallery_image']['und'][$key]['field_image_caption'][LANGUAGE_NONE][0]['value']['#default_value'] = $multiple_caption[$key];
        }
      }
    }
  }

  
  // alter the section for election xml 
  if ($form_id == 'election_graph_xml_node_form') {    
   
    $tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = FALSE);
    foreach ($tax as $key => $term) {

      if (!itg_category_manager_term_state($term->tid)) {
        unset($tax[$key]);
      }
      
    }

    $op = array("_none" => "Select Category");
    foreach ($tax as $key => $val) {
      $op[$val->tid] = $val->name;
    }

    $form['field_section']['#title'] = array('All' => '- Any -');
    $form['field_section']['und']['#options'] = $op;
  }

  if ($form_id == 'ugc_node_form') {
    $form['field_ugc_photo_image']['und']['#file_upload_title'] = t('');
    $form['field_user_name'][LANGUAGE_NONE][0]['value']['#attributes'] = array('placeholder' => t('Name'));
    $form['field_user_email'][LANGUAGE_NONE][0]['value']['#attributes'] = array('placeholder' => t('Email'));
    $form['field_user_city'][LANGUAGE_NONE][0]['value']['#attributes'] = array('placeholder' => t('City'));
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
    $form['field_user_message']['#attributes'] = array('placeholder' => t('Description'));
    if($user->uid && $user->uid != 0) {
    $form['field_user_message']['und'][0]['#format'] = 'front_user';
    }
    $user_fields = user_load($user->uid);
   
   if ($user->uid != '1') {
      // hide source and type field from other users
      if ($form_id == 'ugc_node_form') {
        $form['field_story_source_type']['#access'] = FALSE;
        $form['field_source']['#access'] = FALSE;
      }
    }
    
    if (!array_key_exists(FRONT_USER, $user->roles)) {
      $form['field_ugc_upload_photo']['#access'] = FALSE;
    }
    
    $type = "ugc";
    $tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = FALSE);
    foreach ($tax as $key => $term) {

      if (!itg_category_manager_term_state($term->tid)) {
        unset($tax[$key]);
      }
      if ($type != "") {
        if (!itg_category_manager_term_state_content($type, $term->tid)) {
          unset($tax[$key]);
        }
      }
    }

    $op = array("_none" => "Select Category");
    foreach ($tax as $key => $val) {
      $op[$val->tid] = $val->name;
    }

    $form['field_section']['#title'] = array('All' => '- Any -');
    $form['field_section']['und']['#options'] = $op;

    $form['field_recipe_audio']['und'][0]['#title'] = t('Audio') . '<span class="form-required" title="This field is required."> *</span>';
    // get content type field value
    $type = $form['field_ugc_ctype'][LANGUAGE_NONE][0]['value'];

    // Check if user is logged-in, fill email and name field automatically
    if ($user->uid && $form['#node']->nid == '') {
      $form['field_user_email'][LANGUAGE_NONE][0]['value']['#value'] = $user->mail;
      $form['field_user_email'][LANGUAGE_NONE]['0']['value']['#attributes']['disabled'] = TRUE;
      $form['field_user_name'][LANGUAGE_NONE][0]['value']['#value'] = $user_fields->field_first_name['und']['0']['value'];
      $form['field_user_name'][LANGUAGE_NONE]['0']['value']['#attributes']['disabled'] = TRUE;
    }

    $form['actions']['submit']['#value'] = 'Submit';
    $form['#after_build'][] = 'itg_ugc_after_build';
    $form['actions']['submit']['#submit'][] = 'itg_ugc_form_custom_callback';
    // Hide/show video field
    $form['field_astro_video']['#states'] = array(
      'visible' => array(
        array(
          array(':input[name="field_ugc_ctype[und]"]' => array('value' => 'videogallery')),
          'or',
          array(':input[name="field_ugc_ctype[und]"]' => array('value' => 'recipe')),
        ),
      ),
      'required' => array(
        ':input[name="field_ugc_ctype[und]"]' => array('value' => 'videogallery'),
      )
    );

    // Hide/show Audio field
    $form['field_recipe_audio']['#states'] = array(
      'visible' => array(
        ':input[name="field_ugc_ctype[und]"]' => array('value' => 'podcast'),
      )
    );

    $arg = arg();
    // Hide/show photo field
    if ($arg[0] == 'personalization' && $arg[1] == 'my-content') {
      $form['field_ugc_personalization_photo']['#states'] = array(
        'visible' => array(
          ':input[name="field_ugc_ctype[und]"]' => array('value' => 'photogallery'),
        ),
      );
      // Hide show photo field.
      $form['field_ugc_upload_photo']['#states'] = array(
        'visible' => array(
          ':input[name="field_ugc_ctype[und]"]' => array('value' => 'recipe'),
        ),
        'required' => array(
          ':input[name="field_ugc_ctype[und]"]' => array('value' => 'photogallery'),
        )
      );
      // Hide/show description field
      $form['field_user_message']['#states'] = array(
        'required' => array(
          ':input[name="field_ugc_ctype[und]"]' => array(
            array('value' => 'story'),
            array('value' => 'recipe'),
            array('value' => 'blog')
          ),
        ),
        'invisible' => array(
          ':input[name="field_ugc_ctype[und]"]' => array(array('value' => 'photogallery'), array('value' => '_none')),
        ),
      );

      // Add cancel button
      if ($user->uid && $user->uid != 1) {
        $form['actions']['cancel'] = array(
          '#markup' => l(t('Cancel'), 'personalization/my-content', array('attributes' => array('class' => array('button')))),
          '#weight' => 21,
          '#value' => t('Cancel'),
        );
      }
    }
    else {
      // Hide field collection photo field.
      $form['field_ugc_personalization_photo']['#prefix'] = '<div style="display: none;">';
      $form['field_ugc_personalization_photo']['#suffix'] = '</div>';
      // Hide field video tags.
      $form['field_story_client_title']['#prefix'] = '<div style="display: none;">';
      $form['field_story_client_title']['#suffix'] = '</div>';
      $form['field_ugc_photo_image']['#states'] = array(
        'visible' => array(
          ':input[name="field_ugc_ctype[und]"]' => array('value' => 'photogallery'),
        ),
      );
      // Hide/show description field
      $form['field_user_message']['#states'] = array(
        'required' => array(
          ':input[name="field_ugc_ctype[und]"]' => array(
            array('value' => 'story'),
            array('value' => 'recipe'),
            array('value' => 'blog')
          ),
        ),
      );

      // Add cancel button
      if ($user->uid && $user->uid != 1) {
        $form['actions']['cancel'] = array(
          '#markup' => l(t('Cancel'), 'cms-user-dashboard', array('attributes' => array('class' => array('button')))),
          '#weight' => 21,
          '#value' => t('Cancel'),
        );
      }
    }
    unset($form['actions']['submit']['#submit']);
    $form['#submit'] = array('ugc_form_submit_handler');
  }
}

/**
 * Implements ugc_form_submit_handler().
 *
 * {@inheritdoc}
 */
function ugc_form_submit_handler($form, &$form_state) {
  global $user;
  $arg = arg();
  $unique_id = time();
  $source_type = $form_state['values']['field_ugc_ctype'][LANGUAGE_NONE][0]['value'];
  $name = $form_state['values']['field_user_name'][LANGUAGE_NONE][0]['value'];
  $email = $form_state['values']['field_user_email'][LANGUAGE_NONE][0]['value'];
  $city = $form_state['values']['field_user_city'][LANGUAGE_NONE][0]['value'];
  $section = $form_state['values']['field_section'][LANGUAGE_NONE][0]['tid'];
  $content_type = $form_state['values']['field_ugc_ctype'][LANGUAGE_NONE][0]['value'];
  $title = $form_state['values']['title'];
  $description = $form_state['values']['field_user_message'][LANGUAGE_NONE][0]['value'];
  
  $video = $form_state['values']['field_astro_video'][LANGUAGE_NONE][0]['fid'];
  $audio = $form_state['values']['field_recipe_audio'][LANGUAGE_NONE][0]['fid'];
  $publish_date = date('d/m/Y');
  $publish_date_time = date('d-m-Y H:i:s');
  
  // check for city and byline
  $cat_check = itg_category_manager_get_term_from_name($city, CITY_MANAGMENT);
  if (!empty($cat_check)) {
    $city = $city;
  }
  else {
    $term = new stdClass();
    $term->name = $city;
    $term->vid = CITY_MANAGMENT;
    taxonomy_term_save($term);
    $new_cat = itg_category_manager_get_term_from_name($city, CITY_MANAGMENT);
    $city = $city;
  }
    
    // multi photo condition
  if (!empty($form['field_ugc_personalization_photo']['und'])) {
    foreach ($form['field_ugc_personalization_photo']['und'] as $delta => $field) {
      if (is_numeric($delta)) {
        // assign value in first field collection item
        $photo_array[] = $form['field_ugc_personalization_photo'][LANGUAGE_NONE][$delta]['field_ugc_upload_photo'][LANGUAGE_NONE][0]['fid']['#value'];
        $photo_caption[] = $form['field_ugc_personalization_photo'][LANGUAGE_NONE][$delta]['field_story_short_headline'][LANGUAGE_NONE][0]['value']['#value'];
      }
    }
    
    $multiple_image = implode(',', $photo_array);
    $multiple_caption = implode(',', $photo_caption);
  }
  
  // multi photo caption for anonyous user
  if (!empty($form_state['values']['field_ugc_photo_image']['und'][0]['fid'])) {
    foreach ($form_state['values']['field_ugc_photo_image'][LANGUAGE_NONE] as $delta => $field) {
      if (is_numeric($delta)) {
        // assign value in first field collection item
        $fids = $form_state['values']['field_ugc_photo_image'][LANGUAGE_NONE][$delta]['fid'];
        if($fids != 0) {
        $anonyphoto_array[] = $fids;
        }
      }
    }

    $anony_multiple_image = implode(',', $anonyphoto_array);
  }

  if(!empty($multiple_image)) {
   $ins_image = $multiple_image; 
  }
  
  if(!empty($anony_multiple_image)) {
   $ins_image = $anony_multiple_image; 
  }
  
  if (!empty($anony_multiple_image)) {
    ugc_form_file_status($anony_multiple_image, 'yes');
  }
  if (!empty($video)) {
    $file = file_load($video);
    file_usage_add($file, 'itg_custom_mongo', 'file', 2);
    ugc_form_file_status($video);
  }
  if (!empty($audio)) {
    $file = file_load($audio);
    file_usage_add($file, 'itg_custom_mongo', 'file', 3);
    ugc_form_file_status($audio);
  }
  if (!empty($multiple_image)) {
    ugc_form_file_status($multiple_image, 'yes');
  }

  if (function_exists('mongodb')) {
    $con = mongodb();
    $people = $con->ugc_details;
    $qry = array("unid" => $unique_id,"name" => $name, "email" => $email, "city" => $city, "section" => $section, "content_type" => $content_type, "title" => $title, "description" => $description, "video" => $video, "audio" => $audio, "publish_date" => $publish_date, "publish_date_time" => $publish_date_time, "publish_status" => "", "updated_by" => "", "status" => 1, "rejected_date" => "", "uid" => $user->uid, "multiple_image" => $ins_image, "image_caption" => $multiple_caption);
    $result = $people->insert($qry);
  }
  
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  // Set redirection after submit.
  if ($arg[0] == 'personalization' && $arg[1] == 'my-content') {
    $_REQUEST['destination'] = 'personalization/my-content';
    $form_state['redirect'] = array(
      'personalization/my-content',
      array('query' => array('ugc' => 'success'))
    );
  }
  else {
    $_REQUEST['destination'] = 'ugc-thank-you';
    $form_state['redirect'] = 'ugc-thank-you';
  }
}

/**
 * Implements ugc_form_submit_handler().
 *
 * {@inheritdoc}
 * @param int $fid
 * @param string $multiple
 */
function ugc_form_file_status($fid, $multiple = NULL) {
  if (!empty($fid) && empty($multiple)) {
    db_update('file_managed') // Table name no longer needs {}
        ->fields(array('status' => 1))
        ->condition('fid', $fid)
        ->execute();
  }

  if (!empty($fid) && !empty($multiple)) {
    $fid_exp = explode(',', $fid);
    foreach($fid_exp as $value) {
      if($value != 0) {
      $file = file_load($value);
      file_usage_add($file, 'itg_custom_mongo', 'file', 4);
      db_update('file_managed') // Table name no longer needs {}
          ->fields(array('status' => 1))
          ->condition('fid', $value)
          ->execute();
      }
    }
  }
}

/**
 * Custom submit callback for redirecting UGC form.
 * @param type $form
 * @param type $form_state
 */
function itg_ugc_form_custom_callback($form, &$form_state) {
  $arg = arg();
  $node_type = ucfirst($form_state['node']->type);
  $node_type = str_replace("_", " ", $node_type);
  $title = ucfirst($form_state['node']->title);

  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  // Set redirection after submit.
  if ($arg[0] == 'personalization' && $arg[1] == 'my-content') {
    $_REQUEST['destination'] = 'personalization/my-content';
    $form_state['redirect'] = 'personalization/my-content';
  }
  else {
    $_REQUEST['destination'] = 'ugc-thank-you';
    $form_state['redirect'] = 'ugc-thank-you';
    //$msg = itg_custom_message($node_type, $workbench_current_state = NULL, arg(1), $title, $_REQUEST['destination']);
  }
}

/**
 * Implement hook_after_build
 * @param Array $form
 * @param Array $form_state
 */
function itg_ugc_after_build($form, &$form_state) {
  global $user, $base_url;

  $form['title']['#description'] = '';
  // update automatic alias name
  $form['path']['pathauto']['#title'] = 'Generate automatic Sef URL';

  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_ugc' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_ugc') . '/js/itg_ugc.js', array('scope' => 'footer'));
  // Add js file to form.
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js',
  );

  return $form;
}

/**
 * Implement hook_node_validate
 * {@inheritdoc}
 */
function itg_ugc_node_validate($node, $form, &$form_state) {
  if ($node->type == 'ugc') {
    // get value of content type field
    $type = $node->field_ugc_ctype[LANGUAGE_NONE][0]['value'];
    // get value of body field
    $description = $node->field_user_message[LANGUAGE_NONE][0]['value'];
    // get fid of upload image
    $upload_image = $node->field_ugc_photo_image[LANGUAGE_NONE][0]['fid'];
    // get fid of upload video
    $upload_video = $node->field_astro_video[LANGUAGE_NONE][0]['fid'];
    // get fid of upload audio
    $upload_audio = $node->field_recipe_audio[LANGUAGE_NONE][0]['fid'];
    // get email of user
    $user_email = $node->field_user_email[LANGUAGE_NONE][0]['value'];
    // get name of user
    $user_name = $node->field_user_name[LANGUAGE_NONE][0]['value'];
    // get email of user
    $title = $node->title;
    // Get personalization multi photos
    $personal_multi_photo = $form_state['values']['field_ugc_personalization_photo']['und'][0]['field_ugc_upload_photo']['und'][0]['fid'];
    $arg = arg();
    // validate if decription field is blank
    if ($type == 'story' || $type == 'recipe' || $type == 'blog') {
      if (empty($description)) {
        form_set_error('field_user_message', t("Description field is required."));
      }
    }
    // validate if image field is blank
    if (($type == 'photogallery')) {
      if (empty($upload_image) && $arg[1] !== 'my-content') {
        form_set_error('field_ugc_photo_image', t("Image field is required."));
      }
      if ($arg[1] === 'my-content' && empty($personal_multi_photo)) {
        form_set_error('field_ugc_personalization_photo', t('Upload photo field is required.'));
      }
    }

    // validate if video field is blank
    if (($type == 'videogallery')) {
      if (empty($upload_video)) {
        form_set_error('field_astro_video', t("Video field is required."));
      }
    }

    // validate if audio field is blank
    if ($type == 'audio') {
      if (empty($upload_audio)) {
        form_set_error('field_recipe_audio', t("Audio field is required."));
      }
    }
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * {@inheritdoc}
 */
function itg_ugc_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  if ($form["#id"] == 'views-exposed-form-manage-ugc-page' || $form["#id"] == 'views-exposed-form-manage-ugc-page-1') {
    $form['title']['#autocomplete_path'] = 'content-title-list/ugc/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
}

/**
 * Implement itg_ugc_node_status_update
 * @param int $nid
 * @param string $title
 */
function itg_ugc_node_status_update($nid, $title) {
  global $user;
  if (function_exists('mongodb')){
    $con = mongodb();
    if ($con) {
      if (function_exists('itg_ugc_content_details')) {
        if(!empty($title)) {
          $ugc_content_details = itg_ugc_content_details($nid, 1);
        } else {
          $ugc_content_details = itg_ugc_content_details($nid);
        }
        
        $to = trim($ugc_content_details['email']);
        $uname = trim($ugc_content_details['name']);
        $type = trim($ugc_content_details['content_type']);
      }
      
      $people = $con->ugc_details;
    }
  }
  $node_author = user_load($user->uid);
  $rejected_by = $node_author->field_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $node_author->field_last_name[LANGUAGE_NONE][0]['value'];

  if (!empty($title)) {
    $newdata = array('$set' => array('publish_status' => 1, 'updated_by' => trim($rejected_by)));
    $people->update(array("unid" => (int)$nid), $newdata);
    module_load_include('inc', 'itg_ugc', 'include/itg_ugc_mail');
    $mail_content = itg_ugc_get_mail_content($uname, $type, 'Published', $to);
    drupal_set_message(t($ugc_content_details['title'] . ' has been Published successfully.'));
    drupal_goto('ugc-inqueue-content');
  }
  else {
    $pid = new MongoId($nid);
    $rejected_date = date('d/m/Y');
    $newdata = array('$set' => array('status' => 0, 'updated_by' => trim($rejected_by), 'rejected_date' => $rejected_date));
    $people->update(array("_id" => $pid), $newdata);
    module_load_include('inc', 'itg_ugc', 'include/itg_ugc_mail');
    $mail_content = itg_ugc_get_mail_content($uname, $type, 'Rejected', $to);
    drupal_set_message(t($ugc_content_details['title'] . ' has been rejected successfully.'));
    drupal_goto('ugc-inqueue-content');
  }
}

/**
 * Send mail to ugc user, when query is received
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_ugc_user_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_Rejected_mail_to_ugc_user':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;

    case 'send_Published_mail_to_ugc_user':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
    
      case 'send_mail_to_follow_story_user':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Implement hook_node_view
 * {@inheritdoc}
 */
function itg_ugc_node_view($node, $view_mode, $langcode) {
  if ($node->type == "ugc") {
    global $user, $base_url;
    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;
    drupal_add_js(array('itg_ugc' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_common') . '/js/itg_common.js', array('scope' => 'footer'));
  }
}

/**
 * Implements hook_node_insert
 * @param type $node
 */
function itg_ugc_node_insert($node) {
  if ($node->type == 'story' || $node->type == 'blog' || $node->type == 'recipe' || $node->type == 'photogallery' || $node->type == 'videogallery' || $node->type == 'podcast')
  {
    $title = $node->title;
    $source_type = '';
    if (!empty($node->field_story_source_type[LANGUAGE_NONE][0]['value'])){
      $source_type = $node->field_story_source_type[LANGUAGE_NONE][0]['value'];
    }
    if (!empty($node->field_story_ugc_source_id[LANGUAGE_NONE][0]['value'])) {
      if ($node->type == 'story' || $node->type == 'videogallery' || $node->type = 'podcast'){
        $source_id = $node->field_story_ugc_source_id[LANGUAGE_NONE][0]['value'];
      }
    }
    else {
      if(!empty($node->field_story_source_id[LANGUAGE_NONE])){
        $source_id = $node->field_story_source_id[LANGUAGE_NONE][0]['value'];
      }
    }
    if ($source_type == 'UGC' && !empty($source_id)) {
      itg_ugc_node_status_update($source_id, $title);
    }
  }
}

/**
 * Implement hook_views_pre_render
 * {@inheritdoc}
 */
function itg_ugc_views_pre_render(&$view) {
  if ($view->name == "manage_ugc") {

    foreach ($view->result as $chkvalue) {

      $user_message_raw_value = strip_tags($chkvalue->field_field_user_message[0]['raw']['value']);
      $user_message_lenth = strlen($user_message_raw_value);
      if ($user_message_lenth > 100) {
        $user_message_raw_value = substr($user_message_raw_value, 0, 99) . "...";
        $user_message_raw_value = itg_ugc_bad_words($user_message_raw_value);
      }
      else {
        $user_message_raw_value = itg_ugc_bad_words($user_message_raw_value);
        $user_message_raw_value = $user_message_raw_value;
      }
      $chkvalue->field_field_user_message[0]['rendered']['#markup'] = $user_message_raw_value;
    }
  }

  if ($view->name == "manage_ugc") {
    $header_content_ugc = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $view->attachment_before = $header_content_ugc;
  }
}

/**
 * Implements itg_ugc_thank_you
 */
function itg_ugc_thank_you() {
  print '<div class="ugc-success" style="height:100%; background-color:#fff;"><h2>Thank you !</h2><p>UGC content has been submitted successfully for further review and approval.</p></div>';
}

/**
 * Implements itg_ugc_view_content().
 * @param string $unique_id
 */
function itg_ugc_view_content($unique_id) {
  global $base_url;
  $arg = arg();
  $path = $base_url.'/'.$arg[2];
  if (!empty($unique_id))
  {
    if (function_exists('mongodb'))
    {
      $con = mongodb();
      if ($con)
      {
        $pid = new MongoId($unique_id);
        $people = $con->ugc_details;
        $userData = $people->find(array("_id" => $pid))->limit($limit);
        $output = '';
        $output.= '<div id="ugc-content-view"><ul>';

        foreach ($userData as $final_view) {
          $user_message = itg_ugc_bad_words($final_view['description']);
          $output.= '<li>'.t('<strong>Content Type :</strong> <span>') . $final_view['content_type'] . '</span></li>';
          $output.= '<li>'.t('<strong>Name :</strong> <span>') . $final_view['name'] . '</span></li>';
          $output.= '<li>'.t('<strong>Email :</strong><span>') . $final_view['email'] . '</span></li>';
          if(!empty($user_message)) {
            $output.= '<li>'.t('<strong>Description :</strong> <span>') . $user_message .'</span></li>';
          }
          if(!empty($final_view['city'])) {
            $output.= '<li>'.t('<strong>City :</strong> <span>') . $final_view['city'] . '</span></li>';
          }
          if(!empty($final_view['image'])) {
            $file = file_load($final_view['image']);
            $output.= '<li>'.'<strong>Image :</strong><span> <img src="'.file_create_url($file->uri).'" alt="'.  file_create_url($file->uri).'"/></span></li>';
          }
          if(!empty($final_view['multiple_image'])) {
            $myimgArray = explode(',', $final_view['multiple_image']);
            $myimgcaption = explode(',', $final_view['image_caption']);
            $img_no = 1;
            foreach($myimgArray as $key => $value) {
              $file = file_load($value);
              $caption = 'caption : ' .$myimgcaption[$key];
              $output.= '<li>'.'<strong>Image'.$img_no.' :</strong><span> <img src="'.file_create_url($file->uri).'" alt="'.  file_create_url($file->uri).'"/></span><span>'.$caption.'</span></li>';
              $img_no++;
            }
          }
          if(!empty($final_view['video'])) {
            $file = file_load($final_view['video']);
            $output.= '<li>'.'<strong>Video :</strong><span> <a target="_blank" href="'.file_create_url($file->uri).'">'.file_create_url($file->uri).'</a></span></li>';
          }
          if(!empty($final_view['audio'])) {
            $file = file_load($final_view['audio']);
            $output.= '<li>'.'<strong>Audio :</strong><span> <a target="_blank" href="'.file_create_url($file->uri).'">'.file_create_url($file->uri).'</a></span></li>';
          }
          $output.= '<li>'.'<strong>Post date :</strong><span> ' . $final_view['publish_date'] . '</span></li>';
          
        }

        $output.= '</ul></div>';

        return $output;
      }
    }
  }
}

/**
 * Implements itg_ugc_content_details().
 *   Get details value by passing id.
 * @param int $nid
 */
function itg_ugc_content_details($nid, $un = NULL) {
  $data = '';
  if (function_exists('mongodb') && !empty(trim($nid))) {
    $con = mongodb();
    $people = $con->ugc_details;
    if(!empty($un)) {
      $cond = array('unid' => (int)$nid);  
    } else {
   try {
        $pid = new MongoId($nid);
        $cond = array('_id' => $pid);
      }
      catch (Exception $ex) {
        drupal_set_message($ex->getMessage(), 'error');
      }
    }
    $cursor = $people->find($cond);
    foreach ($cursor as $document) {
      $data['name'] = $document['name'];
      $data['email'] = $document['email'];
      $data['city'] = $document['city'];
      $data['title'] = $document['title'];
      $data['content_type'] = $document['content_type'];
      $data['image'] = $document['image'];
      $data['multiple_image'] = $document['multiple_image'];
      $data['image_caption'] = $document['image_caption'];
      $data['video'] = $document['video'];
      $data['audio'] = $document['audio'];
      $data['description'] = $document['description'];
      $data['section'] = $document['section'];
      $data['unid'] = $document['unid'];
      $data['_id'] = $document['_id'];
    }
    return $data;
  }
}
