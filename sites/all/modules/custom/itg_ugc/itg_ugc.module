<?php

/**
 * @file
 * The ITG UGC module.
 *
 * Contains functionality related to User Generated Content.
 *
 */

/**
 * Implements hook_menu().
 */
function itg_ugc_menu() {
  
  $items['ugc-title/%/reject'] = array(
    'page callback' => 'itg_ugc_node_status_update',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    );
 
  return $items;
}


/**
 * Implement hook_form_alter
 * @param Array $form
 * @param Array $form_state
 * @param string $form_id
 */
function itg_ugc_form_alter(&$form, &$form_state, $form_id) {
  global $user;
   $url_nid = $_REQUEST['id'];
   $node = node_load($url_nid);
   if ($form_id == 'blog_node_form') {
    $form['title']['#value'] = $node->title;
    $form['field_blog_long_description'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
  }
  
  if ($form_id == 'story_node_form') {
    $form['title']['#value'] = $node->title;
    $form['body'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
  }

  if ($form_id == 'recipe_node_form') {
    
     $form['title']['#value'] = $node->title;
     if(!empty($node->field_astro_video[LANGUAGE_NONE][0]['fid'])) {
     $form['field_recipe_content_type'][LANGUAGE_NONE]['#default_value'] = 'Video';
     $form['field_recipe_video'][LANGUAGE_NONE][0]['#default_value']['fid'] = $node->field_astro_video[LANGUAGE_NONE][0]['fid'];
     }
     $form['field_recipe_description'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
     $form['field_story_extra_large_image'][LANGUAGE_NONE][0]['value']['#default_value'] = $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
     $form['field_story_extra_large_image'][LANGUAGE_NONE][0]['#default_value']['fid']= $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
     
   }
   
   if ($form_id == 'photogallery_node_form') {
    //p($form);
    $form['title']['#value'] = $node->title;
    foreach ($form['field_gallery_image']['und'] as $delta => $field) {
        if (is_numeric($delta)) {

          $form['field_gallery_image'][LANGUAGE_NONE][$delta]['field_images'][LANGUAGE_NONE][0]['#default_value']['fid'] = $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
          $form['field_gallery_image'][LANGUAGE_NONE][$delta]['field_image_caption'][LANGUAGE_NONE][0]['value']['#value'] = $node->title;

        }
   }
   }
   
  $user_fields = user_load($user->uid);
  if ($form_id == 'ugc_node_form') {
    if ($user->uid != '1') {
    $form['field_story_source_id']['#access'] = FALSE;
    }
    $form['field_recipe_audio']['und'][0]['#title'] = t('Audio') . '<span class="form-required" title="This field is required."> *</span>';
    // get content type field value
    $type = $form['field_ugc_content_type'][LANGUAGE_NONE][0]['value'];

    // Check if user is logged-in, fill email and name field automatically
    if ($user->uid && $form['#node']->nid == '') {
      $form['field_user_email'][LANGUAGE_NONE][0]['value']['#value'] = $user->mail;
      $form['field_user_email'][LANGUAGE_NONE]['0']['value']['#attributes']['disabled'] = TRUE;
      $form['field_user_name'][LANGUAGE_NONE][0]['value']['#value'] = $user_fields->field_first_name['und']['0']['value'];
      $form['field_user_name'][LANGUAGE_NONE]['0']['value']['#attributes']['disabled'] = TRUE;
    }

    $form['actions']['submit']['#value'] = 'Submit';
    $form['#after_build'][] = 'itg_ugc_after_build';
    $form['actions']['submit']['#submit'][] = 'itg_ugc_form_custom_callback';
    $destination = 'ugc';
    if (!empty($form['nid']['#value'])) {
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
        '#weight' => 21,
        '#value' => t('Cancel'),
      );
    }
  }

  // Hide/show description field
  $form['field_user_message']['#states'] = array(
    'invisible' => array(
      ':input[name="field_ugc_content_type[und]"]' => array('value' => 'photogallery'),
    ),
    'required' => array(
      ':input[name="field_ugc_content_type[und]"]' => array(
        array('value' => 'story'),
        array('value' => 'recipe'),
         array('value' => 'audio'),
         array('value' => 'blog')
       ),
    ),
  );


  // Hide/show photo field
  $form['field_ugc_upload_photo']['#states'] = array(
    'visible' => array(
      array(
        array(':input[name="field_ugc_content_type[und]"]' => array('value' => 'photogallery')),
        'or',
        array(':input[name="field_ugc_content_type[und]"]' => array('value' => 'recipe')),
      ),
    ),
    'required' => array(
      ':input[name="field_ugc_content_type[und]"]' => array('value' => 'photogallery'),
    )
  );


  // Hide/show video field
  $form['field_astro_video']['#states'] = array(
    'visible' => array(
      array(
        array(':input[name="field_ugc_content_type[und]"]' => array('value' => 'video')),
        'or',
        array(':input[name="field_ugc_content_type[und]"]' => array('value' => 'recipe')),
      ),
    ),
    'required' => array(
      ':input[name="field_ugc_content_type[und]"]' => array('value' => 'video'),
    )
  );

  // Hide/show Audio field
  $form['field_recipe_audio']['#states'] = array(
    'visible' => array(
      ':input[name="field_ugc_content_type[und]"]' => array('value' => 'audio'),
    )
  );
}

/**
 * Custom submit callback for redirecting UGC form.
 * @param type $form
 * @param type $form_state
 */
function itg_ugc_form_custom_callback($form, &$form_state) {

  // get value of content type field
  $type = $form_state['node']->field_ugc_content_type[LANGUAGE_NONE][0]['value'];

  // unset default message
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'ugc') {
    $op = 'has been submitted for further review and approval';
    drupal_set_message(t('<b>' . $type . '</b> ' . $op));
    $_REQUEST['destination'] = 'node/add/ugc';
    $_GET['destination'] = $_REQUEST['destination'];
  }
}

/**
 * Implement hook_after_build
 * @param Array $form
 * @param Array $form_state
 */
function itg_ugc_after_build($form, &$form_state) {
  global $user, $base_url;
  // pr($form['field_user_message']['und']);
  $form['title']['#description'] = '';

  unset($form['actions']['preview']);

  if ($user->uid != '1') {
    $form['path']['#access'] = FALSE;
  }
  // update automatic alias name
  $form['path']['pathauto']['#title'] = 'Generate automatic Sef URL';

  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_ugc' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_ugc') . '/js/itg_ugc.js');
  return $form;
}

/**
 * Implements hook_node_validate().
 * @param type $form
 * @param type $form
 * @param type $form   
 */
function itg_ugc_node_validate($node, $form, &$form_state) {

  if ($node->type == 'ugc') {
    // get value of content type field
    $type = $node->field_ugc_content_type[LANGUAGE_NONE][0]['value'];
    // get value of body field
    $description = $node->field_user_message[LANGUAGE_NONE][0]['value'];
    // get fid of upload image
    $upload_image = $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
    // get fid of upload video
    $upload_video = $node->field_astro_video[LANGUAGE_NONE][0]['fid'];
    // get fid of upload audio
    $upload_audio = $node->field_recipe_audio[LANGUAGE_NONE][0]['fid'];

    // validate if decription field is blank
    if ($type == 'story' || $type == 'recipe' || $type == 'audio' || $type == 'blog') {

      if (empty($description)) {
        form_set_error('field_user_message', t("Description Field is required."));
      }
    }

    // validate if image field is blank
    if (($type == 'photogallery')) {
      if (empty($upload_image)) {
        form_set_error('field_ugc_upload_photo', t("Image Field is required."));
      }
    }

    // validate if video field is blank
    if (($type == 'video')) {
      if (empty($upload_video)) {
        form_set_error('field_astro_video', t("Video Field is required."));
      }
    }

    // validate if audio field is blank
    if ($type == 'audio') {
      if (empty($upload_audio)) {
        form_set_error('field_recipe_audio', t("Audio Field is required."));
      }
    }
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * @param Array $form
 * @param Array $form_state
 */
function itg_ugc_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  if ($form["#id"] == 'views-exposed-form-manage-ugc-page' || $form["#id"] == 'views-exposed-form-manage-ugc-page-1') {
    $form['title']['#autocomplete_path'] = 'content-title-list/ugc/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
}

/**
 * create node based on ugc type.
 * @param type $ugc_node 
 */
//function itg_ugc_create_content($ugc_node) {
//  global $user;
//
//  // create schedule date for story node
//  $publish_date_raw = date('Y-m-d', time());
//  $publish_date_timestamp = strtotime($publish_date_raw);
//  $publish_date = date('Y-m-d', $publish_date_timestamp);
//
//  // create expiry date based on schedule date 
//  $exp_date = strtotime('+90 years', strtotime($publish_date));
//  $exp_date = date('Y-m-d', $exp_date);
//
//  // get fid of uplaod video
//  $upload_video = $ugc_node->field_astro_video[LANGUAGE_NONE][0]['fid'];
//  // get fid of uplaod image
//  $upload_image = $ugc_node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
//  // get body content of ugc
//  $description = $ugc_node->field_user_message[LANGUAGE_NONE][0]['value'];
//  // add style if find any bad word in body content
//  $final_description = itg_ugc_bad_words($description);
//
//  $node = new stdClass();
//  $node->title = $ugc_node->title;
//  $node->type = $ugc_node->field_ugc_content_type[LANGUAGE_NONE][0]['value'];
//  node_object_prepare($node);
//  $node->language = LANGUAGE_NONE;
//  $node->uid = $user->uid;
//  $node->promote = 0;
//  $node->comment = 0;	
//  //$node->field_story_source_id_relation[LANGUAGE_NONE][0]['target_id'] = $ugc_node->nid;
//  $node->field_story_source_id[LANGUAGE_NONE][0]['value'] = $ugc_node->nid;
//  $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'UGC';
//  if ($ugc_node->field_ugc_content_type[LANGUAGE_NONE][0]['value'] == 'story') {
//    $node->field_story_long_head_line[LANGUAGE_NONE][0]['value'] = trim($ugc_node->title);
//    $node->field_story_magazine_kicker_text[LANGUAGE_NONE][0]['value'] = $ugc_node->title;
//    $node->field_story_short_headline[LANGUAGE_NONE][0]['value'] = trim($ugc_node->title);
//    $node->body[$node->language][0]['value'] = $final_description;
//    $node->body[$node->language][0]['format'] = 'full_html';
//    $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'] = $publish_date ? $publish_date : date('Y-m-d', time());
//    $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] = $exp_date;
//    // set moderation state to needs reveiw
//  $node->workbench_moderation_state_new = workbench_moderation_state_Review();
//  }
//  else if ($ugc_node->field_ugc_content_type[LANGUAGE_NONE][0]['value'] == 'blog') {
//
//    $node->field_blog_long_description[$node->language][0]['value'] = $final_description;
//    $node->field_blog_long_description[$node->language][0]['format'] = 'full_html';
//    // set moderation state to needs reveiw
//  $node->workbench_moderation_state_new = workbench_moderation_state_Review();
//  }
//  else if ($ugc_node->field_ugc_content_type[LANGUAGE_NONE][0]['value'] == 'recipe') {
//    if (!empty($upload_video)) {
//      $node->field_recipe_content_type[LANGUAGE_NONE][0]['value'] = 'Video';
//      $node->field_recipe_video = $ugc_node->field_astro_video;
//    }
//    $node->field_recipe_description[$node->language][0]['value'] = $final_description;
//    $node->field_recipe_description[$node->language][0]['format'] = 'full_html';
//    if(!empty($upload_image)) {
//    $node->field_story_extra_large_image = $ugc_node->field_ugc_upload_photo;
//    }
//    $node->status = 0;
//  }
//  else if ($ugc_node->field_ugc_content_type[LANGUAGE_NONE][0]['value'] == 'photogallery') {
//
//    $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_gallery_image'));
//    $field_collection_item->field_images[LANGUAGE_NONE][0] = array('fid' => $ugc_node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid']);
//    $field_collection_item->field_image_caption[LANGUAGE_NONE][0] = array('value' => $ugc_node->title);
//
//    $field_collection_item->setHostEntity('node', $node);
//    $field_collection_item->save(true);
//    // set moderation state to needs reveiw
//  $node->workbench_moderation_state_new = workbench_moderation_state_Review();
//  }
//  
// node_save($node);
// $source_nid =  $ugc_node->nid;
// $get_id = itg_ugc_source_nid($source_nid);
// $ug_node = node_load($ugc_node->nid);
// $ug_node->field_story_source_id[LANGUAGE_NONE][0]['value'] = $get_id;
// field_attach_update('node', $ug_node);
// entity_get_controller('node')->resetCache(array($ug_node->nid));
//}

/**
 * Implements hook_node_insert
 * @param type $node
 */
//function itg_ugc_node_insert($node) {
//  if ($node->type == 'ugc') {
//    $type = $node->field_ugc_content_type[LANGUAGE_NONE][0]['value'];
//    if ($type == 'story' || $type == 'blog' || $type == 'recipe' || $type == 'photogallery') {
//      itg_ugc_create_content($node);
//    }
//  }
//}

/**
 * Implement itg_ugc_source_nid
 */
//function itg_ugc_source_nid($source) {
//  $result = db_select('field_data_field_story_source_id', 'fdr')
//          ->fields('fdr', array('entity_id'))
//          ->condition('fdr.field_story_source_id_value', $source, '=')
//          ->execute()->fetchField();
//  return $result;
//}

/**
 * Implement itg_ugc_node_view_status
 */
function itg_ugc_node_view_status($nid) {
  $result = db_select('node', 'n')
          ->fields('n', array('status'))
          ->condition('n.nid', $nid, '=')
          ->condition('type', 'ugc', '=')
          ->execute()->fetchField();
  return $result;
}

/*
 * Implement hook_node_presave
 * @param array $node
 */
function itg_ugc_node_presave($node) {
  if ($node->type == 'ugc') {
    $ugc_description = itg_ugc_bad_words($node->field_user_message[LANGUAGE_NONE][0]['value']);
    $node->field_user_message[LANGUAGE_NONE][0]['value'] = $ugc_description;
    $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'UGC';
  }
}

/**
 * Implements itg_ugc_bad_words
 */
function itg_ugc_bad_words($description) {
   $vocab_id = taxonomy_vocabulary_machine_name_load('bad_words');
  $tax = taxonomy_get_tree($vocab_id->vid, $parent = 0, $max_depth = 1, $load_entities = FALSE);

  foreach ($tax as $key => $val) {
    $op[$val->tid] = $val->name;
  }
  // implode bad words array
  $keyword = implode("#", $op);
  $keyword = implode('|', explode('#', preg_quote($keyword)));
  return $final_description = preg_replace("/($keyword)/i", "<b style='font-size:14px; color:#FF0000; font-weight:bold;'>$0</b>", $description);
}




/**
 * Implement itg_ugc_node_status_update
 */
function itg_ugc_node_status_update() {
  $nid =  arg(1);
 db_update('node')
          ->fields(array(
            'status' => 0,
            'changed'=> REQUEST_TIME
          ))
          ->condition('nid', $nid)
          ->execute();
   
   drupal_set_message(t('content has been rejected successfully.'));
      drupal_goto('manage-ugc');
}

/**
 * Implement hook_node_view
 * @param Array $node
 * @param Array $view_mode
 * @param Array $langcode
 */
function itg_ugc_node_view($node, $view_mode, $langcode) {

  if ($node->type == "ugc") {
    global $user, $base_url;
    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;
     $arg_id = arg(1); 
     $node->node_status = itg_ugc_node_view_status($arg_id);
    drupal_add_js(array('itg_ugc' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_ugc') . '/js/itg_ugc.js');
  }
}
