<?php

/**
 * @file
 * The ITG UGC module.
 *
 * Contains functionality related to User Generated Content.
 *
 */

/**
 * Implement hook_form_alter
 * @param Array $form
 * @param Array $form_state
 * @param string $form_id
 */
function itg_ugc_form_alter(&$form, &$form_state, $form_id){
  global $user;
   
  $user_fields = user_load($user->uid);
  if ($form_id == 'ugc_node_form') {
 
   $form['field_recipe_audio']['und'][0]['#title'] = t('Audio') . '<span class="form-required" title="This field is required."> *</span>';
   $type = $form['field_ugc_content_type'][LANGUAGE_NONE][0]['value'];
    // code for later label
   if($type == 'story') {
     $form['title']['#title'] = t('Your new title');
   }
    
    // check if user is logged in auto fill email
    if ($user->uid && $form['#node']->nid == '') {
     $form['field_user_email'][LANGUAGE_NONE][0]['value']['#value'] = $user->mail;
     $form['field_user_name'][LANGUAGE_NONE][0]['value']['#value'] = $user_fields->field_first_name['und']['0']['value'];
    }
    
    $form['actions']['submit']['#value'] = 'Submit';
    $form['#after_build'][] = 'itg_ugc_after_build';
    $form['actions']['submit']['#submit'][] = 'itg_ugc_form_custom_callback';
    $destination = 'ugc';
    if (!empty($form['nid']['#value'])) {
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
        '#weight' => 21,
        '#value' => t('Cancel'),
      );
    }
  } 
  
  // code for description field hide and show
    $form['field_user_message']['#states'] = array(
      'invisible' => array(
        ':input[name="field_ugc_content_type[und]"]' => array('value' => 'photogallery'),
      ),
      
    );
    
    
    // code for photo field hide and show
   $form['field_ugc_upload_photo']['#states'] = array(
      'visible' => array(
        array(
          array(':input[name="field_ugc_content_type[und]"]' => array('value' => 'photogallery')),
          'or',
          array(':input[name="field_ugc_content_type[und]"]' => array('value' => 'recipe')),
        ),
      ),
    );
    
    
    // code for video field hide and show
    $form['field_astro_video']['#states'] = array(
      'visible' => array(
        array(
          array(':input[name="field_ugc_content_type[und]"]' => array('value' => 'video')),
          'or',
          array(':input[name="field_ugc_content_type[und]"]' => array('value' => 'recipe')),
        ),
      ),
    );
    
    // code for audio field hide and show
    $form['field_recipe_audio']['#states'] = array(
      'visible' => array(
        ':input[name="field_ugc_content_type[und]"]' => array('value' => 'audio'),
      )
    );
      
}

  /**
 * Custom submit callback for redirecting UGC form.
 * @param type $form
 * @param type $form_state
 */
function itg_ugc_form_custom_callback($form, &$form_state) {
 
  // get type of content
  $type = $form_state['node']->field_ugc_content_type[LANGUAGE_NONE][0]['value'];
    if (isset($_SESSION['messages']['status'])) {
        unset($_SESSION['messages']['status']);
    }
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'ugc') {
        $op = 'has been submitted for further review and approval';
        drupal_set_message(t('<b>' . $type . '</b> ' . $op));
        $_REQUEST['destination'] = 'node/add/ugc';
        $_GET['destination'] = $_REQUEST['destination'];
    } 
}


/**
 * Implement hook_after_build
 * @param Array $form
 * @param Array $form_state
 */
function itg_ugc_after_build($form, &$form_state) {
  global $user, $base_url;
   // pr($form['field_user_message']['und']);
   $form['title']['#description'] = '';
   
   unset($form['actions']['preview']);
  
  if($user->uid != '1') {
     $form['path']['#access'] = FALSE;
  }
 // update automatic alias name
  $form['path']['pathauto']['#title'] = 'Generate automatic Sef URL';
  
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_ugc' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module','itg_ugc').'/js/itg_ugc.js');
  return $form;
}

/**
 * Implements hook_node_validate().
 * @param type $form
 * @param type $form
 * @param type $form   
 */
function itg_ugc_node_validate($node, $form, &$form_state) {
  //pr($node);
  if ($node->type == 'ugc') {

    $type = $node->field_ugc_content_type[LANGUAGE_NONE][0]['value'];
    $description = $node->field_user_message[LANGUAGE_NONE][0]['value'];
    $upload_image = $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
    $upload_video = $node->	field_astro_video[LANGUAGE_NONE][0]['fid'];
    $upload_audio = $node->	field_recipe_audio[LANGUAGE_NONE][0]['fid'];
    // condition for blank description field
    if (($type == 'story') ||
        ($type == 'recipe')||
        ($type == 'audio') ||
        ($type == 'blog')) {

      if (empty($description)) {
        form_set_error('field_user_message', t("Description Field is required!"));
      }
    }
    
    // condition for blank image uplaod
    if (($type == 'photogallery')) {
      if (empty($upload_image)) {
        form_set_error('field_ugc_upload_photo', t("Image Field is required!"));
      }
    }
    
    // condition for blank video uplaod
    if (($type == 'video')) {
      if (empty($upload_video)) {
        form_set_error('field_astro_video', t("Video Field is required!"));
      }
    }
    
    // condition for blank Audio uplaod
    if ($type == 'audio') {
      if (empty($upload_audio)) {
        form_set_error('field_recipe_audio', t("Audio Field is required!"));
      }
    }
  }
}


/**
 * Abreaking news create story .
 * @param type $ugc_node 
 */
function itg_ugc_create_content($ugc_node) {
  global $user;

  // get bad words array
  $vocab_id = taxonomy_vocabulary_machine_name_load('bad_words');
  $tax = taxonomy_get_tree($vocab_id->vid, $parent = 0, $max_depth = 1, $load_entities = FALSE);

  foreach ($tax as $key => $val) {
    $op[$val->tid] = $val->name;
  }
  //pr($op);
  $keyword = implode("#", $op);
  $keyword = implode('|', explode('#', preg_quote($keyword)));



  $publish_date_raw = date('Y-m-d', time());
  $publish_date_timestamp = strtotime($publish_date_raw);
  $publish_date = date('Y-m-d', $publish_date_timestamp);
  // create expiry date based on publish date 
  $exp_date = strtotime('+90 years', strtotime($publish_date));
  $exp_date = date('Y-m-d', $exp_date);
  $upload_video = $ugc_node->field_astro_video[LANGUAGE_NONE][0]['fid'];
  $description = $ugc_node->field_user_message[LANGUAGE_NONE][0]['value'];
  $final_description = preg_replace("/($keyword)/i", "<b style='font-size:14px; color:#FF0000; font-weight:bold;'>$0</b>", $description);

  $node = new stdClass();
  $node->title = $ugc_node->title;
  $node->type = $ugc_node->field_ugc_content_type[LANGUAGE_NONE][0]['value'];
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->promote = 0;
  $node->comment = 0;
  $node->field_story_source_id[LANGUAGE_NONE][0]['value'] = $ugc_node->nid;
  $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'UGC';
  if ($ugc_node->field_ugc_content_type[LANGUAGE_NONE][0]['value'] == 'story') {
    $node->field_story_long_head_line[LANGUAGE_NONE][0]['value'] = trim($ugc_node->title);
    $node->field_story_magazine_kicker_text[LANGUAGE_NONE][0]['value'] = $ugc_node->title;
    $node->field_story_short_headline[LANGUAGE_NONE][0]['value'] = trim($ugc_node->title);
    // code for find bad words

    $node->body[$node->language][0]['value'] = $final_description;
    $node->body[$node->language][0]['format'] = 'full_html';
    $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'] = $publish_date ? $publish_date : date('Y-m-d', time());
    $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] = $exp_date;
  }
  else if ($ugc_node->field_ugc_content_type[LANGUAGE_NONE][0]['value'] == 'blog') {

    $node->field_blog_long_description[$node->language][0]['value'] = $final_description;
    $node->field_blog_long_description[$node->language][0]['format'] = 'full_html';
  }
  else if ($ugc_node->field_ugc_content_type[LANGUAGE_NONE][0]['value'] == 'recipe') {
    if (!empty($upload_video)) {
      $node->field_recipe_content_type[LANGUAGE_NONE][0]['value'] = 'Video';
    }
    $node->field_recipe_description[$node->language][0]['value'] = $final_description;
    $node->field_recipe_description[$node->language][0]['format'] = 'full_html';
    $node->field_story_extra_large_image = $ugc_node->field_ugc_upload_photo;
    $node->field_recipe_video = $ugc_node->field_astro_video;
  }
  else if ($ugc_node->field_ugc_content_type[LANGUAGE_NONE][0]['value'] == 'photogallery') {

    $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_gallery_image'));
    $field_collection_item->field_images[LANGUAGE_NONE][0] = array('fid' => $ugc_node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid']); // term in a select list
    $field_collection_item->field_image_caption[LANGUAGE_NONE][0] = array('value' => $ugc_node->title); // UNIX timestamp of node

    $field_collection_item->setHostEntity('node', $node);
    $field_collection_item->save(true);
  }

  $node->workbench_moderation_state_new = workbench_moderation_state_Review();
  node_save($node);
}

/**
 * Implements hook_node_insert
 * @param type $node
 */
function itg_ugc_node_insert($node) { 
  if ($node->type = 'ugc') {
   $type = $node->field_ugc_content_type[LANGUAGE_NONE][0]['value'];
   if($type == 'story' || $type == 'blog' || $type == 'recipe' || $type == 'photogallery') {
     itg_ugc_create_content($node);
   }
  }    
}

/*
 * Implement hook_node_presave
 * @param array $node
 */
//function itg_ugc_node_presave($node)
//{
//   if ($node->type == 'ugc') {
//   p($node);
//    }
//}