<?php

/**
 * @file
 * The ITG UGC module.
 *
 * Contains functionality related to User Generated Content.
 *
 */

/**
 * Implements hook_menu().
 */
function itg_ugc_menu() {  
  $items['ugc-title/%/reject'] = array(
    'page callback' => 'itg_ugc_node_status_update',
    'page arguments' => array(1),
    'access arguments' => array('access reject ugc content link'),
    'type' => MENU_CALLBACK,
    );
 
  return $items;
}

/**
 * Implements hook_permission.
 */
function itg_ugc_permission() {
  return array(
    'access reject ugc content link' => array(
      'title' => t('Ugc reject permission'),
      'description' => t('Ugc reject permission.'),
    ),    
  );
}


/**
 * Implement hook_form_alter
 * @param Array $form
 * @param Array $form_state
 * @param string $form_id
 */
function itg_ugc_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  
  // get id of ugc content
  $url_nid = arg(3);  
  
  // prefill input value in blog form
  if ($form_id == 'blog_node_form' && !empty($url_nid)) {
    // get node values 
    $node = node_load($url_nid);
    
    $form['title']['#default_value'] = $node->title;
    $form['field_blog_long_description'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
    $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $url_nid;
    $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#value'] = 'UGC';
  }
  
  // prefill input value in story form
  if ($form_id == 'story_node_form' && !empty($url_nid)) {
    // get node values 
    $node = node_load($url_nid);
    
    $form['title']['#default_value'] = $node->title;
    $form['field_story_long_head_line'][LANGUAGE_NONE][0]['value']['#value'] = $node->title;
    $form['field_story_short_headline'][LANGUAGE_NONE][0]['value']['#value'] = $node->title;
    $form['body'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
    $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $url_nid;
    $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#value'] = 'UGC';
  }

  // prefill input value in recipe form
  if ($form_id == 'recipe_node_form' && !empty($url_nid)) {
    // get node values 
    $node = node_load($url_nid);
    
    $form['title']['#default_value'] = $node->title;
    
    if (!empty($node->field_astro_video[LANGUAGE_NONE][0]['fid'])) {
      $form['field_recipe_content_type'][LANGUAGE_NONE]['#default_value'] = 'Video';
      $form['field_recipe_video'][LANGUAGE_NONE][0]['#default_value']['fid'] = $node->field_astro_video[LANGUAGE_NONE][0]['fid'];
    }
    
    $form['field_recipe_description'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
    $form['field_story_extra_large_image'][LANGUAGE_NONE][0]['#default_value']['fid'] = $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
    $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $url_nid;
    $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#value'] = 'UGC';
  }

  // prefill input value in photogallery form
  if ($form_id == 'photogallery_node_form' && !empty($url_nid)) {
    // get node values 
    $node = node_load($url_nid);
    
    $form['title']['#default_value'] = $node->title;
    $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $url_nid;
    $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#value'] = 'UGC';
    $form['field_gallery_kicer'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
    
    foreach ($form['field_gallery_image']['und'] as $delta => $field) {
      if (is_numeric($delta)) {
        $form['field_gallery_image'][LANGUAGE_NONE][$delta]['field_images'][LANGUAGE_NONE][0]['#default_value']['fid'] = $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
        $form['field_gallery_image'][LANGUAGE_NONE][$delta]['field_image_caption'][LANGUAGE_NONE][0]['value']['#value'] = $node->title;
      }
    }
  }  

  $user_fields = user_load($user->uid);
  
  if ($form_id == 'ugc_node_form') {
    if ($user->uid != '1') {
      // hide source relation and type field from other users 
      if ($form_id == 'ugc_node_form') {
        $form['field_story_source_type']['#access'] = FALSE;
      }
    }

    $form['field_recipe_audio']['und'][0]['#title'] = t('Audio') . '<span class="form-required" title="This field is required."> *</span>';
    // get content type field value
    $type = $form['field_ugc_ctype'][LANGUAGE_NONE][0]['value'];

    // Check if user is logged-in, fill email and name field automatically
    if ($user->uid && $form['#node']->nid == '') {
      $form['field_user_email'][LANGUAGE_NONE][0]['value']['#value'] = $user->mail;
      $form['field_user_email'][LANGUAGE_NONE]['0']['value']['#attributes']['disabled'] = TRUE;
      $form['field_user_name'][LANGUAGE_NONE][0]['value']['#value'] = $user_fields->field_first_name['und']['0']['value'];
      $form['field_user_name'][LANGUAGE_NONE]['0']['value']['#attributes']['disabled'] = TRUE;
    }

    $form['actions']['submit']['#value'] = 'Submit';
    $form['#after_build'][] = 'itg_ugc_after_build';
    $form['actions']['submit']['#submit'][] = 'itg_ugc_form_custom_callback';
  }

  // Hide/show description field
  $form['field_user_message']['#states'] = array(
    'required' => array(
      ':input[name="field_ugc_ctype[und]"]' => array(
        array('value' => 'story'),
        array('value' => 'recipe'),
        array('value' => 'audio'),
        array('value' => 'blog')
      ),
    ),
  );

  // Hide/show photo field
  $form['field_ugc_upload_photo']['#states'] = array(
    'visible' => array(
      array(
        array(':input[name="field_ugc_ctype[und]"]' => array('value' => 'photogallery')),
        'or',
        array(':input[name="field_ugc_ctype[und]"]' => array('value' => 'recipe')),
      ),
    ),
    'required' => array(
      ':input[name="field_ugc_ctype[und]"]' => array('value' => 'photogallery'),
    )
  );

  // Hide/show video field
  $form['field_astro_video']['#states'] = array(
    'visible' => array(
      array(
        array(':input[name="field_ugc_ctype[und]"]' => array('value' => 'video')),
        'or',
        array(':input[name="field_ugc_ctype[und]"]' => array('value' => 'recipe')),
      ),
    ),
    'required' => array(
      ':input[name="field_ugc_ctype[und]"]' => array('value' => 'video'),
    )
  );

  // Hide/show Audio field
  $form['field_recipe_audio']['#states'] = array(
    'visible' => array(
      ':input[name="field_ugc_ctype[und]"]' => array('value' => 'audio'),
    )
  );
}

/**
 * Custom submit callback for redirecting UGC form.
 * @param type $form
 * @param type $form_state
 */
function itg_ugc_form_custom_callback($form, &$form_state) {

  $node_type = ucfirst($form_state['node']->type);
  $node_type = str_replace("_", " ", $node_type);
  $title = ucfirst($form_state['node']->title);

  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  
  $_REQUEST['destination'] = 'node/add/ugc';
  $msg = itg_custom_message($node_type, $workbench_current_state = NULL, arg(1), $title, $_REQUEST['destination']);
}

/**
 * Implement hook_after_build
 * @param Array $form
 * @param Array $form_state
 */
function itg_ugc_after_build($form, &$form_state) {
  global $user, $base_url;
  
  $form['title']['#description'] = '';  
  // update automatic alias name
  $form['path']['pathauto']['#title'] = 'Generate automatic Sef URL';

  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_ugc' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_ugc') . '/js/itg_ugc.js');
  
  return $form;
}

/**
 * Implements hook_node_validate().
 * @param type $node
 * @param type $form
 * @param type $form_state   
 */
function itg_ugc_node_validate($node, $form, &$form_state) {

  if ($node->type == 'ugc') {
    // get value of content type field
    $type = $node->field_ugc_ctype[LANGUAGE_NONE][0]['value'];
    // get value of body field
    $description = $node->field_user_message[LANGUAGE_NONE][0]['value'];
    // get fid of upload image
    $upload_image = $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
    // get fid of upload video
    $upload_video = $node->field_astro_video[LANGUAGE_NONE][0]['fid'];
    // get fid of upload audio
    $upload_audio = $node->field_recipe_audio[LANGUAGE_NONE][0]['fid'];
    // get email of user
    $user_email = $node->field_user_email[LANGUAGE_NONE][0]['value'];
    // get name of user
    $user_name = $node->field_user_name[LANGUAGE_NONE][0]['value'];
    // get email of user
    $title = $node->title;

    // validate if decription field is blank
    if ($type == 'story' || $type == 'recipe' || $type == 'audio' || $type == 'blog') {
      if (empty($description)) {
        form_set_error('field_user_message', t("Description Field is required."));
      }
    }
    
    // validate if name field accept number
    if (!ctype_alpha($user_name)) {
      form_set_error('field_user_name', t("Only letters are allowed for name field."));
    }
    
    // validate if title field accept number
    if (!ctype_alpha($title)) {
      form_set_error('title', t("Only letters are allowed for title field."));
    }

    // validate Email
    
    if (!valid_email_address($user_email)) {
      form_set_error('field_user_email', t('The email address appears to be invalid.'));
    }

    // validate if image field is blank
    if (($type == 'photogallery')) {
      if (empty($upload_image)) {
        form_set_error('field_ugc_upload_photo', t("Image Field is required."));
      }
    }

    // validate if video field is blank
    if (($type == 'video')) {
      if (empty($upload_video)) {
        form_set_error('field_astro_video', t("Video Field is required."));
      }
    }

    // validate if audio field is blank
    if ($type == 'audio') {
      if (empty($upload_audio)) {
        form_set_error('field_recipe_audio', t("Audio Field is required."));
      }
    }
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * @param Array $form
 * @param Array $form_state
 * @param Array $form_id
 */
function itg_ugc_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  if ($form["#id"] == 'views-exposed-form-manage-ugc-page' || $form["#id"] == 'views-exposed-form-manage-ugc-page-1') {
    $form['title']['#autocomplete_path'] = 'content-title-list/ugc/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
  
  // code to open alert box when click on reject link in ugc listing
  if ($form['#id'] == 'views-exposed-form-manage-ugc-page') {
    drupal_add_js('jQuery(document).ready(function() {                  
                    jQuery(".ugc-reject").click(function() {                 
                    var reject_status = "reject";
                    if (reject_status == "reject") {                   
                       var msg = confirm("Are you sure you want to reject this content?");
                       if (msg == true) {
                           return true;
                       }
                       return false; 
                    }
                    return true;                     
                 });                      
          });', array('type' => 'inline', 'scope' => 'footer'));
  }
}


/*
 * Implement hook_node_presave
 * @param array $node
 */
function itg_ugc_node_presave($node) {  
  if ($node->type == 'ugc') {
    if (function_exists('itg_ugc_bad_words')) {
      $ugc_description = itg_ugc_bad_words($node->field_user_message[LANGUAGE_NONE][0]['value']);
      $node->field_user_message[LANGUAGE_NONE][0]['value'] = $ugc_description;
      $node->field_user_message[LANGUAGE_NONE][0]['format'] = 'full_html';
    }   
  }
}

/**
 * Implement itg_ugc_node_status_update
 * @param int $nid
 * @param string $title
 */
function itg_ugc_node_status_update($nid, $title) {
  $node = node_load($nid);
  // set status property to 0
  $node->status = 0;
  if (!empty($title)) {
    $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 1;
  }
  // re-save the node
  node_save($node);

  // code for redirect after node save or reject
  if (!empty($title)) {
    $_GET['destination'] = 'manage-ugc';
  }
  else {
    drupal_set_message(t($node->title . ' has been rejected successfully.'));
    drupal_goto('manage-ugc');
  }
}

/**
 * Implement hook_node_view
 * @param Array $node
 * @param Array $view_mode
 * @param Array $langcode
 */
function itg_ugc_node_view($node, $view_mode, $langcode) {
  if ($node->type == "ugc") {
    global $user, $base_url;
    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;
    drupal_add_js(array('itg_ugc' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_ugc') . '/js/itg_ugc.js');
  }
}

/**
 * Implements hook_node_insert
 * @param type $node
 */
function itg_ugc_node_insert($node) {  
    if ($node->type == 'story' || $node->type == 'blog' || $node->type == 'recipe' || $node->type == 'photogallery') {
      $title = $node->title;
      $source_id = $node->field_story_source_id[LANGUAGE_NONE][0]['value'];
      $source_type = $node->field_story_source_type[LANGUAGE_NONE][0]['value'];

      if ($source_type == 'UGC' && !empty($source_id)) {
        itg_ugc_node_status_update($source_id,$title);
      }
    }
}
