<?php

/**
 * @file
 * The ITG UGC module.
 *
 * Contains functionality related to User Generated Content.
 *
 */

/**
 * Implements hook_menu().
 */
function itg_ugc_menu() {
  $items['ugc-title/%/reject'] = array(
    'page callback' => 'itg_ugc_node_status_update',
    'page arguments' => array(1),
    'access arguments' => array('access reject ugc content link'),
    'type' => MENU_CALLBACK,
  );
  
  $items['ugc-thank-you'] = array(
    'page callback' => 'itg_ugc_thank_you',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission.
 */
function itg_ugc_permission() {
  return array(
    'access reject ugc content link' => array(
      'title' => t('Ugc reject permission'),
      'description' => t('Ugc reject permission.'),
    ),
  );
}

/**
 * Implements hook_rules_action_info().
 *
 * @return array
 */
function itg_ugc_rules_action_info() {
  return array(
    'itg_ugc_send_follow_story_content_mail' => array(
      'label' => t('Send Mail to users for story content'),
      'parameter' => array(
        'node' => array('type' => 'node', 'label' => t('Current Node')),
      ),
      'group' => t('ITG'),            
    ),
  );
}

/**
 * Implements callback function for 'itg_ugc_send_follow_story_content_mail'
 * @param type $node
 */
function itg_ugc_send_follow_story_content_mail($node) {
  if ($node->type == 'story')
  {
    $get_user_id = itg_get_follow_story_user($node->nid, 1);
    if(!empty($get_user_id)) {
      foreach ($get_user_id as $follow_user) {

        module_load_include('inc', 'itg_ugc', 'include/itg_follow_story_mail');

        $mail_content = itg_follow_story_get_mail_content($node);

        $params = array(
          'body' => $mail_content,
          'subject' => 'India Today | Story updated',
        );

        $to = itg_get_user_email_by_id($follow_user);
        if (!empty($to))
        {
          $mail = drupal_mail('itg_ugc_user', 'send_mail_to_follow_story_user', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
          if ($mail['result'])
          {
            return TRUE;
          }
          else
          {
            $error_msg = 'Failed to send the email!';
            watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
            return FALSE;
          }
        }
      }
    }
  }
}

/**
 * Implements itg_get_user_email_by_id
 * @param int $uid
 */
function itg_get_user_email_by_id($uid) {
  $query = db_select('users', 'u')
            ->fields('u', array('mail'))
            ->condition('u.uid', $uid, '=');
  return $query->execute()->fetchField();
}

/**
 * Implement hook_form_alter
 * {@inheritdoc}
 */
function itg_ugc_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  
// get id of ugc content
  $url_nid = arg(3);
  $ugc_heading = '';
  // condition for front user 
  if ($user->uid == 0 && !empty($_GET['type']) && $form_id == 'ugc_node_form') {
    $form['field_ugc_ctype']['#attributes']['class'][] = 'element-hidden';
    if (isset($_GET['type'])) {
      $form['ugc_head'] = array(
       '#weight' => -1,   
       '#markup' => '<div class="ugc-top-heading"><h2>Post Your Content</h2></div>');
      $form['field_ugc_ctype'][LANGUAGE_NONE]['#default_value'] = $_GET['type'];
    }

    $form['#attributes']['class'][] = 'ugc-custom-wrapper';
  }


  if (empty($form['nid']['#value'])) {
    // prefill input value in blog form
    if ($form_id == 'blog_node_form' && !empty($url_nid)) {
      // get node values
      $node = node_load($url_nid);

      $form['title']['#default_value'] = $node->title;
      $form['field_blog_long_description'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
      $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $url_nid;
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $node->field_section[LANGUAGE_NONE][0]['tid'];
    }

    // prefill input value in story form
    if ($form_id == 'story_node_form' && !empty($url_nid)) {
      // get node values
      $node = node_load($url_nid);
      $ugc_user_name = $node->field_user_name[LANGUAGE_NONE][0]['value'];
      $form['title']['#default_value'] = $node->title;
      $form['field_story_long_head_line'][LANGUAGE_NONE][0]['value']['#value'] = $node->title;
      $form['field_story_short_headline'][LANGUAGE_NONE][0]['value']['#value'] = $node->title;
      $form['body'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $url_nid;
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#prefix'] = '<div style="display: none">';
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#suffix'] = '</div>';
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_stroy_city'][LANGUAGE_NONE]['#default_value'] = $node->field_user_city[LANGUAGE_NONE][0]['value'];
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $node->field_section[LANGUAGE_NONE][0]['tid'];
      if (!empty($ugc_user_name)) {
        $form['field_story_reporter']['#prefix'] = '<div class="main-cont">';
        $form['field_story_reporter']['#suffix'] = '<span class="byline">' . $ugc_user_name . ' (UGC User)</span></div>';
      }
    }

    // prefill input value in videogallery form
    if ($form_id == 'videogallery_node_form' && !empty($url_nid)) {
      // get node values
      $node = node_load($url_nid);
      $ugc_user_name = $node->field_user_name[LANGUAGE_NONE][0]['value'];
      $form['title']['#default_value'] = $node->title;
      $form['field_story_long_head_line'][LANGUAGE_NONE][0]['value']['#value'] = $node->title;
      $form['field_story_short_headline'][LANGUAGE_NONE][0]['value']['#default_value'] = $node->title;
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $url_nid;
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#prefix'] = '<div style="display: none">';
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#suffix'] = '</div>';
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_stroy_city'][LANGUAGE_NONE]['#default_value'] = $node->field_user_city[LANGUAGE_NONE][0]['value'];
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $node->field_section[LANGUAGE_NONE][0]['tid'];
      if (!empty($ugc_user_name)) {
        $form['field_story_reporter']['#prefix'] = '<div class="main-cont">';
        $form['field_story_reporter']['#suffix'] = '<span class="byline">' . $ugc_user_name . ' (UGC User)</span></div>';
      }
      // assign value in first field collection item
      $form['field_upload_video']['und'][0]['#default_value']['fid'] = $node->field_astro_video[LANGUAGE_NONE][0]['fid'];
    }

    // prefill input value in podcast form
    if ($form_id == 'podcast_node_form' && !empty($url_nid)) {
      // get node values
      $node = node_load($url_nid);
      $ugc_user_name = $node->field_user_name[LANGUAGE_NONE][0]['value'];
      $form['title']['#default_value'] = $node->title;
      $form['field_story_short_headline'][LANGUAGE_NONE][0]['value']['#default_value'] = $node->title;
      $form['field_story_kicker_text'][LANGUAGE_NONE][0]['value']['#default_value'] = $node->title;
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $url_nid;
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#prefix'] = '<div style="display: none">';
      $form['field_story_ugc_source_id'][LANGUAGE_NONE][0]['value']['#suffix'] = '</div>';
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $node->field_section[LANGUAGE_NONE][0]['tid'];
      foreach ($form['field_podcast_audio_upload']['und'] as $delta => $field) {
        if (is_numeric($delta)) {
          // assign value in first field collection item
          $form['field_podcast_audio_upload'][LANGUAGE_NONE][$delta]['field_podcast_upload_audio_file'][LANGUAGE_NONE][0]['#default_value']['fid'] = $node->field_recipe_audio[LANGUAGE_NONE][0]['fid'];
        }
      }
    }

    // prefill input value in recipe form
    if ($form_id == 'recipe_node_form' && !empty($url_nid)) {
      // get node values
      $node = node_load($url_nid);
      $ugc_user_name = $node->field_user_name[LANGUAGE_NONE][0]['value'];
      $form['title']['#default_value'] = $node->title;

      if (!empty($node->field_astro_video[LANGUAGE_NONE][0]['fid'])) {
        $form['field_recipe_content_type'][LANGUAGE_NONE]['#default_value'] = 'Video';
        $form['field_recipe_video'][LANGUAGE_NONE][0]['#default_value']['fid'] = $node->field_astro_video[LANGUAGE_NONE][0]['fid'];
      }

      $form['field_recipe_description'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
      $form['field_story_extra_large_image'][LANGUAGE_NONE][0]['#default_value']['fid'] = $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
      $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $url_nid;
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $node->field_section[LANGUAGE_NONE][0]['tid'];
      if (!empty($ugc_user_name)) {
        $form['field_story_reporter']['#prefix'] = '<div class="main-cont">';
        $form['field_story_reporter']['#suffix'] = '<span class="byline">' . $ugc_user_name . ' (UGC User)</span></div>';
      }
    }

    // prefill input value in photogallery form
    if ($form_id == 'photogallery_node_form' && !empty($url_nid)) {
      // get node values
      $node = node_load($url_nid);

      $form['title']['#default_value'] = $node->title;
      $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $url_nid;
      $form['field_story_source_type'][LANGUAGE_NONE][0]['value']['#default_value'] = 'UGC';
      $form['field_gallery_kicer'][LANGUAGE_NONE][0]['#default_value'] = $node->field_user_message[LANGUAGE_NONE][0]['value'];
      $form['field_story_category'][LANGUAGE_NONE]['#default_value'] = $node->field_section[LANGUAGE_NONE][0]['tid'];

      if (empty($node->field_ugc_personalization_photo['und'][0]['value'])) {
        foreach ($form['field_gallery_image']['und'] as $delta => $field) {
          if (is_numeric($delta)) {
            // assign value in first field collection item
            $form['field_gallery_image'][LANGUAGE_NONE][$delta]['field_images'][LANGUAGE_NONE][0]['#default_value']['fid'] = $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
            if($node->title != "")
            {
            $form['field_gallery_image'][LANGUAGE_NONE][$delta]['field_image_caption'][LANGUAGE_NONE][0]['value']['#value'] = $node->title;
          }
          }
        }
      }
      else {
        $collection_id = $node->field_ugc_personalization_photo['und'][0]['value'];
        $collection_value = field_collection_item_load($collection_id);
        $form['field_gallery_image'][LANGUAGE_NONE][0]['field_images'][LANGUAGE_NONE][0]['#default_value']['fid'] = $collection_value->field_ugc_upload_photo['und'][0]['fid'];
       if($collection_value->field_story_short_headline['und'][0]['value'] !="")
       {
        $form['field_gallery_image']['und'][0]['field_image_caption']['und'][0]['value']['#default_value'] = $collection_value->field_story_short_headline['und'][0]['value'];
       }
        drupal_add_js('jQuery(document).ready(function() {
                    jQuery("#edit-field-gallery-image-und-add-more").mousedown();});', array('type' => 'inline', 'scope' => 'footer'));
      }
    }
  }

  
  // alter the section for election xml 
  if ($form_id == 'election_graph_xml_node_form') {
    
   
    $tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = FALSE);
    foreach ($tax as $key => $term) {

      if (!itg_category_manager_term_state($term->tid)) {
        unset($tax[$key]);
      }
      
    }

    $op = array("_none" => "Select Category");
    foreach ($tax as $key => $val) {
      $op[$val->tid] = $val->name;
    }

    $form['field_section']['#title'] = array('All' => '- Any -');
    $form['field_section']['und']['#options'] = $op;
  }

  if ($form_id == 'ugc_node_form') {
    //pr($form);
    $form['field_user_name'][LANGUAGE_NONE][0]['value']['#attributes'] = array('placeholder' => t('Name'));
    $form['field_user_email'][LANGUAGE_NONE][0]['value']['#attributes'] = array('placeholder' => t('Email'));
    $form['field_user_city'][LANGUAGE_NONE][0]['value']['#attributes'] = array('placeholder' => t('City'));
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
    $form['field_user_message']['#attributes'] = array('placeholder' => t('Description'));
    $user_fields = user_load($user->uid);
   
   if ($user->uid != '1') {
      // hide source and type field from other users
      if ($form_id == 'ugc_node_form') {
        $form['field_story_source_type']['#access'] = FALSE;
        $form['field_source']['#access'] = FALSE;
      }
    }
    
    // Add label for captcha
    if ($user->uid == 0) {
      $form['captcha']['#prefix'] = '<div class="captcha-lable">Captcha</div>';
      //$form['captcha']['#suffix'] = '</div>';
    }

    
    $type = "ugc";
    $tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = FALSE);
    foreach ($tax as $key => $term) {

      if (!itg_category_manager_term_state($term->tid)) {
        unset($tax[$key]);
      }
      if ($type != "") {
        if (!itg_category_manager_term_state_content($type, $term->tid)) {
          unset($tax[$key]);
        }
      }
    }

    $op = array("_none" => "Select Category");
    foreach ($tax as $key => $val) {
      $op[$val->tid] = $val->name;
    }

    $form['field_section']['#title'] = array('All' => '- Any -');
    $form['field_section']['und']['#options'] = $op;

    $form['field_recipe_audio']['und'][0]['#title'] = t('Audio') . '<span class="form-required" title="This field is required."> *</span>';
    // get content type field value
    $type = $form['field_ugc_ctype'][LANGUAGE_NONE][0]['value'];

    // Check if user is logged-in, fill email and name field automatically
    if ($user->uid && $form['#node']->nid == '') {
      $form['field_user_email'][LANGUAGE_NONE][0]['value']['#value'] = $user->mail;
      $form['field_user_email'][LANGUAGE_NONE]['0']['value']['#attributes']['disabled'] = TRUE;
      $form['field_user_name'][LANGUAGE_NONE][0]['value']['#value'] = $user_fields->field_first_name['und']['0']['value'];
      $form['field_user_name'][LANGUAGE_NONE]['0']['value']['#attributes']['disabled'] = TRUE;
    }

    $form['actions']['submit']['#value'] = 'Submit';
    $form['#after_build'][] = 'itg_ugc_after_build';
    $form['actions']['submit']['#submit'][] = 'itg_ugc_form_custom_callback';
    // Hide/show video field
    $form['field_astro_video']['#states'] = array(
      'visible' => array(
        array(
          array(':input[name="field_ugc_ctype[und]"]' => array('value' => 'videogallery')),
          'or',
          array(':input[name="field_ugc_ctype[und]"]' => array('value' => 'recipe')),
        ),
      ),
      'required' => array(
        ':input[name="field_ugc_ctype[und]"]' => array('value' => 'videogallery'),
      )
    );

    // Hide/show Audio field
    $form['field_recipe_audio']['#states'] = array(
      'visible' => array(
        ':input[name="field_ugc_ctype[und]"]' => array('value' => 'podcast'),
      )
    );

    $arg = arg();
    // Hide/show photo field
    if ($arg[0] == 'personalization' && $arg[1] == 'my-content') {
      $form['field_ugc_personalization_photo']['#states'] = array(
        'visible' => array(
          ':input[name="field_ugc_ctype[und]"]' => array('value' => 'photogallery'),
        ),
      );
      // Hide show photo field.
      $form['field_ugc_upload_photo']['#states'] = array(
        'visible' => array(
          ':input[name="field_ugc_ctype[und]"]' => array('value' => 'recipe'),
        ),
        'required' => array(
          ':input[name="field_ugc_ctype[und]"]' => array('value' => 'photogallery'),
        )
      );
      // Hide/show description field
      $form['field_user_message']['#states'] = array(
        'required' => array(
          ':input[name="field_ugc_ctype[und]"]' => array(
            array('value' => 'story'),
            array('value' => 'recipe'),
            array('value' => 'blog')
          ),
        ),
        'invisible' => array(
          ':input[name="field_ugc_ctype[und]"]' => array('value' => 'photogallery'),
        ),
      );

      // Add cancel button
      if ($user->uid && $user->uid != 1) {
        $form['actions']['cancel'] = array(
          '#markup' => l(t('Cancel'), 'personalization/my-content', array('attributes' => array('class' => array('button')))),
          '#weight' => 21,
          '#value' => t('Cancel'),
        );
      }
    }
    else {
      // Hide field collection photo field.
      $form['field_ugc_personalization_photo']['#prefix'] = '<div style="display: none;">';
      $form['field_ugc_personalization_photo']['#suffix'] = '</div>';
      // Hide field video tags.
      $form['field_story_client_title']['#prefix'] = '<div style="display: none;">';
      $form['field_story_client_title']['#suffix'] = '</div>';
      // Hide show photo field.
      $form['field_ugc_upload_photo']['#states'] = array(
        'visible' => array(
          array(
            array(':input[name="field_ugc_ctype[und]"]' => array('value' => 'photogallery')),
            'or',
            array(':input[name="field_ugc_ctype[und]"]' => array('value' => 'recipe')),
          ),
        ),
        'required' => array(
          ':input[name="field_ugc_ctype[und]"]' => array('value' => 'photogallery'),
        )
      );
      // Hide/show description field
      $form['field_user_message']['#states'] = array(
        'required' => array(
          ':input[name="field_ugc_ctype[und]"]' => array(
            array('value' => 'story'),
            array('value' => 'recipe'),
            array('value' => 'blog')
          ),
        ),
      );

      // Add cancel button
      if ($user->uid && $user->uid != 1) {
        $form['actions']['cancel'] = array(
          '#markup' => l(t('Cancel'), 'cms-user-dashboard', array('attributes' => array('class' => array('button')))),
          '#weight' => 21,
          '#value' => t('Cancel'),
        );
      }
    }
  }
}

/**
 * Custom submit callback for redirecting UGC form.
 * @param type $form
 * @param type $form_state
 */
function itg_ugc_form_custom_callback($form, &$form_state) {
  $arg = arg();
  $node_type = ucfirst($form_state['node']->type);
  $node_type = str_replace("_", " ", $node_type);
  $title = ucfirst($form_state['node']->title);

  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  // Set redirection after submit.
  if ($arg[0] == 'personalization' && $arg[1] == 'my-content') {
    $_REQUEST['destination'] = 'personalization/my-content';
    $form_state['redirect'] = 'personalization/my-content';
  }
  else {
    $_REQUEST['destination'] = 'ugc-thank-you';
    $form_state['redirect'] = 'ugc-thank-you';
    //$msg = itg_custom_message($node_type, $workbench_current_state = NULL, arg(1), $title, $_REQUEST['destination']);
  }
}

/**
 * Implement hook_after_build
 * @param Array $form
 * @param Array $form_state
 */
function itg_ugc_after_build($form, &$form_state) {
  global $user, $base_url;

  $form['title']['#description'] = '';
  // update automatic alias name
  $form['path']['pathauto']['#title'] = 'Generate automatic Sef URL';

  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_ugc' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_ugc') . '/js/itg_ugc.js');
  // Add js file to form.
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js',
  );

  return $form;
}

/**
 * Implement hook_node_validate
 * {@inheritdoc}
 */
function itg_ugc_node_validate($node, $form, &$form_state) {
  if ($node->type == 'ugc') {
    // get value of content type field
    $type = $node->field_ugc_ctype[LANGUAGE_NONE][0]['value'];
    // get value of body field
    $description = $node->field_user_message[LANGUAGE_NONE][0]['value'];
    // get fid of upload image
    $upload_image = $node->field_ugc_upload_photo[LANGUAGE_NONE][0]['fid'];
    // get fid of upload video
    $upload_video = $node->field_astro_video[LANGUAGE_NONE][0]['fid'];
    // get fid of upload audio
    $upload_audio = $node->field_recipe_audio[LANGUAGE_NONE][0]['fid'];
    // get email of user
    $user_email = $node->field_user_email[LANGUAGE_NONE][0]['value'];
    // get name of user
    $user_name = $node->field_user_name[LANGUAGE_NONE][0]['value'];
    // get email of user
    $title = $node->title;
    // Get personalization multi photos
    $personal_multi_photo = $form_state['values']['field_ugc_personalization_photo']['und'][0]['field_ugc_upload_photo']['und'][0]['fid'];
    $arg = arg();
    // validate if decription field is blank
    if ($type == 'story' || $type == 'recipe' || $type == 'blog') {
      if (empty($description)) {
        form_set_error('field_user_message', t("Description field is required."));
      }
    }
    // validate if image field is blank
    if (($type == 'photogallery')) {
      if (empty($upload_image) && $arg[1] !== 'my-content') {
        form_set_error('field_ugc_upload_photo', t("Image field is required."));
      }
      if ($arg[1] === 'my-content' && empty($personal_multi_photo)) {
        form_set_error('field_ugc_personalization_photo', t('Upload photo field is required.'));
      }
    }

    // validate if video field is blank
    if (($type == 'videogallery')) {
      if (empty($upload_video)) {
        form_set_error('field_astro_video', t("Video field is required."));
      }
    }

    // validate if audio field is blank
    if ($type == 'audio') {
      if (empty($upload_audio)) {
        form_set_error('field_recipe_audio', t("Audio field is required."));
      }
    }
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * {@inheritdoc}
 */
function itg_ugc_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  if ($form["#id"] == 'views-exposed-form-manage-ugc-page' || $form["#id"] == 'views-exposed-form-manage-ugc-page-1') {
    $form['title']['#autocomplete_path'] = 'content-title-list/ugc/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }

  // code to open alert box when click on reject link in ugc listing
  if ($form['#id'] == 'views-exposed-form-manage-ugc-page') {
    drupal_add_js('jQuery(document).ready(function() {
                    jQuery(".ugc-reject").click(function() {
                    var reject_status = "reject";
                    if (reject_status == "reject") {
                       var msg = confirm("Are you sure you want to reject this content?");
                       if (msg == true) {
                           return true;
                       }
                       return false;
                    }
                    return true;
                 });
          });', array('type' => 'inline', 'scope' => 'footer'));
  }
}

/**
 * Implement hook_node_presave
 * {@inheritdoc}
 */
function itg_ugc_node_presave($node) {
  if ($node->type == 'ugc') {
    if (function_exists('itg_ugc_bad_words')) {
      $ugc_description = itg_ugc_bad_words($node->field_user_message[LANGUAGE_NONE][0]['value']);
      $node->field_user_message[LANGUAGE_NONE][0]['value'] = $ugc_description;
      $node->field_user_message[LANGUAGE_NONE][0]['format'] = 'full_html';
    }

    // check for city and byline
    $user_city = $node->field_user_city[LANGUAGE_NONE][0]['value'];
    $cat_check = itg_category_manager_get_term_from_name($user_city, 2);
    if (!empty($cat_check)) {
      $node->field_user_city[LANGUAGE_NONE][0]['value'] = $user_city;
    }
    else {
      $term = new stdClass();
      $term->name = $user_city;
      $term->vid = 2;
      taxonomy_term_save($term);
      $new_cat = itg_category_manager_get_term_from_name($user_city, 2);
      $node->field_user_city[LANGUAGE_NONE][0]['value'] = $user_city;
    }
  }
}

/**
 * Implement itg_ugc_node_status_update
 * @param int $nid
 * @param string $title
 */
function itg_ugc_node_status_update($nid, $title) {
  global $user;
  $node = node_load($nid);
  $node_author = user_load($user->uid);
  $rejected_by = $node_author->field_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $node_author->field_last_name[LANGUAGE_NONE][0]['value'];
  // set status property to 0
  $node->status = 0;
  if (!empty($title)) {
    $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 1;
  }
  $node->field_source[LANGUAGE_NONE][0]['value'] = $rejected_by;
  // re-save the node
  node_save($node);

  // code for redirect after node save or reject
  if (!empty($title)) {
    module_load_include('inc', 'itg_ugc', 'include/itg_ugc_mail');
    $to = $node->field_user_email[LANGUAGE_NONE][0]['value'];
    $uname = $node->field_user_name[LANGUAGE_NONE][0]['value'];
    $type = $node->field_ugc_ctype[LANGUAGE_NONE][0]['value'];
    $mail_content = itg_ugc_get_mail_content($uname, $type, 'Published', $to);

    $_GET['destination'] = 'manage-ugc';
  }
  else {
    module_load_include('inc', 'itg_ugc', 'include/itg_ugc_mail');
    $to = $node->field_user_email[LANGUAGE_NONE][0]['value'];
    $uname = $node->field_user_name[LANGUAGE_NONE][0]['value'];
    $type = $node->field_ugc_ctype[LANGUAGE_NONE][0]['value'];
    $mail_content = itg_ugc_get_mail_content($uname, $type, 'Rejected', $to);

    drupal_set_message(t($node->title . ' has been rejected successfully.'));
    drupal_goto('manage-ugc');
  }
}

/**
 * Send mail to ugc user, when query is received
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_ugc_user_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_Rejected_mail_to_ugc_user':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;

    case 'send_Published_mail_to_ugc_user':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
    
      case 'send_mail_to_follow_story_user':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Implement hook_node_view
 * {@inheritdoc}
 */
function itg_ugc_node_view($node, $view_mode, $langcode) {
  if ($node->type == "ugc") {
    global $user, $base_url;
    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;
    drupal_add_js(array('itg_ugc' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_common') . '/js/itg_common.js');
  }
}

/**
 * Implements hook_node_insert
 * @param type $node
 */
function itg_ugc_node_insert($node) {
  if ($node->type == 'story' || $node->type == 'blog' || $node->type == 'recipe' || $node->type == 'photogallery' || $node->type == 'videogallery' || $node->type == 'podcast')
  {
    $title = $node->title;
    $source_type = '';
    if (!empty($node->field_story_source_type[LANGUAGE_NONE][0]['value']))
    {
      $source_type = $node->field_story_source_type[LANGUAGE_NONE][0]['value'];
    }
    if (!empty($node->field_story_ugc_source_id[LANGUAGE_NONE][0]['value']))
    {
      if ($node->type == 'story' || $node->type == 'videogallery' || $node->type = 'podcast')
      {
        $source_id = $node->field_story_ugc_source_id[LANGUAGE_NONE][0]['value'];
      }
      else
      {
        $source_id = $node->field_story_source_id[LANGUAGE_NONE][0]['value'];
      }
    }
    if ($source_type == 'UGC' && !empty($source_id))
    {
      itg_ugc_node_status_update($source_id, $title);
    }
  }
}

/**
 * Implement hook_views_pre_render
 * {@inheritdoc}
 */
function itg_ugc_views_pre_render(&$view) {
  if ($view->name == "manage_ugc") {

    foreach ($view->result as $chkvalue) {

      $user_message_raw_value = strip_tags($chkvalue->field_field_user_message[0]['raw']['value']);
      $user_message_lenth = strlen($user_message_raw_value);
      if ($user_message_lenth > 100) {
        $user_message_raw_value = substr($user_message_raw_value, 0, 99) . "...";
        $user_message_raw_value = itg_ugc_bad_words($user_message_raw_value);
      }
      else {
        $user_message_raw_value = itg_ugc_bad_words($user_message_raw_value);
        $user_message_raw_value = $user_message_raw_value;
      }
      $chkvalue->field_field_user_message[0]['rendered']['#markup'] = $user_message_raw_value;
    }
  }

  if ($view->name == "manage_ugc") {
    $header_content_ugc = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $view->attachment_before = $header_content_ugc;
  }
}

/**
 * Implements itg_ugc_thank_you
 */
function itg_ugc_thank_you() {
 print '<div class="ugc-success" style="height: 100%; background: #fff;">UGC content has been submitted successfully for further review and approval.</div>';
}