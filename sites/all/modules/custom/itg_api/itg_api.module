<?php

/**
 * @file
 * The ITG API module.
 *
 * Contains functionality related to Third Party API.
 *
 */

/**
 * Implements hook_menu().
 */
function itg_api_menu() {
  $items = array();
  $items['itg-mail-today-content'] = array(
    'title' => 'api callback menu',
    'page callback' => 'itg_api_mail_today_content',
    'access arguments' => array('access Api content'),
    'type' => MENU_CALLBACK,
    'file' => 'include/itg_api_mail_today.inc',
  );
  
  $items['itg-ani-content'] = array(
    'title' => 'api callback menu',
    'page callback' => 'itg_ani_content',
    'access arguments' => array('access Api content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-ians-content'] = array(
    'title' => 'api callback menu',
    'page callback' => 'itg_ians_content',
    'access arguments' => array('access Api content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-ap-content'] = array(
    'title' => 'api callback menu',
    'page callback' => 'itg_ap_content',
    'access arguments' => array('access Api content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-nifty-feed'] = array(
    'title' => 'api callback menu',
    'page callback' => 'itg_nifty_feed',
    'access arguments' => array('access Api content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['itg-pti-content'] = array(
    'title' => 'api callback menu',
    'page callback' => 'itg_pti_content',
    'access callback' => TRUE,
    'access arguments' => array('access Api content'),
    'file' => 'include/itg_api_pti.inc',
  );
  
  return $items;
}

/**
 * Implements hook_permission.
 */
function itg_api_permission() {
  return array(
    'access Api content' => array(
      'title' => t('API permission'),
      'description' => t('API permission.'),
    ),    
  );
}

/**
 * Returns the key which represents the live revision.
 *
 * @TODO: make this configurable.
 */
function workbench_moderation_state_Review() {
  return 'needs_review';
}


/**
 * Implement itg_ani_content
 */
function itg_ani_content() {
  $file_path = drupal_realpath('public://');      
  global $base_url, $user;
  module_load_include('php', 'itg_api', 'alchemy_api/alchemyapi');
  $vocab_id = taxonomy_vocabulary_machine_name_load('bad_words');
  $tax = taxonomy_get_tree($vocab_id->vid, $parent = 0, $max_depth = 1, $load_entities = FALSE);

  foreach ($tax as $key => $val) {
    $op[$val->tid] = $val->name;
  }

  $direc = getDirContents($file_path.'/gallery/ani/');

  foreach ($direc as $xm_file) {

    $xml_file_path = $xm_file;
    $xml_filename = basename($xml_file_path);
    $ani_xml = simplexml_load_file($xml_file_path, 'SimpleXMLElement', LIBXML_NOCDATA);

    //p($mail_today_xml);
    if (!empty($ani_xml)) {
      $ani = 0;

      foreach ($ani_xml->article as $ani_value) {

        $headline = htmlentities(strip_tags(trim(preg_replace('/\s+/', ' ', $ani_value->headline))));

        $category_name = trim(itg_api_get_term_id($ani_value->cats));
        $subcat_name = trim(itg_api_get_term_id($ani_value->subcats));

        if (empty($category_name)) {
          $category_name = itg_api_get_term_id('ANI');
        }
        else {
          $category_name = trim(itg_api_get_term_id($ani_value->cats));
        }

        if (!empty($subcat_name)) {
          $subcat_name = trim(itg_api_get_term_id($ani_value->subcats));
        }


        $combine_cat = $category_name . ',' . $subcat_name . ',';
        $combine_cat = str_replace(',,', ',', $combine_cat);
        $combine_cat = explode(',', $combine_cat);
        $combine_cat = array_filter($combine_cat);


        $title = itg_api_check_title($headline);

        if (!$title) {
          $alchemyapi[$ani] = new AlchemyAPI('cd95bc47470dedf7e5002748636e78848cd0a9f4');
          //print $headline;
          $response[$ani] = $alchemyapi[$ani]->keywords('text', $headline, array('sentiment' => 1));
          //pr($response['keywords']);
          $final_keyword = '';
          if ($response[$ani]['status'] == 'OK') {

            //print_r($response[$i]['keywords']);
            foreach ($response[$ani]['keywords'] as $keyword) {

              $final_keyword[] = $keyword['text'];
            }
          }
          else {
            echo 'Error in the keyword extraction call: ', $response['statusInfo'];
          }
          $meta_keyword = implode(", ", $final_keyword);
          // description
          // get description value
          $description = '';
          foreach ($ani_value->content->p as $bodyTxt) {
            $description .= '<p>' . ucfirst(htmlentities($bodyTxt)) . '</p>';
          }

          $description = strip_tags($description, '<p>');
          $description = trim($description);
          $kicker = $ani_value->summary;
          $final_kicker = substr($kicker, 0, 200);
          $final_kicker = $final_kicker . '..';
          $final_kicker = trim(preg_replace('/[\s\t\n\r\s]+/', ' ', $final_kicker));

          // get pubdate
          $publish_date_raw = $ani_value->Publishdate;

          if (empty($publish_date_raw)) {
            $publish_date_raw = date('Y-m-d', time());
          }

          $publish_date_timestamp = strtotime($publish_date_raw);
          $publish_date = date('Y-m-d', $publish_date_timestamp);

          // create expiry date based on publish date 
          $exp_date = strtotime('+90 years', strtotime($publish_date));
          $exp_date = date('Y-m-d', $exp_date);

          // get byline id based on name 
          $by_line = itg_api_get_nid('ANI', 'reporter');

          $exp_description = strtolower($description);
          $exp_description = explode(" ", $exp_description);

          //Set values to node l54,s130
          $node = new stdClass();
          $node->title = trim($headline);
          $node->type = "story";
          node_object_prepare($node);
          $node->language = LANGUAGE_NONE;
          $node->uid = $user->uid;
          $node->promote = 0;
          $node->comment = 0;
          $node->body[$node->language][0]['value'] = $description ? $description : 'NA';
          $node->body[$node->language][0]['format'] = 'full_html';
          $node->field_story_long_head_line[LANGUAGE_NONE][0]['value'] = trim($headline);
          $node->field_story_magazine_kicker_text[LANGUAGE_NONE][0]['value'] = $final_kicker;
          $node->field_story_short_headline[LANGUAGE_NONE][0]['value'] = trim($headline);
          $node->metatags[LANGUAGE_NONE]['keywords']['value'] = $meta_keyword;
          //$node->field_story_comment_question[LANGUAGE_NONE][0]['value'] = 'NA';
          $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'ANI';
          $node->field_story_reporter[LANGUAGE_NONE][0]['target_id'] = $by_line; //54
          foreach ($combine_cat as $key => $tax_id) {
            $node->field_story_category[LANGUAGE_NONE][0]['tid'] = $tax_id;
          }
          $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'] = $publish_date;
          $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] = $exp_date;
          if (array_intersect($op, $exp_description)) {
            $node->log = 'State Changed to Review';
            $node->workbench_moderation_state_new = workbench_moderation_state_Review();
          }
          else {
            $node->workbench_moderation_state_new = workbench_moderation_state_published();
          }
          $node = node_submit($node); // Prepare node for saving
          node_save($node); // Finally save node
          itg_api_insert_xml_info($node->nid, $xml_filename, 'story', 'ANI');
          print '<font color="green">' . $headline . ' imported sucessfully' . '</font>';
          print '<br/>';
        }
        else {
          print '<font color="red">' . $headline . ' Already imported' . '</font>';
          print '<br/>';
        }

        if ($ani == 2)
          break;
        $ani++;
      }
    }
  }
}

/**
 * Implement itg_ans_content
 */
function itg_ians_content() {
  $file_path = drupal_realpath('public://');      
  global $base_url, $user;
  module_load_include('php', 'itg_api', 'alchemy_api/alchemyapi');
  $vocab_id = taxonomy_vocabulary_machine_name_load('bad_words');
  $tax = taxonomy_get_tree($vocab_id->vid, $parent = 0, $max_depth = 1, $load_entities = FALSE);

  foreach ($tax as $key => $val) {
    $op[$val->tid] = $val->name;
  }

  $direc = getDirContents($file_path.'/gallery/ians/');

  foreach ($direc as $xm_file) {

    $xml_file_path = $xm_file;
    $xml_filename = basename($xml_file_path);
    $ans_xml = simplexml_load_file($xml_file_path, 'SimpleXMLElement', LIBXML_NOCDATA);

    //p($mail_today_xml);
    if (!empty($ans_xml)) {
      $ians = 0;

      foreach ($ans_xml as $ans_value) {

        $headline = trim(htmlentities(strip_tags(trim(preg_replace('/\s+/', ' ', $ans_value->headline)))));

        $category_name = trim(itg_api_get_term_id($ans_value->cats));
        $subcat_name = trim(itg_api_get_term_id($ans_value->subcats));

        if (empty($category_name)) {
          $category_name = itg_api_get_term_id('IANS');
        }
        else {
          $category_name = trim(itg_api_get_term_id($ans_value->cats));
        }

        $title = itg_api_check_title($headline);

        if (!$title) {
          $alchemyapi[$ians] = new AlchemyAPI('cd95bc47470dedf7e5002748636e78848cd0a9f4');
          //print $headline;
          $response[$ians] = $alchemyapi[$ians]->keywords('text', $headline, array('sentiment' => 1));
          //pr($response['keywords']);
          $final_keyword = '';
          if ($response[$ians]['status'] == 'OK') {

            //print_r($response[$i]['keywords']);
            foreach ($response[$ians]['keywords'] as $keyword) {

              $final_keyword[] = $keyword['text'];
            }
          }
          else {
            echo 'Error in the keyword extraction call: ', $response['statusInfo'];
          }
          $meta_keyword = implode(", ", $final_keyword);
          // description
          $description = '';
          foreach ($ans_value->content->p as $bodyTxt) {
            $description .= '<p>' . ucfirst(htmlentities($bodyTxt)) . '</p>';
          }
          $description = strip_tags($description, '<p>');
          $description = trim($description);
          $kicker = $ans_value->summary;
          $final_kicker = substr($kicker, 0, 200);
          $final_kicker = $final_kicker . '..';
          $final_kicker = trim(preg_replace('/[\s\t\n\r\s]+/', ' ', $final_kicker));

          // get pubdate
          $publish_date_raw = $ans_value->Publishdate;

          if (empty($publish_date_raw)) {
            $publish_date_raw = date('Y-m-d', time());
          }

          $publish_date_timestamp = strtotime($publish_date_raw);
          $publish_date = date('Y-m-d', $publish_date_timestamp);

          // create expiry date based on publish date 
          $exp_date = strtotime('+90 years', strtotime($publish_date));
          $exp_date = date('Y-m-d', $exp_date);

          // get byline id based on name 
          $by_line = itg_api_get_nid('IANS', 'reporter');

          $exp_description = strtolower($description);
          $exp_description = explode(" ", $exp_description);
          //Set values to node l54,s130
          $node = new stdClass();
          $node->title = trim($headline);
          $node->type = "story";
          node_object_prepare($node);
          $node->language = LANGUAGE_NONE;
          $node->uid = $user->uid;
          $node->promote = 0;
          $node->comment = 0;
          $node->body[$node->language][0]['value'] = $description ? $description : 'NA';
          $node->body[$node->language][0]['format'] = 'full_html';
          $node->field_story_long_head_line[LANGUAGE_NONE][0]['value'] = trim($headline);
          $node->field_story_magazine_kicker_text[LANGUAGE_NONE][0]['value'] = $final_kicker;
          $node->field_story_short_headline[LANGUAGE_NONE][0]['value'] = trim($headline);
          $node->metatags[LANGUAGE_NONE]['keywords']['value'] = $meta_keyword;
          //$node->field_story_comment_question[LANGUAGE_NONE][0]['value'] = 'NA';
          $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'IANS';
          $node->field_story_reporter[LANGUAGE_NONE][0]['target_id'] = $by_line; //54
          $node->field_story_category[LANGUAGE_NONE][0]['tid'] = $category_name;
          $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'] = $publish_date;
          $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] = $exp_date;
          if (array_intersect($op, $exp_description)) {
            $node->log = 'State Changed to Review';
            $node->workbench_moderation_state_new = workbench_moderation_state_Review();
          }
          else {
            $node->workbench_moderation_state_new = workbench_moderation_state_published();
          }
          $node = node_submit($node); // Prepare node for saving
          node_save($node); // Finally save node
          itg_api_insert_xml_info($node->nid, $xml_filename, 'story', 'IANS');
          print '<font color="green">' . $headline . ' imported sucessfully' . '</font>';
          print '<br/>';
        }
        else {
          print '<font color="red">' . $headline . ' Already imported' . '</font>';
          print '<br/>';
        }

        if ($ians == 2)
          break;
        $ians++;
      }
    }
  }
}

/**
 * Implement itg_ap_content
 */
function itg_ap_content() {
  $file_path = drupal_realpath('public://');      
  global $base_url, $user;
  module_load_include('php', 'itg_api', 'alchemy_api/alchemyapi');
  $vocab_id = taxonomy_vocabulary_machine_name_load('bad_words');
  $tax = taxonomy_get_tree($vocab_id->vid, $parent = 0, $max_depth = 1, $load_entities = FALSE);

  foreach ($tax as $key => $val) {
    $op[$val->tid] = $val->name;
  }


  $direc = getDirContents($file_path.'/gallery/ap/');

  foreach ($direc as $xm_file) {

    $xml_file_path = $xm_file;
    $xml_filename = basename($xml_file_path);
    $ap_xml = simplexml_load_file($xml_file_path, 'SimpleXMLElement', LIBXML_NOCDATA);

    //p($mail_today_xml);
    if (!empty($ap_xml)) {
      $ap = 0;

      $xml_body = $ap_xml->content->nitf->body;

      foreach ($xml_body as $ap_value) {

        $headline = htmlentities(strip_tags(trim(preg_replace('/\s+/', ' ', $ap_value->{'body.head'}->hedline->hl1))));
        $original_headline = htmlentities(strip_tags(trim(preg_replace('/\s+/', ' ', $ap_value->{'body.head'}->hedline->hl2))));
        $category_name = trim(itg_api_get_term_id('AP'));

        $by_line = itg_api_get_nid($ap_value->{'body.head'}->byline, 'reporter');

        if (!empty($by_line)) {
          $by_line = $by_line;
        }
        else {

          $by_line = itg_api_get_nid('AP', 'reporter');
        }

        $description = '';
        foreach ($ap_value->{'body.content'}->block->p as $bodyTxt) {
          $description .= '<p>' . ucfirst(htmlentities($bodyTxt)) . '</p>';
        }

        $title = itg_api_check_title($headline);

        if (!$title) {
          $alchemyapi[$ap] = new AlchemyAPI('cd95bc47470dedf7e5002748636e78848cd0a9f4');
          //print $headline;
          $response[$ap] = $alchemyapi[$ap]->keywords('text', $headline, array('sentiment' => 1));
          //pr($response['keywords']);
          $final_keyword = '';
          if ($response[$ap]['status'] == 'OK') {

            //print_r($response[$i]['keywords']);
            foreach ($response[$ap]['keywords'] as $keyword) {

              $final_keyword[] = $keyword['text'];
            }
          }
          else {
            echo 'Error in the keyword extraction call: ', $response['statusInfo'];
          }
          $meta_keyword = implode(", ", $final_keyword);
          $description = strip_tags($description, '<p>');
          $description = trim($description);
          $kicker = substr($description, 0, 200);
          $kicker = strip_tags($kicker);
          $kicker = trim($kicker);
          $kicker1 = substr($description, 200);
          $kicker1 = strip_tags($kicker1);
          $pre_final_kicker = preg_split('/(?<!\d)\.(?!\d)/', $kicker1);
          $final_kicker = $kicker . ' ' . $pre_final_kicker[0];
          $final_kicker = str_replace(array('\'', '"'), '', $final_kicker);
          $final_kicker_length = strlen($final_kicker);
          $final_kicker = substr($final_kicker, 0, 250);
          $final_kicker = $final_kicker . '..';
          $final_kicker = trim(preg_replace('/[\s\t\n\r\s]+/', ' ', $final_kicker));
          $publish_date_raw = date('Y-m-d', time());
          $publish_date_raw = date('Y-m-d', time());
          $publish_date_timestamp = strtotime($publish_date_raw);
          $publish_date = date('Y-m-d', $publish_date_timestamp);
          $exp_date = strtotime('+90 years', strtotime($publish_date));
          $exp_date = date('Y-m-d', $exp_date);

          $exp_description = strtolower($description);
          $exp_description = explode(" ", $exp_description);

          $node = new stdClass();
          $node->title = trim($original_headline);
          $node->type = "story";
          node_object_prepare($node);
          $node->language = LANGUAGE_NONE;
          $node->uid = $user->uid;
          $node->promote = 0;
          $node->comment = 0;
          $node->body[$node->language][0]['value'] = $description ? $description : 'NA';
          $node->body[$node->language][0]['format'] = 'full_html';
          $node->field_story_long_head_line[LANGUAGE_NONE][0]['value'] = trim($original_headline);
          $node->field_story_magazine_kicker_text[LANGUAGE_NONE][0]['value'] = $final_kicker;
          $node->field_story_short_headline[LANGUAGE_NONE][0]['value'] = trim($headline);
          $node->metatags[LANGUAGE_NONE]['keywords']['value'] = $meta_keyword;
          //$node->field_story_comment_question[LANGUAGE_NONE][0]['value'] = 'NA';
          $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'AP';
          $node->field_story_reporter[LANGUAGE_NONE][0]['target_id'] = $by_line; //54
          $node->field_story_category[LANGUAGE_NONE][0]['tid'] = $category_name;
          $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'] = $publish_date;
          $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] = $exp_date;
          if (array_intersect($op, $exp_description)) {
            $node->log = 'State Changed to Review';
            $node->workbench_moderation_state_new = workbench_moderation_state_Review();
          }
          else {
            $node->workbench_moderation_state_new = workbench_moderation_state_published();
          }
          $node = node_submit($node); // Prepare node for saving
          node_save($node); // Finally save node
          itg_api_insert_xml_info($node->nid, $xml_filename, 'story', 'AP');
          print '<font color="green">' . $headline . ' imported sucessfully' . '</font>';
          print '<br/>';
        }
        else {
          print '<font color="red">' . $headline . ' Already imported' . '</font>';
          print '<br/>';
        }
        $ap++;
        if ($ap == 2)
          break;
      }
    }
  }
}

/**
 * Implement itg_nifty_feed
 */
function itg_nifty_feed() {

  global $base_url, $user;
  $base_path_set = $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'];
  $base_path_set = explode('/', $base_path_set);
  $path_instance = $base_path_set[1];
  $direc = $_SERVER['DOCUMENT_ROOT'] . '/' . $path_instance . '/sites/default/files/gallery/nifty/';
  $newFileName = $direc . 'SensexNiftyFeed.txt';
  $response_xml_data = get_content_from_xml_loc('http://businesstoday.accordhostings.com/SensexNiftyFeed.aspx');

  if ($response_xml_data) {

    $nifty_xml = simplexml_load_string($response_xml_data);

    foreach ($nifty_xml as $nifty_value) {

      $final_output.= $nifty_name = $nifty_value->name . ',';
      $final_output.='Current Value : ' . $current_value = $nifty_value->current_value . ',';

      $final_output.='Value Change : ' . $value_change = $nifty_value->value_change . ',';

      $final_output.='Percentage Change : ' . $percentage_change = $nifty_value->percentage_change . '@';
    }
    unlink($newFileName);
    if (!file_exists($newFileName)) {
      $file = fopen($newFileName, "w+");
      fwrite($file, $final_output);
      fclose($file);
      chmod($file, 777);
    }
  }
}

/**
 * Implements function for node exit or not
 * @param $title
 * $return 
 */

function itg_api_check_title($title) {
  $result = db_select('node', 'node')
          ->fields('node', array('title'))
          ->condition('title', $title, '=')
          ->condition('type', 'story', '=')
          ->execute()->fetchAssoc();

  if (!empty($result['title'])) {
    return true;
  }

  return false;
}

/**
 * Implements function for getting node id
 * @param $title,$type
 * $return 
 */

function itg_api_get_nid($title, $type) {
  $result = db_query("SELECT n.nid FROM {node} n WHERE n.title = :title AND n.type = :type", array(":title" => $title, ":type" => $type));
  $nid = $result->fetchField();

  return $nid;
}

/**
 * Implements function for getting term id by name
 * @param $name
 * $return 
 */

function itg_api_get_term_id($name) {
  $result = db_query("SELECT t.tid FROM {taxonomy_term_data} t WHERE t.name = :name", array(":name" => $name));
  $tid = $result->fetchField();

  return $tid;
}

/**
 * Implements function for save xml file info in table (itg_api_xml_info)
 * @param $node,$file,$user,$type
 * $return 
 */

function itg_api_insert_xml_info($nid,$file,$type,$source) {
   global $user;
   $created = date('Y-m-d H:i:s');
  db_insert('itg_api_xml_info') // Table to store file and node info
                ->fields(array(
                    'nid' => $nid,
                    'uid' => $user->uid,
                    'filename' => $file,
                    'type' => $type,
                    'source' => $source,
                    'created' => $created
                ))
                ->execute();
}

/**
 * Implements function for get all files from directory
 * $dir
 */

function getDirContents($dir, &$results = array()) {
  $files = scandir($dir);

  foreach ($files as $key => $value) {
    $path = realpath($dir . DIRECTORY_SEPARATOR . $value);
    if (!is_dir($path)) {
      $results[] = $path;
    }
    else if ($value != "." && $value != "..") {
      getDirContents($path, $results);
      $results[] = $path;
    }
  }

  return $results;
}

/**
 * Implements hook_block_info().
 */
function itg_api_block_info()
{
    $blocks['api_form_block'] = array(
        'info' => t('APi Form  Block'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 * @return array
 * @throws Exception
 */
function itg_api_block_view($delta = '')
{
    global $user;
    $block = array();
    $data = '';
    switch ($delta) {
        case 'api_form_block':
            $block['content'] = theme('api_form_display_block', array('data' => $data));
            break;
    }

    return $block;
}


/**
 * Implements hook_theme().
 */
function itg_api_theme($existing, $type, $theme, $path)
{
    $themes = array(
        'api_form_display_block' => array(
            'template' => 'api-form-template',
            'path' => drupal_get_path('module', 'itg_api') . '/templates',
            'variables' => array('data' => NULL),
        ),
        
    );

    return $themes;
}

/**
 * Get html data from url using curl.
 * @param $url.
 * @return $data.
 */
function get_content_from_xml_loc($url) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_AUTOREFERER, TRUE);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  $data = curl_exec($ch);
  curl_close($ch);
  return $data;
}