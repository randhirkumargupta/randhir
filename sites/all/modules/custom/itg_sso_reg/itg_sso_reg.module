<?php

module_load_include('inc', 'itg_sso_reg', 'includes/itg_sso_mail');
module_load_include('inc', 'itg_sso_reg', 'includes/itg_sso_otp_mail');
module_load_include('inc', 'itg_sso_reg', 'includes/common_fn');
module_load_include('inc', 'itg_sso_reg', 'includes/sso_user_form');
module_load_include('inc', 'itg_sso_reg', 'includes/sso_user_change_password');
module_load_include('inc', 'itg_sso_reg', 'includes/sso_user_email_mobile_change_form');
module_load_include('inc', 'itg_common', 'includes/itg_common.helper');


/*
 * Implement hook_init
 */

function itg_sso_reg_init() {
  global $user, $base_url;
  // condition to redirect backend user in case of sso
  if (array_key_exists(FRONT_USER, $user->roles) && $base_url == BACKEND_URL) {
     drupal_goto(FRONT_URL);
  }
  
  drupal_add_js(drupal_get_path('module', 'itg_sso_reg') . '/js/itg_sso_popup.js', array('scope' => 'footer'));  
}

/**
 * Implements hook_menu
 * 
 * {@inheritdoc}
 */
function itg_sso_reg_menu() {

  $items['signup'] = array(
    'title' => 'Sign up',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_sso_reg_multistep_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['sso/change-password'] = array(
    'title' => 'Change Password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_sso_reg_password_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['sso-user/%/%'] = array(
    'title' => 'Change Email/Mobile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_sso_user_email_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['complete-page'] = array(
    'title' => 'sso',
    'page callback' => 'itg_sso_user_email_complete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['password-success'] = array(
    'title' => '',
    'page callback' => 'itg_sso_reg_password_success',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['otpajaxcallback'] = array(
    'title' => 'Test form',
    'page callback' => 'itg_sso_reg_otp_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['user-activate/%'] = array(
    'title' => 'Activattion Form',
    'page callback' => 'itg_sso_user_activate_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/config/administration/logout-config'] = array(
    'title' => 'ITG SSO logout Setting Form',
    'description' => 'ITG SSO logout Setting Form ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_sso_logout_form'),
    'access arguments' => array('administer itg_sso_logout settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  
   $items['itguserlogout'] = array(
    'page callback' => 'itguser_logout',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
   
  $items['admin/config/people/sso-email-history'] = array(
    'title' => 'SSo email history',
    'description' => 'SSo email history',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sso_email_history_form'),
    'access arguments' => array('access SSo email history'),
    'file' => 'includes/sso_email_history_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['sso-email-history-del/%'] = array(
    'title' => 'Delete Form',
    'page callback' => 'itg_sso_email_history_callback',
    'access arguments' => array('access SSo email history'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implement hook_permissions()
 * 
 * @return array
 */
function itg_sso_reg_permission() {
  return array(
    'administer itg_sso_logout settings' => array(
      'title' => t('Edit sso signout setting'),
      'description' => t('Using this permission user can edit signout setting.'),
    ),
    'access SSo email history' => array(
      'title' => t('SSo email history'),
      'description' => t('SSo email history'),
    ),
  );
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_sso_reg_theme($existing, $type, $theme, $path) {
  $themes = array(
    'itg_sso_notification_mail' => array(
      'variables' => array('account' => NULL, 'url_info' => NULL),
      'template' => 'templates/sso-notification-mail',
    ),
   'itg_sso_otp_mail' => array(
      'variables' => array('rand_otp' => NULL),
      'template' => 'templates/sso-otp-mail',
    ),
  );

  return $themes;
}

/**
 * Implements hook_mail
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_sso_reg_user_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_mail_to_sso_user':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_sso_reg_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login' && !empty($_GET['ReturnTo'])) {
    // inline error on login page
    drupal_add_js(drupal_get_path('module', 'itg_sso_reg') . '/js/itg_sso_validate.js', array('scope' => 'footer'));
    // Add js file to form.
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js',
    );
    $form['#after_build'][] = 'itg_user_login_after_build';
    array_unshift($form['#validate'], 'itg_sso_user_login_form_validate');
    $form['#attributes'] = array('autocomplete' => 'off');
  }
  if ($form_id == 'user_login' && empty($_GET['ReturnTo'])) {
    drupal_add_js('jQuery(document).ready(function() {                  
                          jQuery("#user-login .form-item-remember-me").hide();
                          jQuery("#user-login #edit-remember-me").prop("checked", false);                          
          });', array('type' => 'inline', 'scope' => 'footer'));
  }
}

/**
 * Implements itg_user_login_after_build().
 */
function itg_user_login_after_build($form, &$form_state) {
 $form['name']['#attributes']['autocomplete'] = 'off';
 $form['pass']['#attributes']['autocomplete'] = 'off';
 $form['name']['#title'] = t('Enter your email/mobile number'); 
 $form['name']['#description'] = t('You may login with either your assigned mobile or your e-mail address.'); 
 return $form; 
}

/**
 * Implements itg_sso_user_login_form_validate().
 */
function itg_sso_user_login_form_validate(&$form, &$form_state) {
  $sso_role_id = itg_sso_get_user_id(trim($form_state['values']['name']));
  $sso_user = user_load($sso_role_id);
  if (!array_key_exists(FRONT_USER, $sso_user->roles)) {
    form_set_error('name', 'Invalid credentials !');
  }
}

/**
 * Get uid by name
 * @param sring $name
 */
function itg_sso_get_user_id($name) {
  $itg_query = db_select('users', 'su')
      ->fields('su', array('uid'))
      ->condition('name', $name, '=');
  $itg_result = $itg_query->execute()->fetchField();

  return $itg_result;
}

/**
 * Implements hook_form().
 * {@inheritdoc}
 */
function itg_sso_logout_form($form, &$form_state) {
  $form = array();
  $form['signout'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Domain'),
    '#default_value' => variable_get('signout-domain', ''),
    '#description' => t("Please enter domain with comma seprated list (Ex: http://www.example.com)"),
  );
  
  $form['sitename-domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter domain with site name'),
    '#default_value' => variable_get('sitename-domain', ''),
    '#description' => t("Please enter domain with site name comma seprated list (Ex: sitea name|example.com)"),
  );
  
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Save!'),
  );
  
  return $form;

}

/**
 * Implements hook_form_submit().
 * {@inheritdoc}
 */
function itg_sso_logout_form_submit(&$form, &$form_state) {
  variable_set('signout-domain', $form_state['values']['signout']);
  variable_set('sitename-domain', $form_state['values']['sitename-domain']);
  $id_event = variable_get('signout-domain', '');
  drupal_set_message($id_event.' saved successfully!');
}

/**
 * Implements callback for itguserlogout.
 * {@inheritdoc}
 */
function itguser_logout() {
  global $user;

  if ($user->uid > 0) {
    $domains = variable_get('signout-domain', '');
    $domain_array = explode(',', $domains);
    foreach ($domain_array as $key => $val) {
      $content .= '<iframe src="' . $val . '/user/logout" id="iframe"></iframe>';
    }

    echo $content;
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Implements itg_sso_reg_password_success().
 */
function itg_sso_reg_password_success() {
  if (user_is_anonymous()) {
    return drupal_access_denied();
  }
  else {
    $form['password_success'] = array(
      '#prefix' => '<div class="password-success">',
      '#markup' => 'Your passsword has been changed successfully</div>',
    );

    return $form;
  }
}

/**
 * Implements itg_sso_email_history_callback
 */
function itg_sso_email_history_callback() {
  $arg = arg();
  $id = $arg[1];
  $redirect_url = 'admin/config/people/sso-email-history';
  if (isset($id)) {
    db_delete('itg_sso_email_history')
      ->condition('id', $id)
      ->execute();
    drupal_set_message(t('User has been deleted sucessfully from history table'));
    drupal_goto($redirect_url);
  }
}