<?php

/**
 * @file
 * Module file for the ITG Taxonomy Manager module.
 */
// Load helper file
module_load_include('inc' , 'itg_category_manager' , 'includes/itg_category_manager.helper');
module_load_include('inc' , 'itg_category_manager' , 'includes/itg_category_manager_tree.helper');

/**
 * Implements hook_init
 */
function itg_category_manager_init() {  
  global $base_url;
  $settings['baseUrl'] = $base_url;
  drupal_add_js(array('baseUrl' => $settings) , 'setting');
}

/**
 * Implements hook_help().
 * 
 * @param string $path
 * @param array $arg
 * @return string
 */
function itg_category_manager_help($path , $arg) {
  if ($path == 'admin/help#itg_category_manager') {
    $output = '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t("The ITG Taxonomy Manage module prevents Drupal administrators from adding duplicate taxonomy vocabularies and/or terms.") . '</p>';
    $output .= '<p>' . t("The module restricts to delete taxonomy terms, if it is using by any content.") . '</p>';
    return $output;
  }
}

/**
 * Implements hook_menu().
 * 
 * @return array
 */
function itg_category_manager_menu() {

  $items = array();
  $items['admin/config/itg_category_manager'] = array(
    'title' => 'ITG Category Manager' ,
    'description' => 'Configuration for ITG Category Manager module.' ,
    'page callback' => 'drupal_get_form' ,
    'page arguments' => array('itg_category_manager_form') ,
    'access arguments' => array('administer taxonomy') ,
  );
  // Menu for associated content counting
  $items['content-associated'] = array(
    'page callback' => 'itg_category_manager_nodecount' ,
    'access callback' => TRUE ,
  );
  // SEF Url log menu
  $items['sef-log/%'] = array(
    'title' => 'SEF URL Log' ,
    'page callback' => 'itg_category_manager_seflogpage' ,
    'access callback' => TRUE ,
    'page arguments' => array(1) ,
    'access arguments' => array('administer taxonomy') ,
    'type' => MENU_CALLBACK ,
  );
  // Autocomplete callback for category name
  $items['itg_category_manager_autocomplete'] = array(
    'page callback' => 'itg_category_manager_autocomplete_name' ,
    'access arguments' => array('administer taxonomy') ,
    'type' => MENU_CALLBACK
  );
  // Autocomplete callback for category name
  $items['getsection_content'] = array(
    'page callback' => 'itg_category_getsection_content' ,
    'access arguments' => array('administer taxonomy') ,
    'type' => MENU_CALLBACK
  );

  $items['itg_category_manager_autocomplete_tid'] = array(
    'page callback' => 'itg_category_manager_autocomplete_tid' ,
    'access arguments' => array('administer taxonomy') ,
    'type' => MENU_CALLBACK
  );
  // Category disable menus
  $items['category-management/disable-forcefully'] = array(
    'page callback' => 'itg_category_manager_disable_forcefully' ,
    'access callback' => TRUE ,
    'type' => MENU_CALLBACK ,
  );
  $items['category-management/disable-manually'] = array(
    'page callback' => 'drupal_get_form' ,
    'page arguments' => array('itg_category_manager_disable_manually_form') ,
    'access callback' => TRUE ,
    'type' => MENU_CALLBACK ,
  );
  $items['import-tag-file-uploader'] = array(
    'title' => 'Upload a File' ,
    'type' => MENU_CALLBACK ,
    'description' => 'Import a csv' ,
    'page callback' => 'drupal_get_form' ,
    'page arguments' => array('itg_category_manager_import_tag_form') ,
    'access arguments' => array('administer taxonomy')
  );
  return $items;
}

/**
 * Implementation of hook_form
 * {@inheritdoc}
 */
function itg_category_manager_import_tag_form($form , $form_state) {
  $form['notes'] = array(
    '#type' => 'markup' ,
    '#markup' => '<div class="import-notes">A few notes when uploading. <ul><li>Make sure the file is in a .csv format.</li><li>Columns should be in *this* order</li><li>Be sure to click the "Upload" button when you select a csv.</li></ul></div>' ,
    '#upload_location' => 'public://tmp/' ,
  );
  $form['import'] = array(
    '#title' => t('Import') ,
    '#type' => 'managed_file' ,
    '#description' => t('The uploaded csv will be imported and temporarily saved.') ,
    '#upload_location' => 'public://tmp/' ,
    '#upload_validators' => array(
      'file_validate_extensions' => array('csv') ,
    ) ,
  );
  $form['submit'] = array(
    '#type' => 'submit' ,
    '#value' => t('Import') ,
  );
  $form['reset'] = array(
    '#type' => 'markup' ,
    '#markup' => l('Reset' , "import-tag-file-uploader" , array("attributes" => array("class" => array("btn btn-primary form-submit")))) ,
  );
  return $form;
}

/**
 * Custom submit callback for itg_category_manager_import_tag_form_submit.
 * {@inheritdoc}
 */
function itg_category_manager_import_tag_form_submit($form , $form_state) {
  module_load_include('inc', 'itg_videogallery', 'includes/itg_videogallery_aws_s3');
  // Check to make sure that the file was uploaded to the server properly
  $uri = db_query("SELECT uri FROM {file_managed} WHERE fid = :fid" , array(
    ':fid' => $form_state['values']['import'] ,
      ))->fetchField();
  $file_array = explode("public://", $uri);
  $file_path = $file_array[1];
  $csv_content = itg_tag_import_from_file($file_path);
  if (!empty($csv_content)) {
      // Open the csv
      // Go through each row in the csv and run a function on it. In this case we are parsing by '|' (pipe) characters.
      // If you want commas are any other character, replace the pipe with it.
      foreach($csv_content as $data) {
        $tmp_data = array();
        $tmp_data[0] = trim($data[0]);
        $tmp_data[1] = trim($data[1]);
        $tmp_data[2] = trim($data[2]);
        $operations[] = array(
          'itg_category_manager_tag_import_batch_processing' , // The function to run on each row
          array($tmp_data) , // The row in the csv
        );
      }
      // Once everything is gathered and ready to be processed... well... process it!
      $batch = array(
        'title' => t('Importing CSV...') ,
        'operations' => $operations , // Runs all of the queued processes from the while loop above.
        'finished' => 'itg_category_manager_tag_import_finished' , // Function to run when the import is successful
        'error_message' => t('The installation has encountered an error.') ,
        'progress_message' => t('Imported @current of @total tags.') ,
      );
      batch_set($batch);
      fclose($handle);
      batch_process('tags-listing');
  }
  else {
    drupal_set_message(t('There was an error uploading your file. Please contact a System administator.') , 'error');
  }
}

/**
 * This function runs the batch processing and creates nodes with then given information
 * @see
 * module_name_import_form_submit()
 */
function itg_category_manager_tag_import_batch_processing($data) {
  // Lets make the variables more readable.
  $title = $data[0];
  $is_feature = $data[1];
  $status = $data[2];
  // Find out if the node already exists by looking up its serial number. Each serial number should be unique. You can use whatever you want.
  $term_array = taxonomy_get_term_by_name($title , 'tags');
  if (empty($term_array)) {
    $vid = taxonomy_vocabulary_machine_name_load('tags')->vid;
    $term = new stdClass();
    $term->name = $title;
    $term->vid = $vid;
    $term->parent = 0; // This tells taxonomy that this is a top-level term
    $term->field_tags_display['und'][0]['value'] = $is_feature;
    $term->field_tags_status['und'][0]['value'] = $status;
    $term->vocabulary_machine_name = 'tags';
    taxonomy_term_save($term);
  }
}

/**
 * This function runs when the batch processing is complete
 *
 * @see
 * module_name_import_form_submit()
 */
function itg_category_manager_tag_import_finished() {
  drupal_set_message(t('Import Completed Successfully'));
}

/**
 * Implements hook_menu_alter
 * @param array $menu
 */
function itg_category_manager_menu_alter(&$menu) {
  if (isset($menu['taxonomy/term/%taxonomy_term'])) {
    $menu['taxonomy/term/%taxonomy_term']['page callback'] = 'itg_category_manager_taxonomy_view_page';
    $menu['taxonomy/term/%taxonomy_term']['access callback'] = TRUE;
    $menu['taxonomy/term/%taxonomy_term']['access arguments'] = array(2);
  }
}

/**
 * Functionality of taxonomy term view page
 * @param stdObject $term
 * @return array
 */
function itg_category_manager_taxonomy_view_page($term) {
  
  global $user;
  $term_status = itg_category_manager_term_state($term->tid);
  if (!$term_status) {
    return drupal_access_denied();
  }
  $user_roles = $user->roles;
  if (in_array('Front User' , $user_roles)) {
    $user_roles = 'Front User';
  }
  elseif ($user->uid == 0) {
    $user_roles = 'Anonymous User';
  }
  else {
    $user_roles = json_encode($user_roles);
  }
  if ($term->vid == CATEGORY_MANAGMENT) {
    if (function_exists('mongodb')) {
      $con = mongodb();
      if ($con) {
        $people = $con->term_view_info;
        $qry = array(
          "term_id" => $term->tid ,
          "user_id" => $user->uid ,
          "viewtime" => REQUEST_TIME ,
          "role" => $user_roles ,
        );
        $people->insert($qry);
      }
    }
  }
  //$voc = taxonomy_vocabulary_load($term->vid);
  switch ($term->vid) {
    case CATEGORY_MANAGMENT:
      
      $maped_with = '';
      for ($i = 0; $i < count($term->field_cm_select_type[LANGUAGE_NONE]); $i++) {
        $maped_with .= ucwords($term->field_cm_select_type[LANGUAGE_NONE][$i]['value']) . ', ';
      }
      $maped_with = rtrim($maped_with , ', ');
      $build['content']['display_title']['#markup'] = t('<b>Display Title:</b> &nbsp; !display_title' , array('!display_title' => @$term->field_cm_display_title[LANGUAGE_NONE][0]['value'])) . '<br/>';
      $build['content']['redirect_url']['#markup'] = t('<b>Redirect URL:</b> &nbsp; !redirect_url' , array('!redirect_url' => l(@$term->field_cm_redirection_url[LANGUAGE_NONE][0]['value'] , @$term->field_cm_redirection_url[LANGUAGE_NONE][0]['value'] , array('attributes' => array('target' => '_blank'))))) . '<br/>';
      $build['content']['category_associated_with']['#markup'] = t('<b>Maped content type:</b> &nbsp;') . $maped_with . '<br/>';
      $build['content']['hide_form_home']['#markup'] = t('<b>Hide Category form Home:</b> &nbsp; !hide_form_home' , array('!hide_form_home' => @$term->field_cm_hide_cat_from_home[LANGUAGE_NONE][0]['value'] ? 'Yes' : 'No')) . '<br/>';
      $build['content']['hide_form_search']['#markup'] = t('<b>Hide Category from Search:</b> &nbsp; !hide_form_search' , array('!hide_form_search' => @$term->field_cm_hide_cat_from_search[LANGUAGE_NONE][0]['value'] ? 'Yes' : 'No')) . '<br/>';
      $build['content']['no_follow']['#markup'] = t('<b>No Follow:</b> &nbsp; !no_follow' , array('!no_follow' => @$term->field_cm_no_follow[LANGUAGE_NONE][0]['value'] ? 'Yes' : 'No')) . '<br/>';
      $build['content']['sponsored_category']['#markup'] = t('<b>Sponsored Category:</b> &nbsp; !sponsored_category' , array('!sponsored_category' => @$term->field_cm_sponsored_category[LANGUAGE_NONE][0]['value'] ? 'Yes' : 'No')) . '<br/>';
      return $build;

    // If the term page is for an other vocabulary then use Drupal's default taxonomy page
    default:
      module_load_include('inc' , 'taxonomy' , 'taxonomy.pages');
      $build = taxonomy_term_page($term);
      return $build;
  }
}

/**
 * Form builder; creates and displays the ITG Category Manager
 * configuration settings form.
 * 
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_category_manager_form($form , &$form_state) {

// Checkboxes to choose what should be checked for dupes (vocab, terms, both)
  $form['itg_category_manager_types'] = array(
    '#type' => 'checkboxes' ,
    '#title' => t('Check for duplicate') ,
    '#default_value' => variable_get('itg_category_manager_types' , array()) ,
    '#options' => array(
      'vocab' => t('Vocabularies') ,
      'term' => t('Terms (within a vocabulary)') ,
    ) ,
  );

  $vocabs = taxonomy_get_vocabularies();
  $options = array();
  foreach ($vocabs as $v) {
    $options[$v->vid] = $v->name;
  }
  $form['itg_category_manager_vocabularies'] = array(
    '#type' => 'checkboxes' ,
    '#title' => t('Limit term check on specific vocabularies') ,
    '#default_value' => variable_get('itg_category_manager_vocabularies' , array()) ,
    '#options' => $options ,
    '#description' => t('If no option is selected, all terms will be checked for duplicates.') ,
  );

// Checkbox to indicate whether the check should be case-sensitive
  $form['itg_category_manager_case_sensitive'] = array(
    '#type' => 'checkbox' ,
    '#title' => t("Case-sensitive comparison (e.g. 'Foo' and 'foo' are not duplicates if checked).") ,
    '#default_value' => variable_get('itg_category_manager_case_sensitive') ,
  );

  return system_settings_form($form);
}

/**
 * Get term state drom db
 * 
 * @param int $tid
 * @return boolean
 */
function itg_category_manager_term_state($tid , $vid = CATEGORY_MANAGMENT) {
//  $itg_query = db_select('itg_category_manager' , 'itg')
//      ->fields('itg' , array('status'))
//      ->condition('tid' , $tid , '=')
//      ->condition('vid' , $vid , '=');
//  $itg_result = $itg_query->execute()->fetchField();
//
//  $flag = FALSE;
//  if (isset($itg_result) && $itg_result == 1) {
//    $flag = TRUE;
//  }
  $flag = TRUE;

  return $flag;
}

/**
 * Get term state drom db
 * 
 * @param int $tid
 * @return boolean
 */
function itg_category_getsection_content() {
  $key = $_POST['getthisvalue'];
  $return_res = array();
  $itg_query = db_select('field_data_field_cm_select_type' , 'itg')
      ->fields('itg')
      ->condition('entity_id' , $key , '=');
  $itg_result = $itg_query->execute()->fetchAll();
  foreach ($itg_result as $content) {
    $return_res[] = $content->field_cm_select_type_value;
  }
  print json_encode($return_res);
}

/**
 * Get term state drom db
 * 
 * @param int $tid
 * @return boolean
 */
function itg_category_manager_term_state_content($nodeid , $key) {
  $itg_query = db_select('field_data_field_cm_select_type' , 'itg')
      ->fields('itg')
      ->condition('field_cm_select_type_value' , $nodeid , '=')
      ->condition('entity_id' , $key , '=');
  $itg_result = $itg_query->execute()->fetchField();
  $flag = FALSE;
  if (isset($itg_result) && !empty($itg_result)) {
    $flag = TRUE;
  }

  return $flag;
}

/**
 * Get term state drom db
 * 
 * @param int $tid
 * @return boolean
 */
function itg_category_manager_term_get_content($key) {
  $itg_query = db_select('field_data_field_cm_select_type' , 'itg')
      ->fields('itg' , array('field_cm_select_type_value'));

  $itg_query->condition('entity_id' , $key , '=');
  $itg_result = $itg_query->execute()->fetchAll();
  $resurndata = '';
  if (isset($itg_result)) {
    foreach ($itg_result as $newres) {
      $resurndata .= $newres->field_cm_select_type_value . ' , ';
    }
    return rtrim($resurndata , ' ,');
  }
}

/**
 * Implements hook_js_alter() for use custom ckeditor js()
 * 
 * {@inheritdoc} 
 * @global string $base_url
 * @param array $javascript
 */
function itg_category_manager_js_alter(&$javascript) {
  global $base_url;
  $javascript['//cdn.ckeditor.com/4.5.4/full-all/ckeditor.js']['data'] = $base_url . '/sites/all/modules/custom/itg_category_manager/js/ckeditor.js';
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term().
 * 
 * @global stdObject $user
 * @global string $base_url
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_category_manager_form_taxonomy_form_term_alter(&$form , &$form_state , $form_id) {
  global $user, $base_url;

  if ($form['#vocabulary']->machine_name == 'state_manager') {
    $form['#attributes']['class'][] = 'node-form node-category-form';
    $form['#attached']['js'] = array(
      drupal_get_path('module' , 'itg_category_manager') . '/js/itg_category_manager.js' ,
    );
    $form['field_user_city'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('HH:MM');
    
    $form['relations']['parent']['#weight'] = -1;
    $form['#submit'][] = 'itg_category_manager_custom_submit';
  }
  // Add js to category management form
  if ($form['#vocabulary']->machine_name == 'category_management') {
    global $theme;
    if ($theme == 'itgadmin') {
      $form['actions']['delete']['#access'] = FALSE;
    }

    $form['#attributes']['class'][] = 'node-form node-category-form';
    $form['#attached']['js'] = array(
      drupal_get_path('module' , 'itg_category_manager') . '/js/itg_category_manager.js' ,
    );
    $form['field_user_city'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('HH:MM');
    
    $form['term_state']['#access'] = false;
    
    $form['#submit'][] = 'itg_category_manager_custom_submit';
  }
  if ($form_id == 'taxonomy_form_term') {
  // code for facebook image field hide and show
    $form['field_cm_no_follow']['#states'] = array(
      'visible' => array(
        ':input[name="field_cm_hide_cat_from_search[und][1]"]' => array('checked' => TRUE) ,
      ) ,
    );

    drupal_add_js('jQuery(document).ready(function() {
             //code to check unchek checkbox when all search engine checkbox is checked
             
            jQuery("#edit-field-cm-hide-cat-from-search-und-1").click(function () {
                if (jQuery("#edit-field-cm-hide-cat-from-search-und-1").is(":checked")) {
                    // code to checked all checkbox when all is checked in mobile subscriber
                    jQuery("#edit-field-cm-no-follow-und-1").prop("checked", true);
                    jQuery("#edit-field-cm-no-follow-und-2").prop("checked", true);
                   
                } else {
                    // unchecked all checkbox      
                   jQuery("#edit-field-cm-no-follow-und-1").prop("checked", false);
                    jQuery("#edit-field-cm-no-follow-und-2").prop("checked", false);

                }

            });
              
           });' , array('type' => 'inline' , 'scope' => 'footer'));
    unset($form['field_cm_select_type'][LANGUAGE_NONE]['#options']['_none']);
  }

// Delete category functionality.
  if (isset($form_state['triggering_element']['#value']) && $form_state['triggering_element']['#value'] == t('Delete') && $form['#vocabulary']->machine_name == 'category_management') {
    $tid = $form_state['term']->tid;
    $used_by_content = taxonomy_select_nodes($tid);
    if (count($used_by_content) > 0) {
      form_set_error('name' , t('Sorry! you cannot delete this category.<br/>'));
      $count_used = count($used_by_content);
      drupal_set_message(t('This category is mapped with ' . $count_used . ' contents.') . l(' Click here' , 'category-remove-from-node/' . $tid , array('attributes' => array('target' => '_blank'))) , 'status');
      if ($user->uid != 1) {
        drupal_add_js('(function($) {$(document).ready(function() {
        $("#taxonomy-form-term #edit-submit").hide();
        $("#edit-description").html($("body").find(".contents-using-cat").html());
        $(".contents-using-cat").hide();
       });}(jQuery));' , array('type' => 'inline', 'scope' => 'footer'));
      }
    }
    else {
      $flag = FALSE;
      $all_children = @taxonomy_get_children_all($tid , $form_state['term']->vid);
      if (count($all_children) > 0) {
        form_set_error('name' , t('Sorry! you cannot delete this category. This category has ' . count($all_children) . ' child category'));
        if ($user->uid != 1) {
          drupal_add_js('(function($) {$(document).ready(function() {
            $("#taxonomy-form-term #edit-submit").hide();
            $("#edit-description").html($("body").find(".contents-using-cat").html());
            $(".contents-using-cat").hide();
           });}(jQuery));' , array('type' => 'inline', 'scope' => 'footer'));
        }
      }
    }
  }
  else {
    if ($form['#vocabulary']->machine_name == 'category_management') {
      $form['name']['#title'] = t('Category Title');
      $form['name']['#description'] = '<p>' . t('Please enter category title.') . '</p>';
//unset($form['description']);
      unset($form['field_cm_sponsored_category']);
//Hide settings title levels
      unset($form['field_cm_hide_cat_from_home'][LANGUAGE_NONE]['#title']);
      unset($form['field_cm_hide_cat_from_search'][LANGUAGE_NONE]['#title']);
      unset($form['field_cm_no_follow'][LANGUAGE_NONE]['#title']);
      unset($form['field_cm_sponsored_category'][LANGUAGE_NONE]['#title']);

//Relation treatment
      $form['relations']['#title'] = 'Section and Categories';
      $form['relations']['parent']['#title'] = t('Select Section');
      $form['relations']['parent']['#description'] = '<p>' . t('Please select &#60;root&#62; for section.') . '</p>';
      $form['relations']['#collapsible'] = 0;
      $form['relations']['#weight'] = 5;

      unset($form['relations']['weight']);
//Non-editable fields in edit mode
      if (arg(3) == 'edit') {
        $form['name']['#attributes'] = array('readonly' => 'readonly');
        //$form['field_cm_redirection_url']['#disabled'] = TRUE;
        $form['field_cm_hide_cat_from_home']['#disabled'] = TRUE;
        //$form['field_cm_hide_cat_from_search']['#disabled'] = TRUE;
        //$form['field_cm_no_follow']['#disabled'] = TRUE;
        $form['field_cm_sponsored_category']['#disabled'] = TRUE;
      }
// Taxonomy active deactive logic
      $form['term-state-wrap'] = array(
        '#type' => 'fieldset' ,
        '#title' => t('Term Status') ,
        '#weight' => 5 ,
        '#suffix' => '</div></div>' ,
      );
      $form['itg_open_close'] = array(
        '#type' => 'markup' ,
        '#markup' => '<div class="cotegory-manager-settings"><h2>Program</h2><div class="setting-div">' ,
        '#weight' => 2 ,
      );
      $form['term-state-wrap']['term_state'] = array(
        '#type' => 'checkbox' ,
        '#title' => t('Active') ,
        '#default_value' => $form['tid']['#value'] == NULL ? TRUE : itg_category_manager_term_state($form['tid']['#value']) ,
        '#description' => t('If you uncheck this option, term will be in disabled state. By default is is checked. Only uncheck if you know what are you doing.') ,
      );
      if ($form['tid']['#value'] !== NULL) {
        $term_status = itg_category_manager_term_state($form['tid']['#value']);

        if ($term_status) {
          $form['term-state-wrap']['state-mode'] = array(
            '#type' => 'radios' ,
            '#title' => t('Disable mode') ,
            '#options' => array('Forcefully' , 'Manually') ,
            '#states' => array(
              'visible' => array(
                ':input[name="term_state"]' => array('checked' => FALSE) ,
              ) ,
            ) ,
            '#suffix' => '<div class="term-spinner"><img src="' . $base_url . '/' . drupal_get_path('module' , 'views') . '/images/status-active.gif" alt="" title="" /></div>' ,
          );
        }
        else {
          $form['term-state-wrap']['term_state']['#suffix'] = '<div class="status-message">' . t('This category is currently in inactive mode.') . '</div>';
        }
      }
// Add id attribute to tid field      
      $form['term_tid'] = array(
        '#type' => 'hidden' ,
        '#value' => $form['tid']['#value'] ,
        '#attributes' => array('class' => array('tid')) ,
      );

//Call valiadte and after build
      $form['#validate'][] = 'itg_category_manager_term_validate';
      $form['#after_build'][] = 'itg_category_manager_add_form_after_build';
    }
  }
  if (is_array($form['#term'])) {
    if ($form['#term']['vocabulary_machine_name'] == 'state_managment') {

      unset($form['relations']);
      unset($form['metatags']);
      unset($form['redirect']);
      drupal_add_css(
          '#edit-metatags{display:none}' , array(
        'group' => CSS_THEME ,
        'type' => 'inline' ,
        'media' => 'screen' ,
        'preprocess' => FALSE ,
        'weight' => '9999' ,
          )
      );
//  vertical-tabs-list
    }
  }
}

/**
 * Get all categories under their parent category
 * @param int $tid
 * @param int $vid
 * @param string $key
 * @return array
 */
function taxonomy_get_children_all($tid , $vid = 0 , $key = 'tid') {
  $c = taxonomy_get_children($tid , $vid , $key);
  $result = array();
  foreach ($c as $t => $d) {
    $result[$t] = $d;
    $below = taxonomy_get_children_all($t , $vid , $key);
    $all_children[] = $result[$t]->tid;
    if (!empty($below)) {
      foreach ($below as $nt => $nd) {
        $result[$nt] = $nd;
        array_push($all_children , $nd);
      }
    }
  }
  return $all_children;
}

/**
 * Callback function for term validation.
 * 
 * @param array $form
 * @param array $form_state
 */
function itg_category_manager_term_validate($form , &$form_state) {
// Check status of the mode
  $mode_status = itg_category_manager_term_state($form_state['values']['tid']);

// If term is inactive then set disable mode value to 0 to avoid below error.
  if (!$mode_status) {
    $form_state['values']['state-mode'] = 1;
  }
  if ($form_state['values']['term_state'] == 0 && $form_state['values']['state-mode'] == NULL && $form_state['clicked_button']['#value'] != 'Delete' && $form_state['term']->tid != NULL) {
    form_set_error('state-mode' , t('Please select either forcefully or manually disable mode.'));
  }

  if (arg(3) != 'edit') {
    if ($form_sate['values']['parent'][0] == 0 && $form_state['values']['field_cm_select_type']['und'][0]['value'] == NULL) {
      form_set_error('field_cm_select_type' , t('Content Type field is required for root.'));
    }
  }

  if ($form_state['values']['field_user_city']['und'][0]['value'] != NULL) {
    if (!preg_match('/^([01]?[0-9]|2[0-3])(:[0-5][0-9]){1}$/' , $form_state['values']['field_user_city']['und'][0]['value'])) {
      form_set_error('field_user_city' , t('Invalid Program Timing.'));
    }
  }

// Code end for publish time
  $term = $form_state['values']['name'];
  $vid = $form_state['values']['vid'];
  $tid = $form_state['values']['tid'];
  $cat_arr = $form_state['input']['parent']['hierarchical_select']['selects'];
  $num_cat_selected = count($cat_arr);
  $all_children = array();
  if (!empty($cat_arr[0]) && $cat_arr[0] != 0) {
    $_all_children = taxonomy_get_children($cat_arr[0]);
    $all_children[] = get_term_name_from_tid($cat_arr[0])->name;
    foreach ($_all_children as $_term) {
      $all_children[] = $_term->name;
    }
  }
  if ($form_state['triggering_element']['#value'] != 'Delete') {
    if (($cat_arr[0] == 'label_0')) {
      form_set_error('parent' , t('Section field is required.'));
    }
    if ($num_cat_selected > 4) {
      form_set_error('parent' , t('Sorry! You can not create more than 4 levels of categories within a section.'));
    }
    //Check for duplicate category    
    $dup_parents = itg_category_manager_is_dupe_term($term , $vid , $tid);
    $erros = $dup_parents ? array_filter($dup_parents) : NULL;
    

    $term_load = taxonomy_term_load(arg(2));
    
    if (!empty($erros)) {
      $new_rparent = $termParent != 0 ? taxonomy_get_parents_all($termParent) : 0;
      $new_rparent = is_array($new_rparent) ? $new_rparent[count($new_rparent) - 1]->tid : 0;
			foreach ($dup_parents as $value) {
        if (isset($value->tid) && $value->tid == $new_rparent) {
          form_set_error('name' , t('Category name already exists.'));
        }
        elseif (is_numeric(arg(2)) && $term_load->name != $form_state['values']['name'] && $new_rparent == 0 && $value->name == $form_state['values']['name']) {
          form_set_error('name' , t('Category name already exists2.'));
        }
        elseif (!is_numeric(arg(2)) && $new_rparent == 0 && $value->name == $form_state['values']['name'] && ((count($all_children) <= 0) || (count($all_children) > 0 && in_array($form_state['values']['name'], $all_children)))) {
          form_set_error('name' , t('Category name already exists3.'));
        }
        else {
          
        }
      }
    }
  }
}

/**
 * Category add form after build
 * @param type $form
 * @param type $form_state
 * @return int
 */
function itg_category_manager_add_form_after_build(&$form , &$form_state) {
  global $user;
  $arg = arg();
  //unset($form_state['field']['field_cm_select_type']);
  //['field_cm_select_type']['und'][#options]
  if (arg(3) == 'edit') {
    $select_content_type = $form_state['complete form']['field_cm_select_type']['und']['#default_value'];
    foreach($select_content_type as $key => $val_content) {
      $val_content_array[] = $form_state['complete form']['field_cm_select_type']['und']['#options'][$val_content];
      unset($form_state['complete form']['field_cm_select_type']['und']['#options'][$val_content]);

    }

    $select_content_type = implode(', ', $val_content_array);

    $form['field_cm_select_type']['#prefix'] = '<div class="selected-categoies"><label>Selected Content Type</label><div class="categories">'.$select_content_type.'</div></div>';
  }
 
  
//Add cancel link to add and edit form of category add form exit;
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel') , 'category-manager-listing' , array('attributes' => array('class' => 'button'))) ,
    '#weight' => 20 ,
  );
  // Content type field required icon.
  $form['field_cm_select_type']['und']['#states'] = array(
    'required' => array(
      ':input[name="parent[hierarchical_select][selects][0]"]' => array('value' => '0') ,
    ) ,
  );
// Hide save buttons once someone uncheck state checkbox.
  $form['actions']['submit']['#states'] = array(
    'invisible' => array(
      ':input[name="state-mode"]' => array(
        array('value' => '0') ,
        array('value' => '1') ,
      ) ,
    ) ,
  );
  if ($user->uid != 1 && $arg[3] == 'edit') {
    if ($form_state['values']['parent'][0] == 0) {
      //drupal_add_js('jQuery(document).ready(function () { jQuery("#edit-field-cm-select-type-und option").css("pointer-events", "none"); jQuery("#edit-relations option:not(:selected)").attr("disabled", true);});' , array('type' => 'inline', 'scope' => 'footer'));
    }
    else {
      drupal_add_js('jQuery(document).ready(function () { jQuery("#edit-field-cm-select-template-type-und-special").attr("disabled", true); jQuery("#edit-field-cm-select-template-type-und-section").attr("disabled", true); jQuery("#edit-field-cm-select-template-type-und-none").attr("disabled", true); jQuery("#edit-field-cm-select-type-und option:not(:selected)").attr("disabled", true);jQuery("#edit-relations option:not(:selected)").attr("disabled", true);});' , array('type' => 'inline', 'scope' => 'footer'));
    }
  }

  unset($form['description']['format']['format']);
//Unset metatag description
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter()
 * 
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 * @return array
 */
function itg_category_manager_form_taxonomy_form_vocabulary_alter(&$form , &$form_state , $form_id) {
// Do not add the validator if Delete was hit.
  if (isset($form_state['triggering_element']['#value']) && $form_state['triggering_element']['#value'] == t('Delete')) {
    return;
  }

// Get the types of taxonomy objects we will validate against
  $types = variable_get('itg_category_manager_types' , array());

// Add the validator if we're checking vocabularies for dupes.
  if ($types['vocab']) {
    $form['#validate'][] = 'itg_category_manager_vocabulary_validate';
  }
}

/**
 * Callback function for vocabulary validation
 * @param array $form
 * @param array $form_state
 */
function itg_category_manager_vocabulary_validate_vocabulary_validate($form , &$form_state) {
  $vocab = $form_state['values']['name'];
  $vid = isset($form_state['values']['vid']) ? $form_state['values']['vid'] : 0;
  if (itg_category_manager_is_dupe_vocabulary($vocab , $vid)) {
    form_set_error('name' , t('The vocabulary %term already exists.' , array('%term' => check_plain($vocab))));
  }
}

/**
 * Checks whether a term is a duplicate, based on the module preferences.
 * 
 * @param string $term
 * @param int $vid
 * @param int $tid
 * @return boolean
 */
function itg_category_manager_is_dupe_term($term , $vid , $tid = 0) {

// Clean up the term to check
  $term = trim($term);

// Get matching terms in the given vocabulary (case insensitive)
  $query = new EntityFieldQuery;
  $query = $query
      ->entityCondition('entity_type' , 'taxonomy_term')
      ->propertyCondition('name' , $term)
      ->propertyCondition('vid' , $vid);
  if ($tid) {  // Ignore an existing term of the same name; this is needed on updates to an existing term.
    $query = $query->entityCondition('entity_id' , $tid , '<>');
  }
  $result = $query->execute();

// No results, term is unique
  if (is_array($result) && !$result) {
    return FALSE;
  }

// We found a result
  if (isset($result['taxonomy_term'])) {

// Do a case sensitive comparison if requested, but if not,
// just return that we found a match
    if (variable_get('itg_category_manager_case_sensitive')) {

      $is_dupe = FALSE;

// For each found result...
      foreach ($result['taxonomy_term'] as $found_term) {
// Load the term data and see if it's a dupe
        $term_data = taxonomy_term_load($found_term->tid);
        if (!strcmp($term_data->name , $term)) {
          $is_dupe = TRUE;
          break;
        }
      }

      return $is_dupe;
    }
    else { // Not case sensitive
      $data = array();
      foreach ($result['taxonomy_term'] as $found_term) {
// Load the term data and see if it's a dupe
        $term_data = taxonomy_term_load($found_term->tid);
        if (!strcmp($term_data->name , $term)) {
          $root_parent = taxonomy_get_parents_all($found_term->tid);
          if ($found_term->tid == $root_parent[count($root_parent) - 1]->tid) {
            $data[] = $term_data;
          }
          else {
            $data[] = $root_parent[count($root_parent) - 1];
          }
        }
      }

      return $data;
    }
  }

  return FALSE;
}

/**
 * Check case sensitive comparision.
 * 
 * @param string $vocab
 * @param int $vid
 * @return boolean
 */
function itg_category_manager_is_dupe_vocabulary($vocab , $vid = 0) {

// Clean up the vocabulary to check
  $vocab = trim($vocab);

// Get all vocabularies
  $vocabs = taxonomy_get_vocabularies();

// Look for a vocabulary with the same name based on case-sensitivity preferences
  $case_sensitive = variable_get('itg_category_manager_case_sensitive');
  foreach ($vocabs as $found_vocab) {

// Skip the check if the current found vocabulary is the same one we're comparing.
// This will happen on updates to an existing vocabulary.
    if ($vid == $found_vocab->vid) {
      continue;
    }

// Clean up the stored vocabulary. This helps for systems that
// don't trim their vocabulary names before entry.
    $found_vocab_name = trim($found_vocab->name);

    if (($case_sensitive && !strcmp($found_vocab_name , $vocab)) || (!$case_sensitive && !strcasecmp($found_vocab_name , $vocab))) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Get term id using term name and vocabulary id($vid)
 * @param type $term_name
 * @param type $vid
 * @return boolean
 */
function itg_category_manager_get_term_from_name($term_name , $vid) {
  $tree = taxonomy_get_tree($vid);
  foreach ($tree as $term) {
    if (strtolower($term->name) == strtolower($term_name)) {
      return $term->tid;
    }
  }
  return FALSE;
}

/**
 * Implement hook_entity_update
 * @param type $entity
 * @param type $type
 * @return boolean
 */
function itg_category_manager_entity_update($entity , $type) {
  if ($type == 'taxonomy_term' && $entity->vocabulary_machine_name == 'category_management') {
    $mail_content = itg_category_manager_get_mail_content($entity);

    $params = array(
      'body' => $mail_content ,
      'subject' => t('India Today | ' . $entity->name . ' Category Updated!') ,
    );
    
    $rid = array(SEO);
    $user_email = get_email_by_roll($rid);
    $to = implode(",", $user_email);
    $mail = drupal_mail('itg_category_manager_seo_team' , 'send_mail_to_seo' , $to , language_default() , $params , 'haripal.rao@kelltontech.com' , TRUE);
    if ($mail['result']) {
      return TRUE;
    }
    else {
      $error_msg = t('Failed to send the email!');
      watchdog('canvas-email' , $error_msg , array() , WATCHDOG_ALERT);
      return FALSE;
    }
  }
}

/**
 * Send mail to SEO team, when category has been updated by india today team
 * @global type $base_url
 * @param type $key
 * @param type $message
 * @param type $entity
 */
function itg_category_manager_seo_team_mail($key , &$message , $params) {
  switch ($key) {
    case 'send_mail_to_seo':
      $headers = array(
        'MIME-Version' => '1.0' ,
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes' ,
        'Content-Transfer-Encoding' => '8Bit' ,
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Get Mail content
 * @global type $base_url
 * @param type $entity
 * @return string
 */
function itg_category_manager_get_mail_content($entity) {
  global $base_url;
  $display_name = isset($entity->field_cm_display_title[LANGUAGE_NONE][0]['value']) ? $entity->field_cm_display_title[LANGUAGE_NONE][0]['value'] : 'NA';
  $term_alias_url = $base_url . '/' . $entity->path['alias'];
  $redirection_url = isset($entity->field_cm_redirection_url['und'][0]['value']) ? $entity->field_cm_redirection_url['und'][0]['value'] : 'NA';

  $output = '<ul>';
// Find content type value
  if (count($entity->field_cm_select_type['und']) >= 1) {
    foreach ($entity->field_cm_select_type['und'] as $value) {
      $output .= '<li>' . ucfirst($value['value']) . '</li>';
    }
  }
  else {
    $output .= '<li>NA</li>';
  }
  $output .= '</ul>';

  $content = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns:v="urn:schemas-microsoft-com:vml">
    <head>
        <title></title>
    </head>
    <body style="margin:0; padding:0;">
        <table cellpadding="0" cellspacing="0" width="760" align="center"><tr><td>Hi SEO Team,</td></tr>
            <tr><td style="font-weight: bold;">Category ' . $entity->name . ' has been modified. Details are given below:</td></tr>
            <tr><td>Display Title: ' . $display_name . '</td></tr>
            <tr><td>
                    Category URL: <a href="' . $term_alias_url . '" target="_blank">' . $term_alias_url . '</a><br />
                    Redirection URL: ' . $redirection_url . '<br />
                    Content Type: ' . $output . '  
                </td></tr>
            <tr><td>Thanks,</td></tr>
            <tr><td>India Today Team</td></tr></table>
    </body></html>';

  return $content;
}

/**
 * Implements hook_taxonomy_term_insert().
 *
 * @param Object $term 
 *   Insert row to itg_category_manager at the time of term creation.
 */
function itg_category_manager_taxonomy_term_insert($term) {
global $user;
  if ($term->vid == CATEGORY_MANAGMENT) {
    $vid = $term->vid;
    $data = array(
      'tid' => $term->tid ,
      'uid' => $user->uid ,
      'vid' => $term->vid ,
      'created' => time() ,
      'changed' => time() ,
      'status' => isset($term->term_state) ? $term->term_state : 1 ,
    );

    drupal_write_record('itg_category_manager' , $data);
  }
}

/**
 *  Implements hook_taxonomy_term_update().
 *  update values
 */
function itg_category_manager_taxonomy_term_update($term) {
 global $user;
  if ($term->vid == CATEGORY_MANAGMENT) {
        db_update('itg_category_manager')
        ->fields(array('changed' => time() , 'status' => $term->term_state))
        ->condition('tid' , $term->tid)
        ->execute();
  }
}

/**
 * Implements hook_taxonomy_term_presave().
 * Update logs for Sef Url and modification time.
 * @param Object $term 
 *   An object of type term.
 */
function itg_category_manager_taxonomy_term_presave($term) {
   if ($term->vid == CATEGORY_MANAGMENT) {
    if (arg(0) == 'taxonomy' && arg(3) == 'edit') {
      $term->field_cm_select_type['und'] = array_merge($term->original->field_cm_select_type['und'], $term->field_cm_select_type['und']);
    }
    
   }
}

/**
 * Implementing 'itg_category_manager_custom_path'.
 * @param $pathdata path alias content
 * Creating custom path alias 
 */
function itg_category_manager_custom_path($pathdata) {

  if (preg_match("![^a-z0-9]!i" , $pathdata)) {
    $pathdata = preg_replace('/[^a-zA-Z0-9\/\\.\']/' , '-' , $pathdata);
    while (preg_match('/--/' , $pathdata)) {
      $pathdata = preg_replace('/--/' , '-' , $pathdata);
    }
    $pathdata = rtrim($pathdata , "-");
    $pathdata = strtolower($pathdata);
    $pathdata = str_replace(array(':' , '*' , '"' , "'" , '#') , "-" , $pathdata);
  }
  return $pathdata;
}

/**
 * Implements hook_pathauto_alias_alter().
 * Insert url aias to itg-category_manager table against specific term id.
 * 
 * @global stdObject $user
 * @param string $alias
 * @param array $context
 */
function itg_category_manager_pathauto_alias_alter(&$alias , &$context) {
  global $user;
  // Handle Insert case
  if ($context['module'] == 'taxonomy_term' && $context['op'] == 'insert' && $context['data']['term']->vocabulary_machine_name == 'category_management') {
    // find section name
    //$parents = taxonomy_get_parents_all($context['data']['term']->tid);
    //$section = end($parents);
    $get_parents = taxonomy_get_parents_all($context['data']['term']->tid);    
    $parents = array_reverse($get_parents);    
    if (isset($parents) && !empty($parents)) {        
      $parent_titles = array();        
      foreach($parents  as $key => $parent_term) {          
        $parent_titles[] = strtolower($parent_term->name);        

      }
      $pathdata = implode("/" , $parent_titles);        
      $newpath = itg_category_manager_custom_path($pathdata);        
      $alias = $newpath;
     }
     // Update modified date on itg_category_manager table
    $status = isset($context['data']['term']->term_state) ? $context['data']['term']->term_state : 1;
    $data = array();
    $data = array(
      'tid' => $context['data']['term']->tid ,
      'uid' => $user->uid ,
      'sef_url' => $alias ,
      'changed' => time() ,
    );
    // Remove trailing slash from sef url.
    $alias = rtrim($alias , '/');
    db_insert('itg_sef_url')->fields($data)->execute();

//    // Update modified date on itg_category_manager table
//    $status = isset($context['data']['term']->term_state) ? $context['data']['term']->term_state : 1;
//    db_insert('itg_category_manager')
//        ->fields(
//            array(
//              'changed' => time() , 
//              'created' => time() ,
//              'status' => $status , 
//              'vid' => CATEGORY_MANAGMENT ,
//              'tid' => $context['data']['term']->tid ,
//              )
//          )
//        ->execute();
  }
  // Handle update case
  if ($context['module'] == 'taxonomy_term' && $context['op'] == 'update' && $context['data']['term']->vocabulary_machine_name == 'category_management') {
    // find section name
    //$parents = taxonomy_get_parents_all($context['data']['term']->tid);
    $get_parents = taxonomy_get_parents_all($context['data']['term']->tid);    
    $parents = array_reverse($get_parents);    
    if (isset($parents) && !empty($parents)) {        
      $parent_titles = array();        
      foreach($parents  as $key => $parent_term) {          
        $parent_titles[] = strtolower($parent_term->name);        

      }
      $pathdata = implode("/" , $parent_titles);        
      $newpath = itg_category_manager_custom_path($pathdata);        
      $alias = $newpath;
     }
    // Remove trailing slash from sef url.
    $alias = rtrim($alias , '/');
    $data = array();
    $data = array(
      'tid' => $context['data']['term']->tid ,
      'uid' => $user->uid ,
      'sef_url' => $alias ,
      'changed' => time() ,
    );
    db_update('itg_sef_url')->fields($data)->condition('tid' , $context['data']['term']->tid)
        ->execute();

    // Update modified date on itg_category_manager table
    $status = isset($context['data']['term']->term_state) ? $context['data']['term']->term_state : 1;
//    db_update('itg_category_manager')
//        ->fields(array('changed' => time() , 'status' => $status))
//        ->condition('tid' , $context['data']['term']->tid)
//        ->execute();
  }
}

/**
 * Implements hook_views_api().
 * registering api information for custom views handlers.
 */
function itg_category_manager_views_api() {
  return array(
    'api' => 3 ,
  );
}

/**
 * Implements hook_views_data()
 * Register new views handler for displaying custom table data to views.
 * @return araay of array
 */
function itg_category_manager_views_data() {
  $data['itg_category_manager']['table']['group'] = t('Category Manager');
  $data['itg_category_manager']['table']['base'] = array(
    'field' => 'sef_url' ,
    'title' => t('Category Manager') ,
  );

  $data['itg_category_manager']['tid'] = array(
    'title' => t('Category Manager Table') ,
    'help' => t('Log information about taxonomy term.') ,
    'relationship' => array(
      'base' => 'taxonomy_term_data' , // The name of the table to join with.
      'base field' => 'tid' , // The name of the field on the joined table.      
      'handler' => 'views_handler_relationship' ,
      'label' => t('Category manager') ,
      'title' => t('ITG') ,
      'help' => t('Relate taxonomy to view.') ,
    ) ,
  );
// Example timestamp field.
  $data['itg_category_manager']['created'] = array(
    'title' => t('created field') ,
    'help' => t('Term created date.') ,
    'field' => array(
      'handler' => 'views_handler_field_date' ,
      'click sortable' => TRUE ,
    ) ,
    'sort' => array(
      'handler' => 'views_handler_sort_date' ,
    ) ,
    'filter' => array(
      'handler' => 'views_handler_filter_date' ,
    ) ,
    'argument' => array(
      'handler' => 'views_handler_argument_date'
    ) ,
  );
  $data['itg_category_manager']['changed'] = array(
    'title' => t('changed field') ,
    'help' => t('Term changed date.') ,
    'field' => array(
      'handler' => 'views_handler_field_date' ,
      'click sortable' => TRUE ,
    ) ,
    'sort' => array(
      'handler' => 'views_handler_sort_date' ,
    ) ,
    'filter' => array(
      'handler' => 'views_handler_filter_date' ,
    ) ,
    'argument' => array(
      'handler' => 'views_handler_argument_date'
    ) ,
  );
  $data['itg_category_manager']['status'] = array(
    'title' => t('Status') ,
    'help' => t('Term status.') ,
    'field' => array(
      'handler' => 'views_handler_field_boolean' ,
      'click sortable' => TRUE ,
      'output formats' => array(
        'active-inactive' => array(t('Active') , t('Inactive')) ,
      )
    ) ,
    'filter' => array(
      'handler' => 'views_handler_filter_boolean_operator' ,
      'label' => t('Status') ,
      'type' => 'active-inactive' ,
      'use equal' => TRUE ,
    ) ,
  );

  return $data;
}

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc} 
 */
function itg_category_manager_form_alter(&$form , &$form_state , $form_id) {
  if ($form_id == 'taxonomy_form_term' && $form['#vocabulary']->machine_name == 'category_management') {
    /* $select_template_type = 'field_cm_select_template_type';
      $select_template = 'field_cm_select_template';
      unset($form[$select_template_type][LANGUAGE_NONE]['#options']['_none']);

      // add ajax on Select template field
      $form[$select_template_type][LANGUAGE_NONE]['#ajax'] = array(
      'event' => 'change' ,
      'callback' => 'itg_template_ajax_callback' ,
      'wrapper' => $select_template . '_replace' ,
      );

      // set Select template type on edit and trigger action
      $template_type = '';
      if (isset($form[$select_template_type][LANGUAGE_NONE]['#default_value']) && !isset($form_state['triggering_element'])) {
      $template_type = $form[$select_template_type][LANGUAGE_NONE]['#default_value'];
      }
      elseif (!empty($form_state['input'][$select_template_type][LANGUAGE_NONE])) {
      $template_type = $form_state['input'][$select_template_type][LANGUAGE_NONE];
      }

      // Setup template type
      $form[$select_template][LANGUAGE_NONE]['#prefix'] = '<div id="' . $select_template . '_replace">';
      $form[$select_template][LANGUAGE_NONE]['#suffix'] = '</div>';

      if (function_exists('get_tplname_on_category') && !empty($template_type)) {
      $form[$select_template][LANGUAGE_NONE]['#options'] = get_tplname_on_category($template_type);
      $form[$select_template][LANGUAGE_NONE]['#default_value'] = $form[$select_template][LANGUAGE_NONE]['#entity']->field_cm_select_template[LANGUAGE_NONE][0]['value'];
      }
     */
    
    $form['field_result_format']['#access'] = false;
    drupal_add_js('jQuery(document).ready(function() {                  
                  jQuery("#edit-field-cm-select-template").hide();
                 });' , array('type' => 'inline' , 'scope' => 'footer'));
    //code for content type dropdown
    
  }
  if ($form_id == 'election_graph_xml_node_form') {
    drupal_add_css(
        '.vertical-tabs-list{display:none}' , array(
      'group' => CSS_THEME ,
      'type' => 'inline' ,
      'media' => 'screen' ,
      'preprocess' => FALSE ,
      'weight' => '9999' ,
        )
    );
  }

  if ($form_id == 'views_exposed_form' && isset($form['status']['#options'][1])) {
    drupal_add_js(drupal_get_path('module' , 'itg_category_manager') . '/js/clipboard.min.js' , array('type' => 'file', 'scope' => 'footer'));
    drupal_add_js(drupal_get_path('module' , 'itg_category_manager') . '/js/itg_category_manager.js' , array('type' => 'file', 'scope' => 'footer'));
    $form['name']['#autocomplete_path'] = 'itg_category_manager_autocomplete';
    $form['tid_raw']['#autocomplete_path'] = 'itg_category_manager_autocomplete_tid';
    $form['status']['#options'][1] = t('Active');
    $form['status']['#options'][0] = t('Inactive');
    $form['field_cm_select_type_value']['#options']['All'] = t('All');
  }


// code use for append field for primary category and category list by contant type
  $code_append_array = array('story_node_form' , 'photogallery_node_form' , 'podcast_node_form' , 'astro_node_form' , 'videogallery_node_form' , 'blog_node_form' , 'recipe_node_form' , 'cooking_tips_node_form' , 'food_news_node_form' , 'print_team_integration_node_form');
  if (in_array($form_id , $code_append_array)) {
    $form['#after_build'][] = 'itg_categor_form_edit_category_radio';
  }
}

function itg_categor_form_edit_category_radio($form , &$form_state) {
  $type = '';
  if (arg(0) == 'node' && arg(1) == 'add') {
    $type = arg(2);
  }
  elseif (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
    $node = node_load(arg(1));
    $type = $node->type;
  }
  $form['cat_node_type'] = array(
    '#type' => 'hidden' ,
    '#value' => $type ,
    '#attributes' => array('name' => 'cat_node_type') ,
  );
  $editid = 0;
  if (!empty($form_state['input']['field_primary_category'])) {
    $editid_new = $form_state['input']['field_primary_category'][LANGUAGE_NONE][0]['value'];
    if (is_numeric($editid_new)) {
      $editid = $editid_new;
    }
  }

  if (($editid == 0 || empty($editid)) && !empty($form['#node']->field_primary_category[LANGUAGE_NONE][0]['value'])) {
    $editid = $form['#node']->field_primary_category[LANGUAGE_NONE][0]['value'];
  }


  $content_types_lists = array("story" , "photogallery" , "videogallery" , "podcast" , "blog", 'breaking_news');

  if (!in_array($type , $content_types_lists)) {
    drupal_add_js('jQuery(document).ready(function() {
      jQuery("#prim_' . $editid . '").attr("checked", true);
          jQuery( "form" ).submit(function( event ) {
           jQuery("#edit-field-primary-category-und-0-value").val("");
           jQuery(".primary_category_radio").each(function(){
      if(jQuery(this).is(":checked")) {
          var getval = jQuery(this).val();
          jQuery("#edit-field-primary-category-und-0-value").val(getval);
      }

    });
  });
     });' , array('type' => 'inline' , 'scope' => 'footer'));
  }
  drupal_add_js(drupal_get_path('module' , 'itg_category_manager') . '/js/primary_category.js' , array('type' => 'file' , 'scope' => 'footer'));

  return $form;
}

/**
 * Implements hook_block_info()
 *  {@inheritdoc} 
 */
function itg_category_manager_block_info() {
  $blocks['sef_url_log'] = array(
    'info' => t('SEF URL Log') ,
    'cache' => DRUPAL_CACHE_GLOBAL ,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * @param string $delta
 * @return array 
 */
function itg_category_manager_block_view($delta = '') {
  $block = array();
  $data = '';


  switch ($delta) {
    case 'sef_url_log':
      $arg = arg();
      $term = taxonomy_term_load($arg[2]);
      if ($term->vid == 4) {
        $ass_node = taxonomy_select_nodes($arg[2] , $pager = FALSE , $limit = 1 , $order = array('t.created' => 'DESC'));
        if (count($ass_node)) {
          global $language;
          $data .= '<div class="content-associated">';
          $data .= '<div>Last created article: ' . l('View' , drupal_get_path_alias('node/' . $ass_node[0] , $language->language) , array('attributes' => array('target' => '_blank'))) . '</div>';
          $data .= '<div class="tid" style="display:none;">' . $arg[2] . '</div>';
          $data .= '<div id="show-content-count">Associated Contents: <button class="button">Show counts</button><span class="count"></span></div>';
          $data .= '</div>';
        }
        $itg_sef_log = itg_category_manager_seflog($arg[2] , 6);
        if (count($itg_sef_log)) {
          $data .= '<div class="audit-info">SEF URL Log</div>';
          $data .= '<table class="itg-log"><thead><tr>';
          $data .= '<th class="th1">Sr. No</th>';
          $data .= '<th class="th2">last URL</th>';
          $data .= '<th class="th3">Modified By</th>';
          $data .= '<th class="th4">Timestamp</th><tr></thead>';
          $counter = 0;
          foreach ($itg_sef_log as $value) {
            ++$counter;
            if ($counter > 5) {
              continue;
            }
            $url = isset($value->sef_url_modified) ? $value->sef_url_modified : $value->sef_url;
            $data .= '<tr>';
            $data .= '<td class="th1">' . $counter . '</td>';
            $data .= '<td class="th2">' . $url . '</td>';
            $data .= '<td class="th3">' . $value->name . '</td>';
            $data .= '<td class="th4">' . format_date($value->changed , 'custom' , 'm-d-Y g:i:s a') . '</td>';
            $data .= '</tr>';
          }
          $data .= '</table>';
          if ($counter > 5) {
            $data .= '<div class="more">' . l('more...' , 'sef-log/' . $arg[2] , array('attributes' => array('target' => '_blank'))) . '</div>';
          }
          $data .= '</div">';
        }
        $block['content'] = theme('sef_url_log' , array('data' => $data));
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_theme()
 * Registring templates for different pages.
 */
function itg_category_manager_theme() {
  return array(
    'sef_url_log' => array(
      'variable' => array('data' => NULL) ,
      'template' => 'templates/sef_url_log' ,
      'render element' => 'data' ,
    ) ,
  );
}

/**
 * Callback function for node count
 */
function itg_category_manager_nodecount() {
  $inputs = $_POST;
  $tid = check_plain($inputs['tid']);
  $count = count(taxonomy_select_nodes($tid));
  if ($count) {
    echo $count;
  }
  else {
    echo 0;
  }
}

/**
 * fetch sef url log from database
 * @param int $tid term id
 * @param int $limit how many records should be return by function
 */
function itg_category_manager_seflog($tid , $limit = NULL) {
  $itg_result = array();
  $itg_query = array();
  $itg_query = db_select('itg_sef_url' , 'itg');
  $itg_query->join('users' , 'u' , 'itg.uid = u.uid');
  $itg_query->condition('tid' , $tid)
      ->fields('itg' , array('sef_url' , 'uid' , 'changed'))
      ->fields('u' , array('name'));

  if (isset($limit) && $limit != NULL) {
    $itg_query->range(0 , $limit);
  }
  $itg_query->orderBy('changed' , 'DESC');
  $itg_result = $itg_query->execute()->fetchAll();

  return $itg_result;
}

/**
 * callback function for sef url page
 * 
 * @param int $tid
 * @return string
 */
function itg_category_manager_seflogpage($tid) {
  $data = itg_category_manager_seflog($tid);
  $output = '';
  $output .= '<table class="itg-log"><thead><tr>';
  $output .= '<th class="th1">Sr. No</th>';
  $output .= '<th class="th2">last URL</th>';
  $output .= '<th class="th3">Modified By</th>';
  $output .= '<th class="th4">Timestamp</th><tr></thead>';
  foreach ($data as $key => $value) {
    $url = isset($value->sef_url_modified) ? $value->sef_url_modified : $value->sef_url;
    $output .= '<tr>';
    $output .= '<td>' . ($key + 1) . '</td>';
    $output .= '<td>' . $url . '</td>';
    $output .= '<td>' . $value->name . '</td>';
    $output .= '<td>' . format_date($value->changed , $type = 'medium' , $format = '' , $timezone = NULL , $langcode = NULL) . '</td>';
    $output .= '</tr>';
  }
  $output .= '</table>';

  return $output;
}

/**
 * Callback function for category name autocomplete.
 * 
 * @param string $string keyword for auto suggest.
 * @return json Autocomplete callback for category manager view
 */
function itg_category_manager_autocomplete_name($string) {
  $vocabulary = taxonomy_vocabulary_machine_name_load('category_management');
  $itg_query = db_select('taxonomy_term_data' , 'itg');
  $itg_query->condition('name' , '%' . $string . '%' , 'LIKE')
      ->condition('vid' , $vocabulary->vid)
      ->fields('itg' , array('name'));
  $itg_result = $itg_query->execute();
  $result = array();
  foreach ($itg_result as $value) {
    $result[$value->name] = $value->name;
  }
  return drupal_json_output($result);
}

/**
 * Callback function for category name autocomplete.
 * 
 * @param string $string keyword for auto suggest.
 * @return json Autocomplete callback for category manager view
 */
function itg_category_manager_autocomplete_tid($string) {
  $itg_query = db_select('taxonomy_term_data' , 'itg');
  $itg_query->condition('tid' , $string . '%' , 'LIKE')
      ->condition('vid' , CATEGORY_MANAGMENT , '=')
      ->fields('itg' , array('tid'));
  $itg_result = $itg_query->execute();
  $result = array();
  foreach ($itg_result as $value) {
    $result[$value->tid] = $value->tid;
  }
  return drupal_json_output($result);
}

/**
 * Callback function for category disabling forcefully. 
 */
function itg_category_manager_disable_forcefully() {
  $current_term = check_plain($_POST['tid']);
  $is_child = taxonomy_get_tree(CATEGORY_MANAGMENT , $current_term);
  if (count($is_child) > 0) {
    drupal_set_message(t('Category has child categories can not be inactivated.') , 'error');
  } else {
    $all_parent = taxonomy_get_parents_all($current_term);
    $nodes_used_by_current_tid = taxonomy_select_nodes($current_term);
    if (count($all_parent) > 1) {
      $updated_term = $all_parent[1]->tid;
      if (count($nodes_used_by_current_tid) > 0) {
        foreach ($nodes_used_by_current_tid as $key => $value) {
          $node = node_load($value);
          $node->field_story_category['und'][0]['tid'] = $updated_term;
          node_save($node);
        }

        db_update('itg_category_manager')
            ->fields(array('status' => 0))
            ->condition('tid' , $current_term)
            ->execute();

        // Inactive category for category shift , sinking terms data for mongo
        if (function_exists('itg_category_sink_active_inactive_category')) {
          itg_category_sink_active_inactive_category($current_term , 0);
        }

        drupal_set_message(t('Category has been disabled succesfully and all contents have been mapped with parent category.') , 'status');
        if (function_exists('_delete_term_from_menu_manager')) {
          _delete_term_from_menu_manager($current_term);
        }
      }
      else {
        db_update('itg_category_manager')
            ->fields(array('status' => 0))
            ->condition('tid' , $current_term)
            ->execute();

        // Inactive category for category shift , sinking terms data for mongo
        if (function_exists('itg_category_sink_active_inactive_category')) {
          itg_category_sink_active_inactive_category($current_term , 0);
        }

        drupal_set_message(t('Category has been disabled succesfully.') , 'status');
        if (function_exists('_delete_term_from_menu_manager')) {
          _delete_term_from_menu_manager($current_term);
        }
      }
    }
    else {
      $template = itg_category_manager_template_term($current_term);
      $node_error = array_filter($nodes_used_by_current_tid);
      $template_error = array_filter($template);
      if (!empty($node_error)) {
        drupal_set_message(t('Section is used by some nodes, you can not disable this section.') , 'error');
      }
      elseif (!empty($template_error)) {
        drupal_set_message(t('Section is used by template manager, you can not disbale this section.') , 'error');
      }
      else {
        db_update('itg_category_manager')
            ->fields(array('status' => 0))
            ->condition('tid' , $current_term)
            ->execute();

        if (function_exists('itg_category_sink_active_inactive_category')) {
          itg_category_sink_active_inactive_category($current_term , 0);
        }
        drupal_set_message(t('Section has been disabled succesfully.') , 'status');
        if (function_exists('_delete_term_from_menu_manager')) {
          _delete_term_from_menu_manager($current_term);
        }
      }
    }
  }
}

/**
 * Implements 'itg_category_manager_template_term' to get information about
 * about term used in template manager.
 *
 * @param int $current_term
 *   Current active term.
 *
 * @return array
 */
function itg_category_manager_template_term($current_term) {
  $itg_result = array();
  $itg_query = db_select('itg_layout_tpl' , 'itg');
  $itg_query->fields('itg' , array('id'))
      ->condition('section_name' , $current_term);
  $itg_result = $itg_query->execute()->fetchAll();

  return $itg_result;
}

/**
 * Callback function for manually category disable
 */
function itg_category_manager_disable_manually_form() {
  $arg = arg();
// Load includes/common.inc from the hierarchical select module.
  module_load_include('inc' , 'hierarchical_select' , 'includes/common');

// Load category based in vocabulary machine name
  $voc = 'category_management'; //replace this with the taxonomy term
  $vocabulary = taxonomy_vocabulary_machine_name_load($voc);

  $form['itg_categories'] = array(
    '#title' => t('Choose categories') ,
    '#type' => 'hierarchical_select' ,
    '#config' => array(
      'module' => 'itg_category_manager' ,
      'params' => array(
        'vid' => (int) $vocabulary->vid ,
        'exclude_tid' => NULL ,
        'root_term' => NULL ,
        'entity_count_for_node_type' => NULL ,
      ) ,
    ) ,
    '#default_value' => $tids ,
    '#required' => TRUE ,
  );
  $form['tid'] = array(
    '#type' => 'hidden' ,
    '#value' => check_plain($arg[2]) ,
  );
  $form['submit'] = array(
    '#type' => 'submit' ,
    '#value' => 'Save' ,
  );
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel') , 'taxonomy/term/' . check_plain($arg[2]) . '/edit' , array('attributes' => array('class' => 'button'))) ,
    '#weight' => 20 ,
  );

  return $form;
}

/**
 * Validation function for manual disable category form.
 * 
 * @param array $form
 * @param array $form_state
 */
function itg_category_manager_disable_manually_form_validate($form , &$form_state) {
  if ($form_state['input']['itg_categories']['hierarchical_select']['selects'][0] == 'label_0') {
    form_set_error('itg_categories' , t('Please choose a category.'));
  }
}

/**
 * submit callback for manually disabled category.
 * 
 * @param array $form
 * @param array $form_state
 */
function itg_category_manager_disable_manually_form_submit($form , &$form_state) {
  $parent_category = $form_state['values']['itg_categories'];
  $current_term = check_plain($form_state['values']['tid']);
  $is_child = taxonomy_get_tree(CATEGORY_MANAGMENT , $current_term);
  if (count($is_child) > 0) {
    drupal_set_message(t('Category has child categories can not be inactivated.') , 'status');
  }
  else {
    $all_term_count = count($parent_category);
    $updated_term = $parent_category[$all_term_count - 1];
    $nodes_used_by_current_tid = taxonomy_select_nodes($current_term);
    $template = itg_category_manager_template_term($current_term);
    $template_error = array_filter($template);
    if (count($nodes_used_by_current_tid) > 0) {
      foreach ($nodes_used_by_current_tid as $key => $value) {
        $node = node_load($value);
        $node->field_story_category['und'][0]['tid'] = $updated_term;
        node_save($node);
      }
//Update enable/disable field
      db_update('itg_category_manager')
          ->fields(array('status' => 0))
          ->condition('tid' , $current_term)
          ->execute();
      // Inactive category for category shift , sinking terms data for mongo
      if (function_exists('itg_category_sink_active_inactive_category')) {
        itg_category_sink_active_inactive_category($current_term , 0);
      }

      drupal_set_message(t('Category has been disabled and contents have been mapped with selected category.') , 'status');
    }
    elseif (!empty($template_error)) {
      drupal_set_message(t('Section is used by template manager, you can not disbale this section.') , 'error');
    }
    else {
      db_update('itg_category_manager')
          ->fields(array('status' => 0))
          ->condition('tid' , $current_term)
          ->execute();
      // Inactive category for category shift , sinking terms data for mongo
      if (function_exists('itg_category_sink_active_inactive_category')) {
        itg_category_sink_active_inactive_category($current_term , 0);
      }

      drupal_set_message(t('Category has been disabled.') , 'status');
      if (function_exists('_delete_term_from_menu_manager')) {
        _delete_term_from_menu_manager($current_term);
      }
    }
  }
  drupal_goto('category-manager-listing');
}

/**
 * Custom submit callback for message.
 *
 * @param array $form
 * @param array $form_state
 */
function itg_category_manager_custom_submit($form , &$form_state) {

  if (isset($_SESSION['messages']['status'])) {
    if (arg(3) == 'category_management' && arg(4) == 'add') {
      unset($_SESSION['messages']['status']);
      $op = 'created';
      drupal_set_message(t('Category <b>@tname</b> has been @op.' , array('@tname' => $form_state['term']->name , '@op' => $op)) , 'status');
    }
    elseif (arg(1) == 'term' && is_numeric(arg(2)) && arg(3) == 'edit' && $form_state['values']['op'] != 'Delete') {
      unset($_SESSION['messages']['status']);
      $op = 'updated';
      drupal_set_message(t('Category <b>@tname</b> has been @op.' , array('@tname' => $form_state['term']->name , '@op' => $op)) , 'status');
    }
  }
  if ($form_state['values']['op'] == 'Delete') {
    drupal_add_js('jQuery(document).ready(function() {jQuery(".top-actions").hide();jQuery("h2.story-title").hide();});' , array('type' => 'inline', 'scope' => 'footer'));
    if (isset($_SESSION['messages']['status'])) {
      unset($_SESSION['messages']['status']);
      drupal_set_message(t('Category <b>@tname</b> has been deleted.' , array('@tname' => $form_state['term']->name)) , 'status');
    }
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * {@inheritdoc}. 
 */
function itg_category_manager_views_query_alter(&$view , &$query) {
  if ($view->name == 'category_manager') {
    //add category id for filter
    if (!empty($query->where[1]['conditions'])) {
      foreach ($query->where[1]['conditions'] as $tkey => $tval) {
        if ($tval['field'] == 'taxonomy_term_data_itg_category_manager.vid') {
          $query->where[1]['conditions'][$tkey]['value'][0] = CATEGORY_MANAGMENT;
        }
      }
    }
    if (isset($_GET['tid_raw']) && $_GET['tid_raw'] != "" && $_GET['name'] == "") {
      unset($query->table_queue['taxonomy_term_data_itg_category_manager__taxonomy_term_hierarchy']);
      unset($query->table_queue['taxonomy_term_data_taxonomy_term_hierarchy']);
      unset($query->tables['taxonomy_term_data_itg_category_manager__taxonomy_term_hierarchy']);
      unset($query->tables['taxonomy_term_data_taxonomy_term_hierarchy']);
      unset($query->tables['taxonomy_term_data_itg_category_manager']);
      unset($query->where[1]['conditions'][2]);
    }

    // Alter term name filter.
    if (!empty($_GET['name'])) {
      $str = $query->where[1]['conditions'][0]['value'];
      $str = str_replace('%' , '' , $str);
      $str = trim($str);
      $query->where[1]['conditions'][0]['value'] = $str;
      $query->where[1]['conditions'][0]['operator'] = '=';
      $condition_count = count($query->where[1]['conditions']);
      unset($query->where[1]['conditions'][$condition_count - 1]);
    }

    // Alter content type filter.
    if (!empty($_GET['field_cm_select_type_value']) && $_GET['field_cm_select_type_value'] != 'All') {
      $condition_count = count($query->where[1]['conditions']);
      //unset($query->where[1]['conditions'][$condition_count - 1]);
    }
  }
}

/**
 * Get template name list of layouts directory
 * @param string $tpl_dir 
 * @return array $data
 */
function get_tplname_on_category($dir_name) {
  $dir = getcwd() . '/' . drupal_get_path('theme' , FRONT_THEME_NAME) . '/templates/layouts/' . $dir_name;

  $scanned_directory = array_diff(scandir($dir , 1) , array('..' , '.'));

  $data = array("_none" => "-- Template --");

  foreach ($scanned_directory as $key => $val) {
    $tpl = substr($val , 0 , -8);
    if (!empty($tpl)) {
      $data[$tpl] = $tpl;
    }
  }

  return $data;
}

/**
 * Ajax callback for select template
 * @param array $form
 * @param array $form_state
 * @return int
 */
function itg_template_ajax_callback($form , $form_state) {
  return $form['field_cm_select_template'];
}
