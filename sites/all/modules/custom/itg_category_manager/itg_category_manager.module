<?php

/**
 * @file
 * Module file for the ITG Taxonomy Manager module.
 */

/**
 * Implements hook_init
 */
function itg_category_manager_init(){
  variable_set('taxonomy_terms_per_page_admin',20);
}

/**
 * Implements hook_help().
 */
function itg_category_manager_help($path, $arg) {
  if ($path == 'admin/help#itg_category_manager') {
    $output = '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t("The ITG Taxonomy Manage module prevents Drupal administrators from adding duplicate taxonomy vocabularies and/or terms.") . '</p>';
    $output .= '<p>' . t("The module restricts to delete taxonomy terms, if it is using by any content.") . '</p>';
    return $output;
  }
}

/**
 * Implements hook_menu().
 */
function itg_category_manager_menu() {
  
  $items = array();
  $items['admin/config/itg_category_manager'] = array(
      'title' => 'ITG Category Manager',
      'description' => 'Configuration for ITG Category Manager module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('itg_category_manager_form'),
      'access arguments' => array('administer taxonomy'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter
 * @param type $menu
 */
function itg_category_manager_menu_alter(&$menu) {
  if (isset($menu['taxonomy/term/%taxonomy_term'])) {
    $menu['taxonomy/term/%taxonomy_term']['page callback'] = 'itg_category_manager_taxonomy_view_page';
    $menu['taxonomy/term/%taxonomy_term']['access callback'] = TRUE;
    $menu['taxonomy/term/%taxonomy_term']['access arguments'] = array(2);
  }
}

/**
 * Functionality of taxonomy term view page
 * @param type $term
 * @return type
 */
function itg_category_manager_taxonomy_view_page($term){
  $voc = taxonomy_vocabulary_load($term->vid);
    switch ($voc->machine_name) {
        case 'category_management':
          $maped_with = '';
            for($i = 0; $i< count($term->field_cm_select_type[LANGUAGE_NONE]); $i++){
              if($i == (count($term->field_cm_select_type[LANGUAGE_NONE])-2)){
                $comma = ', ';
              } else {
                $comma = '';
              }
                $maped_with .= ucwords($term->field_cm_select_type[LANGUAGE_NONE][$i]['value']).$comma;
            }
            $build['content']['display_title']['#markup'] = t('<b>Display Title:</b> &nbsp; !display_title', array('!display_title' => @$term->field_cm_display_title[LANGUAGE_NONE][0]['value'])).'<br/>';
            $build['content']['redirect_url']['#markup'] = t('<b>Redirect URL:</b> &nbsp; !redirect_url', array('!redirect_url' => l(@$term->field_cm_redirection_url[LANGUAGE_NONE][0]['value'],@$term->field_cm_redirection_url[LANGUAGE_NONE][0]['value'],array('attributes' => array('target' => '_blank'))))).'<br/>';
            $build['content']['category_associated_with']['#markup'] = t('<b>Maped content type:</b> &nbsp;').$maped_with. '<br/>';
            $build['content']['hide_form_home']['#markup'] = t('<b>Hide Category form Home:</b> &nbsp; !hide_form_home', array('!hide_form_home' => @$term->field_cm_hide_cat_from_home[LANGUAGE_NONE][0]['value']? 'Yes' : 'No')).'<br/>';
            $build['content']['hide_form_search']['#markup'] = t('<b>Hide Category from Search:</b> &nbsp; !hide_form_search', array('!hide_form_search' => @$term->field_cm_hide_cat_from_search[LANGUAGE_NONE][0]['value']? 'Yes' : 'No')).'<br/>';
            $build['content']['no_follow']['#markup'] = t('<b>No Follow:</b> &nbsp; !no_follow', array('!no_follow' => @$term->field_cm_no_follow[LANGUAGE_NONE][0]['value'] ? 'Yes' : 'No')).'<br/>';
            $build['content']['sponsored_category']['#markup'] = t('<b>Sponsored Category:</b> &nbsp; !sponsored_category', array('!sponsored_category' => @$term->field_cm_sponsored_category[LANGUAGE_NONE][0]['value'] ? 'Yes' : 'No')).'<br/>';
            return $build;

        // If the term page is for an other vocabulary then use Drupal's default taxonomy page
        default:
            module_load_include('inc', 'taxonomy', 'taxonomy.pages');
            $build = taxonomy_term_page($term);
            return $build;
    }
}
/**
 * Form builder; creates and displays the ITG Category Manager
 * configuration settings form.
 */
function itg_category_manager_form($form, &$form_state) {

  // Checkboxes to choose what should be checked for dupes (vocab, terms, both)
  $form['itg_category_manager_types'] = array(
      '#type' => 'checkboxes',
      '#title' => 'Check for duplicate',
      '#default_value' => variable_get('itg_category_manager_types', array()),
      '#options' => array(
          'vocab' => t('Vocabularies'),
          'term' => t('Terms (within a vocabulary)'),
      ),
  );

  $vocabs = taxonomy_get_vocabularies();
  $options = array();
  foreach ($vocabs as $v) {
    $options[$v->vid] = $v->name;
  }
  $form['itg_category_manager_vocabularies'] = array(
      '#type' => 'checkboxes',
      '#title' => 'Limit term check on specific vocabularies',
      '#default_value' => variable_get('itg_category_manager_vocabularies', array()),
      '#options' => $options,
      '#description' => t('If no option is selected, all terms will be checked for duplicates.'),
  );

  // Checkbox to indicate whether the check should be case-sensitive
  $form['itg_category_manager_case_sensitive'] = array(
      '#type' => 'checkbox',
      '#title' => "Case-sensitive comparison (e.g. 'Foo' and 'foo' are not duplicates if checked).",
      '#default_value' => variable_get('itg_category_manager_case_sensitive'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_term().
 */
function itg_category_manager_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  
  global $base_url;
  
  // Delete category functionality.
  if (isset($form_state['triggering_element']['#value']) && $form_state['triggering_element']['#value'] == t('Delete')) {
    $tid = $form_state['term']->tid;
    $used_by_content = taxonomy_select_nodes($tid);
    if (count($used_by_content) > 0) {
      form_set_error('name', t('Sorry! you cannot delete this category.<br/>'));
      $node_url = $base_url . '/node/';
      echo '<div class = "contents-using-cat"> This category is mapped with following contents, kindly click below and update the category for each:<br/>';
      $i = 0;
      $count_used = count($used_by_content)-1;
      foreach ($used_by_content as $key => $value) {
        $node = $node = node_load($value);
        echo '<a target="_blank" href="' . $node_url . $value . '/edit">' . $node->title . '</a>';
        if($i != $count_used){
            echo ', ';
        }
        $i++;
      }
       echo '</div>';
      drupal_add_js('(function($) {$(document).ready(function() {
       $("#taxonomy-form-term #edit-submit").hide();
       $("#edit-description").html($("body").find(".contents-using-cat").html());
       $(".contents-using-cat").hide();
      });}(jQuery));', 'inline');
    }
  } else {
    $types = @variable_get('itg_category_manager_types', array());
    if ($types['term']) {
      $vids = array_filter(variable_get('itg_category_manager_vocabularies', array()));
      if (count($vids) == 0 || in_array($form['vid']['#value'], $vids)) {
        $form['#validate'][] = 'itg_category_manager_term_validate';
      }
    }
    
    if ($form['#term']['vocabulary_machine_name'] == 'category_management') {
      $form['#action'] = '?destination=admin/structure/taxonomy/category_management'; //Redirect to term listing page, after term has been added successfully.
      $form['name']['#title'] = t('Category Title');
      $form['name']['#description'] = '<p>' . t('Please enter category title.') . '</p>';
      unset($form['description']);

      //Hide settings title levels
      unset($form['field_cm_hide_cat_from_home'][LANGUAGE_NONE]['#title']);
      unset($form['field_cm_hide_cat_from_search'][LANGUAGE_NONE]['#title']);
      unset($form['field_cm_no_follow'][LANGUAGE_NONE]['#title']);
      unset($form['field_cm_sponsored_category'][LANGUAGE_NONE]['#title']);
      
      //Relation treatment
      $form['relations']['#title'] = 'Section and Categories';
      $form['relations']['#weight'] = 3;
      $form['relations']['parent']['#title'] = t('Select Section');
      $form['relations']['parent']['#description'] = '<p>' . t('Please select &#60;root&#62; for section.') . '</p>';
      //$form['relations']['#collapsible'] = 0;
      unset($form['relations']['weight']);
              
      //Non-editable fields in edit mode
      if(arg(3) == 'edit'){
        $form['name']['#attributes'] = array('readonly' => 'readonly');
        $form['field_cm_redirection_url']['#disabled'] = TRUE;
        $form['field_cm_select_type']['#disabled'] = TRUE;
        $form['field_cm_hide_cat_from_home']['#disabled'] = TRUE;
        $form['field_cm_hide_cat_from_search']['#disabled'] = TRUE;
        $form['field_cm_no_follow']['#disabled'] = TRUE;
        $form['field_cm_sponsored_category']['#disabled'] = TRUE;
        $form['relations']['#attributes'] = array('disabled' => TRUE);
      }
      
      //Form after build  
      $form['#after_build'][] = 'itg_category_manager_add_form_after_build';
    }
  }
}

/**
 * Implements _form_validate() for taxonomy_form_term().
 */
function itg_category_manager_term_validate($form, &$form_state) {
  $term = $form_state['values']['name'];
  $vid = $form_state['values']['vid'];
  $tid = $form_state['values']['tid'];
  $cat_arr = $form_state['input']['parent']['hierarchical_select']['selects'];
  $num_cat_selected = count($cat_arr);
  
  if ($form_state['triggering_element']['#value'] != 'Delete') {
    if(($cat_arr[0] == 'label_0')){
      form_set_error('parent', t('Section field is required.'));
    }
    if ($num_cat_selected > 4) {
      form_set_error('parent', t('Sorry! You can not create more than 4 levels of categories within a section.'));
    }
    //Check for duplicate category
    if (itg_category_manager_is_dupe_term($term, $vid, $tid)) {
      $tid_existing_term = itg_category_manager_get_term_from_name($term, $vid);
      $parent_tid = taxonomy_get_parents_all($tid_existing_term);
      $tid_arr_key = $num_cat_selected-2;
      if ($cat_arr[$tid_arr_key] == $parent_tid[1]->tid) {
        form_set_error('name', t('Category name already exists.'));
      }
    }
  }
}

/**
 * Category add form after build
 * @param type $form
 * @param type $form_state
 * @return int
 */
function itg_category_manager_add_form_after_build($form, &$form_state){
 // print_r($form); exit;

//Add cancel link to add and edit form of category add form exit;
  $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), '/admin/structure/taxonomy/category_management', array('attributes' => array('class' => 'button'))),
      '#weight' => 20,
  );
    
  //Unset metatag description
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter() for taxonomy_form_vocabulary().
 */
function itg_category_manager_form_taxonomy_form_vocabulary_alter(&$form, &$form_state, $form_id) {
  // Do not add the validator if Delete was hit.
  if (isset($form_state['triggering_element']['#value']) && $form_state['triggering_element']['#value'] == t('Delete')) {
    return;
  }

  // Get the types of taxonomy objects we will validate against
  $types = variable_get('itg_category_manager_types', array());

  // Add the validator if we're checking vocabularies for dupes.
  if ($types['vocab']) {
    $form['#validate'][] = 'itg_category_manager_vocabulary_validate';
  }
}

/**
 * Implements _form_validate() for taxonomy_form_vocabulary().
 */
function itg_category_manager_vocabulary_validate_vocabulary_validate($form, &$form_state) {
  $vocab = $form_state['values']['name'];
  $vid = isset($form_state['values']['vid']) ? $form_state['values']['vid'] : 0;
  if (itg_category_manager_is_dupe_vocabulary($vocab, $vid)) {
    form_set_error('name', t('The vocabulary %term already exists.', array('%term' => check_plain($vocab))));
  }
}

/**
 * Checks whether a term is a duplicate, based on the module preferences.
 */
function itg_category_manager_is_dupe_term($term, $vid, $tid = 0) {

  // Clean up the term to check
  $term = trim($term);

  // Get matching terms in the given vocabulary (case insensitive)
  $query = new EntityFieldQuery;
  $query = $query
          ->entityCondition('entity_type', 'taxonomy_term')
          ->propertyCondition('name', $term)
          ->propertyCondition('vid', $vid);
  if ($tid) {  // Ignore an existing term of the same name; this is needed on updates to an existing term.
    $query = $query->entityCondition('entity_id', $tid, '<>');
  }
  $result = $query->execute();

  // No results, term is unique
  if (is_array($result) && !$result) {
    return FALSE;
  }

  // We found a result
  if (isset($result['taxonomy_term'])) {

    // Do a case sensitive comparison if requested, but if not,
    // just return that we found a match
    if (variable_get('itg_category_manager_case_sensitive')) {

      $is_dupe = FALSE;

      // For each found result...
      foreach ($result['taxonomy_term'] as $found_term) {
        // Load the term data and see if it's a dupe
        $term_data = taxonomy_term_load($found_term->tid);
        if (!strcmp($term_data->name, $term)) {
          $is_dupe = TRUE;
          break;
        }
      }

      return $is_dupe;
    } else { // Not case sensitive
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Checks whether a vocabulary is a duplicate, based on the module preferences.
 */
function itg_category_manager_is_dupe_vocabulary($vocab, $vid = 0) {

  // Clean up the vocabulary to check
  $vocab = trim($vocab);

  // Get all vocabularies
  $vocabs = taxonomy_get_vocabularies();

  // Look for a vocabulary with the same name based on case-sensitivity preferences
  $case_sensitive = variable_get('itg_category_manager_case_sensitive');
  foreach ($vocabs as $found_vocab) {

    // Skip the check if the current found vocabulary is the same one we're comparing.
    // This will happen on updates to an existing vocabulary.
    if ($vid == $found_vocab->vid) {
      continue;
    }

    // Clean up the stored vocabulary. This helps for systems that
    // don't trim their vocabulary names before entry.
    $found_vocab_name = trim($found_vocab->name);

    if (($case_sensitive && !strcmp($found_vocab_name, $vocab)) || (!$case_sensitive && !strcasecmp($found_vocab_name, $vocab))) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Get term id using term name and vocabulary id($vid)
 * @param type $term_name
 * @param type $vid
 * @return boolean
 */
function itg_category_manager_get_term_from_name($term_name, $vid) {
  $tree = taxonomy_get_tree($vid);
  foreach ($tree as $term) {
    if (strtolower($term->name) == strtolower($term_name)) {
      return $term->tid;
    }
  }
  return FALSE;
}

/**
 * Implement hook_entity_update
 * @param type $entity
 * @param type $type
 * @return boolean
 */
 function itg_category_manager_entity_update($entity, $type) {
  if ($type == 'taxonomy_term' && $entity->vocabulary_machine_name == 'category_management') {
    $mail_content = itg_category_manager_get_mail_content($entity);
     $params = array(
           'body' => $mail_content,
           'subject' => 'India Today | Category Updated!',
           'headers'=>'simple',
     );
    $to = "haripalrao@gmail.com"; // SEO team mail id
    $mail = drupal_mail('itg_category_manager_seo_team', 'send_mail_to_seo', $to, language_default(), $params, 'India Today <indiatoday@indiatoday.com>', TRUE);
    if ($mail['result']) {
      return TRUE;
    } else {
      $error_msg = 'Failed to send the email!';
      watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
      return FALSE;
    }
  }
}

/**
 * Send mail to SEO team, when category has been updated by india today team
 * @global type $base_url
 * @param type $key
 * @param type $message
 * @param type $entity
 */
 function itg_category_manager_seo_team_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_mail_to_seo':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
  }
}

/**
 * Get Mail content
 * @global type $base_url
 * @param type $entity
 * @return string
 */
function itg_category_manager_get_mail_content($entity) {
  global $base_url;
  $message = 'Hi SEO Team,'."\r\n".'Category has been modified. Details are given below:'."\r\n";
  $display_name = $entity->field_cm_display_title[LANGUAGE_NONE][0]['value'];
  $display_name_txt = '<b> Display Title: </b>' . $display_name ."\r\n";
  $term_alias_url = $base_url . '/' . $entity->path['alias'];
  $url = '<b>Category URL: </b><a href="' . $term_alias_url . '" target="_blank">' . $term_alias_url . '</a>';
  $message .= $display_name_txt . $url . "\r\n".'Thanks,'."\r\n".'India Today Team';
  return $message;
}