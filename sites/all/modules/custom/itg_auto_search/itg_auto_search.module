<?php

/**
 * @file
 * The ITG Auto Search Widget
 *
 * Contains functionality for Auto Search Widget
 *
 */

/**
 * {@inheritdoc}
 * hook_menu()
 * */
function itg_auto_search_menu() {
  $items = array();
  $items['admin/import-auto'] = array(//this creates a URL that will call this form at "examples/form-example"
    'title' => 'Import Auto', //page title
    'description' => 'Import Auto',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('import_auto_form'), //put the name of the form here
    'access callback' => TRUE
  );
  return $items;
}

/**
 * This function is used to import csv for auto.
 * {@inheritdoc}
 */
function import_auto_form($form, &$form_state) {
  $form['#attributes'] = array(
    'enctype' => 'multipart/form-data'
  );
  $form['csvfile'] = array(
    '#title' => t('CSV File'),
    '#type' => 'file',
    '#description' => 'Import CSV file',
  );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  $form['#validate'] = array(
    'import_auto_csv_validate'
  );
  return $form;
}

/**
 * This function validate uploaded CSV file
 * @param $form
 * @param $form_state
 *  
 */
function import_auto_csv_validate($form, &$form_state) {
  $validators = array(
    'file_validate_extensions' => array('csv'),
  );

  if ($file = file_save_upload('csvfile', $validators, "public://", FILE_EXISTS_REPLACE)) {
    $form_state['values']['csvupload'] = $file->destination;
  }
  else {
    form_set_error('csvImporter', t('Unable to copy upload file to !dest', array('!dest' => $destination)));
  }
}

/**
 * This function import CSV data to database
 * @param $form
 * @param $form_state
 *  
 */
function import_auto_form_submit($form, &$form_state) {
  $handle = fopen(drupal_realpath($form_state['values']['csvupload']), 'r');
  $values = array();
  while ($line = fgetcsv($handle)) {
    if ($line[1] == 'price_range') {
      continue;
    }
    $values[] = array(
      "price_range" => $line[1],
      "brand" => $line[2],
      "vehicle" => $line[3],
      "delhi_price" => $line[4],
      "mumbai_price" => $line[5],
      "kolkata_price" => $line[6],
      "bangalore_price" => $line[7],
      "Chennai_price" => $line[8],
      "bodytype" => $line[9],
      "EngineDisplacement" => $line[10],
      "cylinders" => $line[11],
      "power" => $line[12],
      "torque" => $line[13],
      "gears" => $line[14],
      "geartype" => $line[15],
      "fueltype" => $line[16],
      "runningkm" => $line[17],
      "topspeed" => $line[18],
      "ARAI_Claimed" => $line[19],
      "Tested" => $line[20],
      "AC" => $line[21],
      "Climate_Control" => $line[22],
      "Adjustable_Steering_rake" => $line[23],
      "Adjustable_Steering_Reach" => $line[24],
      "Steering_mounted_controls" => $line[25],
      "Cruise_Control" => $line[26],
      "Centrallock" => $line[27],
      "Remotelock" => $line[28],
      "Keyless" => $line[29],
      "Power_windows" => $line[30],
      "Driver_seat_adjust" => $line[31],
      "Parking_sensor" => $line[32],
      "Parking_camera" => $line[33],
      "Split_foalding" => $line[34],
      "Multi_function" => $line[35],
      "Door_mirror" => $line[36],
      "MP3_CD_Player" => $line[37],
      "USB" => $line[38],
      "AUXIn" => $line[39],
      "MDI" => $line[40],
      "Bluetooth" => $line[41],
      "Foglamps" => $line[42],
      "Rear_AC_vents" => $line[43],
      "Rear_defogger" => $line[44],
      "Wash_wipe" => $line[45],
      "Airbags" => $line[46],
      "ESP" => $line[47],
      "ABS" => $line[48],
      "image" => $line[49],
      "description" => (empty($line[50]) ? "NULL" : $line[50]),
    );
  }
  $fields = array_keys($values[0]);
  $query = db_insert('itg_autotoday')->fields($fields);
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
  drupal_set_message(t('Successfully import :' . count($values)) . ' item(s)', 'status');
}

/**
 * hook_block_info()
 * {@inheritdoc}
 */
function itg_auto_search_block_info() {
  $blocks = array();
  $blocks['auto_master_compare_widget'] = array(
    'info' => t('Widget: Auto Master Compare'),
  );
  return $blocks;
}

/**
 * hook_block_view()
 * {@inheritdoc}
 */
function itg_auto_search_block_view($delta = '') {
  global $user;
  $block = array();
  switch ($delta) {
    // Auto Master Compare widget case
    case 'auto_master_compare_widget':
      $info['widget'] = 'auto_master_compare_widget';
      $query_string = $_GET['compare'];
      if (!empty($query_string)) {
        $auto_model = explode('vs', $query_string);
        $first_query = str_replace('-', ' ', $auto_model[0]);
        $auto1 = get_data_from_autoindia(array('vehicle' => $first_query));
        $auto2 = NULL;
        if (isset($auto_model[1])) {
          $second_query = str_replace('-', ' ', $auto_model[1]);
          $auto2 = get_data_from_autoindia(array('vehicle' => $second_query));
          foreach ($auto2[0] as $key => $value) {
            if (is_null($value) || $value == 'NULL') {
              $auto2[0]->$key = "&nbsp;";
            }
          }
        }
        foreach ($auto1[0] as $key => $value) {
          if (empty($value) || $value == 'NULL') {
            $auto1[0]->$key = "&nbsp;";
          }
        }
        $data = array(
          'first' => $auto1,
          'second' => $auto2
        );

        $block['content'] = theme("auto_compare_theme", array("data" => $data));
      }
      else {
        $block['content'] = '';
      }
      break;
  }
  return $block;
}

/**
 * hook_theme()
 * {@inheritdoc}
 */
function itg_auto_search_theme() {
  
  $themes = array(
    'auto_compare_theme' => array(
      'template' => 'templates/auto-compare',
    ),
  );
  return $themes;
}

/**
 * This function display auto compare form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function auto_master_form($form, $form_state) {
  $auto_brand = db_select('itg_autotoday', 'at')
          ->fields('at', array('brand'))
          ->groupBy('at.brand')
          ->orderBy('at.brand', 'ASC')
          ->execute()->fetchAll();

  $brand_op = array('0' => t('(Select Brand)'));
  foreach ($auto_brand as $key => $value) {
    $brand_op[$value->brand] = $value->brand;
  }
  $query_string = $_GET['compare'];
  $auto_model_default = '';
  $auto_price_range_default = '';
  $brand_default = '';
  $auto_model_op = NULL;
  $auto_price_range_op = NULL;

  $auto_model_2_default = '';
  $auto_price_range_2_default = '';
  $brand_2_default = '';
  $auto_model_2_op = NULL;
  $auto_price_range_2_op = NULL;
  if (!empty($query_string)) {
    $auto_model = explode('vs', $query_string);
    $first_query = str_replace('-', ' ', $auto_model[0]);
    // for left hand side form
    $auto1 = get_data_from_autoindia(array('vehicle' => $first_query));
    $auto_model_default = $auto1[0]->vehicle;
    $auto_price_range_default = $auto1[0]->price_range;
    $auto_price_range_op = array($auto1[0]->price_range);
    $brand_default = $auto1[0]->brand;
    $auto_models = get_data_from_autoindia(array('brand' => $brand_default), array('vehicle'));
    foreach ($auto_models as $key => $value) {
      $auto_model_op[$value->vehicle] = $value->vehicle;
    }

    if (isset($auto_model[1])) {
      $second_query = str_replace('-', ' ', $auto_model[1]);
      $auto2 = get_data_from_autoindia(array('vehicle' => $second_query));
      $auto_model_2_default = $auto2[0]->vehicle;
      $auto_price_range_2_default = $auto2[0]->price_range;
      $auto_price_range_2_op = array($auto2[0]->price_range);
      $brand_2_default = $auto2[0]->brand;
      $auto_models_2 = get_data_from_autoindia(array('brand' => $brand_2_default), array('vehicle'));
      foreach ($auto_models_2 as $key => $value) {
        $auto_model_2_op[$value->vehicle] = $value->vehicle;
      }
    }
  }
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'itg_auto_search') . '/js/itg_auto_search.js',
  );
  $form['auto_brand'] = array(
    '#type' => 'select',
    '#title' => 'Brand',
    '#options' => $brand_op,
    '#default_value' => $brand_default,
    '#ajax' => array(
      'callback' => 'get_auto_model_dropdown',
      'wrapper' => 'auto_model_field_first',
    ),
  );
  $form['auto_model'] = array(
    '#type' => 'select',
    '#title' => 'Model',
    '#prefix' => '<div id="auto_model_field_first">',
    '#suffix' => '</div>',
    '#validated' => TRUE,
    '#default_value' => $auto_model_default,
    '#options' => array(t('(Select Model)')),
    '#ajax' => array(
      'callback' => 'get_auto_price_range_dropdown',
      'wrapper' => 'auto_price_range_field_first',
    ),
  );
  if ($auto_model_op != NULL) {
    $form['auto_model']['#options'] = $auto_model_op;
  }
  $form['auto_price_range'] = array(
    '#type' => 'select',
    '#title' => 'Price Range',
    '#validated' => TRUE,
    '#options' => array('0' => t('(Select Price Range)')),
    '#prefix' => '<div id="auto_price_range_field_first">',
    '#suffix' => '</div>',
    '#default_value' => $auto_price_range_default,
  );
  if ($auto_price_range_op != NULL) {
    $form['auto_price_range']['#options'] = $auto_price_range_op;
  }
  $form['auto_brand_2'] = array(
    '#type' => 'select',
    '#title' => 'Brand',
    '#options' => $brand_op,
    '#validated' => TRUE,
    '#default_value' => $brand_2_default,
    '#ajax' => array(
      'callback' => 'get_auto_model_2_dropdown',
      'wrapper' => 'auto_model_2_field_first',
    ),
  );
  $form['auto_model_2'] = array(
    '#type' => 'select',
    '#title' => 'Model',
    '#options' => array(t('(Select Model)')),
    '#validated' => TRUE,
    '#default_value' => $auto_model_2_default,
    '#prefix' => '<div id="auto_model_2_field_first">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'get_auto_price_range_2_dropdown',
      'wrapper' => 'auto_price_range_2_field_first',
    ),
  );
  if ($auto_model_2_op != NULL) {
    $form['auto_model_2']['#options'] = $auto_model_2_op;
  }
  $form['auto_price_range_2'] = array(
    '#type' => 'select',
    '#title' => 'Price Range',
    '#validated' => TRUE,
    '#prefix' => '<div id="auto_price_range_2_field_first">',
    '#suffix' => '</div>',
    '#default_value' => $auto_price_range_default,
    '#options' => array('0' => t('(Select Price Range)')),
  );
  if ($auto_price_range_2_op != NULL) {
    $form['auto_price_range_2']['#options'] = $auto_price_range_2_op;
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('SUBMIT'),
  );
  return $form;
}

/**
 * This function use as ajax callback for Auto range
 * @param array $form
 * @param array $form_state
 * @return array
 */
function get_auto_price_range_dropdown($form, &$form_state) {
  $auto_model = $form_state['values']['auto_model'];
  $auto_brand = $form_state['values']['auto_brand'];
  $auto_price_range = get_data_from_autoindia(array('vehicle' => $auto_model, 'brand' => $auto_brand), array('price_range', 'vehicle'));
  $auto_price_range_op = array('0' => t('(Select Price Range)'));
  foreach ($auto_price_range as $key => $value) {
    $auto_price_range_op[trim($value->price_range)] = trim($value->price_range);
  }
  $form['auto_price_range']['#options'] = $auto_price_range_op;
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#auto_price_range_field_first", render($form['auto_price_range']))
    )
  );
}

/**
 * This function use as ajax callback for Model
 * @param array $form
 * @param array $form_state
 * @return array
 */
function get_auto_model_dropdown($form, &$form_state) {
  $auto_brand = $form_state['values']['auto_brand'];
  $auto_models = get_data_from_autoindia(array('brand' => $auto_brand), array('brand', 'vehicle'));
  $auto_models_op = array('0' => t('(Select Model)'));
  $auto_price_range_op = array('0' => t('(Select Price Range)'));
  foreach ($auto_models as $key => $value) {
    $auto_models_op[trim($value->vehicle)] = trim($value->vehicle);
  }
  $form['auto_model']['#options'] = $auto_models_op;
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#auto_model_field_first", render($form['auto_model'])),
      ajax_command_replace("#auto_price_range_field_first", render($form['auto_price_range']))
    )
  );
}

/**
 * This function use as ajax callback for Auto range (Right side form)
 * @param array $form
 * @param array $form_state
 * @return array
 */
function get_auto_price_range_2_dropdown($form, &$form_state) {
  $auto_model = $form_state['values']['auto_model_2'];
  $auto_brand = $form_state['values']['auto_brand_2'];
  $auto_price_range = get_data_from_autoindia(array('vehicle' => $auto_model, 'brand' => $auto_brand), array('price_range', 'vehicle'));
  $auto_price_range_op = array(t('(Select Price Range)'));
  foreach ($auto_price_range as $key => $value) {
    $auto_price_range_op[trim($value->price_range)] = trim($value->price_range);
  }
  $form['auto_price_range_2']['#options'] = $auto_price_range_op;
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#auto_price_range_2_field_first", render($form['auto_price_range_2']))
    )
  );
}

/**
 * This function use as ajax callback for Model (Right side form)
 * @param array $form
 * @param array $form_state
 * @return array
 */
function get_auto_model_2_dropdown($form, &$form_state) {
  $auto_brand = $form_state['values']['auto_brand_2'];
  $auto_models = get_data_from_autoindia(array('brand' => $auto_brand), array('brand', 'vehicle'));
  $auto_models_op = array(t('(Select Model)'));
  $auto_price_range_op = array(t('(Select Price Range)'));
  foreach ($auto_models as $key => $value) {
    $auto_models_op[trim($value->vehicle)] = trim($value->vehicle);
  }
  $form['auto_model_2']['#options'] = $auto_models_op;
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#auto_model_2_field_first", render($form['auto_model_2'])),
      ajax_command_replace("#auto_price_range_2_field_first", render($form['auto_price_range_2']))
    )
  );
}

/**
 * This function used to get data from itg_autotoday table
 * @param array $condition_data
 * @param array $fields
 * @return array
 * 
 * $condition_data : array contains fields for condition
 * @$fields : array contains fields for select fields
 */
function get_data_from_autoindia($condition_data = array(), $fields = array()) {
  $auto_brand = db_select('itg_autotoday', 'at');
  if (count($fields) < 0) {
    $auto_brand->fields('at');
  }
  else {
    $auto_brand->fields('at', $fields);
  }

  $auto_brand->orderBy('at.brand', 'ASC');
  foreach ($condition_data as $key => $value) {
    $auto_brand->condition(trim($key), '%' . db_like(trim($value)) . '%', 'LIKE');
  }
  $return = $auto_brand->execute()->fetchAll();
  return $return;
}

/**
 * This function use to generate compare slug and redirect to generated url.
 * @param array $form
 * @param array $form_state
 * 
 */
function auto_master_form_submit($form, &$form_state) {
  $url = '';
  if (!empty($form_state['values']['auto_model'])) {
    $url .= '' . get_slug($form_state['values']['auto_model']);
  }

  if (!empty($form_state['values']['auto_model_2'])) {
    if (empty($form_state['values']['auto_model'])) {
      $url .= '' . get_slug($form_state['values']['auto_model_2']);
    }
    else {
      $url .= '-vs-' . get_slug($form_state['values']['auto_model_2']);
    }
  }

  $form_state['redirect'] = array(
    'auto',
    array('query' => array(
        'compare' => $url)
    ),
  );
}

/**
 * This function use to generate slug from string.
 * @param string $str
 * @param string $delimiter
 * @return string generated slug
 * 
 */
function get_slug($str, $delimiter = '-') {
  $slug = strtolower(trim(preg_replace('/[\s-]+/', $delimiter, preg_replace('/[^A-Za-z0-9-()]+/', $delimiter, preg_replace('/[&]/', 'and', preg_replace('/[\']/', '', iconv('UTF-8', 'ASCII//TRANSLIT', $str))))), $delimiter));
  return $slug;
}
