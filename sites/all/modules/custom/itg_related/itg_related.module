<?php

/**
 * @file
 * The ITG Related Content module.
 *
 * Contains functionality for Related Content.
 *
 */

function itg_related_menu() {
  $items = array();

  $items['ajaxcallback'] = array(
    'title' => 'Test form',
    'page callback' => 'my_custom_ajax_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['reporter/%'] = array(
    'title' => 'Reporter Details',
    'page callback' => 'itg_reporter_details',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['tag-list/%/autocomplete'] = array(
    'page callback' => 'itg_get_tag',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function itg_related_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'story_node_form') {
    $type = $form['type']['#value'];
    //$form['field_basic_email']['#suffix'] = '<a class="colorbox-load" href="http://localhost/itgcms/related-content?width=900&height=700&iframe=true&type=' . $type . '">Add Related content</a>';
    $form['ntype'] = array(
      '#title' => t('Ntype'),
      '#type' => 'hidden',
      '#id' => 'ntype',
      '#description' => t(''),
      '#value' => $type,
    );
    //$form['#after_build'][] = 'itg_related_after_build';
  }


  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'related_content_new') {

    //$_GET['q'];

//    $tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = FALSE);
//    //$op = array("All" => "Select Category");
//    foreach ($tax as $key => $val) {
//      $op[$val->name] = $val->name;
//    }
//
//    $form['tm_vid_4_names']['#type'] = 'select';
//    $form['tm_vid_4_names']['#options'] = $op;
//    $form['tm_vid_4_names']['#size'] = 5;
//    $form['tm_vid_4_names']['#multiple'] = TRUE;
    $form['keyword']['#attributes'] = array('placeholder' => array(t('Ex: Title / Kicker / Tag name')));

    // $bundle_name = array("All" => "Select type", 'Story' => 'Story', 'Blog' => 'Blog');
    $bundle_name = array('Story' => 'Story', 'Blog' => 'Blog', 'photogallery' => 'photogallery', 'Videogallery' => 'videogallery');
    $form['bundle_name']['#type'] = 'select';
    $form['bundle_name']['#options'] = $bundle_name;
    $form['bundle_name']['#size'] = 5;
    $form['bundle_name']['#multiple'] = TRUE;

    //'iibckc' => 'Dev'
    $hash = array('bw8w8n' => 'Ankush-localhost', '5fyeg7' => 'Dev Server', '2e1u4m' => 'QA Server');
    $form['hash']['#type'] = 'select';
    $form['hash']['#options'] = $hash;
    $form['hash']['#size'] = 5;
    $form['hash']['#multiple'] = TRUE;


    $related_status = array('1' => 'Published', 'Unpublished' => 'Unpublished');
    $form['bs_status']['#type'] = 'select';
    $form['bs_status']['#options'] = $related_status;
    $form['bs_status']['#size'] = 5;
    $form['bs_status']['#multiple'] = TRUE;
    
//    $form['select-value'] = array(
//    '#type' => 'textfield', //you can find a list of available types in the form api
//    '#title' => t(''),
//    '#size' => 20,
//    '#id'   => 'select-value',
//    '#prefix' => '<div id="selval">',
//    '#suffix' => '</div>',
//    );
  
  }
}

/**
 * After build for related form.
 * @param type $form
 * @param type $form_state
 */
//function itg_related_after_build($form, &$form_state) {
//
//  global $user, $base_url;
//  
//  $settings = array();
//  $settings['base_url'] = $base_url;
//  $settings['uid'] = $user->uid;
//  $settings['node_type'] = $form['type']['#value'];
//  drupal_add_js(array('itg_related' => array('settings' => $settings)), array('type' => 'setting'));
//  drupal_add_js(drupal_get_path('module', 'itg_related') . '/js/itg_related.js', array('weight' => 1));
//  return $form;
//}

function my_custom_ajax_callback() {

  $data = array('######1', '######2');

  $combined_data = array('label' => $_POST['title'], 'bundle_name' => trim($_POST['bundle_name']), 'im_vid_4' => $_POST['section_id'], 'hash' => $_POST['hash']);
  $output = serialize($combined_data);
  $check_title = check_search_title(trim($_POST['search_name']));

  if ($check_title) {

    $result = update_search_title(trim($_POST['search_name']), $_POST['dta'], $_POST['uid'], $_POST['ntype']);
  }
  else {
    $result = db_insert('itg_related_search')
        ->fields(array('search_title', 'search_path', 'ntype', 'uid', 'created', 'changed'))
        ->values(array($_POST['search_name'], $_POST['dta'], $_POST['ntype'], $_POST['uid'], REQUEST_TIME, REQUEST_TIME))
        ->execute();
  }


  if ($result !== FALSE) {

    return $data;
  }
}

/**
 * Implement hook_views_pre_render
 * @param Array $view
 */
function itg_related_views_pre_render(&$view) {

  //Add "Create Breaking news" on listing page of Breaking news
  if ($view->name == "related_content_new") {
    global $user, $base_url;

    $settings = array();
    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;
    drupal_add_js(array('itg_related' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_related') . '/js/itg_related.js', array('weight' => 1));
   // drupal_add_js(drupal_get_path('module', 'itg_related') . '/js/jquery.cookie.js', array('weight' => 2));

    foreach ($view->result as $related_result) {
      //dpm($related_result->bs_status);
      if ($related_result->bs_status == '1') {
        $related_result->bs_status = 'Published';
        
        }
        
      $splittedsite=explode("/",$related_result->site);
      $related_result->site = strtoupper($splittedsite[3]);
    }
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * @param Array $form
 * @param Array $form_state
 */
function itg_related_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
//p($form);
  //Get the Form Id
  if ($form["#id"] == 'views-exposed-form-related-content-new-page') {

    $form['sm_vid_Tags']['#autocomplete_path'] = 'tag-list/1/autocomplete';
    $form['tm_vid_4_names']['#autocomplete_path'] = 'tag-list/4/autocomplete';
  }
}

/**
 * Get serach title using title
 * 
 * @param varchar $title
 *  
 * @return string
 *   current search title
 */
function check_search_title($title) {
  $query = db_select('itg_related_search', 'fn')
      ->fields('fn', array('search_title'))
      ->condition('fn.search_title', $title, '=');

  return $query->execute()->fetchField();
}

/**
 * update search title if exist
 * 
 * @param varchar $title,$combined_data
 * @param int $uid 
 */
function update_search_title($title, $combined_data, $uid, $type) {
  db_update('itg_related_search') // Table name no longer needs {}
      ->fields(array(
        'search_title' => $title,
        'search_path' => $combined_data,
        'ntype' => $type,
        'changed' => REQUEST_TIME,
        'uid' => $uid,
      ))
      ->condition('search_title', $title, '=')
      ->execute();
}

function itg_related_apachesolr_query_alter(DrupalSolrQueryInterface $query) {
  //p($_GET);
  //p($query->getSolrParams());
  $i = 1;
  foreach ($_GET as $key => $val) {

    if ($i > 1) {
      $and = ' AND ';
    }
    $remove_key = array('related-content','page','width', 'height', 'iframe', 'type', 'items_per_page', 'keyword');
    //if (!empty($val) && $val != 'related-content' && $key != 'page' && $key != 'width' && $key != 'height' && $key != 'iframe' && $key != 'type' && $key != 'items_per_page') {
    if (!empty($val) &&  $val != 'related-content' && !in_array($key, $remove_key)) {
      //print $val;
      if (is_array($val)) {
        $val_str = implode(' OR ', $val);
      }
      else {
        if ($key == 'label' || $key == 'sm_field_story_kicker_text') {
          $val_str = trim($val) . '*';
          $val_str = str_replace(" ", "* OR ", $val_str);
        }
        else if ($key == 'sm_vid_Tags') {
//          $pattern = '/[:,]/';
//          $pattern_split = preg_split($pattern, $val);
//          $filtered = array_filter($pattern_split, 'is_numeric');
//          $filtered_comma = implode(',', $filtered);
        $get_value = preg_split('/[\s,]/', $val);
        $get_value = array_filter($get_value);
        $get_comma_value = implode(',', $get_value);
        $val_str = str_replace(",", "* OR ", $get_comma_value);
        //$val_str = str_replace('"', "", $val_str);
        //$val_str = str_replace("'", "", $val_str);
        $val_str = $val_str.'*';
        }
        else if ($key == 'tm_vid_4_names') {

        $get_value = preg_split('/[\s,]/', $val);
        $get_value = array_filter($get_value);
        $get_comma_value = implode(',', $get_value);
        $val_str = str_replace(",", " OR ", $get_comma_value);
        
        }
        else {
          $val_str = $val;
        }
      }

      $str .= $and . $key . ':(' . $val_str . ')';

      $i++;
    }
  }
  if (!empty($str)) {
    $search_array = $query->getSolrParams();
    $query->replaceParam("fq", '(' . $str . ')');
  }

  // p($query->getSolrParams());
  //$query->addParam("fq", '(hash:bw8w8n OR access__all:0)');
  //$query->addParam("fq", '(hash:bw8w8n OR hash:iibckc)');
}

/**
 * Implementation of hook_views_query_alter
 * @param array reference $view
 * @param array reference $query
 */
function itg_related_views_query_alter(&$view, &$query) {

  if (isset($view->name) && $view->name == 'related_content_new') {

    foreach ($view->exposed_raw_input['hash'] as $k => $v) {
      if ($v == 0) {
        unset($view->exposed_raw_input['hash'][$k]);
      }
    }
  }
}

/**
 * Implement itg_reporter_details
 * @param int $val
 */

function itg_reporter_details($val) {
  $query = db_select('field_data_field_reporter_twitter_handle', 'th')
      ->fields('th', array('entity_id'))
      ->condition('th.field_reporter_twitter_handle_value', $val, '=');

  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Implement itg_related_save_search
 */
function itg_related_save_search() {
  global $user;
  $save_search_result = db_select('itg_related_search', 'itgs')
      ->fields('itgs')
      ->condition('uid', $user->uid, '=')
      ->orderBy('changed', 'DESC')//ORDER BY created
      ->range(0, 5)
      ->execute();

  // print '<br/>';
  print '<h3 class=rel-hed>My Saved Search</h3>';
  print '<ul>';
  while ($save_search_result_info = $save_search_result->fetchAssoc()) {

    $final_link = str_replace("&width=900&height=700&iframe=true", "", $save_search_result_info['search_path']);

    print '<li><a href="' . $final_link . '&width=900&height=700&iframe=true" class="colorbox-load">' . $save_search_result_info['search_title'] . '</a></li>';
  }

  print '</ul>';
}

/**
 * Implements hook_block_info().
 */
function itg_related_block_info() {
  $blocks['related_form_block'] = array(
    'info' => t('Related Form Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
//  
//  
//  $blocks['related_form_reorder_block'] = array(
//    'info' => t('Related Form Reorder Block'),
//    'cache' => DRUPAL_CACHE_GLOBAL,
//  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * @param type $delta
 */
function itg_related_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'related_form_block':
      $block['content'] = theme('related_form_display_block', array('data' => $data));
      break;
//    case 'related_form_reorder_block':
//      $block['content'] = theme('related_form_reorder_block', array('data' => $data));
//      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * @param type $existing
 * @param type $type
 * @param type $theme
 * @param type $path
 */
function itg_related_theme($existing, $type, $theme, $path) {
  $themes = array(
    'related_form_display_block' => array(
      'template' => 'related-formtemplate',
      'path' => drupal_get_path('module', 'itg_related') . '/templates',
      'variables' => array('data' => NULL),
    ),
    
//    'related_form_reorder_block' => array(
//      'template' => 'related-formreorder',
//      'path' => drupal_get_path('module', 'itg_related') . '/templates',
//      'variables' => array('data' => NULL),
//    ),
  );

  return $themes;
}

/**
 * Implements itg_get_tag()
 * @param string $title
 */

function itg_get_tag($title) {

  if (strlen(trim($title)) > 0) {
    $vocab_id = arg(1);
    $prefill_tag = explode(',', $title);
    // Fetch last
    $last_string = trim(array_pop($prefill_tag));
    $options = array();
    $title = strtolower(trim($title));
    $query = db_select('taxonomy_term_data', 'tn');
    $query->fields('tn', array('name', 'tid'));
    $query->condition('name', '%' . $last_string . '%', 'LIKE');
    $query->condition('vid', $vocab_id, '=');
    $query->range(0, 20);

    $result = $query->execute();
    $prefix = count($prefill_tag) ? implode(', ', $prefill_tag) . ', ' : '';
    while ($record = $result->fetchAssoc()) {
      //$options[$prefix . $record['name'] . ':' . $record['tid']] = $record['name'];
      $options[$prefix . $record['name']] = $record['name'];
    }
    drupal_json_output($options);
  }
}
