<?php

/**
 * @file
 * The ITG Image Croping module.
 *
 * Contains functionality related to Image Croping and tagging.
 *
 */

/**
 * Implements hook_menu().
 * {@inheritdoc}
 */
function itg_image_croping_menu() {

    $items = array();
    $items['getimagetocroper'] = array(
        'page callback' => 'itg_image_croping_ajax_make_ajax', // load the croper according to size!.
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );

    $items['change_image_aspect_ratio'] = array(
        'page callback' => 'itg_image_croping_change_image_aspect_ratio', // load the croper according to aspect ratio!.
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );

    $items['savecropedimage'] = array(
        'page callback' => 'itg_image_croping_crop_image', // save croped image by form the image dataurl (base64).
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );

    $items['imagetotag'] = array(
        'page callback' => 'itg_image_croping_getimagetotag', // make image to tagging
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );

    $items['imagetagedit'] = array(
        'page callback' => 'itg_image_croping_imagetagedit', // make image tags edit
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );


    $items['savetags'] = array(
        'page callback' => 'itg_image_croping_save_tags', // save the tags on images.
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );

    $items['edittags'] = array(
        'page callback' => 'itg_image_croping_edit_tags', // save the tags on images.
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );
    $items['gettaglist'] = array(
        'page callback' => 'itg_image_croping_get_image_tags', // use for get the all tags on image.
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );

    $items['removetags'] = array(
        'page callback' => 'itg_image_croping_remove_image_tag', // se for remove the tags on image.
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );

    $items['gettags'] = array(
        'page callback' => 'itg_image_croping_get_image_tag', // se for get the tags by tagid on image.
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );

    return $items;
}

/**
 * This function use for load the croper according to size!
 */
function itg_image_croping_change_image_aspect_ratio() {


    $image_id = $_POST['imageId'];
    $field_name = $_POST['field_id'];
    if ($_POST['original_height'] && $_POST['origninal_width']) {
        $image_height = trim($_POST['original_height']);
        $image_width = trim($_POST['origninal_width']);
    }
    $aspect_ratio = trim($_POST['aspect_ratio']);

    $file = file_load($image_id);
    if (empty($file)) {
        drupal_set_message(t('This image is not valid!'));
    }
    $imagedata = base64_encode(file_get_contents($file->uri));
    $drupal_form = drupal_render(drupal_get_form('itg_image_croping_crop_form', $field_name, $imagedata, $image_height, $image_width, $aspect_ratio));

    drupal_add_js(drupal_get_path('module', 'itg_image_croping') . '/js/itg_crop.js', array('
  type' => 'file', 'scope' => 'content'));
    $aspect_ratio_data = itg_image_croping_data_aspect_ratio($aspect_ratio, $image_height, $image_width);
    print theme('image_repository', array('data' => $file,
        'field_name' => $field_name,
        'image_height' => $aspect_ratio_data['height'],
        'image_width' => $aspect_ratio_data['width'],
        'form' => $drupal_form));
}

/**
 * This function use for get new height and width by aspect ratio
 * 
 */
function itg_image_croping_data_aspect_ratio($aspect_ratio, $image_height, $image_width) {
    $ratioarray = explode(':', $aspect_ratio);
    $ratio = $ratioarray[0] / $ratioarray[1];
    $new_height = $image_width / $ratio;
    $new_width = $image_height * $ratio;
    $returndata['height'] = $new_height;
    $returndata['width'] = $new_width;
    return $returndata;
}

/**
 * This function use for load the croper according to size!
 */
function itg_image_croping_ajax_make_ajax() {
    $image_height = 500;  //set the inital height of croper
    $image_width = 750;    //set the inital width of croper 

    $image_id = $_POST['imageId'];
    $field_name = $_POST['field_id'];
    if ($_POST['img_height'] && $_POST['img_width']) {
        $image_height = trim($_POST['img_height']);
        $image_width = trim($_POST['img_width']);
    }
    $file = file_load($image_id);
    if (empty($file)) {
        drupal_set_message(t('This image is not valid!'));
    }
    $imagedata = base64_encode(file_get_contents($file->uri));
    $drupal_form = drupal_render(drupal_get_form('itg_image_croping_crop_form', $field_name, $imagedata, $image_height, $image_width));

    drupal_add_js(drupal_get_path('module', 'itg_image_croping') . '/js/itg_crop.js', array('
  type' => 'file', 'scope' => 'content'));

    print theme('image_repository', array('data' => $file,
        'field_name' => $field_name,
        'image_height' => $image_height,
        'image_width' => $image_width,
        'form' => $drupal_form));
}

/**
 * This function use for make image to tagging
 *
 */
function itg_image_croping_getimagetotag() {
    $image_id = $_POST['fid'];
    $file = file_load($image_id);
    print theme('image_tagging', array('data' => $file,
        'field_name' => $_POST['field_name']
    ));
}

/**
 * This function use for make image tags edit or append
 * 
 */
function itg_image_croping_imagetagedit() {
    $image_id = $_POST['fid'];
    $file = file_load($image_id);
    print theme('image_taggingedit', array('data' => $file,
        'field_name' => $_POST['field_name']
    ));
}

/**
 * This function use for remove the tags on image
 * used in ajax request and print use for return responce to ajax request
 */
function itg_image_croping_remove_image_tag() {

    $tag_id = $_POST['tag_id'];
    $data = db_delete('image_tags')
            ->condition('id', $tag_id, '=')
            ->execute();
    print $data;
    exit();
}

/**
 * This function use for get the tags on image
 * used in ajax request and print use for return responce to ajax request
 */
function itg_image_croping_get_image_tag() {

    $tag_id = $_POST['tag_id'];
    $data = db_select('image_tags', 'c')
                    ->fields('c')
                    ->condition('id', $tag_id, '=')
                    ->execute()->fetchAssoc();
    print json_encode($data);
    exit();
}

/**
 * This function use for get the all tags on image
 */
function itg_image_croping_get_image_tags() {

    $image_id = $_POST['fid'];
    $data['boxes'] = '';
    $data['lists'] = '';
    $query = db_select('image_tags', 'tags')
            ->fields('tags')
            ->condition('image_id', $image_id, '=');
    $result = $query->execute();

    while ($record = $result->fetchAssoc()) {
        $data['boxes'] .= '<div class="square-tag" style="left:' . $record['x_coordinate'] . 'px;top:' . $record['y_coordinate'] . 'px;" id="view_' . $record['id'] . '"><i class="fa fa-tag"></i></div><div class="tagview" style="left:' . $record['x_coordinate'] . 'px;top:' . $record['y_coordinate'] . 'px;" id="view_' . $record['id'] . '"><div class="square"></div><div id="tag_' . $record['id'] . '" class="person" style="left:' . $record['x_coordinate'] . 'px;top:' . $record['y_coordinate'] . 'px;">' . $record['tag_title'] . '</div><a  class="edit">Edit</a><a  class="remove">X</a></div>';
        $data['lists'] .= ' ';
    }
    echo json_encode($data);
    exit();
}

/**
 * This function use for save the tags on images
 * @return $return type Json
 */
function itg_image_croping_save_tags() {

    $fid = $_POST['pic_id'];
    $tag = $_POST['name'];
    $tag_url = $_POST['url'];
    $x_coordinate = $_POST['pic_x'];
    $y_coordinate = $_POST['pic_y'];
    $type = $_POST['type'];
    $result = db_select('image_tags', 'tags')
                    ->fields('tags')
                    ->condition('image_id', $fid, '=')
                    ->condition('x_coordinate', $x_coordinate, '=')
                    ->condition('y_coordinate', $y_coordinate, '=')
                    ->execute()->fetchAssoc();
    if (empty($result)) {

        $inserted_data = db_insert('image_tags')->fields(array(
                    'image_id' => $fid,
                    'tag_title' => $tag,
                    'tag_url' => $tag_url,
                    'x_coordinate' => $x_coordinate,
                    'y_coordinate' => $y_coordinate,
                ))->execute();
    }
    if ($inserted_data) {

        $return = array('status' => '1', 'id' => $inserted_data);
        print json_encode($return);
    } else {
        $return = array('status' => '0', 'id' => '');
        print json_encode($return);
    }
    exit();
}

/**
 * This function use for save the tags on images
 * @return $return type Json
 */
function itg_image_croping_edit_tags() {

    $fid = $_POST['tagid'];
    $tag = $_POST['name'];
    $tag_url = $_POST['url'];
//    $x_coordinate = $_POST['pic_x'];
//    $y_coordinate = $_POST['pic_y'];
    $type = $_POST['type'];


    $inserted_data = db_update('image_tags')->fields(array(
                'tag_title' => $tag,
                'tag_url' => $tag_url,
//                'x_coordinate' => $x_coordinate,
//                'y_coordinate' => $y_coordinate,
            ))->condition('id', $fid, '=')
            ->execute();
    if ($inserted_data) {

        $return = array('status' => '1', 'id' => $inserted_data);
        print json_encode($return);
    } else {
        $return = array('status' => '0', 'id' => '');
        print json_encode($return);
    }
    exit();
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_image_croping_theme($existing, $type, $theme, $path) {

    return array(
        'image_repository' => array(
            'template' => 'templates/image_croper',
        ),
        'image_tagging' => array(
            'template' => 'templates/image_tagger',
        ),
        'image_taggingedit' => array(
            'template' => 'templates/image_taggeredit',
        ),
    );
}

/**
 * This function use for save croped image by form the image dataurl (base64)!
 */
function itg_image_croping_crop_image() {

    $image_data_url = $_POST['image_data'];
    $image_name = $_POST['field_name'];
    if ($image_name == "") {
        $image_name = time();
    }
    $image_data_url = str_replace('data:image/png;base64,', '', $image_data_url);

    $imagedata = base64_decode($image_data_url);
    if (!file_exists(file_default_scheme() . '://crop_image')) {
        mkdir(file_default_scheme() . '://crop_image', 0777, TRUE);
    }
    $file = file_save_data($imagedata, file_default_scheme() . '://crop_image/' . $image_name . '.png');
    file_usage_add($file, 'itg_image_repository', 'file', $file->fid);

    (array) $file;
    print json_encode($file);
    exit();
}

/**
 * Implements hook_form().
 * {@inheritdoc}
 */
function itg_image_croping_crop_form($form, $form_state, $field_name, $imagedata, $image_height, $image_width, $aspectratio = null) {

    $orignal_ratio = number_format($image_width / $image_height, 2);
    $orignal_ratio = $orignal_ratio . ':1';
    $form['aspect ratio'] = array(
        '#title' => t('Aspect ratio'),
        '#type' => 'select',
        '#description' => 'Select aspect ratio.',
        '#default_value' => $aspectratio,
        '#options' => array($orignal_ratio => $orignal_ratio, '1:1' => '1:1', '2:1' => '2:1', '4:3' => '4:3', '16:9' => '16:9'),
        '#attributes' => array('id' => 'select-aspect-ratio'),
    );


    $form['cropit_image_zoom_input'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="image-editor">
        <div class="cropit-preview"></div>
        <div class="cropit-image-zoom">
        <input type="range" class="cropit-image-zoom-input">
        </div>',
    );

    $form['image_data'] = array(
        '#type' => 'hidden',
        '#value' => '',
        '#attributes' => array('class' => 'hidden-image-data', 'id' => 'data_first_image', 'name' => 'image-data'),
    );

    $form['data_field_name'] = array(
        '#type' => 'hidden',
        '#value' => ($field_name) ? $field_name : '',
        '#attributes' => array('id' => 'data_field_name', 'name' => 'data_field_name'),
    );
    $form['image_original_hight'] = array(
        '#type' => 'hidden',
        '#value' => ($image_height) ? $image_height : '',
        '#attributes' => array('id' => 'image_original_hight', 'name' => 'image_original_hight'),
    );
    $form['image_original_width'] = array(
        '#type' => 'hidden',
        '#value' => ($image_width) ? $image_width : '',
        '#attributes' => array('id' => 'image_original_width', 'name' => 'image_original_width'),
    );
    $form['data_field_name'] = array(
        '#type' => 'hidden',
        '#value' => ($field_name) ? $field_name : '',
        '#attributes' => array('id' => 'data_field_name', 'name' => 'data_field_name'),
    );
    $form['image_enc_data'] = array(
        '#type' => 'hidden',
        '#value' => 'data:image/png;base64,' . $imagedata,
        '#attributes' => array('id' => 'image-enc-data', 'name' => 'image_enc_data'),
    );


    return $form;
}
