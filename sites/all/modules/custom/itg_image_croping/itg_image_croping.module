<?php

/**
 * @file
 * The ITG Image Repository module.
 *
 * Contains functionality related to Image Repository.
 *
 */

/**
 * Implements hook_block_info().
 */
/**
* Implements hook_menu().
*/


function itg_image_croping_menu() {

$items=array();
  $items['getimagetocroper'] = array(
    'page callback' => 'itg_image_croping_ajax_make_ajax', // Render HTML.
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
 
  );

  $items['savecropedimage'] = array(
    'page callback' => 'itg_image_croping_crop_image', // Render HTML.
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
 
  );
  return $items;
}


/**
* This function use for load the croper according to size!
*/
function itg_image_croping_ajax_make_ajax() {
     //print_r($drupal_form);die;
    $image_height=350;  //set the inital height of croper
    $image_width=500;    //set the inital width of croper 

    $image_id=$_POST['imageId'];
    $field_name=$_POST['field_id'];
    $image_height=trim($_POST['img_height']);
    $image_width=trim($_POST['img_width']);
    $file = file_load($image_id); 
    if ( empty ( $file ) ) {
      drupal_set_message(t('This image is not valid!'));
    }
    $imagedata= base64_encode(file_get_contents($file->uri));
       $drupal_form=drupal_render(drupal_get_form('itg_image_croping_crop_form', $field_name, $imagedata));

 
  return theme('image_repository', 
      array('data' => $file, 
      'field_name' => $field_name,
      'image_height' => $image_height, 
      'image_width' => $image_width, 
      'form' => $drupal_form));
}

/**
* Implements hook_theme().
*/

function itg_image_croping_theme($existing, $type, $theme, $path) {

    return array(
        'image_repository' => array(
        'template' => 'templates/image_croper',
        ),
    );
}

/**
* This function use for save croped image by form the image dataurl (base64)!
*/
function itg_image_croping_crop_image() {

    $image_data_url=$_POST['image_data'];
   // print_r( $image_data_url);die;
    $image_name=$_POST['field_name'];

    $image_data_url = str_replace('data:image/png;base64,', '', $image_data_url);

    $imagedata = base64_decode($image_data_url);
   if (!file_exists(file_default_scheme() . '://crop_image')) {
    mkdir(file_default_scheme() . '://crop_image', 0777, true);
}
    $file = file_save_data($imagedata, file_default_scheme() . '://crop_image/' . $image_name . '.png');
   
    (array)$file;
    print json_encode($file);exit();
  
}


/**
*/

function itg_image_croping_crop_form($form, $form_state, $field_name, $imagedata) {
  
     $form['cropit_image_zoom_input'] = array(
      '#type' => 'markup',
       '#markup' => '<div class="image-editor">
        <div class="cropit-preview"></div>
        <div class="cropit-image-zoom">
        <input type="range" class="cropit-image-zoom-input">
        </div>',
    );

   $form['image_data'] = array(
      '#type' => 'hidden',
      '#value' => '',
     '#attributes' => array('class' => 'hidden-image-data' , 'id' => 'data_first_image' , 'name' => 'image-data'),
    );

      $form['data_field_name'] = array(
      '#type' => 'hidden',
      '#value' =>  ($field_name)?$field_name:'',
     '#attributes' => array('id' => 'data_field_name' , 'name' => 'data_field_name'),
    );
      $form['image_enc_data'] = array(
      '#type' => 'hidden',
      '#value' =>  'data:image/png;base64,' . $imagedata ,
     '#attributes' => array('id' => 'image-enc-data' , 'name' => 'image_enc_data'),
    );

  
   return $form;

}