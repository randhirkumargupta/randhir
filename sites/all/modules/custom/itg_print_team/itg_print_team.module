<?php

/**
 * @file
 * The ITG Print Team Integration module.
 *
 */

/**
 * Implementation of hook_permission
 * @return array
 */
function itg_print_team_permission() {
  return array(
    'submit idea for story' => array(
      'title' => t('Submit Ideas For Stories'),
    )
  );
}

/**
 * Implementation of hook_menu
 * @return string
 */
function itg_print_team_menu() {
  $items['submit-idea'] = array(
    'title' => 'Submit Idea',
    'page callback' => 'itg_print_team_submit_idea',
    'access callback' => 'user_access',
    'access arguments' => array('submit idea for story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/print_team_submit_idea.inc',
  );
  $items['idea-status/%/%'] = array(
    'page callback' => 'itg_print_team_idea_status',
    'access callback' => 'user_access',
    'access arguments' => array('submit idea for story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/print_team_submit_idea.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function itg_print_team_theme($existing, $type, $theme, $path) {
  $themes = array(
    'print_team_integration_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'print-team-integration-node-form',
      'path' => drupal_get_path('module', 'itg_print_team') . '/templates',
      'render element' => 'form',
    ),
  );

  return $themes;
}

/* * *************************Form Related hooks******************************** */

/**
 * Implement hook_form_alter
 * @param Array $form
 * @param Array $form_state
 * @param String $form_id
 */
function itg_print_team_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'print_team_integration_node_form') {

    //Change page title
    drupal_set_title(t('Submit Your Idea'));

    //Add cancel button
    $destination = 'manage-print-team';
    $form['title']['#description'] = '<p>' . t('Please enter idea headline .') . '</p>';

    //Display Rule to user
    if ($form['#node']->nid && $form['#node']->field_pti_words_limit[LANGUAGE_NONE][0]['value']) {
      $form['brief_idea_limit'] = array(
        '#type' => 'item',
        '#markup' => '<div class="ticket-avaible-text">Idea Brief Limit: <strong>' . $form['#node']->field_pti_words_limit[LANGUAGE_NONE][0]['value'] . '</strong> words</div><div>Last Day of submission: <strong>' . date('d/m/Y', strtotime($form['#node']->field_survey_end_date[LANGUAGE_NONE][0]['value'])) . '</strong></div>',
        '#weight' => -1,
      );
    }


    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
      '#weight' => 21,
      '#value' => t('Cancel'),
    );

    //Unset meta tags
    unset($form['#metatags']);
    unset($form['actions']['preview']);
    unset($form['field_pti_idea_status']['und']['#options']['_none']);

    //If role is anchor, editor and co-ordinator, display fields to set rule and change status
    $idea_review_flag = FALSE;
    foreach ($user->roles as $roles) {
      if ($roles == 'Site Admin' || $roles == 'Co-ordinator' || $roles == 'Section Editor/Anchor' || $roles == 'Editor') {
        $idea_review_flag = TRUE;
      }
    }

    //Check for approval status
    if ($form['#node']->field_pti_idea_status[LANGUAGE_NONE][0]['value'] !== 'Approved') {

      $form['field_story_category']['#access'] = FALSE;
      $form['field_quiz_answer_image']['#access'] = FALSE;
      $form['field_quiz_answer_video']['#access'] = FALSE;
      $form['field_pti_idea_status']['#access'] = FALSE;
      $form['field_pti_words_limit']['#access'] = FALSE;
      $form['field_survey_end_date']['#access'] = FALSE;
    }
    else {
      if (!$idea_review_flag) {
        $form['field_pti_idea_status']['#access'] = FALSE;
        $form['field_pti_words_limit']['#access'] = FALSE;
        $form['field_survey_end_date']['#access'] = FALSE;
      }
    }

    $form['field_quiz_answer_image'][LANGUAGE_NONE]['#file_upload_title'] = 'Upload Image';
    $form['field_quiz_answer_video'][LANGUAGE_NONE]['#file_upload_title'] = 'Upload Video';

    //Submit Handler
    $form['actions']['submit']['#submit'][] = 'itg_print_team_submit_handler_for_redirect';

    //Call function after build
    $form['#after_build'][] = 'itg_print_team_form_after_build';
  }

  if ($form_id == 'views_form_manage_print_team_page') {
    $form['pti_issue'] = array(
      '#type' => 'date_popup',
      '#title' => t('Issue'),
      '#date_format' => 'd/m/Y',
      '#attributes' => array(
       // 'readonly' => 'readonly'
      ),
      '#weight' => 98,
    );
    $form['pti_magazine'] = array(
      '#type' => 'select',
      '#title' => 'Magazine',
      '#options' => itg_print_team_get_magazine_title(),
      '#default_value' => '_none',
      '#weight' => 99,
      '#attributes' => array('class' => array('custom-issue')),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#weight' => 100,
    );
    $form['#validate'][] = 'itg_print_team_association_validate';
    $form['submit']['#submit'][] = 'itg_print_team_association_submit';
  }
}

/**
 * Custom submit callback for alter message after operation.
 */
function itg_print_team_submit_handler_for_redirect($form, &$form_state) {
  global $user;

  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }

  // Unset destination
  unset($_GET['destination']);

  //Chck for edit and add node
  if (arg(2) == 'edit') {

    //Set redirection URL according to user role
    $idea_review_flag_user = FALSE;
    foreach ($user->roles as $roles) {
      if ($roles == 'Site Admin' || $roles == 'Co-ordinator' || $roles == 'Section Editor/Anchor' || $roles == 'Editor') {
        $idea_review_flag_user = TRUE;
      }
    }
    if ($idea_review_flag_user) {
      $form_state['redirect'] = 'manage-print-team';
    }
    else {
      $form_state['redirect'] = 'submit-idea';
    }
    $op = 'updated successfully';
  }
  else {
    $op = 'submit successfully';
    $form_state['redirect'] = 'submit-idea';
  }

  drupal_set_message(t('Your idea <strong>@ideatitle</strong> has been @operation.', array('@ideatitle' => $form_state['node']->title, '@operation' => $op)));
}

/**
 * After build function for print team
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_print_team_form_after_build($form, &$form_state) {
  global $user, $base_url;

  //Extract type of node
  if (arg(0) == 'node') {
    if (arg(1) == 'add') {
      $type = arg(2);
      $nid = '';
    }
    else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }

  //Array used in itg_print_team.js
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;

  drupal_add_js(array('itg_print_team' => array('settings' => $settings)), array('type' => 'setting'));

  //Add JS for itg_print_team
  drupal_add_js(drupal_get_path('module', 'itg_print_team') . '/js/itg_print_team.js', array('weight' => 1));

  //Unset SEF URL field
  $form['path']['#access'] = FALSE;

  //Unset metatag description
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);

  return $form;
}

/* * *****************************View Related hooks**************************** */

/**
 * Implement hook_views_pre_render
 * @param object $view
 */
function itg_print_team_views_pre_render(&$view) {

  //Add "Submit Idea" button on listing page of ideas
  if ($view->name == "manage_print_team") {
    $header_content_print_team = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_print_team .= '<a href="./submit-idea">Submit Idea</a>';
    $view->attachment_before = $header_content_print_team;
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_print_team_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#id'] == 'views-exposed-form-manage-print-team-page') {

    //Call function autocomplete to show matching titles
    $form['title']['#autocomplete_path'] = 'content-title-list/print_team_integration/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Idea Headline'));
  }
}

/**
 * Implementation of hook_node_insert
 * @param Object $node
 */
function itg_print_team_node_insert($node) {
  switch ($node->type) {
    case 'print_team_integration':
      module_load_include('inc', 'itg_print_team', 'includes/print_team_mail');

      break;

    default:
      break;
  }
}

/**
 * Implementation of hook_node_update
 * @param Object $node
 */
function itg_print_team_node_update($node) {
  switch ($node->type) {
    case 'print_team_integration':
      if ($node->field_pti_idea_status[LANGUAGE_NONE][0]['value'] == 'Needs Modification') {
        $node->field_pti_idea_status[LANGUAGE_NONE][0]['value'] = 'Not Decided';
        field_attach_update('node', $node);
      }
      break;

    default:
      break;
  }
}

/**
 * Implementation of hook_node_validate
 * @param object $node
 * @param array $form
 * @param array $form_state
 */
function itg_print_team_node_validate($node, $form, &$form_state) {

  if ($node->type == 'print_team_integration') {
    if ($node->field_pti_words_limit[LANGUAGE_NONE][0]['value'] && ($node->field_pti_idea_status[LANGUAGE_NONE][0]['value'] == 'approved')) {
      if (strlen(strip_tags($node->body[LANGUAGE_NONE][0]['value'])) > $node->field_pti_words_limit[LANGUAGE_NONE][0]['value']) {
        form_set_error('body', t('Limit exceeded! Your idea brief limit is: @idealimit characters.', array('@idealimit' => $node->field_pti_words_limit[LANGUAGE_NONE][0]['value'])));
      }

      //Validation for time
      $current_date = time();
      $timeline = strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value'] . ' + 23 hours');
      if ($current_date > $timeline) {
        form_set_error('field_survey_end_date', t('Sorry you can not submit your idea now. You have exceeded your last date of idea submission.'));
      }
    }
  }
}

/**
 * Implement hook_mail
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_print_team_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_print_team':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Submit idea actions functionality
 * @param int $nid
 * @return string
 */
function itg_print_team_idea_actions($nid) {

  $node = node_load($nid);
  $status = $node->field_pti_idea_status[LANGUAGE_NONE][0]['value'];

  $accept = l('Approve', 'idea-status/approved/' . $nid);
  $reject = l('Reject', 'idea-status/rejected/' . $nid);
  $need_modification = l('Needs Modification', 'idea-status/needs_modification/' . $nid);

  switch ($status) {
    case 'Approved':
      return '<span style="padding-left:30px">-</span>';
      break;

    case 'Rejected':
      return '<span style="padding-left:30px">-</span>';
      break;

    case 'Needs Modification':
      return $accept . ' | ' . $reject;
      break;

    default:
      return $accept . ' | ' . $reject . ' | ' . $need_modification;
      break;
  }
}

/**
 * Custom validation for associate story with magazine and issue
 * @param array $form
 * @param array $form_state
 */
function itg_print_team_association_validate($form, &$form_state) {
  $views_bulk_operations = $form_state['values']['views_bulk_operations'];
  $issue = check_plain($form_state['values']['pti_issue']);
  $magazine = check_plain($form_state['values']['pti_magazine']);

  if (is_array($views_bulk_operations) && count($views_bulk_operations) > 0) {
    if (!max($views_bulk_operations) > 0) {
      form_set_error('views_bulk_operations', t('Please select atleast one checkbox to associate with magazine and issue.'));
    }
  }

  if ($magazine == '_none') {
    form_set_error('magazine', t('Please select Magazine.'));
  }

  if (empty($issue)) {
    form_set_error('issue', t('Please enter issue.'));
  }
  else {
    $issue_date = $issue . ' 00:00:00';
    $check_issue = itg_print_team_check_issue($issue_date);
    if (empty($check_issue)) {
      form_set_error('issue', t('Selected issue does not exist.'));
    }
  }
}

/**
 * Submit handler for association of story with magazine and issue
 * @param array $form
 * @param array $form_state
 */
function itg_print_team_association_submit($form, &$form_state) {
  $views_bulk_operations = $form_state['values']['views_bulk_operations'];
  $issue = check_plain($form_state['values']['pti_issue']);
  $magazine = check_plain($form_state['values']['pti_magazine']);
  if (is_array($views_bulk_operations) && count($views_bulk_operations) > 0) {
    foreach ($views_bulk_operations as $source_id) {
      if (!empty($source_id)) {
        itg_print_team_association_save($source_id, $issue, $magazine);
      }
    }
  }
}

/**
 * Callback for association of story with magazine and issue
 * @global array $user
 * @param int $nid
 * @param string $issue
 * @param string $magazine
 */
function itg_print_team_association_save($nid, $issue, $magazine) {
  global $user;
  $node = node_load($nid);
  $headline = $node->title;
  $body = $node->body[LANGUAGE_NONE][0]['value'];
  $node = new stdClass();
  $node->title = trim($headline);
  $node->type = "story";
  node_object_prepare($node);

  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;
  $node->field_story_long_head_line[LANGUAGE_NONE][0]['value'] = trim($headline) ? trim($headline) : 'NA';
  $node->body[$node->language][0]['value'] = $body ? $body : 'NA';
  $node->field_story_issue_date[LANGUAGE_NONE][0]['value'] = $issue ? $issue : date('Y-m-d h:i:s', time());
  //Issue, magazine and supplement
  $node->field_story_magazine_story_issue[LANGUAGE_NONE][0]['value'] = 'magazine_issue_story';
  if ($magazine) {
    $node->field_story_select_magazine[LANGUAGE_NONE][0]['target_id'] = $magazine;
  }
  $publish_date = date('Y-m-d', time());
  $exp_date = strtotime('+90 years', strtotime($publish_date));
  $exp_date = date('Y-m-d', $exp_date);

  $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'] = $publish_date;
  $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] = $exp_date;
  $node->revision = 1;
  $node->log = 'State Changed to published';
  $node->workbench_moderation_state_new = workbench_moderation_state_published();
  $node = node_submit($node); // Prepare node for saving
  node_save($node); // Finally save node
}

/**
 * Get magazine title to associate with story
 * @return array $options
 */
function itg_print_team_get_magazine_title() {
  $query = db_select('node', 'node');
  $query->fields('node', array('nid', 'title'));
  $query->condition('node.status', 1, '=');
  $query->condition('node.type', 'magazine', '=');
  $result = $query->execute();
  $record = $result->fetchAll();
  $options['_none'] = '- Select a value -';
  foreach ($record as $val) {
    $options[$val->nid] = $val->title;
  }
  return $options;
}

/**
 * Get check issues from our database.
 * @param string $issue_date
 * @return int $entity_id
 */
function itg_print_team_check_issue($issue_date) {
  return $entity_id = db_select('node', 'n')
          ->fields('n', array('nid'))
          ->condition('type', 'issue', '=')
          ->condition('title', $issue_date, '=')
          ->range(0, 1)->execute()->rowCount();
}
