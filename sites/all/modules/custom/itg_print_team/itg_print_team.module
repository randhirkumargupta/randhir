<?php

/**
 * @file
 * The ITG Print Team Integration module.
 *
 */
// Load print_team_story_xml.inc from the itg_print_team module.
module_load_include('inc', 'itg_print_team', 'includes/print_team_story_xml');

/**
 * Implementation of hook_permission
 * @return array
 */
function itg_print_team_permission() {
  return array(
    'submit idea for story' => array(
      'title' => t('Submit Ideas For Stories'),
    )
  );
}

/**
 * Implementation of hook_menu
 * @return string
 */
function itg_print_team_menu() {
  $items['submit-idea'] = array(
    'title' => 'Submit Idea',
    'page callback' => 'itg_print_team_submit_idea',
    'access callback' => 'user_access',
    'access arguments' => array('submit idea for story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/print_team_submit_idea.inc',
  );
  $items['idea-status/%/%'] = array(
    'page callback' => 'itg_print_team_idea_status',
    'access callback' => 'user_access',
    'access arguments' => array('submit idea for story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/print_team_submit_idea.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 * 
 * {@inheritdoc}
 */
function itg_print_team_theme($existing, $type, $theme, $path) {
  $themes = array(
    'itg_print_team_idea_approval_mail' => array(
      'variables' => array('node' => NULL),
      'template' => 'templates/print-team-idea-approval-mail',
    ),
    'itg_print_team_idea_status_mail' => array(
      'variables' => array('node' => NULL),
      'template' => 'templates/print-team-idea-status-mail',
    )
  );

  return $themes;
}

/* * *************************Form Related hooks******************************** */

/**
 * Implement hook_form_alter
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_print_team_form_alter(&$form, &$form_state, $form_id) {
  global $user, $base_url;
  
  switch ($form_id) {

    case 'print_team_integration_node_form':

      //Change page title
      drupal_set_title(t('Submit Your Idea'));

      //Add cancel button
      $destination = 'manage-print-team';
      $form['title']['#description'] = '<p>' . t('Please enter idea headline .') . '</p>';

      //Display Rule to user
      if ($form['#node']->nid && $form['#node']->field_pti_words_limit[LANGUAGE_NONE][0]['value']) {
        $form['brief_idea_limit'] = array(
          '#type' => 'item',
          '#markup' => '<div class="ticket-avaible-text">Idea Brief Limit: <strong>' . $form['#node']->field_pti_words_limit[LANGUAGE_NONE][0]['value'] . '</strong> words</div><div>Last Day of submission: <strong>' . date('d/m/Y', strtotime($form['#node']->field_survey_end_date[LANGUAGE_NONE][0]['value'])) . '</strong></div>',
          '#weight' => -1,
        );
      }


      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
        '#weight' => 21,
        '#value' => t('Cancel'),
      );

      //Hide issue and magazine form edit page
      $form['field_pti_issue']['#access'] = FALSE;
      $form['field_pti_magazine']['#access'] = FALSE;
      /*
      $issue_options = itg_print_team_issue_options();
      $form['field_pti_issue'] = array(
          '#type' => 'select',
          '#title' => t('Issue'),
          '#options' => $issue_options,
          '#default_value' => $form['field_pti_issue'][LANGUAGE_NONE]['#entity']->field_pti_issue[LANGUAGE_NONE][0]['target_id'] ? $form['field_pti_issue'][LANGUAGE_NONE]['#entity']->field_pti_issue[LANGUAGE_NONE][0]['target_id'] : '',
          '#weight' => 10,
      ); */
      
      //Unset meta tags
      unset($form['#metatags']);
      unset($form['actions']['preview']);
      unset($form['field_pti_idea_status']['und']['#options']['_none']);

      //If role is anchor, editor and co-ordinator, display fields to set rule and change status
      $idea_review_flag = FALSE;
      foreach ($user->roles as $roles) {
        if ($roles == 'Site Admin' || $roles == 'Co-ordinator' || $roles == 'Section Editor/Anchor' || $roles == 'Editor') {
          $idea_review_flag = TRUE;
        }
      }

      //Enable/Disable fields according to satus and role
      if ($form['#node']->nid) {
        if ($idea_review_flag) {
          if ($form['#node']->field_pti_idea_status[LANGUAGE_NONE][0]['value'] !== 'Approved') {
            $form['field_story_category']['#access'] = FALSE;
            unset($form['field_pti_print_media']);
            $form['field_pti_issue']['#access'] = FALSE;
            $form['field_pti_magazine']['#access'] = FALSE;
          }
        }
        else {
          if ($form['#node']->field_pti_idea_status[LANGUAGE_NONE][0]['value'] !== 'Approved') {
            $form['field_story_category']['#access'] = FALSE;
            unset($form['field_pti_print_media']);
          }

          $form['field_pti_idea_status']['#access'] = FALSE;
          $form['field_pti_words_limit']['#access'] = FALSE;
          $form['field_survey_end_date']['#access'] = FALSE;
          $form['field_pti_issue']['#access'] = FALSE;
          $form['field_pti_magazine']['#access'] = FALSE;
        }
      }
      else {
        $form['field_story_category']['#access'] = FALSE;
        $form['field_pti_words_limit']['#access'] = FALSE;
        $form['field_survey_end_date']['#access'] = FALSE;
        $form['field_pti_idea_status']['#access'] = FALSE;
        $form['field_pti_issue']['#access'] = FALSE;
        $form['field_pti_magazine']['#access'] = FALSE;
        unset($form['field_pti_print_media']);
      }

      
      
      $form['field_quiz_answer_image'][LANGUAGE_NONE]['#file_upload_title'] = 'Upload Image';
      $form['field_quiz_answer_video'][LANGUAGE_NONE]['#file_upload_title'] = 'Upload Video';

      //Submit Handler
      $form['actions']['submit']['#submit'][] = 'itg_print_team_submit_handler_for_redirect';

      //Call function after build
      $form['#after_build'][] = 'itg_print_team_form_after_build';

      break;

    //Add form to associate story with issue and magazine
    case 'views_form_manage_print_team_page':
      //Array used in itg_print_team.js
      $settings = array();
      $settings['base_url'] = $base_url;

      drupal_add_js(array('itg_print_team' => array('settings' => $settings)), array('type' => 'setting'));
      //Add JS for itg_print_team
      drupal_add_js(drupal_get_path('module', 'itg_print_team') . '/js/itg_print_team.js', array('weight' => 1));
      
      $issue_options = itg_print_team_issue_options();

      $form['pti_issue'] = array(
          '#type' => 'select',
          '#title' => t('Issue'),
          '#options' => $issue_options,
          '#default_value' => '_none',
          '#weight' => 98,
      );
      
      $form['pti_magazine'] = array(
        '#type' => 'select',
        '#title' => 'Magazine',
        '#options' => itg_print_team_get_magazine_title(),
        '#default_value' => '_none',
        '#weight' => 99,
        '#attributes' => array('class' => array('associate-pti-magazine')),
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#weight' => 100,
      );
      $form['#validate'][] = 'itg_print_team_association_validate';
      $form['submit']['#submit'][] = 'itg_print_team_association_submit';
      break;

    case 'views_form_strory_menegment_page_1':
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Generate XML'),
        '#weight' => 100,
        '#attributes' => array('class' => array('button'), 'style' => 'float:left; margin: 0px 10px 0px 0px')
      );

      $form['#validate'][] = 'itg_story_xml_validate';
      $form['submit']['#submit'][] = 'itg_story_xml_submit';
      break;
  }
}

/**
 * Custom submit callback for alter message after operation.
 */
function itg_print_team_submit_handler_for_redirect($form, &$form_state) {
  global $user;

  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }

  // Unset destination
  unset($_GET['destination']);

  //Chck for edit and add node
  if (arg(2) == 'edit') {
    
    /*
    //Update issue fields with custom issue field in form_alter
    $node = node_load($form_state['values']['nid']);
    $node->field_pti_issue[LANGUAGE_NONE][0]['target_id'] = $form_state['values']['field_pti_issue'];
    field_attach_update('node', $node); */

    //Set redirection URL according to user role
    $idea_review_flag_user = FALSE;
    foreach ($user->roles as $roles) {
      if ($roles == 'Site Admin' || $roles == 'Co-ordinator' || $roles == 'Section Editor/Anchor' || $roles == 'Editor') {
        $idea_review_flag_user = TRUE;
      }
    }
    if ($idea_review_flag_user) {
      $form_state['redirect'] = 'manage-print-team';
    }
    else {
      $form_state['redirect'] = 'submit-idea';
    }
    $op = 'updated successfully';
  }
  else {
    $op = 'submit successfully';
    $form_state['redirect'] = 'submit-idea';
  }

  drupal_set_message(t('Your idea <strong>@ideatitle</strong> has been @operation.', array('@ideatitle' => $form_state['node']->title, '@operation' => $op)));
}

/**
 * After build function for print team
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_print_team_form_after_build($form, &$form_state) {
  global $user, $base_url;

  //Extract type of node
  if (arg(0) == 'node') {
    if (arg(1) == 'add') {
      $type = arg(2);
      $nid = '';
    }
    else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }

  //Array used in itg_print_team.js
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;

  drupal_add_js(array('itg_print_team' => array('settings' => $settings)), array('type' => 'setting'));

  //Add JS for itg_print_team
  drupal_add_js(drupal_get_path('module', 'itg_print_team') . '/js/itg_print_team.js', array('weight' => 1));

  //Unset SEF URL field
  $form['path']['#access'] = FALSE;

  //Unset metatag description
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
  return $form;
}

/* * *****************************View Related hooks**************************** */

/**
 * Implement hook_views_pre_render
 * @param object $view
 */
function itg_print_team_views_pre_render(&$view) {

  //Add "Submit Idea" button on listing page of ideas
  if ($view->name == "manage_print_team") {
    $header_content_print_team = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_print_team .= '<a href="./submit-idea">Submit Idea</a>';
    $view->attachment_before = $header_content_print_team;
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_print_team_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#id'] == 'views-exposed-form-manage-print-team-page') {

    //Call function autocomplete to show matching titles
    $form['title']['#autocomplete_path'] = 'content-title-list/print_team_integration/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Idea Headline'));
  }
}

/**
 * Implementation of hook_node_insert
 * @param Object $node
 */
function itg_print_team_node_insert($node) {
  switch ($node->type) {
    case 'print_team_integration':
      module_load_include('inc', 'itg_print_team', 'includes/print_team_mail');
      itg_print_team_send_idea_status_mail($node, 'insert');
      break;

    default:
      break;
  }
}

/**
 * Implementation of hook_node_update
 * @param Object $node
 */
function itg_print_team_node_update($node) {
  switch ($node->type) {
    case 'print_team_integration':

      module_load_include('inc', 'itg_print_team', 'includes/print_team_mail');

      //Send status mail to user
      if (in_array($node->field_pti_idea_status[LANGUAGE_NONE][0]['value'], array('Approved', 'Rejected', 'Needs Modification'))) {
        itg_print_team_send_idea_status_mail($node, 'update');
      }

      break;

    default:
      break;
  }
}

/**
 * Implementation of hook_node_validate
 * @param object $node
 * @param array $form
 * @param array $form_state
 */
function itg_print_team_node_validate($node, $form, &$form_state) {

  if ($node->type == 'print_team_integration') {
    if ($node->field_pti_idea_status[LANGUAGE_NONE][0]['value'] == 'Approved') {
      
      //Validation of word limit for valid number
      $words_limit = (int) $node->field_pti_words_limit[LANGUAGE_NONE][0]['value'];
      if (empty($words_limit) || !is_numeric($words_limit)) {
        form_set_error('field_pti_words_limit', t('Words limit must be numeric and greater than zero.'));
      } 
      else {
        
        //Validate word limit to restrict user for story body
        if (str_word_count(strip_tags($node->body[LANGUAGE_NONE][0]['value'])) > $node->field_pti_words_limit[LANGUAGE_NONE][0]['value']) {
          form_set_error('body', t('Limit exceeded! Your idea brief limit is: @idealimit words.', array('@idealimit' => $node->field_pti_words_limit[LANGUAGE_NONE][0]['value'])));
        }
      }
    
      //Validation for time limit
      $current_date = time();
      $timeline = strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value'] . ' + 23 hours');
      if ($current_date > $timeline) {
        form_set_error('field_survey_end_date', t('Sorry! You can not submit your idea now. You have exceeded your last date of idea submission.'));
      }
    }
  }
}

/**
 * Submit idea actions functionality
 * @param int $nid
 * @return string
 */
function itg_print_team_idea_actions($nid) {

  $node = node_load($nid);
  $status = $node->field_pti_idea_status[LANGUAGE_NONE][0]['value'];

  $accept = l(t('Approve'), 'idea-status/approved/' . $nid);
  $reject = l(t('Reject'), 'idea-status/rejected/' . $nid);
  $need_modification = l(t('Needs Modification'), 'idea-status/needs_modification/' . $nid);

  switch ($status) {
    case 'Approved':
      return '<span style="padding-left:30px">-</span>';
      break;

    case 'Rejected':
      return '<span style="padding-left:30px">-</span>';
      break;

    case 'Needs Modification':
      return $accept . ' | ' . $reject;
      break;

    default:
      return $accept . ' | ' . $reject . ' | ' . $need_modification;
      break;
  }
}

/**
 * Custom validation for associate story with magazine and issue
 * @param array $form
 * @param array $form_state
 */
function itg_print_team_association_validate($form, &$form_state) {
  //Array used in itg_print_team.js
  global $base_url;
  $settings = array();
  $settings['base_url'] = $base_url;

  drupal_add_js(array('itg_print_team' => array('settings' => $settings)), array('type' => 'setting'));
  //Add JS for itg_print_team
  drupal_add_js(drupal_get_path('module', 'itg_print_team') . '/js/itg_print_team.js', array('weight' => 1));

  $views_bulk_operations = $form_state['values']['views_bulk_operations'];
  $issue = $form_state['values']['pti_issue'];
  $magazine = check_plain($form_state['values']['pti_magazine']);
  

  if (is_array($views_bulk_operations) && count($views_bulk_operations) > 0) {
    if (!max($views_bulk_operations) > 0) {
      form_set_error('views_bulk_operations', t('Please select atleast one checkbox to associate with magazine and issue.'));
    }
  }

  if ($magazine == '_none') {
    form_set_error('magazine', t('Please select Magazine.'));
  }

  if ($issue == '_none') {
    form_set_error('issue', t('Please select Issue.'));
  }
}

/**
 * Submit handler for association of story with magazine and issue
 * @param array $form
 * @param array $form_state
 */
function itg_print_team_association_submit($form, &$form_state) {
  $views_bulk_operations = $form_state['values']['views_bulk_operations'];
  $issue = check_plain($form_state['values']['pti_issue']);
  $magazine = check_plain($form_state['values']['pti_magazine']);
  if (is_array($views_bulk_operations) && count($views_bulk_operations) > 0) {
    foreach ($views_bulk_operations as $source_id) {
      if (!empty($source_id)) {
        $associated_source_id = itg_print_team_check_association_print_to_story($source_id);
        if (!empty($associated_source_id)) {
          itg_print_team_association_update($source_id, $issue, $magazine, $associated_source_id, TRUE);
        }
        else {
          itg_print_team_association_save($source_id, $issue, $magazine);
        }
      }
    }
  }
}

/**
 * Callback for association of story with magazine and issue
 * @global array $user
 * @param int $nid
 * @param string $issue
 * @param string $magazine
 */
function itg_print_team_association_save($nid, $issue, $magazine) {
  global $user;
  $node = node_load($nid);
  
  $issue_title = itg_common_get_node_title($issue);
  $node->field_pti_issue[LANGUAGE_NONE][0]['target_id'] = $issue;
  $node->field_pti_magazine[LANGUAGE_NONE][0]['target_id'] = $magazine;
  field_attach_update('node', $node);

  $headline = $node->title;
  $body = $node->body[LANGUAGE_NONE][0]['value'];
  $fid = $node->field_quiz_answer_image[LANGUAGE_NONE][0]['fid'];
  $node = new stdClass();
  $node->title = trim($headline);
  $node->type = "story";
  node_object_prepare($node);

  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;
  $node->field_story_long_head_line[LANGUAGE_NONE][0]['value'] = trim($headline) ? trim($headline) : 'NA';
  $node->body[$node->language][0]['value'] = $body ? $body : 'NA';
  
  //Association of issue with story
  $node->field_story_issue_date[LANGUAGE_NONE][0]['value'] = isset($issue_title) ? $issue_title : date('Y-m-d h:i:s', time());
  
  //Association of magazine with story
  $node->field_story_magazine_story_issue[LANGUAGE_NONE][0]['value'] = 'magazine_issue_story';
  if ($magazine) {
    $node->field_story_select_magazine[LANGUAGE_NONE][0]['target_id'] = $magazine;
  }
  if($fid){
    $story_node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'] = $fid;
  }
  $publish_date = date('Y-m-d', time());
  $exp_date = strtotime('+90 years', strtotime($publish_date));
  $exp_date = date('Y-m-d', $exp_date);

  $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'] = $publish_date;
  $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] = $exp_date;
  $node->field_story_source_type = 'print_team_integration';
  $node->field_story_source_id = $nid;

  $node->revision = 1;
  $node->log = 'State Changed to published';
  $node->workbench_moderation_state_new = workbench_moderation_state_published();
  $node = node_submit($node); // Prepare node for saving
  node_save($node); // Finally save node
  
  drupal_set_message('Selected stories have been associated to selected issue and magazine successfully.');
}

/**
 * Get magazine title to associate with story
 * @return array $options
 */
function itg_print_team_get_magazine_title() {
  $query = db_select('node', 'node');
  $query->fields('node', array('nid', 'title'));
  $query->condition('node.status', 1, '=');
  $query->condition('node.type', 'magazine', '=');
  $result = $query->execute();
  $record = $result->fetchAll();
  $options['_none'] = '- Select Magazine -';
  foreach ($record as $val) {
    $options[$val->nid] = $val->title;
  }
  return $options;
}

/**
 * Get issue option value
 * @return array
 */
function itg_print_team_issue_options(){
  $query = db_select('node', 'node');
  $query->fields('node', array('nid', 'title'));
  $query->condition('node.status', 1, '=');
  $query->condition('node.type', 'issue', '=');
  $result = $query->execute();
  $record = $result->fetchAll();
  $options['_none'] = '-Select Issue-';
  foreach ($record as $val) {
    $issue_month = explode('-', $val->title);
    $month_before_curr = date('m')-1;
    
    if($issue_month[1] >= $month_before_curr){
      $options[$val->nid] = date('d/m/Y', strtotime($val->title));
    }
  }
  return $options;
}
