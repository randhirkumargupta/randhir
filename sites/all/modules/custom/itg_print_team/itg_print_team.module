<?php

/**
 * @file
 * The ITG Print Team Integration module.
 *
 */

// Load print_team_story_xml.inc from the itg_print_team module.
module_load_include('inc', 'itg_print_team', 'includes/print_team_story_xml');

/**
 * Implementation of hook_permission
 * @return array
 */
function itg_print_team_permission() {
  return array(
    'submit idea for story' => array(
      'title' => t('Submit Ideas For Stories'),
    )
  );
}

/**
 * Implementation of hook_menu
 * @return string
 */
function itg_print_team_menu() {
  $items['submit-idea'] = array(
    'title' => 'Submit Idea',
    'page callback' => 'itg_print_team_submit_idea',
    'access callback' => 'user_access',
    'access arguments' => array('submit idea for story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/print_team_submit_idea.inc',
  );
  $items['idea-status/%/%'] = array(
    'page callback' => 'itg_print_team_idea_status',
    'access callback' => 'user_access',
    'access arguments' => array('submit idea for story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/print_team_submit_idea.inc',
  );
  
  $items['print-team-ideas/csv'] = array(
    'title' => 'Submit Idea',
    'page callback' => 'itg_print_team_ideas_csv',
    'access callback' => 'user_access',
    'access arguments' => array('submit idea for story'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_print_team_theme($existing, $type, $theme, $path) {
  $themes = array(
    'itg_print_team_idea_approval_mail' => array(
      'variables' => array('node' => NULL),
      'template' => 'templates/print-team-idea-approval-mail',
    ),
    'itg_print_team_idea_status_mail' => array(
      'variables' => array('node' => NULL),
      'template' => 'templates/print-team-idea-status-mail',
    ),
    'itg_print_team_idea_association_mail' => array(
      'variables' => array('node' => NULL, 'op_type' => NULL),
      'template' => 'templates/print-team-idea-association-mail',
    ), 
    'itg_print_team_notification_mail' => array(
      'variables' => array('node' => NULL),
      'template' => 'templates/print-team-notification-mail',
    ),
      
   'print_team_integration_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'print-team-integration-node-form',
      'path' => drupal_get_path('module', 'itg_print_team') . '/templates',
      'render element' => 'form',
    ),
      
  );

  return $themes;
}

/**************************Form Related hooks******************************** */

/**
 * Implement hook_form_alter
 * {@inheritdoc}
 */
function itg_print_team_form_alter(&$form, &$form_state, $form_id) {
  global $base_url, $user;

  if ($form_id == 'print_team_integration_node_form') {

    // Change page title
    drupal_set_title(t('Submit Your Idea'));

    // Add cancel button
    $form['title']['#description'] = '<p>' . t('Please enter idea headline .') . '</p>';

    // After approve, show rule to user
    if ($form['#node']->nid && $form['#node']->field_pti_words_limit[LANGUAGE_NONE][0]['value']) {
      $form['brief_idea_limit'] = array(
          '#type' => 'item',
          '#markup' => '<div class="idea-brief-limit">Idea Brief Limit: <strong>' . $form['#node']->field_pti_words_limit[LANGUAGE_NONE][0]['value'] . ' Words</strong></div><div class="idea-last-day-submission">Last Day of submission: <strong>' . date('d/m/Y', strtotime($form['#node']->field_survey_end_date[LANGUAGE_NONE][0]['value'])) . '</strong></div>',
          '#weight' => -9,
      );
    }

    // Add cancel button
    $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'manage-print-team-not-decided', array('attributes' => array('class' => 'button'))),
        '#weight' => 21,
        '#value' => t('Cancel'),
    );

    // Hide issue and magazine form edit page
    $form['field_pti_issue']['#access'] = FALSE;
    $form['field_pti_magazine']['#access'] = FALSE;
    $form['actions']['submit']['#value'] = 'Submit';
    
    // Hide Rating and Mark as complete fields from node edit page
    $form['field_pti_mark_as_complete']['#access'] = FALSE;
    $form['field_story_rating']['#access'] = FALSE;
    
    // Unset meta tags
    unset($form['#metatags']);
    unset($form['actions']['preview']);
    unset($form['field_pti_idea_status']['und']['#options']['_none']);

    // If role is anchor, editor and co-ordinator, display fields to set rule and change status
    $idea_review_flag = itg_print_team_check_approval_users();

    // Enable/Disable fields according to status and role
    if ($form['#node']->nid) {
      if ($idea_review_flag) {
        if ($form['#node']->field_pti_idea_status[LANGUAGE_NONE][0]['value'] != 'Approved') {
          $form['field_story_category']['#access'] = FALSE;
          $form['field_primary_cat_data']['#access'] = FALSE;
          unset($form['field_pti_print_media']);
          $form['field_pti_issue']['#access'] = FALSE;
          $form['field_pti_magazine']['#access'] = FALSE;
          $form['field_story_rating']['#access'] = FALSE;
          $form['field_pti_magazine_kicker']['#access'] = FALSE;
        }
      }
      else {
        if ($form['#node']->field_pti_idea_status[LANGUAGE_NONE][0]['value'] != 'Approved') {
          $form['field_story_category']['#access'] = FALSE;
          $form['field_primary_cat_data']['#access'] = FALSE;
          $form['field_pti_magazine_kicker']['#access'] = FALSE;
          unset($form['field_pti_print_media']);
        }

        $form['field_pti_idea_status']['#access'] = FALSE;
        $form['field_pti_words_limit']['#access'] = FALSE;
        $form['field_survey_end_date']['#access'] = FALSE;
        $form['field_pti_issue']['#access'] = FALSE;
        $form['field_pti_magazine']['#access'] = FALSE;
        $form['field_story_rating']['#access'] = FALSE;
      }
      
      // Disable change status radio button if status is "Approved" OR "Rejected"
      if ($form['#node']->field_pti_idea_status[LANGUAGE_NONE][0]['value'] == 'Approved' || $form['#node']->field_pti_idea_status[LANGUAGE_NONE][0]['value'] == 'Rejected') {
        $form['field_pti_idea_status']['#disabled'] = TRUE;
      }

      // Get mark as completed type users arr
      $mark_task_comp_users_only = itg_print_team_mark_complete_users_arr();
      foreach($user->roles as $user_roles_arr) {
        if (in_array($user_roles_arr, $mark_task_comp_users_only)) {
          $mark_task_comp_users_flag = TRUE;
        }
        else {
          $mark_task_comp_users_flag = FALSE;
        }
      }

      // Put all fileds in non-editable mode, if task is completed OR mark type users
      if ($form['#node']->field_pti_mark_as_complete[LANGUAGE_NONE][0]['value'] == 'completed' || $mark_task_comp_users_flag) {
        $form['title']['#disabled'] = TRUE;
        $form['field_pti_words_limit']['#disabled'] = TRUE;
        $form['field_survey_end_date']['#disabled'] = TRUE;
        $form['field_pti_magazine_kicker']['#disabled'] = TRUE;
        $form['body']['#attributes'] = array('class' => array('itg-disabled-radio'));
        $form['field_story_category']['#attributes'] = array('class' => array('itg-disabled-radio'));
        $form['field_primary_cat_data']['#attributes'] = array('class' => array('itg-disabled-radio'));
        $form['field_pti_print_media']['#attributes'] = array('class' => array('itg-disabled-radio'));

        // Hide extra body field
        drupal_add_js('jQuery(document).ready(function() {                  
           jQuery(".text-summary-wrapper").hide();
          });', array('type' => 'inline', 'scope' => 'footer'));
      }
  
      // Hide mark as complete field in case of completed only
//      if($form['#node']->field_pti_mark_as_complete[LANGUAGE_NONE][0]['value'] == 'completed'){
//         $form['field_pti_mark_as_complete']['#disabled'] = TRUE;
//      }
      
      // Not allow to edit rating field for mark type users
      if($mark_task_comp_users_flag) {
        $form['field_story_rating']['#disabled'] = TRUE;
      }
    
      // Show mark as complete field to allowed users only
      $mark_task_as_complted_users = itg_print_team_check_mark_complete_users();
//      if ($mark_task_as_complted_users && $form['#node']->field_pti_idea_status[LANGUAGE_NONE][0]['value'] == 'Approved') {
//        $form['field_pti_mark_as_complete']['#access'] = TRUE;
//      } else {
//        $form['field_pti_mark_as_complete']['#access'] = FALSE;
//      }
      
      // Show comment section in iframe
      $node_view_url = $base_url . '/node/' . $form['#node']->nid;
      $form['print_team_comment_form'] = array(
          '#type' => 'item',
          '#markup' => '<iframe src="' . $node_view_url . '?type=commentform" width="100%" height="600px" class="print-team-iframe-comment-form" frameBorder="0"></iframe>',
          '#weight' => 100,
      );
      
    } else {
      $form['field_story_category']['#access'] = FALSE;
      $form['field_primary_cat_data']['#access'] = FALSE;
      $form['field_pti_words_limit']['#access'] = FALSE;
      $form['field_survey_end_date']['#access'] = FALSE;
      $form['field_pti_idea_status']['#access'] = FALSE;
      $form['field_pti_issue']['#access'] = FALSE;
      $form['field_pti_magazine']['#access'] = FALSE;
      $form['field_story_rating']['#access'] = FALSE;
      $form['field_pti_mark_as_complete']['#access'] = FALSE;
      $form['field_pti_magazine_kicker']['#access'] = FALSE;
      unset($form['field_pti_print_media']);
    }
    
    $form['field_primary_cat_data']['#weight'] = 2;
    $form['field_pti_idea_submit_status']['#access'] = FALSE;
    $form['field_story_category'][LANGUAGE_NONE]['#title'] = 'Select Section <span class="form-required" title="This field is required.">*</span>';
    $form['field_quiz_answer_image'][LANGUAGE_NONE]['#file_upload_title'] = 'Upload Image';
    $form['field_quiz_answer_video'][LANGUAGE_NONE]['#file_upload_title'] = 'Upload Video';
    $form['field_newsl_frequency'][LANGUAGE_NONE]['#title'] = 'Frequency <span class="form-required" title="This field is required.">*</span>';
    $form['field_pti_idea_status'][LANGUAGE_NONE]['#options']['Approved'] = 'Approve';
    $form['field_pti_idea_status'][LANGUAGE_NONE]['#options']['Rejected'] = 'Reject';

    // Submit Handler
    $form['actions']['submit']['#submit'][] = 'itg_print_team_submit_handler_for_redirect';

    // Call function after build
    $form['#after_build'][] = 'itg_print_team_form_after_build';
  }

  // Add form to associate story with issue and magazine
  if ($form_id == 'views_form_manage_print_team_page' || $form_id == 'views_form_manage_print_team_page_1' || $form_id == 'views_form_manage_print_team_page_2' || $form_id == 'views_form_manage_print_team_page_3' || $form_id == 'views_form_manage_print_team_page_4') {

    // Array used in itg_print_team.js
    $settings = array();
    $settings['base_url'] = $base_url;
    drupal_add_js(array('itg_print_team' => array('settings' => $settings)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'itg_print_team') . '/js/itg_print_team.js', array('weight' => 1));
    
    $filtered_result = count($form['#substitutions']['#value']);
    if (arg(0) == 'manage-print-team-rejected' || arg(0) == 'manage-print-team-needs-modification' || arg(0) == 'manage-print-team-not-decided') {

      // Hide bulk operation options
      drupal_add_js('jQuery(document).ready(function() {                  
           jQuery(".views-field-views-bulk-operations").hide();
      });', array('type' => 'inline', 'scope' => 'footer'));
    }
    else {
      
    $idea_review_flag = itg_print_team_check_approval_users();
    $mark_task_comp_users_only = itg_print_team_mark_complete_users_arr();
      foreach($user->roles as $user_roles_arr) {
        if (in_array($user_roles_arr, $mark_task_comp_users_only)) {
          $mark_task_comp_users_flag = TRUE;
        }
        else {
          $mark_task_comp_users_flag = FALSE;
        }
      }

    if ($idea_review_flag && $filtered_result) {
      
      // User should not be of mark as complete type
      if (!$mark_task_comp_users_flag) {
        
          // Disable idea's association option for all except "Approved"
//          for ($bulk_op = 0; $bulk_op < $filtered_result; $bulk_op++) {
//            $node_idea = node_load($form['views_bulk_operations'][$bulk_op]['#return_value']);
//            if ($node_idea->field_pti_mark_as_complete[LANGUAGE_NONE][0]['value'] !== 'completed') {
//              $form['views_bulk_operations'][$bulk_op]['#disabled'] = TRUE;
//            }
//          }

          $magazine_options = itg_print_team_get_magazine_title();
          $selected = isset($form_state['values']['pti_magazine']) ? $form_state['values']['pti_magazine'] : key($magazine_options);

          $form['pti_magazine'] = array(
              '#type' => 'select',
              '#title' => 'Magazine',
              '#options' => $magazine_options,
              '#default_value' => $selected,
              '#weight' => 98,
              '#ajax' => array(
                  'event' => 'change',
                  'callback' => 'itg_print_team_magazine_ajax_callback',
                  'wrapper' => 'pti-issue-replace',
              )
          );

          $form['pti_issue'] = array(
              '#type' => 'select',
              '#title' => t('Issue'),
              '#prefix' => '<div id="pti-issue-replace">',
              '#suffix' => '</div>',
              '#options' => itg_print_team_magazine_issue($selected),
              '#default_value' => isset($form_state['values']['pti_issue']) ? $form_state['values']['pti_issue'] : '_none',
              '#weight' => 99,
              '#attributes' => array('class' => array('associate-pti-magazine')),
          );
          $form['submit'] = array(
              '#type' => 'submit',
              '#value' => t('Associate'),
              '#weight' => 100,
              '#attributes' => array('class' => array('btn-save'), 'style' => 'margin-top:30px'),
          );
          $form['mark_as_complete'] = array(
              '#type' => 'submit',
              '#value' => t('Mark as Complete'),
              '#weight' => 101,
              '#attributes' => array('class' => array('btn-save'), 'style' => 'margin-top:30px'),
          );
          $form['download_csv'] = array(
              '#markup' => l(t('Download CSV'), 'print-team-ideas/csv', array('attributes' => array('class' => 'button', 'style' => 'margin-top:30px'))),
              '#weight' => 102,
              '#value' => t('Download CSV'),
          );

          $form['#validate'][] = 'itg_print_team_association_custom_validate';
          $form['submit']['#submit'][] = 'itg_print_team_association_custom_submit';
          $form['mark_as_complete']['#submit'][] = 'itg_print_team_markascomplete_custom_submit';
        }
    }
  }
  }

  if ($form_id == 'views_form_strory_menegment_page_1') {
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Generate XML'),
        '#weight' => 100,
        '#attributes' => array('class' => array('btn-generate-xml'))
    );

    $form['#validate'][] = 'itg_story_xml_validate';
    $form['submit']['#submit'][] = 'itg_story_xml_submit';
  }
}

/**
 * Ajax callback on magazine selection
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_print_team_magazine_ajax_callback($form, $form_state) {
    return $form['pti_issue'];
}

/**
 * Fetch issue list using magazine
 * @param int $id
 * @return array
 */
function itg_print_team_magazine_issue($id = '') {

  $options['_none'] = '-Select Issue-';
  $query = db_select('field_data_field_issue_magazine', 'm');
  $query->join('node', 'n', 'm.entity_id = n.nid');
  $query->fields('m', array('entity_id'));
  $query->fields('n', array('title'));
  $query->condition('field_issue_magazine_target_id', $id, '=');
  $query->condition('n.status', 1, '=');

  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    /*
    $issue_month = explode('-', $val->title);
    $month_before_curr = date('m') - 1;

    if ($issue_month[1] >= $month_before_curr) {
      $options[$record['entity_id']] = date('d/m/Y', strtotime($record['title']));
    } */
    $options[$record['entity_id']] = date('d/m/Y', strtotime($record['title']));
  }

  return $options;
}

/**
 * Custom submit callback for alter message after operation.
 */
function itg_print_team_submit_handler_for_redirect($form, &$form_state) {
  
  // Unset drupal default messages
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }

  // Check for edit and add node
  if (arg(2) == 'edit') {
    $op = 'updated successfully';
  }
  else {
    $op = 'submitted successfully';
  }
  
  if($_GET['destination']) {
    $destination = $_GET['destination'];
  }
  else {
    $destination = 'manage-print-team-not-decided';
  }
  $form_state['redirect'] = $destination;
  drupal_set_message(t('Your idea <strong>@ideatitle</strong> has been @operation.', array('@ideatitle' => $form_state['node']->title, '@operation' => $op)));
}

/**
 * Implements hook_form_after_build
 * {@inheritdoc}
 */
function itg_print_team_form_after_build($form, &$form_state) {
  global $user, $base_url;

  //Extract type of node
  if (arg(0) == 'node') {
    if (arg(1) == 'add') {
      $type = arg(2);
      $nid = '';
    }
    else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }
  
  // Check print media content is there OR not?  
  $print_media_value = $form['#node']->field_pti_print_media[LANGUAGE_NONE][0]['value'];

  //Array used in itg_print_team.js
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;
  $settings['print_media'] = $print_media_value ? $print_media_value : '';

  drupal_add_js(array('itg_print_team' => array('settings' => $settings)), array('type' => 'setting'));

  // Add JS for itg_print_team
  drupal_add_js(drupal_get_path('module', 'itg_print_team') . '/js/itg_print_team.js', array('weight' => 1));

  // Unset SEF URL field
  $form['path']['#access'] = FALSE;

  // Unset metatag description
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags'][LANGUAGE_NONE]['basic']['#title']);
  unset($form['metatags'][LANGUAGE_NONE]['basic']['#description']);
  return $form;
}

/******************************View Related hooks*****************************/

/**
 * Implement hook_views_pre_render
 * {@inheritdoc}
 */

function itg_print_team_views_pre_render(&$view) {
  
  global $base_url;
  
  // Add "Submit Idea" button on listing page of ideas
  if ($view->name == "manage_print_team") {
    $header_content_print_team = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_print_team .= l('Submit Idea', $base_url.'/submit-idea');
    $view->attachment_before = $header_content_print_team;

  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * {@inheritdoc}
 */
function itg_print_team_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#id'] == 'views-exposed-form-manage-print-team-page' || $form['#id'] == 'views-exposed-form-manage-print-team-page-1' || $form['#id'] == 'views-exposed-form-manage-print-team-page-2' || $form['#id'] == 'views-exposed-form-manage-print-team-page-3' || $form['#id'] == 'views-exposed-form-manage-print-team-page-4') {

    //Call function autocomplete to show matching titles
    $form['title']['#autocomplete_path'] = 'content-title-list/print_team_integration/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Idea Headline'));
    $form['uid']['#attributes'] = array('placeholder' => t('Posted By'));
  }
}

/**
 * Implements hook_views_query_alter
 * {@inheritdoc}
 */
function itg_print_team_views_query_alter(&$view, &$query) {
  global $user;
  
  // Unset Contextual filter for story approval users
  if ($view->name == 'manage_print_team') {
    $idea_review_flag_user = itg_print_team_check_approval_users();
    if ($idea_review_flag_user) {
      unset($query->where[0]['conditions']);
    }
  }
}

/******************************Node Related hooks*****************************/
/**
 * Implementation of hook_node_insert
 * {@inheritdoc}
 */
function itg_print_team_node_insert($node) {
  switch ($node->type) {
    case 'print_team_integration':
      module_load_include('inc', 'itg_print_team', 'includes/print_team_mail');
      itg_print_team_send_idea_status_mail($node, 'insert');
      break;

    default:
      break;
  }
}

/**
 * Implementation of hook_node_update
 * {@inheritdoc}
 */
function itg_print_team_node_update($node) {
  
  global $user;
  switch ($node->type) {
    case 'print_team_integration':

      // Include inc file required for print team
      module_load_include('inc', 'itg_print_team', 'includes/print_team_mail');
      module_load_include('inc', 'itg_print_team', 'includes/print_team_story_xml');

      // Send status mail to user
      if (in_array($node->field_pti_idea_status[LANGUAGE_NONE][0]['value'], array('Approved', 'Rejected', 'Needs-Modification'))) {
        if ($user->uid != $node->uid) {
          itg_print_team_send_idea_status_mail($node, 'update');
        }
      }
      
      /*
      // Update story, if any idea is updated
      $associated_source_id = itg_print_team_check_association_print_to_story($node->nid);
      if ($associated_source_id) {
        itg_print_team_association_update($node, NULL, NULL, $associated_source_id, FALSE);
      } */
      
      // Insert in to print team cron table to send mail
      if ($node->field_pti_idea_status[LANGUAGE_NONE][0]['value'] == 'Approved') {
        $check_for_nid = itg_print_team_check_cron_nid($node->nid);
        
        // Insert only if nid does not exist in to cron table 
        if (!$check_for_nid) {
          $query = db_insert('itg_cron_print_team');
          $query->fields(array(
              'nid' => $node->nid,
              'type' => $node->type,
              'scheduled_time' => strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value'] . ' + 23 hours'),
              'status' => 0,
              'created' => time()
          ));
          $query->execute();
        }
        
        // Update idea submit field status, if story finally submitted by a user
        if ($node->field_story_category[LANGUAGE_NONE][0]['tid'] && $node->field_pti_magazine_kicker[LANGUAGE_NONE][0]['value']) {
          $node->field_pti_idea_submit_status[LANGUAGE_NONE][0]['value'] = 'submitted';
          field_attach_update('node', $node);
        }
      }
      
      break;

    default:
      break;
  }
}

/**
 * Implementation of hook_node_validate
 * {@inheritdoc}
 */
function itg_print_team_node_validate($node, $form, &$form_state) {
global $user;

  if ($node->type == 'print_team_integration' && $node->field_pti_idea_status[LANGUAGE_NONE][0]['value'] == 'Approved') {
      
      // Validation of word limit for valid number
      $words_limit = (int) $node->field_pti_words_limit[LANGUAGE_NONE][0]['value'];
      if (empty($words_limit) || !is_numeric($words_limit)) {
        form_set_error('field_pti_words_limit', t('Words limit must be numeric and greater than zero.'));
      } 
      else {
        
        // Validate word limit to restrict user for story body
        if (str_word_count(strip_tags($node->body[LANGUAGE_NONE][0]['value'])) > $node->field_pti_words_limit[LANGUAGE_NONE][0]['value']) {
          form_set_error('body', t('Limit exceeded! Your idea brief limit is: @idealimit words.', array('@idealimit' => $node->field_pti_words_limit[LANGUAGE_NONE][0]['value'])));
        }
      }
    
      // Validate time limit
      /*$current_date = time();
      $timeline = strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value'] . ' + 47 hours');
      if ($current_date > $timeline) {
        form_set_error('field_survey_end_date', t('Sorry! You can not submit your idea now. You have exceeded your last date of idea submission.'));
      }
       * */
      
      // Validate section
      $check_for_nid = itg_print_team_check_cron_nid($node->nid);
      if (empty($node->field_story_category[LANGUAGE_NONE][0]['tid']) && $check_for_nid) {
        form_set_error('field_story_category', t('Section field is required'));
      }
      
      // Validate magazine kicker
      if (empty($node->field_pti_magazine_kicker[LANGUAGE_NONE][0]['value']) && $check_for_nid && ($node->uid == $user->uid)) {
        form_set_error('field_pti_magazine_kicker', t('Magazine kicker field is required.'));
      }
      
      // Validate timeline
      if(empty($node->field_survey_end_date[LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_survey_end_date', t('Timeline field is required.'));
      }
  }
}

/**
 * Implements hook_node_view
 * {@inheritdoc}
 */
function itg_print_team_node_view($node, $view_mode) {
    if ($node->type=="print_team_integration") {
     drupal_add_js('jQuery(document).ready(function() {                  
       jQuery("#page-title").hide();
     });', array('type' => 'inline', 'scope' => 'footer'));
    }    
}

/**
 * Custom validation for associate ideas with magazine and issue
 * @param array $form
 * @param array $form_state
 */
function itg_print_team_association_custom_validate($form, &$form_state) {
  
  // Array used in itg_print_team.js
  global $base_url;
  $settings = array();
  $settings['base_url'] = $base_url;

  drupal_add_js(array('itg_print_team' => array('settings' => $settings)), array('type' => 'setting'));
  
  // Add JS for itg_print_team
  drupal_add_js(drupal_get_path('module', 'itg_print_team') . '/js/itg_print_team.js', array('weight' => 1));

  $views_bulk_operations = $form_state['values']['views_bulk_operations'];
  $issue = $form_state['values']['pti_issue'];
  $magazine = check_plain($form_state['values']['pti_magazine']);
  
  if (is_array($views_bulk_operations) && count($views_bulk_operations) > 0) {
    if (!max($views_bulk_operations) > 0) {
      form_set_error('views_bulk_operations', t('Please select atleast one checkbox to associate with magazine and issue or to mark as complete.'));
    }
  }
  $op_value = $form_state['values']['op'];
  if ($op_value == 'Associate') {
    if ($magazine == '_none') {
      form_set_error('magazine', t('Please select magazine.'));
    }

    if ($issue == '_none') {
      form_set_error('issue', t('Please select issue.'));
    }
  }
}

/**
 * Submit handler for association of story with magazine and issue
 * @param array $form
 * @param array $form_state
 */
function itg_print_team_association_custom_submit($form, &$form_state) {

  $views_bulk_operations = $form_state['values']['views_bulk_operations'];
  $issue = check_plain($form_state['values']['pti_issue']);
  $magazine = check_plain($form_state['values']['pti_magazine']);
  
  if (is_array($views_bulk_operations) && count($views_bulk_operations) > 0) {
    foreach ($views_bulk_operations as $source_id) {
      if (!empty($source_id)) {
        $associated_source_id = itg_print_team_check_association_print_to_story($source_id);
        if (!empty($associated_source_id)) {
          itg_print_team_association_update($source_id, $issue, $magazine, $associated_source_id, TRUE);
        }
        else {
          itg_print_team_association_save($source_id, $issue, $magazine);

        }
      }
    }
  }
}
/**
 * Submit handler for mark as complete
 * @param array $form
 * @param array $form_state
 */
function itg_print_team_markascomplete_custom_submit($form, &$form_state) {
  
  $filtered_result = count($form['#substitutions']['#value']);
  $views_bulk_operations = $form_state['values']['views_bulk_operations'];
  if (is_array($views_bulk_operations) && count($views_bulk_operations) > 0) {
    foreach ($views_bulk_operations as $source_id) {
      if (!empty($source_id)) {
        
        $node_details = node_load($source_id);
        if (empty($node_details->field_pti_mark_as_complete)) {
          $node_details->field_pti_mark_as_complete['und'][0]['value'] = 'completed';
          field_attach_presave('node', $node_details);
          field_attach_update('node', $node_details);
        }
      }
    }
  }
}
/**
 * Save function for association of story with magazine and issue
 * @global array $user
 * @param int $nid
 * @param string $issue
 * @param string $magazine
 */
function itg_print_team_association_save($nid, $issue, $magazine) {
  
  global $user;
  module_load_include('inc', 'itg_print_team', 'includes/print_team_mail');
  $node = node_load($nid);
  $issue_node = $node;
  
  // Update print team node with issue and magazine
  $node->field_pti_issue[LANGUAGE_NONE][0]['target_id'] = $issue;
  $node->field_pti_magazine[LANGUAGE_NONE][0]['target_id'] = $magazine;
  field_attach_update('node', $node);
  
  
  // Varibles for story node
  $issue_title = itg_common_get_node_title($issue);
  $section = $node->field_story_category[LANGUAGE_NONE][0]['tid'];
  $rating = $node->field_story_rating[LANGUAGE_NONE][0]['value'];
  $headline = $node->title;
  $body = $node->body[LANGUAGE_NONE][0]['value'];
  $magazine_kicker = $node->field_pti_magazine_kicker[LANGUAGE_NONE][0]['value'];
  
  $primary_category = $node->field_primary_category[LANGUAGE_NONE][0]['value'];
  $primary_category_html = $node->field_primary_category_html[LANGUAGE_NONE][0]['value'];

  // Print media information
  $print_media_fcollection_id = $node->field_pti_print_media[LANGUAGE_NONE][0]['value'];
  $print_media = entity_load('field_collection_item', array($print_media_fcollection_id));
  $fid = $print_media[$print_media_fcollection_id]->field_pti_upload_image[LANGUAGE_NONE][0]['fid'];
  
  // Generate new node for story
  $node = new stdClass();
  $node->title = trim($headline);
  $node->type = "story";
  node_object_prepare($node);

  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;
  $node->field_story_long_head_line[LANGUAGE_NONE][0]['value'] = trim($headline) ? trim($headline) : 'NA';
  $node->body[$node->language][0]['value'] = $body ? $body : 'NA';
  $node->field_story_magazine_kicker_text[LANGUAGE_NONE][0]['value'] = $magazine_kicker ? $magazine_kicker : 'NA';
  
  $node->field_primary_category[LANGUAGE_NONE][0]['value'] = $primary_category;
  $node->field_primary_category_html[LANGUAGE_NONE][0]['value'] = $primary_category_html;
  
  if(!empty($rating)) {
   $node->field_story_rating[LANGUAGE_NONE][0]['value'] = $rating;
  }
  
  if(!empty($section)) {
    $node->field_story_category[LANGUAGE_NONE][0]['tid'] = $section;
  }
  
  //Association of issue with story
  $node->field_story_issue_date[LANGUAGE_NONE][0]['value'] = isset($issue_title) ? $issue_title : date('Y-m-d h:i:s', time());
  
  //Association of magazine with story
  $node->field_story_magazine_story_issue[LANGUAGE_NONE][0]['value'] = 'magazine_issue_story';
  
  if ($magazine) {
    $node->field_story_select_magazine[LANGUAGE_NONE][0]['target_id'] = $magazine;
  }
  
  if($fid){
    $node->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'] = $fid;
  }
  
  $publish_date = date('Y-m-d', time());
  $exp_date = strtotime('+90 years', strtotime($publish_date));
  $exp_date = date('Y-m-d', $exp_date);

  $node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'] = $publish_date;
  $node->field_story_expiry_date[LANGUAGE_NONE][0]['value'] = $exp_date;
  $node->field_story_source_type[LANGUAGE_NONE][0]['value'] = 'Print Idea';
  $node->field_story_source_id[LANGUAGE_NONE][0]['value'] = $nid;

  $node->revision = 1;
  $node->log = 'State Changed to Review';
  $node->workbench_moderation_state_new = workbench_moderation_state_review();
            
  $node = node_submit($node); // Prepare node for saving
  node_save($node); // Finally save node
  
  //Send mail to print team users after association
  itg_print_team_send_idea_status_mail($issue_node, 'association');
  drupal_set_message('Selected ideas have been associated to selected issue and magazine successfully.');
}

/**
 * Get magazine title to associate with story
 * @return array $options
 */
function itg_print_team_get_magazine_title() {
  $query = db_select('node', 'node');
  $query->fields('node', array('nid', 'title'));
  $query->condition('node.status', 1, '=');
  $query->condition('node.type', 'magazine', '=');
  $result = $query->execute();
  $record = $result->fetchAll();
  $options['_none'] = '- Select Magazine -';
  foreach ($record as $val) {
    $options[$val->nid] = $val->title;
  }
  return $options;
}

/**
 * Get issue option value
 * @return array
 */
function itg_print_team_issue_options(){
  $query = db_select('node', 'node');
  $query->fields('node', array('nid', 'title'));
  $query->condition('node.status', 1, '=');
  $query->condition('node.type', 'issue', '=');
  $result = $query->execute();
  $record = $result->fetchAll();
  $options['_none'] = '-Select Issue-';
  foreach ($record as $val) {
    $issue_month = explode('-', $val->title);
    $month_before_curr = date('m')-1;
    
    if($issue_month[1] >= $month_before_curr){
      $options[$val->nid] = date('d/m/Y', strtotime($val->title));
    }
  }
  return $options;
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_print_team_cronapi($op, $job = NULL) {
  $items['itg_print_team_expiry_notification'] = array(
    'description' => 'Send mail before 24 hours for story expiration ',
    'callback' => 'itg_print_team_expiry_notification_callback', 
  );
  return $items;
}

/**
 * Send mail to user before 24 hours of story expiration
 */
function itg_print_team_expiry_notification_callback() {
  
  // Include print team mail file to send mail
  module_load_include('inc', 'itg_print_team', 'includes/print_team_mail');

  $current_time = time();

  $query = db_select('itg_cron_print_team', 'c');
  $query->fields('c')
          ->condition('c.status', 0, '=');
  $result = $query->execute();

  // Fetch node to send notification
  while ($record = $result->fetchAssoc()) {
    $end_date = $record['scheduled_time'];
    $diff = $end_date - $current_time;
    $diff_in_hours = round($diff / ( 60 * 60 ));
    if ($diff_in_hours > 0) {
      if ($diff_in_hours <= 24) {
        itg_print_team_send_mail_for_notification($record['nid']);
      }
    }
  }
}

/**
 * Check for nid in to cron table
 * @param int $nid
 * @return int
 */
function itg_print_team_check_cron_nid($nid) {
  if ($nid) {
    $record = db_select('itg_cron_print_team', 'c')
            ->fields('c', array('nid'))
            ->condition('c.nid', $nid, '=')
            ->range(0, 1)->execute()->fetchAssoc();
  }
  return isset($record['nid']) ? $record['nid'] : FALSE;
}

/**
 * Check for approval users
 * @global array $user
 * @return boolean
 */
function itg_print_team_check_approval_users(){
  
  global $user;
  $idea_review_flag_user = FALSE;
  foreach ($user->roles as $roles) {
    if ($roles == 'Site Admin'
          || $roles == 'Co-ordinator' 
          || $roles == 'Section Editor/Anchor'
          || $roles == 'Editor'
          || $roles == 'Photo Coordinator'
          || $roles == 'Photo Head'
          || $roles == 'Design Head'
          || $roles == 'Copy Desk'
          || $roles == 'Designer'
          || $roles == 'Photographer'
          || $roles == 'Knowledge Centre'  
     ) {
      $idea_review_flag_user = TRUE;
    }
  }
  return $idea_review_flag_user;
}

/**
 * Function for users who can mark task as completed
 * @global array $user
 * @return boolean
 */
function itg_print_team_check_mark_complete_users(){
  
  global $user;
  $idea_mark_complete_user = FALSE;
  foreach ($user->roles as $roles) {
    if ($roles == 'Site Admin'
          || $roles == 'Co-ordinator' 
          || $roles == 'Photo Coordinator'
          || $roles == 'Photo Head'
          || $roles == 'Design Head'
          || $roles == 'Copy Desk'
          || $roles == 'Designer'
          || $roles == 'Photographer'    
     ) {
      $idea_mark_complete_user = TRUE;
    }
  }
  return $idea_mark_complete_user;
}

/**
 * Get array of mark complete type users
 * @return array
 */
function itg_print_team_mark_complete_users_arr() {
  return array('Photo Coordinator', 'Photo Head', 'Design Head', 'Copy Desk', 'Designer', 'Photographer');
}

/**
 * Get uids of users having role "correspondent"
 */
function itg_print_team_ideas_csv(){
  
  $role = user_role_load_by_name('Correspondent');
  $result_user = db_select('users_roles', 'ur')
          ->fields('ur', array('uid'))
          ->condition('rid', $role->rid)
          ->execute();

  foreach ($result_user as $record) {
    $uids[] = $record->uid;
  }
  
  // CSV file header
  $file = 'ideas_csv';
  $idea_csv = "Idea Title" . "," . "Created Date" . "," . "User Type" . "," . "Status" . "," . "Rating" . "|\n\r\0";

  $query = db_select('node', 'n');
  $query->join('field_data_field_pti_idea_status', 'ps', 'n.nid = ps.entity_id'); //JOIN node with magazines
  $query->condition('n.type', 'print_team_integration')
          ->condition('n.uid', $uids, 'IN')
          ->fields('n')
          ->orderBy('ps.field_pti_idea_status_value', 'ASC');

  $result = $query->execute();

  // Generate CSV content
  foreach ($result as $row) {
    $node = node_load($row->nid);
    $title = $node->title;
    $created_date = date('d/m/Y', $node->created);
    $status = $node->field_pti_idea_status[LANGUAGE_NONE][0]['value'];
    $rating = $node->field_story_rating[LANGUAGE_NONE][0]['value'] ? $node->field_story_rating[LANGUAGE_NONE][0]['value'] : '0';
    $idea_csv .= $title . "," . $created_date . "," . "Correspondent" . ",". $status . "," . $rating . "|\n\r\0";
  }

  $filename = $file . "_" . date("d-m-Y:i", time());
  header('Content-Description: File Transfer');
  header('Content-Type: application/force-download');
  header('Content-Disposition: attachment; filename='.$filename.'.csv');
  print $idea_csv;
}

/**
 * Implements hook_form_comment_form_alter
 * {@inheritdoc}
 */
function itg_print_team_form_comment_form_alter(&$form, &$form_state, $form_id) {                                                
  switch($form_id) {
    case 'comment_node_print_team_integration_form':
      hide($form['author']);
      break;
  }
}
