<?php

/**
 * @file
 * The ITG Newsletter module.
 *
 * Contains functionality related to Newsletter.
 *
 */


function itg_newsletter_menu(){
    $items['newsletter_data'] = array(
      'title' => 'Autocomplete for Newsletter',
      'page callback' => 'itg_newsletter_content_data',
      'access callback' => TRUE,
    );
    
    $items['test_mail'] = array(
      'page callback' => '_send_mail_newsletter',
      'file' => 'includes/newsletter_mail.inc',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
    
    
    return $items;
}

/**
 * Implements hook_block_info().
 */
function itg_newsletter_block_info() {
  $blocks['newsletter_tab_form_block'] = array(
    'info' => t('Newsletter Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view()
 * @param type $delta
 */
function itg_newsletter_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'newsletter_tab_form_block':                       
      $block['content'] = theme('newsletter_tab_form_display_block', array('data' => $data));
    break;        
  }
  
  return $block;
}

/**
 * Implements hook_theme().
 * @param String $existing
 * @param String $type
 * @param Array $theme
 * @param String $path
 */
function itg_newsletter_theme($existing, $type, $theme, $path) {
  $themes = array(
    'newsletter_tab_form_display_block' => array(
      'template' => 'newsletter-form-tab-template',
      'path' => drupal_get_path('module', 'itg_newsletter') . '/templates',
      'variables' => array('data' => NULL),
    ),   
  );

  return $themes;
}

/***************************Form Related hooks*********************************/
/**
 * Implement hook_form_alter
 * @param Array $form
 * @param Array $form_state
 * @param String $form_id
 */
function itg_newsletter_form_alter(&$form, &$form_state, $form_id){
  
  global $user;
  
  //Set destination for newsletter form
  if ($form_id == 'newsletter_node_form') {
    
    //Add cancle button
    $destination = 'manage-newsletter';
    $form['title']['#description'] = '<p>' . t('Please enter subject line.') . '</p>';
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
      '#weight' => 21,
      '#value' => t('Cancel'),
    );
    
    unset($form['title']);
    unset($form['field_newsl_website_name']);
    
    //Unset N/A and none option
    unset($form['field_newsl_frequency']['und']['#options']['_none']);
    unset($form['field_newsl_newsletter_content']['und']['#options']['_none']);
    unset($form['field_newsl_time']['und']['#options']['_none']);
    unset($form['field_newsl_time_period']['und']['#options']['_none']);
    unset($form['field_newsl_day']['und']['#options']['_none']);
    unset($form['field_newsl_date']['und']['#options']['_none']);
    unset($form['field_newsl_schedule']['und']['#options']['_none']);
    
    //Add required field icon(*)
    $form['field_newsl_frequency']['und']['#title'] = 'Frequency <span class="form-required" title="This field is required.">*</span>';
    $form['field_newsl_newsletter_content']['und']['#title'] = 'Newsletter Content <span class="form-required" title="This field is required.">*</span>';
    $form['field_newsl_time']['und']['#title'] = 'Time <span class="form-required" title="This field is required.">*</span>';
    $form['field_newsl_time_period']['und']['#title'] = 'Time Period <span class="form-required" title="This field is required.">*</span>';
    $form['field_newsl_day']['und']['#title'] = 'Day <span class="form-required" title="This field is required.">*</span>';
    $form['field_newsl_date']['und']['#title'] = 'Date <span class="form-required" title="This field is required.">*</span>';
    $form['field_newsl_schedule']['und']['#title'] = 'Schedule <span class="form-required" title="This field is required.">*</span>';
    
    //Add submit handler for redirect form to their corresponding page after node has been created susccessfully.
    $form['actions']['submit']['#submit'][] ='itg_newsletter_submit_handler_for_redirect';
    
    //Call function after build
    $form['#after_build'][] = 'itg_newsletter_form_after_build';
  }
  
  if ($form_id == 'newsletter_templates_node_form') {
    //unset($form['body']);
    unset($form['#metatags']);
    unset($form['actions']['preview']);
    
    $form['title']['#description'] = '<p>' . t('Please enter subject line.') . '</p>';
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'manage-newsletter-templates', array('attributes' => array('class' => 'button'))),
      '#weight' => 21,
      '#value' => t('Cancel'),
    );
    
    $form['#after_build'][] = 'itg_newsletter_form_after_build';
    $form['actions']['submit']['#submit'][] ='itg_newsletter_submit_handler_for_redirect';
  }
}

 /**
 * Custom submit callback for alter message after operation.
 */
function itg_newsletter_submit_handler_for_redirect($form, &$form_state) {
  if (isset($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  
  unset($_GET['destination']); // Unset destination
  
  if(arg(2) == 'edit'){
    $op = 'updated.';
  } else {
     $op = 'created.';
  }
  $title = $form_state['node']->title;
  $content_type = ucwords($form_state['node']->type);
  
  drupal_set_message(t($content_type.' <strong>'.$title.'</strong> has been '.$op));
  
  if($form_state['node']->type == 'newsletter_templates'){
    $form_state['redirect'] = 'manage-newsletter-templates';
  } else {
    $form_state['redirect'] = 'manage-newsletter';
  }
}

/**
 * After build function for newsletter
 * @param Array $form
 * @param Array $form_state
 * @return Array
 */
function itg_newsletter_form_after_build($form, &$form_state){
  global $user, $base_url;
  
//  foreach ($form['field_newsl_add_news']['und'][0]['field_news_con_id']['und'] as $k => $v) {
//    if (is_numeric($k)) {
//      $form['field_newsl_add_news']['und'][0]['field_news_con_id']['und'][$k]['value']['#autocomplete_input'] = 'newsletter/autocomplete';
//    }
//  }
  
  //Hide default lavel and add dynamic label
  $form['field_newsl_add_news'][LANGUAGE_NONE]['#title'] = '';
  for($i = 0; $i <= $form['field_newsl_add_news']['und']['#max_delta']; $i++) {
    $count = $i+1;
    $form['field_newsl_add_news']['und'][$i]['#title'] = t('Add News ').$count;
    
    $form['field_newsl_add_news']['und'][$i]['get_content_btn'] = array(
           '#type' => 'item',
           '#markup' => '<div class = "add-more newsletter-get-content" rel= "'.$i.'">Get Data</div>',
           '#weight' => 3,
    );
  }
 
  //Extract type of node
  if(arg(0) == 'node'){
    if(arg(1) == 'add'){
        $type = arg(2);
        $nid = '';
    } else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }

  //Array used in itg_newsletter.js
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;
  
  drupal_add_js(array('itg_newsletter' => array('settings' => $settings)), array('type' => 'setting'));
  
  //Add JS for itg_newsletter
   drupal_add_js(drupal_get_path('module', 'itg_newsletter') . '/js/itg_newsletter.js', array('weight' => 1));
 
  //Add JS for in-line validation
  $form['#attached']['js'] = array(drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js');
  
  //Unset SEF URL field
  $form['path']['#access'] = FALSE;
  
  //Unset metatag description
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
  
  return $form;
}

/*******************************View Related hooks*****************************/

/**
 * Implement hook_views_pre_render
 * @param Object $view
 */
function itg_newsletter_views_pre_render(&$view) {
  
  //Add "Create Newsletter" button on listing page of Newsletter
  if ($view->name == "manage_newsletter") {
    $header_content_newsletter = '<span class="count">Count('.$view->total_rows.')&nbsp;</span>';
    $header_content_newsletter .= '<a href="./node/add/newsletter">Create Newsletter</a>';
    $view->attachment_before = $header_content_newsletter;
  }
  
  //Add create button for Newsletter Template
  if ($view->name == "manage_newsletter_templates") {
    $header_content_newsletter = '<span class="count">Count('.$view->total_rows.')&nbsp;</span>';
    $header_content_newsletter .= '<a href="./node/add/newsletter-templates">Create Newsletter Template</a>';
    $view->attachment_before = $header_content_newsletter;
  }
}

/**
 * Implement hook_form_views_exposed_form_alter
 * @param Array $form
 * @param Array $form_state
 * @param String $form_id
 */
function itg_newsletter_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  
   if ($form['#id'] == 'views-exposed-form-manage-newsletter-page') {
     
     //Call function autocomplete to show matching titles
     $form['title']['#autocomplete_path'] = 'content-title-list/newsletter/autocomplete';
     $form['title']['#attributes'] = array('placeholder' => t('Subject Line'));     
   }
   
   if ($form['#id'] == 'views-exposed-form-manage-newsletter-templates-page') {
     
     //Call function autocomplete to show matching titles
     $form['title']['#autocomplete_path'] = 'content-title-list/newsletter_templates/autocomplete';
     $form['title']['#attributes'] = array('placeholder' => t('Subject Line'));     
   }
}

/**
 * Implementation of hook_node_presave
 * @param type $node
 *    array of current node
 */
function itg_newsletter_node_presave($node){
  if($node->type == 'newsletter'){
    $template_title = itg_common_get_node_title($node->field_newsl_select_template[LANGUAGE_NONE][0]['target_id']);
    $node->title = $template_title;
  }
}

/**
 * Implementation of hook_node_insert
 * @param Object $node
 */
function itg_newsletter_node_insert($node){
  switch ($node->type) {
    case 'newsletter':
      module_load_include('inc', 'itg_newsletter', 'includes/newsletter_mail');
      
      //Send mail in case of manual process and schedule is "now"
      if($node->field_newsl_newsletter_type[LANGUAGE_NONE][0]['value'] == 'manual' && $node->field_newsl_schedule[LANGUAGE_NONE][0]['value'] == 'now'){
        _send_mail_newsletter($node);
      }
      
      break;
    
    default:
      break;
  }
}

/**
 * Implementation of hook_node_validate
 * @param Object $node
 * @param Array $form
 * @param Array $form_state
 */
function itg_newsletter_node_validate($node, $form, &$form_state) {
  
  //Validation for automatic type newsletter
  if($node->type == 'newsletter' && $node->field_newsl_newsletter_type[LANGUAGE_NONE][0]['value'] == 'automatic'){
    $frequency = $node->field_newsl_frequency[LANGUAGE_NONE][0]['value'];
    $newsletter_content = $node->	field_newsl_newsletter_content[LANGUAGE_NONE][0]['value'];
    $check_existance = itg_newsletter_check_existance_frequency($frequency, $newsletter_content);
    if(isset($check_existance) && arg(1) != $check_existance){
       form_set_error('field_newsl_newsletter_content',t('Newsletter content <strong>@newslettercontent</strong> is already assigned for the frequency <strong>@frequency</strong> '.l('Click here','node/'.$check_existance.'/edit', array('attributes' => array('target'=>'_blank'))).' to see existing newsletter.', array('@newslettercontent' => ucfirst(str_replace('_', ' ', $newsletter_content)).' news', '@frequency' => $frequency)));
     }
  }
}

/**
 * Check newsletter content existance for current frequency
 * @param string $frequency
 * @param string $newsletter_content
 * @return int
 *    return node id(nid)
 */
function itg_newsletter_check_existance_frequency($frequency, $newsletter_content){
  $query = db_select('node', 'n');
  $query->join('field_data_field_newsl_newsletter_type', 'nt', 'nt.entity_id = n.nid');
  $query->join('field_data_field_newsl_frequency', 'nf', 'nf.entity_id = n.nid');
  $query->join('field_data_field_newsl_newsletter_content', 'nc', 'nc.entity_id = n.nid');
  $query->fields('n', array('nid'))
          ->condition('nt.field_newsl_newsletter_type_value', 'automatic', '=')
          ->condition('nf.field_newsl_frequency_value', $frequency, '=')
          ->condition('nc.field_newsl_newsletter_content_value', $newsletter_content, '=');
  $result = $query->execute();
  $nid = $result->fetchObject()->nid;
  if($nid){
    return $nid;
  }
  else {
    false;
  }
}

/**
 * Get Newsletter content using nid
 * Used on newsletter form
 */
function itg_newsletter_content_data(){
   $node = node_load($_POST['content_id']);
   
   if($node->type == 'story'){
     $kicker = $node->field_story_kicker_text[LANGUAGE_NONE][0]['value'];
   } else {
     $kicker = '';
   }
   
   echo drupal_json_encode(array('title' => $node->title, 'kicker' => $kicker, 'uri' => $node->field_story_extra_large_image[LANGUAGE_NONE][0]['uri'])); 
   exit;
}


function itg_newsletter_mail($key, &$message, $params){
    switch ($key) {
    case 'send_newsletter':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}
