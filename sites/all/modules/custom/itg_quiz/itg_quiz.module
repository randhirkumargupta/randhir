<?php

/**
 * @file
 * The ITG Quiz module.
 *
 * Contains functionality for quiz.
 *
 */

/**
 * Implements hook_permission.
 * {@inheritdoc}
 */
function itg_quiz_permission() {
    return array(
    'access quiz page' => array(
      'title' => t('Access Quiz Page'),
    ),
        
   'access quiz users list' => array(
      'title' => t('Access Quiz Users List'),
    )
  );
}

/**
 * Implements hook_menu.
 * {@inheritdoc}
 */
function itg_quiz_menu() {
  
  $items = array();
  
  $items['itg-quiz/%'] = array(
      'title' => t('Quiz'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('itg_quiz_quiz_form'),
      'access callback' => 'user_access',
      'access arguments' => array('access quiz page'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_quiz_form.inc',
  );
  
  $items['quiz-user-list/%'] = array(
      'title' => t('Quiz Users List'),
      'page callback' => 'itg_quiz_user_list',
      'access callback' => TRUE,
      'file' => 'includes/itg_quiz_result.inc',
  );
  
  $items['quiz-winners-mail/%'] = array(
      'title' => t('Quiz Winner Mail'),
      'page callback' => 'itg_quiz_winners_mail_list',
      'access callback' => 'user_access',
      'access arguments' => array('access quiz users list'),
      'file' => 'includes/itg_quiz_winners_mail.inc',
  );
  
 $items['winners'] = array(
      'title' => t('Quiz'),
      'page callback' => 'itg_quiz_winners_list',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,

  );
 // hook menu for lallan top quiz
 $items['quiz-response'] = array(
      'title' => t('Quiz Response'),
      'page callback' => 'itg_quiz_response',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,

  );
 $items['quiz-response-checkbox'] = array(
      'title' => t('Quiz Response'),
      'page callback' => 'show_answer',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,

  );
 
  return $items;
}



/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_quiz_block_info() {
  $blocks['quiz_tab_form_block'] = array(
    'info' => t('Quiz Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL, 
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 * {@inheritdoc}
 */
function itg_quiz_block_view($delta = '') {

  $block = array();
  $data = '';
  switch ($delta) {
    case 'quiz_tab_form_block':                       
      $block['content'] = theme('quiz_tab_form_display_block', array('data' => $data));
    break;        
  }
  
  return $block;
}



/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_quiz_theme() {
  $path = drupal_get_path('module', 'itg_quiz') . '/templates';
  $themes = array(
    'quiz_tab_form_display_block' => array(
          'template' => 'quiz-form-tab-template',
          'path' => $path,
          'variables' => array('data' => NULL),
      ),
      'itg_quiz_form' => array(
          'template' => 'itg-quiz-form',
          'path' => $path,
          'render element' => 'form',
      ),
  );

  return $themes;
}

/***************************Form Related hooks*********************************/
/**
 * Implements hook_form_alter.
 * {@inheritdoc}
 */
function itg_quiz_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'quiz_node_form') {
      
      // Set Destination
      $destination = 'manage-quiz';
     
      // Form fields treatment
      $form['title']['#title'] = 'Quiz Title';
      $form['title']['#description'] = '<p>' . t('Please enter quiz title.') . '</p>';
      $form['actions']['submit']['#value'] = t('Publish');
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
        '#weight' => 21,
        '#value' => t('Cancel'),
      );
      /*$form['actions']['itg_custom_button'] = array(
        '#type' => 'submit',
        '#value' => t('Save as Draft'),
        '#submit' => array(
            'node_form_submit',
            'itg_quiz_form_save_as_draft_submit_callback'
        ),
      );*/
      $form['field_quiz_add_questions'][LANGUAGE_NONE]['#title'] = '';
      $form['field_quiz_answer_type']['#access'] = FALSE;
      $form['field_quiz_options']['#access'] = FALSE;
      unset($form['field_quiz_winners'][LANGUAGE_NONE]['#options']['_none']);
      
      
      // After build and custom summit callback
      $form['#after_build'][] = 'itg_quiz_form_after_build';
      $form['actions']['submit']['#submit'][] = 'itg_quiz_form_custom_submit_callback';
    }
    
    if($form_id == 'itg_quiz_quiz_form'){
      drupal_set_title('India Today Quiz');
    }
    
    // Add two answer option default
    if ((arg(0) == 'node' && arg(1) == "add" && arg(2) == 'quiz') && (isset($form_state['build_info']['args'][0]) && $form_state['build_info']['args'][0]->preview != 'Preview')) {
        drupal_add_js("jQuery(document).ready(function(){ jQuery('.field-name-field-quiz-options-answer .field-add-more-submit').mousedown();
      });", 'inline');
   }
}

/**
 * Custom callback function on submit of quiz form.
 * @param array $form
 * @param array $form_state
 */
 function itg_quiz_form_custom_submit_callback($form, &$form_state) {
  
  // Unset drupal redirection and add custom redirection URL.
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  $form_state['redirect'] = 'manage-quiz';

  // Set custom message on creation and updation of quiz form.
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }
  
  $title = $form_state['node']->title;
  if (arg(2) == 'edit') {
    drupal_set_message(t('Quiz <strong>'.$title.'</strong> has been updated.'));
  } else {
    drupal_set_message(t('Quiz <strong>'.$title.'</strong> has been submitted for further review and approval.'));
  }
}

/**
 * Custom callback function for save as draft submit of quiz form.
 * @param array $form
 * @param array $form_state
 */
function itg_quiz_form_save_as_draft_submit_callback(&$form, &$form_state) {
  $form_state['redirect'] = 'manage-draft-quiz';
}
/**
 * Custom callback function after build.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_quiz_form_after_build($form, &$form_state) {
  global $user, $base_url;
  
  // Extract type of node
  if (arg(0) == 'node') {
    if (arg(1) == 'add') {
        $type = arg(2);
        $nid = '';
    } else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }
  
  // Add Question separator(Question1, Question2...)
  for ($news = 0; $news <= $form['field_quiz_add_questions']['und']['#max_delta']; $news++) {
    $count = $news + 1;
    if ($count == 1) {
      $padding = '0px';
    }
    else {
      $padding = '25px';
    }

    $form['field_quiz_add_questions']['und'][$news]['question_separator'] = array(
        '#type' => 'item',
        '#markup' => '<div style="padding-top: '.$padding.'"><strong>Question ' . $count . ':</strong></div>',
        '#weight' => -1,
    );
    
    // Unset weightage "-None-" item from drop down list
    unset($form['field_quiz_add_questions'][LANGUAGE_NONE][$news]['field_quiz_weightage'][LANGUAGE_NONE]['#options']['_none']);
  }
  

  // Array used in itg_quiz.js.
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;
  
  drupal_add_js(array('itg_quiz' => array('settings' => $settings)), array('type' => 'setting'));
  
  // Add JS for quiz.
   drupal_add_js(drupal_get_path('module', 'itg_quiz') . '/js/itg_quiz.js', array('weight' => 1));
    
  // Unset metatag description.
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags'][LANGUAGE_NONE]['basic']['#title']);
  unset($form['metatags'][LANGUAGE_NONE]['basic']['#description']);
 
  return $form;
}

/*******************************View Related hooks*****************************/

/**
 * Implement hook_views_pre_render
 * {@inheritdoc}
 */
function itg_quiz_views_pre_render(&$view) {
  
  // Add "Create Quiz" button on listing page of quiz.
  if ($view->name == "manage_quiz") {
    $header_content_quiz = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_quiz .= l(t('Create Quiz'), 'node/add/quiz');
    $view->attachment_before = $header_content_quiz;
  }
}

/**
 * Implement hook_form_views_exposed_form_alter.
 * {@inheritdoc}
 */
function itg_quiz_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  
   if ($form['#id'] == 'views-exposed-form-manage-quiz-page' || $form['#id'] == 'views-exposed-form-manage-quiz-page-1') {
     
     // Call function autocomplete to show matching titles.
     $form['title']['#autocomplete_path'] = 'content-title-list/quiz/autocomplete';
     $form['title']['#attributes'] = array('placeholder' => t('Title'));
     $form['nid']['#autocomplete_path'] = 'content-nid-list/quiz/autocomplete';
     $form['nid']['#attributes'] = array('placeholder' => t('Quiz id'));
   }
}

/*******************************Node Related hooks*****************************/

/**
 * Implement hook_node_presave
 *  
 * {@inheritdoc}
 */
function itg_quiz_node_presave($node){
  // Publish/unpublish functionality for quiz
  if ($node->type == 'quiz') {
    if ($node->op == 'Publish') {
      $node->field_quuiz_publish[LANGUAGE_NONE][0]['value'] = 1;
    }
    if ($node->is_new == 1) {
      $node->status = $node->field_quuiz_publish[LANGUAGE_NONE][0]['value'] ? 1: 0;
    }
    else {
      $node->status = $node->field_quuiz_publish[LANGUAGE_NONE][0]['value'] ? 1 : 0;
      field_attach_update('node', $node);
    }
  }
}

/**
 * Implements hook_node_validate.
 * {@inheritdoc}
 */
function itg_quiz_node_validate($node, $form, &$form_state) {

  if ($node->type == 'quiz') {
    
    // Validation for date
    if (!empty($node->field_survey_end_date[LANGUAGE_NONE][0]['value'])) {
      if (strtotime($node->field_survey_start_date[LANGUAGE_NONE][0]['value']) > strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_quiz_end_date', t('Quiz end date must be greater than or equal to start date.'));
      }
    }

    // Validation for answer options(Every question must have atleast two answer options with one correct answer).
    $text_missing_photo = FALSE;
    $text_missing_video = FALSE;
    $photo_is_missing_itself = FALSE;
    $video_is_missing_itself = FALSE;
    
    foreach ($node->field_quiz_add_questions[LANGUAGE_NONE] as $key => $question_arr) {
      $question_txt = $question_arr['field_survey_question'][LANGUAGE_NONE][0]['value'];
      $answer_option_type = $question_arr['field_quiz_option'][LANGUAGE_NONE][0]['value'];

      if (is_numeric($key)) {
        
        // Validation for answer options
        $count_ans_text = 0;
        $count_ans_photo = 0;
        $count_ans_video = 0;

        foreach ($question_arr['field_quiz_options_answer'][LANGUAGE_NONE] as $answers_arr) {
          
          // Validation for text
          if (!empty($answers_arr['field_quiz_answer_text'][LANGUAGE_NONE][0]['value'])) {
            $count_ans_text++;
          }

          // Count no.of photos uploaded for a question
          if ($answer_option_type == 'Photo') {
            if (is_numeric($answers_arr['field_quiz_answer_image'][LANGUAGE_NONE][0]['fid']) && !empty($answers_arr['field_quiz_answer_image'][LANGUAGE_NONE][0]['fid'])) {
              $count_ans_photo++;
            }
          }

          // Count no.of videos uploaded for a question
          if ($answer_option_type == 'Video') {
            if (is_numeric($answers_arr['field_quiz_answer_video'][LANGUAGE_NONE][0]['fid']) && !empty($answers_arr['field_quiz_answer_video'][LANGUAGE_NONE][0]['fid'])) {
              $count_ans_video++;
            }
          }
        }
        
        // Create flag to validate answer options for photo type
        if ($answer_option_type == 'Photo') {
          if ($count_ans_photo > $count_ans_text) {
            $text_missing_photo = TRUE;
          }

          if ($count_ans_text > $count_ans_photo) {
            $photo_is_missing_itself = TRUE;
          }
        }
        
         // Create flag to validate answer options for video type
        if ($answer_option_type == 'Video') {
          if ($count_ans_video > $count_ans_text) {
            $text_missing_video = TRUE;
          }

          if ($count_ans_text > $count_ans_video) {
            $video_is_missing_itself = TRUE;
          }
        }
        
       
        
        // Validation for correct answer
        $correct_ans_available = FALSE;
        foreach ($question_arr['field_quiz_options_answer'][LANGUAGE_NONE] as $correct_ans_arr) {
          if (!empty($correct_ans_arr['field_quiz_correct_answer'][LANGUAGE_NONE][0]['value'])) {
            $correct_ans_available = TRUE;
          }
        }

        // Show error message for text
        if ($count_ans_text < 2) {
          form_set_error('field_quiz_options_answer', t('Please provide atleast two answer options for question <strong>"@question"</strong>.', array('@question' => $question_txt)));
        }

        // Show error message for photos
        if ($answer_option_type == 'Photo') {
          if ($count_ans_photo < 2) {
            form_set_error('field_quiz_options_answer', t('Please provide atleast two answer photos for question <strong>"@question"</strong>.', array('@question' => $question_txt)));
          }
          if ($text_missing_photo) {
            form_set_error('field_quiz_options_answer', t('Please provide answer text for all options for question <strong>"@question"</strong>.', array('@question' => $question_txt)));
          }
          if ($photo_is_missing_itself) {
            form_set_error('field_quiz_options_answer', t('Please provide answer photo for all options for question <strong>"@question"</strong>.', array('@question' => $question_txt)));
          }
        }
        
        // Show error message for videos
        if ($answer_option_type == 'Video') {
          if ($count_ans_video < 2) {
            form_set_error('field_quiz_options_answer', t('Please provide atleast two answer videos for question <strong>"@question"</strong>.', array('@question' => $question_txt)));
          }
          if ($text_missing_video) {
            form_set_error('field_quiz_options_answer', t('Please provide answer text for all options for question <strong>"@question"</strong>.', array('@question' => $question_txt)));
          }
          if ($video_is_missing_itself) {
            form_set_error('field_quiz_options_answer', t('Please provide answer video for all options for question <strong>"@question"</strong>.', array('@question' => $question_txt)));
          }
        }

        // Show error message for correct answer
        if (!$correct_ans_available) {
          form_set_error('field_quiz_options_answer', t('Please mark correct answer for question <strong>"@question"</strong>.', array('@question' => $question_txt)));
        }
      }
    }
  }
}

/*******************************Common Functions*****************************/

/**
 * Get active node for quiz.
 * @return array
 */
function itg_quiz_get_current_quiz() {
  $curr_time = strtotime(date('Y-m-d').' 00:00:00');
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
          ->condition('n.type', 'quiz', '=')
          ->condition('n.status', 1, '=')
          ->orderBy('n.created', 'DESC')
          ->range(0, 1);
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $nid = $record['nid'];
  }

  $node = node_load($nid);
  $quiz_end_date = strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']);

  if (!empty($quiz_end_date)) {
    if ($quiz_end_date < $curr_time) {
      return FALSE;
    } else {
      return $node;
    }
  } else {
    return $node;
  }
}

/**
 * Get quiz percentage taken by a user(Anonymous/Authenticated).
 * @param int $nid
 * @param string $user_type
 * @return string
 */
function itg_quiz_get_quiz_by_users($nid, $user_type){
  
  // Get total quiz for a node.
  $total_quiz = itg_quiz_get_total_quiz($nid);
  
  if (!$total_quiz) {
    return '0%';
  } else {
    $result = db_select('itg_quiz_user', 'su')
            ->fields('su')
            ->condition('su.user_type', $user_type, '=')
            ->condition('su.nid', $nid, '=')
            ->execute();
    $total_quiz_by_user = $result->rowCount();
    $quiz_percentage = ($total_quiz_by_user / $total_quiz) * 100;
    return round($quiz_percentage, 2) . '%';
  }
}

/**
 * Get total number of quiz taken by users for a node.
 * @param int $nid
 * @return int
 */
function itg_quiz_get_total_quiz($nid){
    $result = db_select('itg_quiz_user', 'isu')
          ->fields('isu')
          ->condition('isu.nid', $nid, '=')
          ->execute();
  $total_quiz = $result->rowCount();
  if ($total_quiz) {
    return $total_quiz;
  } else {
    return 0;
  }
    
}


/**
 * Get answer detail attempt by users.
 * @param int $nid
 * @return int
 */
function itg_quiz_contest_result($nid, $unique_key, $param = NULL){
  if (empty($param)) {
    $result = db_select('itg_quiz_detail', 'qd')
            ->fields('qd')
            ->condition('qd.nid', $nid, '=')
            ->condition('qd.quiz_key', $unique_key, '=')
            ->groupBy('qd.ques_id')
            ->execute();
    $total_quiz = $result->rowCount();
    return $total_quiz ? $total_quiz : 0;
  } else {
    $quiz_radios = 0;
    $result_radios = db_select('itg_quiz_detail', 'qd')
            ->fields('qd')
            ->condition('qd.nid', $nid, '=')
            ->condition('qd.quiz_key', $unique_key, '=')
            ->condition('qd.correct_answer', $param, '=')
            ->condition('qd.ans_type', 'radios', '=')
            ->execute();
    $quiz_radios = $result_radios->rowCount();

    $result_checkbox = db_select('itg_quiz_detail', 'qd')
            ->fields('qd')
            ->condition('qd.nid', $nid, '=')
            ->condition('qd.quiz_key', $unique_key, '=')
            ->condition('qd.ans_type', 'checkboxes', '=')
            ->execute();
    while ($records = $result_checkbox->fetchAssoc()) {
      $ques_ans[$records['ques_id']][] = $records['ans_id'];
    }

    $quiz_checkboxes = 0;
    foreach ($ques_ans as $key => $value) {
      $correct_ans_arr = itg_quiz_get_correct_answer($key);
      
      if(count($value) == count($correct_ans_arr)){
        $arr_diff_count = count(array_diff($correct_ans_arr, $value));
        if ($arr_diff_count < 1) {
          $quiz_checkboxes = $quiz_checkboxes + 1;
        } else {
          $quiz_checkboxes = $quiz_checkboxes;
        }
      } else {
        $quiz_checkboxes = $quiz_checkboxes;
      }
      
    }
    
    $total_correct_ans = $quiz_radios + $quiz_checkboxes;

    return $total_correct_ans;
  }
 
}

/**
 * Get total score using unique.
 * @param int $nid
 * @param sting $unique_key
 * @return int
 */
function itg_quiz_get_total_score($nid, $unique_key){
    $result = db_select('itg_quiz_detail', 'qd')
          ->fields('qd')
          ->condition('qd.nid', $nid, '=')
          ->condition('qd.quiz_key', $unique_key, '=')
          ->groupBy('qd.ques_id')
          ->execute();
  $total_quiz = $result->rowCount();
  return $total_quiz ? $total_quiz : 0;
}

/**
 * Get winners list.
 * @param int $nid
 * @return int
 */
function itg_quiz_winners_list($nid, $range){

    if (!empty($range)) {
    $result = db_select('itg_quiz_detail', 'qd')
            ->fields('qd')
            ->condition('qd.nid', $nid, '=')
            ->condition('qd.correct_answer', 'yes', '=')
            ->groupBy('qd.quiz_key')
            ->range(0, $range)
            ->execute();
  } else {
    $result = db_select('itg_quiz_detail', 'qd')
            ->fields('qd')
            ->condition('qd.nid', $nid, '=')
            ->condition('qd.correct_answer', 'yes', '=')
            ->groupBy('qd.quiz_key')
            ->range(0, 10)
            ->execute();
  }

  while ($record = $result->fetchAssoc()) {
    $winners_arr[$record['quiz_key']] = itg_quiz_winners_count_uniquekey($nid, $record['quiz_key']);
  }
  arsort($winners_arr);
  foreach ($winners_arr as $key => $value) {
    $winner_final_list[] = itg_quiz_winner_user_list($key);
  }
  return $winner_final_list;
}

/**
 * Get count for unique key.
 * @param int $nid
 * @return int
 */
function itg_quiz_winners_count_uniquekey($nid, $unique_key) {
  $result = db_select('itg_quiz_detail', 'qd')
          ->fields('qd')
          ->condition('qd.quiz_key', $unique_key, '=')
          ->condition('qd.correct_answer', 'yes', '=')
          ->condition('qd.nid', $nid, '=')
          ->execute();
  $total_quiz = $result->rowCount();
  if ($total_quiz > 0) {
    return $total_quiz;
  } else {
    return 0;
  }
}

/**
 * Get user name to display winners list.
 * @param string $unique_key
 * @return string
 */
function itg_quiz_winner_user_list($unique_key) {
  $result = db_select('itg_quiz_detail', 'qd')
          ->fields('qd', array('uid'))
          ->condition('qd.quiz_key', $unique_key, '=')
          ->range(0, 1)
          ->execute();
  while ($record = $result->fetchAssoc()) {
    if ($record['uid'] == 0) {
      $user_name = 'Anonymous';
    } else {
      $user = user_load($record['uid']);
      $user_name = ucfirst($user->name);
    }
  }
  return $user_name;
}

/**
 * Fetch correct answer.
 * @param int $ques_id
 * @return array
 */
function itg_quiz_get_correct_answer($ques_id){
  $question_detail = entity_load('field_collection_item', array($ques_id));
  foreach ($question_detail[$ques_id]->field_quiz_options_answer[LANGUAGE_NONE] as $ans_option) {
    $ans_option_arr = entity_load('field_collection_item', array($ans_option['value']));
    foreach ($ans_option_arr[$ans_option['value']]->field_quiz_correct_answer[LANGUAGE_NONE] as $correct_ans) {
      if ($correct_ans['value'] == 'Yes') {
        $correct_ans_op[] = $ans_option['value'];
      }
    }
  }
  return $correct_ans_op;
}

/**
 * Prepare users list link using in view listing.
 * @param type $nid
 * @return string
 */
function itg_quiz_views_user_list($nid){
    if(itg_common_check_record_existance($nid, 'itg_quiz_user_score', 'nid') > 0){
    return l('View List','quiz-user-list/'.$nid, array('attributes' => array('target'=>'_blank')));
  } else {
    return 'View List';
  }
}

/**
 * Validate function of quiz form
 * @param array $form
 * @param array $form_state
 */
function itg_quiz_quiz_form_validate($form, &$form_state) {
  global $user;
  if($user->uid) {
   $cookie_name = 'Drupal_visitor_itgcms_quiz_' . $form_state['values']['nid'] . '_' . $user->uid; 
  } else {
   $cookie_name = 'Drupal_visitor_itgcms_quiz_' . $form_state['values']['nid'];
  }
  
  if (isset($_COOKIE[$cookie_name])) {
    form_set_error('answer_option', t('Sorry! You can not proceed, you have already attempted this quiz.'));
  } 
}

/**
 * Submit handler for quiz form
 * @param Array $form
 * @param Array $form_state
 */
function itg_quiz_quiz_form_submit($form, &$form_state) {
  global $user;

  // Form variable
  $form_detail = $form_state['values'];
  $quiz_type = $form_detail['quiz_type'];
  $quiz_result_type = $form_detail['quiz_resut_type'];
  $question_total = $form_detail['question_total'];
  $question_format = $form_detail['question_format'];

  // Extract user type
  if ($user->uid) {
    $user_type = 'authenticated';
    $user_name = $user->name;
    $user_mail = $user->mail;
  } else {
    $user_type = 'anonymous';
    $user_name = 'Anonymous User';
    $user_mail = 'anonymous.user@indiatoday.com';
  }

  //Set a session for a quiz(Will be same for all questions during a quiz) 
  if(!isset($_SESSION['quiz_unique_key'])){
    $_SESSION['quiz_unique_key'] = user_password(6);
  }

  if ($question_format == 'All questions at a time') {
    $loop_start_num = 0;
    $loop_end_num = $question_total - 1;
  } else {
    $btn_num_arr = explode('_', $form_state['clicked_button']['#name']);
    $loop_start_num = $btn_num_arr[1];
    $loop_end_num = $btn_num_arr[1];
  }

  //Insert each question and answer in to DB
  for ($num = $loop_start_num; $num <= $loop_end_num; $num++) {

    // Redio type
    if ($form_state['values']['question_type' . $num] == 'radios') {
      $ans_op_arr = explode('-', $form_state['values']['answer_option' . $num]);
      if ($ans_op_arr[0] == $form_state['values']['correct_answer' . $num][0]) {
        $_SESSION['score_radios'] = $_SESSION['score_radios'] + $form_state['values']['question_weightage_' . $form_state['values']['question_id' . $num]];
        $currect_ans = 'yes';
      } else {
        $currect_ans = 'no';
      }

      if (!empty($ans_op_arr[1])) {
        db_insert('itg_quiz_detail')
                ->fields(array(
                    'nid' => $form_state['values']['nid'],
                    'uid' => $user->uid,
                    'ques_id' => $form_state['values']['question_id' . $num],
                    'ans_id' => $ans_op_arr[0],
                    'question' => $form_state['values']['question' . $num],
                    'answer' => strtolower($ans_op_arr[1]),
                    'correct_answer' => $currect_ans,
                    'ans_type' => $form_state['values']['question_type' . $num],
                    'user_type' => $user_type,
                    'page_url' => $form_state['values']['quiz_url'],
                    'quiz_title' => $form_state['values']['quiz_title'],
                    'quiz_key' => $_SESSION['quiz_unique_key'],
                    'created' => time(),
                ))
                ->execute();
      }
    }
    // Checkbox type
    if ($form_state['values']['question_type' . $num] == 'checkboxes') {
      $i = 0;
      foreach ($form_state['values']['answer_option' . $num] as $key => $value) {
        if ($value) {
          $ans_op_arr = explode('-', $value);
          if ($ans_op_arr[0] == $form_state['values']['correct_answer' . $num][$i]) {
            $currect_ans = 'yes';
            $ans_corr[] = $form_state['values']['correct_answer' . $num][$i];
          } else {
            $currect_ans = 'no';
          }

          if (!empty($ans_op_arr[1])) {
            db_insert('itg_quiz_detail')
                    ->fields(array(
                        'nid' => $form_state['values']['nid'],
                        'uid' => $user->uid,
                        'ques_id' => $form_state['values']['question_id' . $num],
                        'ans_id' => $ans_op_arr[0],
                        'question' => $form_state['values']['question' . $num],
                        'answer' => strtolower($ans_op_arr[1]),
                        'correct_answer' => $currect_ans,
                        'ans_type' => $form_state['values']['question_type' . $num],
                        'user_type' => $user_type,
                        'page_url' => $form_state['values']['quiz_url'],
                        'quiz_title' => $form_state['values']['quiz_title'],
                        'quiz_key' => $_SESSION['quiz_unique_key'],
                        'created' => time(),
                    ))
                    ->execute();
          }
        }
        $i++;
      }

      $corr_ans_for_this_ques = itg_quiz_get_correct_answer($form_state['values']['question_id' . $num]);

      if (count($ans_corr) == count($corr_ans_for_this_ques)) {
        $arr_diff_count = count(array_diff($corr_ans_for_this_ques, $ans_corr));
        if ($arr_diff_count < 1) {
          $_SESSION['score_checkboxes'] = $_SESSION['score_checkboxes'] + $form_state['values']['question_weightage_' . $form_state['values']['question_id' . $num]];
        } else {
          $_SESSION['score_checkboxes'] = $_SESSION['score_checkboxes'] ? $_SESSION['score_checkboxes'] : 0;
        }
      }
    }
  }

  $total_score = $_SESSION['score_radios'] + $_SESSION['score_checkboxes'];

  // At the end, after finishing quiz
  if ($form_state['clicked_button']['#value'] == 'Submit') {
    $output = '';
    if ($quiz_type == 'immediate') {
        $total_ques_attempt = itg_quiz_contest_result($form_state['values']['nid'], $_SESSION['quiz_unique_key'], NULL);
        $correct_answer = itg_quiz_contest_result($form_state['values']['nid'], $_SESSION['quiz_unique_key'], 'yes');
        $incorrect_answer = $total_ques_attempt - $correct_answer;
        
        $output = '<div class = "quiz-contest-result-container"> <div class="quiz-question-thankyou-msg">Thank you for attempting our quiz. Result is given below:</div>
        <div class = "quiz-contest-result"><strong>Total Question  Attempted: </strong> ' . $total_ques_attempt . '</div>
        <div class = "quiz-contest-result"><strong>Correct Answer: </strong> ' . $correct_answer . '</div>
        <div class = "quiz-contest-result"><strong>Incorrect Answer: </strong> ' . $incorrect_answer . '</div>
        <div class = "quiz-contest-result"><strong>Total Score: </strong> ' . $total_score . '</div>';
        $output .= '</div>';
        drupal_set_message($output, 'message');
    }
    else {
     drupal_set_message(t('Thank you for attempting our quiz. Once our quiz will be finished, you would get an email with winner\'s name.'));
    }

  }

  // Insert quiz & user info into DB on final submit
  if(strtolower($form_state['clicked_button']['#value']) == 'submit') {
    db_insert('itg_quiz_user')
            ->fields(array(
                'nid' => $form_state['values']['nid'],
                'uid' => $user->uid,
                'user_type' => $user_type,
                'page_url' => $_GET['q'],
                'created' => time(),
            ))
            ->execute();

    // Save user score details
    db_insert('itg_quiz_user_score')
        ->fields(array(
            'uid' => $user->uid,
            'nid' => $form_state['values']['nid'],
            'user_name' => $user_name,
            'user_email' => $user_mail,
            'quiz_title' => $form_state['values']['quiz_title'],
            'quiz_score' => $total_score ? $total_score : 0,
            'ques_attempt' => itg_quiz_contest_result($form_state['values']['nid'], $_SESSION['quiz_unique_key'], NULL),
            'ques_total' => $form_state['values']['question_total'],
            'quiz_key' => $_SESSION['quiz_unique_key'],
            'created' => time(),
        ))
        ->execute();

      unset($_SESSION['score_radios']);
      unset($_SESSION['score_checkboxes']);
      unset($_SESSION['quiz_unique_key']);
      
      // Set coockie for current quiz attempted by user
      if($user->uid) {
        user_cookie_save(array('itgcms_quiz_'.$form_state['values']['nid'].'_'.$user->uid => 1));
      } else {
        user_cookie_save(array('itgcms_quiz_'.$form_state['values']['nid'] => 1));
      }
      
      // Call loyalty & rewards function to save points for a user
      if(function_exists('itg_loyalty_reward_earnpoint')) {
        if($user->uid) {
          itg_loyalty_reward_earnpoint($form_state['values']['nid'], 'participate', $user->uid);
        }
      }
  }
}

/**
 * Submit handler of Ajax
 * @param Array $form
 * @param Array $form_state
 * @return Array
 */
function quiz_form_ajax_handler(&$form, &$form_state){
  $commands = array();
  $commands[] = ajax_command_replace('#messages', '<div id="messages">' . theme('status_messages') . '</div>');
  return array(
      '#type' => 'ajax',
      '#commands' => $commands
  );
}

// Quiz answer response for Sigle Correct Answer


function itg_quiz_response(){
    global $ans_value;

     $nid= $_GET['nid'];
     $ans= $_GET['ans_val'];
     
     
     $ans_value= explode("-",$ans);
    $query="select f3.field_quiz_correct_answer_value as correct_answer from  node as n
inner join field_data_field_quiz_add_questions as f1  on f1.entity_id = n.nid
inner join field_data_field_quiz_options_answer as f2  on f2.entity_id = f1.field_quiz_add_questions_value
inner join field_data_field_quiz_correct_answer as f3  on f3.entity_id = f2.field_quiz_options_answer_value
where 
f3.entity_type = 'field_collection_item'
 and f3.bundle = 'field_quiz_options_answer' 
 and  n.nid = $nid
 and  f3.entity_id = $ans_value[0]";
$result=db_query($query);

$record = $result->fetchObject();  

$record->correct_answer;
    
    if ($record->correct_answer=='Yes'){
        $choice  = 'correct';
        $query =db_select('taxonomy_term_data', 't');
        $query->join('field_data_field_radio_button', 'r', 'r.entity_id = t.tid');
        $query->fields('t', array('name'));
        $query->condition('r.field_radio_button_value', $choice, '=');
        $query->condition('t.vid',QUIZ_TAXONOMY_TID, '=');
        $res = $query->execute();        
	$result = $res->fetchAll();
        if(is_array($result) && !empty($result)){
          shuffle($result);
        }        
        print $result[0]->name.'-Correct';
        //print 'Correct';
    }         
        else { 
        $choice  = 'Incorrect';
        $query =db_select('taxonomy_term_data', 't');
        $query->join('field_data_field_radio_button', 'r', 'r.entity_id = t.tid');
        $query->fields('t', array('name'));
        $query->condition('r.field_radio_button_value', $choice, '=');
        $query->condition('t.vid',QUIZ_TAXONOMY_TID, '=');
        $res = $query->execute();        
	$result = $res->fetchAll();
        if(is_array($result) && !empty($result)){
          shuffle($result);
        }        
        print $result[0]->name.'-Incorrect';
        //print 'Incorrect';
    }
     
    }
    
    // Quiz answer response for Multiple Correct Answer
    
  function show_answer() {
    $nid = $_GET['nid'];
    $ans = json_decode(stripslashes($_GET['ans_val']));
    $not_selected = json_decode(stripslashes($_GET['not_select']));
      foreach($not_selected as $key=>$value) {
       $ansval = explode("-",$value);
      
        $query="select f3.field_quiz_correct_answer_value as correct_answer from  node as n
	inner join field_data_field_quiz_add_questions as f1  on f1.entity_id = n.nid
	inner join field_data_field_quiz_options_answer as f2  on f2.entity_id = f1.field_quiz_add_questions_value
	inner join field_data_field_quiz_correct_answer as f3  on f3.entity_id = f2.field_quiz_options_answer_value
	where 
	f3.entity_type = 'field_collection_item'
	 and f3.bundle = 'field_quiz_options_answer' 
	 and  n.nid = $nid
	 and  f3.entity_id = $ansval[0]";
    $result=db_query($query);

    $record = $result->fetchObject();  
    $answer[] = $record->correct_answer;
  }
  if(in_array('Yes', $answer)) {
   	$choice  = 'Incorrect';
	$query =db_select('taxonomy_term_data', 't');
	$query->join('field_data_field_radio_button', 'r', 'r.entity_id = t.tid');
	$query->fields('t', array('name'));
	$query->condition('r.field_radio_button_value', $choice, '=');
	$query->condition('t.vid',QUIZ_TAXONOMY_TID, '=');
	$res = $query->execute();        
	$result = $res->fetchAll();
	if(is_array($result) && !empty($result)){
	  shuffle($result);
	}        
	print $result[0]->name.'-Incorrect';
  } else {
	  foreach($ans as $key=>$value) {
	    $ansval = field_data_field_quiz_add_questions_explode("-",$value);
	    $query="select f3.field_quiz_correct_answer_value as correct_answer from  node as n
		inner join field_data_field_quiz_add_questions as f1  on f1.entity_id = n.nid
		inner join field_data_field_quiz_options_answer as f2  on f2.entity_id = f1.field_quiz_add_questions_value
		inner join field_data_field_quiz_correct_answer as f3  on f3.entity_id = f2.field_quiz_options_answer_value
		where 
		f3.entity_type = 'field_collection_item'
		 and f3.bundle = 'field_quiz_options_answer' 
		 and  n.nid = $nid
		 and  f3.entity_id = $ansval[0]";
	    $result=db_query($query);

	    $record = $result->fetchObject();
            $answer_checked[] = $record->correct_answer;  

             
	  }
          if(in_array('', $answer_checked)) {
	        $choice  = 'incorrect';
		$query =db_select('taxonomy_term_data', 't');
		$query->join('field_data_field_radio_button', 'r', 'r.entity_id = t.tid');
		$query->fields('t', array('name'));
		$query->condition('r.field_radio_button_value', $choice, '=');
		$query->condition('t.vid',QUIZ_TAXONOMY_TID, '=');
		$res = $query->execute();        
		$result = $res->fetchAll();
		if(is_array($result) && !empty($result)){
		  shuffle($result);
		}        
		print $result[0]->name.'-incorrect';
	    } else {
                $choice  = 'correct';
		$query =db_select('taxonomy_term_data', 't');
		$query->join('field_data_field_radio_button', 'r', 'r.entity_id = t.tid');
		$query->fields('t', array('name'));
		$query->condition('r.field_radio_button_value', $choice, '=');
		$query->condition('t.vid',QUIZ_TAXONOMY_TID, '=');
		$res = $query->execute();        
		$result = $res->fetchAll();
		if(is_array($result) && !empty($result)){
		  shuffle($result);
		}        
		print $result[0]->name.'-correct';
            }
  }
}

    
    
    
    
