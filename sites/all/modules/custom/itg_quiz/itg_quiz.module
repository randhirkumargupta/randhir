<?php

/**
 * @file
 * The ITG Quiz module.
 *
 * Contains functionality for quiz.
 *
 */

/**
 * Implements hook_permission.
 * {@inheritdoc}
 */
function itg_quiz_permission() {
    return array(
    'access quiz page' => array(
      'title' => t('Access Quiz Page'),
    ),
        
   'access quiz users list' => array(
      'title' => t('Access Quiz Users List'),
    )
  );
}

/**
 * Implements hook_menu.
 * {@inheritdoc}
 */
function itg_quiz_menu() {
  
  $items = array();
  
  $items['itg-quiz'] = array(
      'title' => t('Quiz'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('itg_quiz_quiz_form'),
      'access callback' => 'user_access',
      'access arguments' => array('access quiz page'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_quiz_form.inc',
  );
  
  $items['quiz-user-list/%'] = array(
      'title' => t('Quiz User List'),
      'page callback' => 'itg_quiz_user_list',
      'access callback' => TRUE,
      'file' => 'includes/itg_quiz_result.inc',
  );
  
  $items['quiz-winners-mail/%'] = array(
      'title' => t('Quiz Winner Mail'),
      'page callback' => 'itg_quiz_winners_mail_list',
      'access callback' => 'user_access',
      'access arguments' => array('access quiz users list'),
      'file' => 'includes/itg_quiz_winners_mail.inc',
  );
  
 $items['winners'] = array(
      'title' => t('Quiz'),
      'page callback' => 'itg_quiz_winners_list',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,

  );
  return $items;
}

/**
 * Implements hook_block_info().
 * {@inheritdoc}
 */
function itg_quiz_block_info() {
  $blocks['quiz_tab_form_block'] = array(
    'info' => t('Quiz Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL, 
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 * {@inheritdoc}
 */
function itg_quiz_block_view($delta = '') {

  $block = array();
  $data = '';
  switch ($delta) {
    case 'quiz_tab_form_block':                       
      $block['content'] = theme('quiz_tab_form_display_block', array('data' => $data));
    break;        
  }
  
  return $block;
}



/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_quiz_theme() {
  $themes = array(
    'quiz_tab_form_display_block' => array(
      'template' => 'quiz-form-tab-template',
      'path' => drupal_get_path('module', 'itg_quiz') . '/templates',
      'variables' => array('data' => NULL),
    ),   
  );

  return $themes;
}

/***************************Form Related hooks*********************************/
/**
 * Implements hook_form_alter.
 * {@inheritdoc}
 */
function itg_quiz_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'quiz_node_form') {
    
      // Set Destination
      $destination = 'manage-quiz';
     
      // Form fields treatment
      $form['title']['#title'] = 'Quiz Title';
      $form['title']['#description'] = '<p>' . t('Please enter quiz title.') . '</p>';
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
        '#weight' => 21,
        '#value' => t('Cancel'),
      );
      $form['field_quiz_add_questions'][LANGUAGE_NONE]['#title'] = '';
      $form['field_quiz_answer_type']['#access'] = FALSE;
      $form['field_quiz_options']['#access'] = FALSE;
      
      
      // After build and custom summit callback
      $form['#after_build'][] = 'itg_quiz_form_after_build';
      $form['actions']['submit']['#submit'][] = 'itg_quiz_form_custom_submit_callback';
    }
    
    if($form_id == 'itg_quiz_quiz_form'){
      drupal_set_title('India Today Quiz');
    }
    
    // Add two answer option default
    if ((arg(0) == 'node' && arg(1) == "add" && arg(2) == 'quiz') && (isset($form_state['build_info']['args'][0]) && $form_state['build_info']['args'][0]->preview != 'Preview')) {
        drupal_add_js("jQuery(document).ready(function(){ jQuery('.field-name-field-quiz-options-answer .field-add-more-submit').mousedown();
      });", 'inline');
   }
}

/**
 * Custom callback function on submit of quiz form.
 * @param array $form
 * @param array $form_state
 */
 function itg_quiz_form_custom_submit_callback($form, &$form_state) {
  
  // Unset drupal redirection and add custom redirection URL.
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }
  $form_state['redirect'] = 'manage-quiz';

  // Set custom message on creation and updation of quiz form.
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }
  
  $title = $form_state['node']->title;
  if (arg(2) == 'edit') {
    drupal_set_message(t('Quiz <strong>'.$title.'</strong> has been updated.'));
  } else {
    drupal_set_message(t('Quiz <strong>'.$title.'</strong> has been submitted for further review and approval.'));
  }
}

/**
 * Custom callback function after build.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_quiz_form_after_build($form, &$form_state) {
  global $user, $base_url;
  
  // Extract type of node
  if (arg(0) == 'node') {
    if (arg(1) == 'add') {
        $type = arg(2);
        $nid = '';
    } else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }
  
  // Add Question separator(Question1, Question2...)
  for ($news = 0; $news <= $form['field_quiz_add_questions']['und']['#max_delta']; $news++) {
    $count = $news + 1;
    if ($count == 1) {
      $padding = '0px';
    }
    else {
      $padding = '25px';
    }

    $form['field_quiz_add_questions']['und'][$news]['question_separator'] = array(
        '#type' => 'item',
        '#markup' => '<div style="padding-top: '.$padding.'"><strong>Question ' . $count . ':</strong></div>',
        '#weight' => -1,
    );
  }
  

  // Array used in itg_quiz.js.
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;
  
  drupal_add_js(array('itg_quiz' => array('settings' => $settings)), array('type' => 'setting'));
  
  // Add JS for quiz.
   drupal_add_js(drupal_get_path('module', 'itg_quiz') . '/js/itg_quiz.js', array('weight' => 1));
    
  // Unset metatag description.
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);
 
  return $form;
}

/*******************************View Related hooks*****************************/

/**
 * Implement hook_views_pre_render
 * {@inheritdoc}
 */
function itg_quiz_views_pre_render(&$view) {
  
  // Add "Create Quiz" button on listing page of quiz.
  if ($view->name == "manage_quiz") {
    $header_content_quiz = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_quiz .= l(t('Create Quiz'), 'node/add/quiz');
    $view->attachment_before = $header_content_quiz;
  }
}

/**
 * Implement hook_form_views_exposed_form_alter.
 * {@inheritdoc}
 */
function itg_quiz_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  
   if ($form['#id'] == 'views-exposed-form-manage-quiz-page') {
     
     // Call function autocomplete to show matching titles.
     $form['title']['#autocomplete_path'] = 'content-title-list/quiz/autocomplete';
     $form['title']['#attributes'] = array('placeholder' => t('Title'));
     $form['nid']['#autocomplete_path'] = 'content-nid-list/quiz/autocomplete';
     $form['nid']['#attributes'] = array('placeholder' => t('Quiz id'));
   }
}

/*******************************Node Related hooks*****************************/

/**
 * Implements hook_node_validate.
 * {@inheritdoc}
 */
function itg_quiz_node_validate($node, $form, &$form_state) {

  // Date validation for start date and end date.
  if ($node->type == 'quiz') {
    if (!empty($node->field_survey_end_date[LANGUAGE_NONE][0]['value'])) {
      if (strtotime($node->field_survey_start_date[LANGUAGE_NONE][0]['value']) > strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value'])) {
        form_set_error('field_quiz_end_date', t('Quiz end date must be greater or equal to start date.'));
      }
    }

    // Add validation for answer options(Every question must have atleast two answer options with one correct answer).
    foreach ($node->field_quiz_add_questions[LANGUAGE_NONE] as $key => $question_arr) {
      $question_txt = $question_arr['field_survey_question'][LANGUAGE_NONE][0]['value'];

      if (is_numeric($key)) {
   
        // Validation for answer options
        $count_ans_text = 0;
        foreach ($question_arr['field_quiz_options_answer'][LANGUAGE_NONE] as $correct_ans_arr) {
          if (!empty($correct_ans_arr['field_quiz_answer_text'][LANGUAGE_NONE][0]['value'])) {
            $count_ans_text++;
          }
        }
        
         // Validation for correct answer
        $correct_ans_available = FALSE;
        foreach ($question_arr['field_quiz_options_answer'][LANGUAGE_NONE] as $correct_ans_arr) {
          if (!empty($correct_ans_arr['field_quiz_correct_answer'][LANGUAGE_NONE][0]['value'])) {
            $correct_ans_available = TRUE;
          }
        }

        if ($count_ans_text < 2) {
          form_set_error('field_quiz_options_answer', t('Please provide atleast two answer options for question <strong>@question</strong>?', array('@question' => $question_txt)));
        }
        if (!$correct_ans_available) {
          form_set_error('field_quiz_options_answer', t('Please mark correct answer for question <strong>@question</strong>?', array('@question' => $question_txt)));
        }
      }
    }
  }
}

/*******************************Common Functions*****************************/

/**
 * Get active node for quiz.
 * @return array
 */
function itg_quiz_get_current_quiz() {
  $curr_time = strtotime(date('Y-m-d').' 00:00:00');
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
          ->condition('n.type', 'quiz', '=')
          ->condition('n.status', 1, '=')
          ->orderBy('n.created', 'DESC')
          ->range(0, 1);
  $result = $query->execute();
  while ($record = $result->fetchAssoc()) {
    $nid = $record['nid'];
  }

  $node = node_load($nid);
  $quiz_end_date = strtotime($node->field_survey_end_date[LANGUAGE_NONE][0]['value']);

  if (!empty($quiz_end_date)) {
    if ($quiz_end_date < $curr_time) {
      return FALSE;
    } else {
      return $node;
    }
  } else {
    return $node;
  }
}

/**
 * Get quiz percentage taken by a user(Anonymous/Authenticated).
 * @param int $nid
 * @param string $user_type
 * @return string
 */
function itg_quiz_get_quiz_by_users($nid, $user_type){
  
  // Get total quiz for a node.
  $total_quiz = itg_quiz_get_total_quiz($nid);
  
  if (!$total_quiz) {
    return '0%';
  } else {
    $result = db_select('itg_quiz_user', 'su')
            ->fields('su')
            ->condition('su.user_type', $user_type, '=')
            ->condition('su.nid', $nid, '=')
            ->execute();
    $total_quiz_by_user = $result->rowCount();
    $quiz_percentage = ($total_quiz_by_user / $total_quiz) * 100;
    return round($quiz_percentage, 2) . '%';
  }
}

/**
 * Get total number of quiz taken by users for a node.
 * @param int $nid
 * @return int
 */
function itg_quiz_get_total_quiz($nid){
    $result = db_select('itg_quiz_user', 'isu')
          ->fields('isu')
          ->condition('isu.nid', $nid, '=')
          ->execute();
  $total_quiz = $result->rowCount();
  if ($total_quiz) {
    return $total_quiz;
  } else {
    return 0;
  }
    
}


/**
 * Get answer detail attempt by users.
 * @param int $nid
 * @return int
 */
function itg_quiz_contest_result($nid, $unique_key, $param = NULL){
  if (empty($param)) {
    $result = db_select('itg_quiz_detail', 'qd')
            ->fields('qd')
            ->condition('qd.nid', $nid, '=')
            ->condition('qd.quiz_key', $unique_key, '=')
            ->groupBy('qd.ques_id')
            ->execute();
    $total_quiz = $result->rowCount();
    return $total_quiz ? $total_quiz : 0;
  } else {
    $quiz_radios = 0;
    $result_radios = db_select('itg_quiz_detail', 'qd')
            ->fields('qd')
            ->condition('qd.nid', $nid, '=')
            ->condition('qd.quiz_key', $unique_key, '=')
            ->condition('qd.correct_answer', $param, '=')
            ->condition('qd.ans_type', 'radios', '=')
            ->execute();
    $quiz_radios = $result_radios->rowCount();

    $result_checkbox = db_select('itg_quiz_detail', 'qd')
            ->fields('qd')
            ->condition('qd.nid', $nid, '=')
            ->condition('qd.quiz_key', $unique_key, '=')
            ->condition('qd.ans_type', 'checkboxes', '=')
            ->execute();
    while ($records = $result_checkbox->fetchAssoc()) {
      $ques_ans[$records['ques_id']][] = $records['ans_id'];
    }

    $quiz_checkboxes = 0;
    foreach ($ques_ans as $key => $value) {
      $correct_ans_arr = itg_quiz_get_correct_answer($key);
      
      if(count($value) == count($correct_ans_arr)){
        $arr_diff_count = count(array_diff($correct_ans_arr, $value));
        if ($arr_diff_count < 1) {
          $quiz_checkboxes = $quiz_checkboxes + 1;
        } else {
          $quiz_checkboxes = $quiz_checkboxes;
        }
      } else {
        $quiz_checkboxes = $quiz_checkboxes;
      }
      
    }
    
    $total_correct_ans = $quiz_radios + $quiz_checkboxes;

    return $total_correct_ans;
  }
 
}

/**
 * Get total score using unique.
 * @param int $nid
 * @param sting $unique_key
 * @return int
 */
function itg_quiz_get_total_score($nid, $unique_key){
    $result = db_select('itg_quiz_detail', 'qd')
          ->fields('qd')
          ->condition('qd.nid', $nid, '=')
          ->condition('qd.quiz_key', $unique_key, '=')
          ->groupBy('qd.ques_id')
          ->execute();
  $total_quiz = $result->rowCount();
  return $total_quiz ? $total_quiz : 0;
}

/**
 * Get winners list.
 * @param int $nid
 * @return int
 */
function itg_quiz_winners_list($nid, $range){
    if (!empty($range)) {
    $result = db_select('itg_quiz_detail', 'qd')
            ->fields('qd')
            ->condition('qd.nid', $nid, '=')
            ->condition('qd.correct_answer', 'yes', '=')
            ->groupBy('qd.quiz_key')
            ->range(0, $range)
            ->execute();
  } else {
    $result = db_select('itg_quiz_detail', 'qd')
            ->fields('qd')
            ->condition('qd.nid', $nid, '=')
            ->condition('qd.correct_answer', 'yes', '=')
            ->groupBy('qd.quiz_key')
            ->range(0, 10)
            ->execute();
  }

  while ($record = $result->fetchAssoc()) {
    $winners_arr[$record['quiz_key']] = itg_quiz_winners_count_uniquekey($nid, $record['quiz_key']);
  }
  arsort($winners_arr);
  foreach ($winners_arr as $key => $value) {
    $winner_final_list[] = itg_quiz_winner_user_list($key);
  }
  return $winner_final_list;
}

/**
 * Get count for unique key.
 * @param int $nid
 * @return int
 */
function itg_quiz_winners_count_uniquekey($nid, $unique_key) {
  $result = db_select('itg_quiz_detail', 'qd')
          ->fields('qd')
          ->condition('qd.quiz_key', $unique_key, '=')
          ->condition('qd.correct_answer', 'yes', '=')
          ->condition('qd.nid', $nid, '=')
          ->execute();
  $total_quiz = $result->rowCount();
  if ($total_quiz > 0) {
    return $total_quiz;
  } else {
    return 0;
  }
}

/**
 * Get user name to display winners list.
 * @param string $unique_key
 * @return string
 */
function itg_quiz_winner_user_list($unique_key) {
  $result = db_select('itg_quiz_detail', 'qd')
          ->fields('qd', array('uid'))
          ->condition('qd.quiz_key', $unique_key, '=')
          ->range(0, 1)
          ->execute();
  while ($record = $result->fetchAssoc()) {
    if ($record['uid'] == 0) {
      $user_name = 'Anonymous';
    } else {
      $user = user_load($record['uid']);
      $user_name = ucfirst($user->name);
    }
  }
  return $user_name;
}

/**
 * Fetch correct answer.
 * @param int $ques_id
 * @return array
 */
function itg_quiz_get_correct_answer($ques_id){
  $question_detail = entity_load('field_collection_item', array($ques_id));
  foreach ($question_detail[$ques_id]->field_quiz_options_answer[LANGUAGE_NONE] as $ans_option) {
    $ans_option_arr = entity_load('field_collection_item', array($ans_option['value']));
    foreach ($ans_option_arr[$ans_option['value']]->field_quiz_correct_answer[LANGUAGE_NONE] as $correct_ans) {
      if ($correct_ans['value'] == 'Yes') {
        $correct_ans_op[] = $ans_option['value'];
      }
    }
  }
  return $correct_ans_op;
}

/**
 * Prepare users list link using in view listing.
 * @param type $nid
 * @return string
 */
function itg_quiz_views_user_list($nid){
    if(itg_common_check_record_existance($nid, 'itg_quiz_user_score', 'nid') > 0){
    return l('View List','quiz-user-list/'.$nid, array('attributes' => array('target'=>'_blank')));
  } else {
    return 'View List';
  }
}
