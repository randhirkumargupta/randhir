<?php

/**
 * @file
 * The ITG Users module.
 * Provides Users functionality and customizations.
 */


/**
 * Implements hook_menu().
 */
function itg_users_menu() {
  $items['cms-user-dashboard'] = array(      
      'page callback' => 'itg_users_cms_user_dashboard',     
      'access callback' => 'user_is_logged_in',  
      'type' => MENU_CALLBACK,
     // 'file' => 'includes/itg_common.inc',
  ); 
  
  return $items;
}

/**
* callback for cms user dashboard
*  
*/

function itg_users_cms_user_dashboard() {
  
   $data = '';
   
   // Code for User menu on dashboard
   
   $remove_menu_link = array('manage-poll' => 'Poll', 'manage-survey' => 'Survey');
   
   $user_menu_tree = menu_tree_all_data('menu-admin-left-menu');
   
   foreach ($user_menu_tree as $key_tree => $val_tree) {     
     if (empty($val_tree['below'])) {
       $menu_link[$val_tree['link']['link_path']] =  t($val_tree['link']['link_title']);
     } else {
       foreach ($val_tree['below'] as $key => $val) {
         $menu_link[$val['link']['link_path']] =  t($val['link']['link_title']);
       }
     }     
   }
   
   $menu_link = array_diff($menu_link, $remove_menu_link);
   
   $data['user_link'] = $menu_link;
   
   return theme('cms_user_dashboard', array('data' => $data));   
 }

/**
 * Implements hook_form_alter().
 */
function itg_users_form_alter(&$form, &$form_state, $form_id) {
  
  global $user;  
  
  if ($form_id == 'user_profile_form') {
    $form['account']['name']['#attributes']['disabled'] = 'disabled';
    $form['account']['mail']['#attributes']['disabled'] = 'disabled';
    $form['account']['mail']['#weight'] = '-6';
    $form['#validate'][] = 'itg_users_validate_user_profile_validate';
    $form['#after_build'][] = 'itg_users_after_user_profile_validate';

    if (array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles)) {
      $user_array = array(COPY_EDITOR => COPY_EDITOR, SUBEDITOR_SR_SUB => SUBEDITOR_SR_SUB, INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
      $user_id_log = $user->uid;
      if (isset($user_array) && $user_id_log != arg(1)) {
        unset($form['account']['pass']);
      }
    }
    else if (array_key_exists(COPY_EDITOR, $user->roles)) {
      $user_array = array(SUBEDITOR_SR_SUB => SUBEDITOR_SR_SUB, INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
      $user_id_log = $user->uid;
      if (isset($user_array) && $user_id_log != arg(1)) {
        unset($form['account']['pass']);
      }
    }
    else if (array_key_exists(SUBEDITOR_SR_SUB, $user->roles)) {
      $user_array = array(INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
      $user_id_log = $user->uid;
      if (isset($user_array) && $user_id_log != arg(1)) {
        unset($form['account']['pass']);
      }
    }
  }

  if ($form_id == 'user_register_form') {
    $form['#validate'][] = 'itg_users_validate_user_register_validate';
    $form['#after_build'][] = 'itg_users_after_user_register_validate';
  }

  if ($form_id == 'user_register_form' || $form_id == 'user_profile_form') {
    if (isset($_GET['destination'])) {
      $_GET['destination'] = $_GET['destination'];
    }
    else {
      $form['#action'] = '?destination=user/' . $user->uid;
    }
    if ($user->uid != 1) {
      $form['#after_build'][] = 'itg_user_after_build';
      $tax=taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = FALSE);
  
      foreach($tax as $key => $val){
        $op[$val->tid]=$val->name;
      }
      
      // assign array value to taxonomy field
      $form['field_user_section']['und']['#options'] = $op;
   
      $user_role = itg_users_role_delegation($form['account']['roles']['#options']);
      
      if (isset($user_role)) {
        if ($form['#user']->uid != $user->uid) {
          $form['selected'] = array(
            '#type' => 'select',
            '#title' => t('Select role'),
            '#options' => $user_role,
            '#default_value' => $form['account']['roles']['#default_value'][1],
            '#required' => TRUE,
          );
        }
      }
      
      //Check to default when create new user 'Notify User of New Account' checkbox will be checked.
      $form['account']['notify']['#default_value'] = TRUE;
      
      // Add cancel button to user edit form and redirects to user manage page on click of cancel button.
      $destination = 'user';
      if (isset($_GET['destination'])) {
        $destination = 'manage-users';
      } else {
        $destination = 'user/' . $user->uid;
      }
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
        '#weight' => 20,
        '#value' => t('Cancel'),
      );
    }
  } 
  
}


/**
 * Password validation for adding user profile
 * @param array $form
 * @param array $form_state
 */

function itg_users_validate_user_register_validate(&$form, &$form_state) {
  if ($form_state['values']['pass']) {
    if (!preg_match('/^(?=.*[A-Za-z])[A-Za-z0-9!@#$%]{8,}$/', $form_state['values']['pass'])) {
      form_set_error('pass', t('Password must be minimum 8 digit alphanumeric and without space.'));
    }
  }
  
  // get section value
  $section = $form_state['values']['field_user_section'][LANGUAGE_NONE];
  if ($form_state['values']['selected'] == EXPERT) {
    if (empty($section[0]['tid'])) {
      form_set_error('field_user_section', t("Section Field is required!"));
    }
  }
  
  if ($form_state['values']['selected'] == COPY_EDITOR || $form_state['values']['selected'] == SECTION_EDITOR_ANCHOR || $form_state['values']['selected'] == EDITOR) {    
    $mark_expert = $form_state['values']['field_mark_as_expert'][LANGUAGE_NONE][0]['value'];
    
//    if (empty($mark_expert)) {
//      form_set_error('field_mark_as_expert', t("Mark as Expert Field is required!"));
//    }
    
    if (!empty($mark_expert) && empty($section[0]['tid'])) {
      form_set_error('field_user_section', t("Section Field is required!"));
    }
  }

}

/**
 * Password validation for minimum or maximum 8 char 
 * @param array $form
 * @param array $form_state
 */

function itg_users_after_user_register_validate(&$form, &$form_state) {
  global $user, $base_url;
  $form['account']['pass']['#attached']['js'][1]['data']['password']['tooShort'] = t('Make it at least 8 characters');
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_users' => array('settings' => $settings)), array('type' => 'setting'));
  $form['#attached']['js'] = array(drupal_get_path('module', 'itg_users') . '/js/itg_users.js',);
  return $form;
}

/**
 * Password validation for editing user profile
 * @param array $form
 * @param array $form_state
 * 
 */

function itg_users_validate_user_profile_validate(&$form, &$form_state) {
  if ($form_state['values']['pass']) {
    if (!preg_match('/^(?=.*[A-Za-z])[A-Za-z0-9!@#$%]{8,}$/', $form_state['values']['pass'])) {
      form_set_error('pass', t('Password must be minimum 8 digit alphanumeric and without space.'));
    }
  }
  
  // get section value
  $section = $form_state['values']['field_user_section'][LANGUAGE_NONE];
  
  if ($form_state['values']['selected'] == EXPERT) {
    if (empty($section[0]['tid'])) {
      form_set_error('field_user_section', t("Section Field is required!"));
    }
  }
  
  if ($form_state['values']['selected'] == COPY_EDITOR || $form_state['values']['selected'] == SECTION_EDITOR_ANCHOR || $form_state['values']['selected'] == EDITOR) {    
    $mark_expert = $form_state['values']['field_mark_as_expert'][LANGUAGE_NONE][0]['value'];
    
//    if (empty($mark_expert)) {
//      form_set_error('field_mark_as_expert', t("Mark as Expert Field is required!"));
//    }
    
    if (!empty($mark_expert) && empty($section[0]['tid'])) {
      form_set_error('field_user_section', t("Section Field is required!"));
    }
  }

}

/**
 * Password validation for minimum or maximum 8 char 
 * @param array $form
 * @param array $form_state 
 */

function itg_users_after_user_profile_validate(&$form, &$form_state) {
  global $user, $base_url;
  $form['account']['pass']['#attached']['js'][1]['data']['password']['tooShort'] = t('Make it at least 8 characters');  
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  drupal_add_js(array('itg_users' => array('settings' => $settings)), array('type' => 'setting'));
  $form['#attached']['js'] = array(drupal_get_path('module', 'itg_users') . '/js/itg_users.js',);
  return $form;
}

/**
 * Implements views header link 
 *
 */
function itg_users_views_pre_render(&$view) {
  if ($view->name == "manage_users") {
      global $user; // Get user information
      
      $header_content = '';
      if (!in_array('Intern', $user->roles) && !in_array('Author/Guest', $user->roles)) {
        // $header_content = '<a href ="./admin/people/create?destination=manage-users">Create User</a>';
        $header_content = l(t('Create User'), 'admin/people/create', array('query' => array('destination' => 'manage-users')));
      }

      $view->attachment_before = $header_content;
  }    
}

/**
 * Implements hook_user_logout
 *
 */
function itg_users_user_logout($account) {
    $_GET['destination'] = 'user';
}

/*
 * Implements itg_users_role_delegation
 */
function itg_users_role_delegation($role_array) {
  global $user;

  if (array_key_exists(EDITOR, $user->roles)) {
      $user_array = array(AUTHOR_GUEST => 'Author/Guest', COPY_EDITOR => 'Copy Editor', INTERN => 'Intern', SECTION_EDITOR_ANCHOR => 'Section Editor/Anchor',  SUBEDITOR_SR_SUB => 'Subeditor/Sr.Sub' );
  } else if (array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles)) {
      $user_array = array(AUTHOR_GUEST => 'Author/Guest',COPY_EDITOR => 'Copy Editor', INTERN => 'Intern', SUBEDITOR_SR_SUB => 'Subeditor/Sr.Sub');
  } else if (array_key_exists(COPY_EDITOR, $user->roles)) {
      $user_array = array(AUTHOR_GUEST => 'Author/Guest', INTERN => 'Intern', SUBEDITOR_SR_SUB => 'Subeditor/Sr.Sub' );
  } else if (array_key_exists(SUBEDITOR_SR_SUB, $user->roles)) {
      $user_array = array(AUTHOR_GUEST => 'Author/Guest',INTERN => 'Intern' );
  } else if (array_key_exists(SITE_ADMIN, $user->roles)) {
      unset($role_array[3]);
      $user_array = $role_array;
  } else if (array_key_exists(ADMINISTRATOR, $user->roles)) {
      $user_array = $role_array;
  }

  return $user_array;
}

/*
 * Function return desendent role at add user page 
 */
function itg_users_role_delegation_uid() {
  global $user;

  if (array_key_exists(EDITOR, $user->roles)) {
      $user_array = array(SECTION_EDITOR_ANCHOR => SECTION_EDITOR_ANCHOR, COPY_EDITOR => COPY_EDITOR, SUBEDITOR_SR_SUB => SUBEDITOR_SR_SUB, INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
  } else if (array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles)) {
      $user_array = array(COPY_EDITOR => COPY_EDITOR, SUBEDITOR_SR_SUB => SUBEDITOR_SR_SUB, INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
  } else if (array_key_exists(COPY_EDITOR, $user->roles)) {
      $user_array = array(SUBEDITOR_SR_SUB => SUBEDITOR_SR_SUB, INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
  } else if (array_key_exists(SUBEDITOR_SR_SUB, $user->roles)) {
      $user_array = array(INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
  }

  return $user_array;
}

// after build for user management form
function itg_user_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'itg_users') . '/js/itg_users.js', array('weight' => 1));
  return $form;
}

/*
 * Blocked and unblocked option for status filter in manage user view
 */
function itg_users_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
    if (($form['#id'] == 'views-exposed-form-manage-users-page')) {
        // sorting of roles in user management filter
        unset($form['rid']['#options'][3]);
        $rol = $form['rid']['#options'];
        asort($rol);
        $form['rid']['#options'] =  $rol;
        // Change status value in user management views filter
        $form['status']['#options'][1] = t('Unblocked');
        $form['status']['#options'][0] = t('Blocked');
    }
}

/**
 * Implements hook_theme().
 */
function itg_users_theme($existing, $type, $theme, $path) {
  $themes = array(
    'cms_user_dashboard' => array(
      'template' => 'cms-user-dashboard',
      'path' => drupal_get_path('module', 'itg_users') . '/templates',
      'variables' => array('data' => NULL),
    ),    
  );

  return $themes;
}


/**
 * Implement hook_user_login
 * @param Array $edit
 * @param Object $account
 */
function itg_users_user_login(&$edit, $account) {  
  if (!array_key_exists(ADMINISTRATOR, $account->roles)) {
    $_GET['destination'] = 'cms-user-dashboard'; // Redirect user to dashboard page after login
  }
}

/**
 * Implements hook_token_info().
 */
function itg_users_token_info() {
  $info['tokens']['user']['password'] = array(
    'name' => t('Password'),
    'description' => t('The password by the user'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function itg_users_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
  }

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'password':
          $replacements[$original] = $account->password;
          break;
      }
    }
  }

  return $replacements;
}
