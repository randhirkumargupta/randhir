<?php
/**
 * @file
 * itg_widget.module
 *
 * Provides customizations and functions for Widgets.
 *
 */
module_load_include('inc', 'nodequeue_generate', 'nodequeue.actions');
// All views pre render funtion.
module_load_include('inc', 'itg_widget', 'includes/itg_widget_view_pre_render');
// All Order reoder function on widget page.
module_load_include('inc', 'itg_widget', 'includes/itg_widget_order_re_order');
// All Code for action (Bulk Operation).
module_load_include('inc', 'itg_widget', 'includes/itg_widget_actions_bulk_operation');

module_load_include('inc', 'itg_widget', 'includes/itg_widget.helper');

module_load_include('inc', 'itg_widget', 'includes/itg_widget_personalization');

module_load_include('inc', 'itg_widget', 'includes/itg_widget_common');

module_load_include('inc', 'itg_widget', 'itg_widget.helper');

/**
 * {@inheritdoc}
 */
function itg_widget_init() {
// Js for move funtionality.
// This is use in case of nodequeue in case of custom table we calls a callback funtion.
  global $base_url;
  $settings = array();
  $settings['base_url'] = $base_url;
  drupal_add_js(array('itg_widget' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_widget') . '/js/itg_widget.js', 'file');
}

/**
 * {@inheritdoc}
 */
function itg_widget_menu() {
  $items = array();
  $items['remove_from_widgets/%/%/%/%'] = array(
    'page callback' => 'remove_from_widgets',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('administer nodequeue'),
  );
  $items['remove_from_widgets_section/%/%/%/%/%/%'] = array(
    'page callback' => 'remove_from_widgets_with_section',
    'page arguments' => array(1, 2, 3, 4, 5, 6),
    'access arguments' => array('administer nodequeue'),
  );
  $items['move-widget-node/%/%/%/%'] = array(
    'page callback' => 'move_node_from_widget',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('administer nodequeue'),
  );

  $items['remove-so-sorry-extra-data/%'] = array(
    'page callback' => 'remove_extra_field_value_for_so_sorry',
    'page arguments' => array(1),
    'access arguments' => array('administer nodequeue'),
  );
  $items['update-keycandidate-status'] = array(
    'page callback' => 'update_keycandidate_status',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['add-so-sorry-extra-data/%/%'] = array(
    'page callback' => 'add_extra_field_value_for_so_sorry',
    'page arguments' => array(1, 2),
    'access arguments' => array('administer nodequeue'),
  );

  $items['move-dont-miss-widget-node/%/%/%/%'] = array(
    'page callback' => 'move_node_from_dont_miss_widget',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('administer nodequeue'),
  );
  $items['anchor-list/autocomplete'] = array(
    'page callback' => 'itg_widget_anchor_autocomplete_name',
    'access arguments' => array('access content'),
  );
  $items['anchor-list-nid/autocomplete'] = array(
    'page callback' => 'itg_widget_anchor_autocomplete_id',
    'access arguments' => array('access content'),
  );
  $items['node-list-title/autocomplete'] = array(
    'page callback' => 'itg_widget_all_content_title',
    'access arguments' => array('access content'),
  );
  $items['node-list-nid/autocomplete'] = array(
    'page callback' => 'itg_widget_all_content_nid',
    'access arguments' => array('access content'),
  );
  $items['node-list-for-year-end/%/%/autocomplete'] = array(
    'page callback' => 'autocomplete_for_year_end_widgets',
    'access arguments' => array('access content'),
  );
  $items['so-sorry-content-title/autocomplete'] = array(
    'page callback' => 'itg_widget_so_sorry_content_title',
    'access arguments' => array('access content'),
  );
  $items['so-sorry-content-nid/autocomplete'] = array(
    'page callback' => 'itg_widget_so_sorry_content_nid',
    'access arguments' => array('access content'),
  );
  $items['remove-extra-data'] = array(
    'page callback' => 'remove_extra_data',
    'access arguments' => array('access administrator'),
  );
  $items['remove-term-state'] = array(
    'page callback' => 'remove_state_term',
    'page arguments' => array(1),
    'access arguments' => array('administer nodequeue'),
  );
  $items['setids'] = array(
    'page callback' => 'itg_widget_setids', // load the croper according to size!.
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['big-story-video-gallery/%'] = array(
    'page callback' => 'itg_get_video_display_for_big_story',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['big-story-live-tv-flag/%'] = array(
    'page callback' => 'itg_widget_big_story_live_tv_flag',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer nodequeue'),
  );

  $items['test_function_callback'] = array(
    'page callback' => 'insert_all_node_in_widegt_table', // load the croper according to size!.
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer nodequeue'),
  );

  $items['test_function_callback'] = array(
    'page callback' => 'itg_sent_email', // load the croper according to size!.
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
//    'access arguments' => array('access content'),
  );

  $items['issue_filter_widget'] = array(
    'page callback' => 'itg_widget_issuewidget_filter_form', // load the croper according to size!.
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['admin/settings/custom-variables'] = array(
    'title' => 'Custom variables',
    'description' => 'Custom variables settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_widgets_custom_variables'),
    'access arguments' => array('access administrator'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['key-candidate-widget-node/%/%/%/%'] = array(
    'page callback' => 'move_node_from_key_candidate_widget',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('administer nodequeue'),
  );

  $items['site-map'] = array(
    'page callback' => 'itg_widget_site_map',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * function to get sitemap.
 * @return type
 */
function itg_widget_site_map() {
  $tree = extranet_get_nested_tree(CATEGORY_MANAGMENT);
  $keys = array_keys($tree);
  foreach ($keys as $index => $data) {
    $term_array = array($keys[$index] => $tree[$keys[$index]]);
    if ($index % 2 == 0) {
      $left_tree .= extranet_output_nested_tree($term_array);
    }
    else {
      $right_tree .= extranet_output_nested_tree($term_array);
    }
  }
  $print_tree = '<div class="row site-map"><div class="col-md-6">' . $left_tree . '</div> <div class="col-md-6">' . $right_tree . '</div></div>';
  return $print_tree;
}

/**
 * Function create nested tree ul li for given array format.
 * @param array $tree
 * @return string
 */
function extranet_output_nested_tree($tree) {
  if (count($tree)) {
    $output = '<ul class="nested-taxonomy-tree">';
    foreach ($tree as $term) {
      $output .= '<li class="taxonomy-term">';
      $output .= l($term->name, "taxonomy/term/$term->tid");
      if ($term->children) {
        $output .= extranet_output_nested_tree($term->children);
      }
      $output .= '</li>';
    }
    $output .= '</ul>';
  }
  return $output;
}

/**
 * Function to get array of active category tree array format.
 * @param array $terms
 * @param int $max_depth
 * @param int $parent
 * @param array $parents_index
 * @param int $depth
 * @return array
 */
function extranet_get_nested_tree($terms = array(), $max_depth = NULL, $parent = 0, $parents_index = array(), $depth = 0) {
  if (is_int($terms)) {
    $terms = taxonomy_get_tree($terms);
  }

  foreach ($terms as $term) {
    foreach ($term->parents as $term_parent) {
      if ($term_parent == $parent) {
        if (function_exists('itg_category_manager_term_state') && itg_category_manager_term_state($term->tid)) {
          $return[$term->tid] = $term;
        }
        else {
          $return[$term->tid] = $term;
        }
      }
      else {
        if (function_exists('itg_category_manager_term_state') && itg_category_manager_term_state($term->tid)) {
          $parents_index[$term_parent][$term->tid] = $term;
        }
        else {
          $parents_index[$term_parent][$term->tid] = $term;
        }
      }
    }
  }

  foreach ($return as &$term) {
    if (isset($parents_index[$term->tid]) && (is_null($max_depth) || $depth < $max_depth)) {
      $term->children = extranet_get_nested_tree($parents_index[$term->tid], $max_depth, $term->tid, $parents_index, $depth + 1);
    }
  }
  return $return;
}

/**
 * This function use for update key candidate election status
 */
function update_keycandidate_status() {
  $status = $_POST['status'];
  $fields_name = $_POST['fname'];
  $fields_name = explode('-', $fields_name);
  db_update('itg_widget_order')
      ->fields(array('extra' => $status,))
      ->condition('widget', 'key_candidate')
      ->condition('nid', $fields_name[1])
      ->condition('cat_id', $fields_name[2])
      ->condition('state', $fields_name[3])
      ->execute();

  exit(1);
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_widget_cronapi($op, $job = NULL) {
  $items['unpublised-delete'] = array(
    'description' => 'Delete unpublised nodes from database itg_widget_order_table. It may be heavy cron so please run in midnight',
    'callback' => 'itg_widget_remove_unpublised_node',
  );
  return $items;
}

/**
 * {@inheritdoc}
 */
function itg_widget_block_info() {
  $blocks['top_stories_ordering'] = array(
    'info' => t('Widget: Top Stories Ordering'),
  );
  $blocks['trending_videos_widget'] = array(
    'info' => t('Widget: Trending videos widgets'),
  );
  $blocks['top_takes_videos_widget'] = array(
    'info' => t('Widget: Top Takes videos widgets'),
  );
  $blocks['home_page_feature'] = array(
    'info' => t('Widget: Home Page Feature'),
  );
  $blocks['we_may_suggest'] = array(
    'info' => t('Widget: We May Suggest'),
  );
  $blocks['section_wise_order'] = array(
    'info' => t('Widget: Section wise ordering form custom table'),
  );
  $blocks['rhs_section_wise_order'] = array(
    'info' => t('Widget: RHS Section wise content ordering from custom table'),
  );
  $blocks['big_story_format'] = array(
    'info' => t('Widget: Big story form custom table'),
  );
  $blocks['most_popular'] = array(
    'info' => t('Widget: Most popular form custom table'),
  );

  $blocks['featured_photo_carousel'] = array(
    'info' => t('Widget: Featured Photo Carousel - Flexslider'),
  );

  $blocks['featured_photo_carousel_r'] = array(
    'info' => t('Widget: Featured Photo Carousel - Rolling Slider'),
  );

  $blocks['featured_video_carousel'] = array(
    'info' => t('Widget: Featured Video Carousel - Flexslider'),
  );

  $blocks['featured_video_carousel_r'] = array(
    'info' => t('Widget: Featured Video Carousel - Rolling Slider'),
  );

  $blocks['dont_miss'] = array(
    'info' => t('Widget: Dont Miss form custom table'),
  );
  $blocks['yearende_left_top_news'] = array(
    'info' => t('Widget: Year end left top news form custom table'),
  );
  $blocks['education_how_made_id'] = array(
    'info' => t('Widget: How I Made it form custom table'),
  );
  $blocks['yearende_left_top_videos'] = array(
    'info' => t('Widget: Year end left top Videos form custom table'),
  );
  $blocks['watch_right_now_videos_widget'] = array(
    'info' => t('Widget: Watch right now videos'),
  );
  $blocks['anchor_langing_page_menu'] = array(
    'info' => t('Anchor landing page menu'),
  );
  $blocks['personlization'] = array(
    'info' => t('Persionlization front end'),
  );
  $blocks['home_page_poll_widget_block'] = array(
    'info' => t('Home Page Poll Widget'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['sport_poll_widget_block'] = array(
    'info' => t('Sport Page Poll Widget'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['sosorry_social_icons_block'] = array(
    'info' => t('So Sorry Social Icons Custom Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['auto_reviews'] = array(
    'info' => t('Widget: Auto Reviews from custom table'),
  );

  $blocks['so_sorry_front_politoons'] = array(
    'info' => t('So Sorry Politoons'),
  );
  $blocks['tech_reviews'] = array(
    'info' => t('Widget: Tech Reviews from custom table'),
  );
  $blocks['tech_most_read'] = array(
    'info' => t('Widget: Tech most read from custom table'),
  );
  $blocks['movies_reviews'] = array(
    'info' => t('Widget:  Movies Reviews from custom table'),
  );
  $blocks['ipl_tweets'] = array(
    'info' => t('IPL Tweets')
  );
  $blocks['budget_tweets'] = array(
    'info' => t('Budget Tweets')
  );
  $blocks['graph_election'] = array(
    'info' => t('Graph Election')
  );
  $blocks['live_score'] = array(
    'info' => t('Live Score')
  );
  $blocks['cheaper_dearer'] = array(
    'info' => t('Widget : Cheaper Dearer from custom table')
  );

  $blocks['podcast_header'] = array(
    'info' => t('Podcast: Header for podcast.')
  );

  return $blocks;
}

/**
 * {@inheritdoc}
 */
function itg_widget_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    // Big Story Content.
    case 'big_story_format':
      $live_tv_flag = FALSE;
      $content_flag = FALSE;
      $big_story_node_data = array();
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_big_story');
      //$block['subject'] = t('');
      $info['widget'] = 'big_story_format_widget';
      $data = itg_widget_big_story_block_data($info);
      foreach ($data as $big_story_data) {
        if (isset($big_story_data['is_live_tv']) && !empty($big_story_data['is_live_tv'])) {
          $live_tv_flag = TRUE;
          $big_story_node_data['live_tv'] = itg_live_tv_page_video();
        }
        if (!empty($big_story_data['node_load_data']->nid)) {
          $content_flag = TRUE;
          $big_story_node_data['node_data'] = $big_story_data['node_load_data'];
        }
      }
      $block['content'] = theme("widget_big_story_format", array("data" => $big_story_node_data));

      break;
    // section ordering reordering widget case
    case 'section_wise_order':
      module_load_include('inc', 'itg_widget', 'includes/section-wise-order-from-custom-table');
      // value is hardcoded need to be change for dyanamic functionality
      $info['section'] = '240'; // tid of section
      $info['content_type'] = ''; // content type machine name
      // view name which is stored in draggableviews_structure table
      $info['view_name'] = 'views_form_section_wise_content_ordering_list_page';
      //$block['subject'] = t('Section wise ordering from custom table');
      $data = itg_widget_section_wise_ordering_from_custom_table($info);
      $block['content'] = theme("section_wise_ordering", array("data" => $data));
      break;
    case 'rhs_section_wise_order':
      module_load_include('inc', 'itg_widget', 'includes/section-wise-order-from-custom-table');
      // value is hardcoded need to be change for dyanamic functionality
      $info['section'] = '437'; // tid of section
      $info['content_type'] = ''; // content type machine name
      // view name which is stored in draggableviews_structure table
      $info['view_name'] = 'views_form_section_wise_content_ordering_list_page';
      //$block['subject'] = t('Section wise ordering from custom table');
      $data = itg_widget_section_wise_ordering_for_rhs_from_custom_table($info);
      $block['content'] = theme("rhs_section_wise_ordering", array("data" => $data));
      break;
    case 'we_may_suggest':
      $display = get_rhs_block_display_condtion($delta);
      if (empty($display)) {
        return;
      }
      module_load_include('inc', 'itg_widget', 'includes/we-may-suggest');
      $info['section'] = '301'; // tid of section
      $info['content_type'] = 'story'; // content type machine name
      $info['view_name'] = 'we_may_suggest_widget';
      $data = itg_widget_we_may_suggest_ordering_from_custom_table($info);
      $block['content'] = theme("we_may_suggest", array("data" => $data));
      break;
    // Top story ordering reordering widget case
    case 'top_stories_ordering':
//      module_load_include('inc', 'itg_widget', 'includes/section-odering');
      $info['widget'] = 'top_stories_widget';
      $info['max_limit'] = TOP_STORIES_LIMIT;
      $info['min_limit'] = TOP_STORIES_MIN_RANGE;
      $info['order'] = 'ASC';
      $data = itg_widget_get_widget_data_data($info);
      $block['content'] = theme("top_stories_ordering", array("data" => $data));
      break;
    // Top story ordering reordering widget case
    case 'most_popular':
      $info['widget'] = 'most_popular_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = MOST_POPULAR_MAX_RANGE;
      $info['min_limit'] = MOST_POPULAR_MIN_RANGE;
      $data = itg_widget_get_widget_data_data($info);
      $block['content'] = theme("most_popular_widget", array("data" => $data));
      break;
    // Top story ordering reordering widget case
    case 'dont_miss':
      $info['widget'] = 'dont_miss_content_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = DONT_MISS_MAX_RANGE;
      $info['min_limit'] = DONT_MISS_MIN_RANGE;
      $data = itg_widget_get_widget_data_data($info);
      $block['content'] = theme("dont_miss_widget", array("data" => $data));
      break;
    case 'yearende_left_top_news':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_yearender_left');
      $info['widget_name'] = 'yearender_left_news_video';
      $data = itg_widget_yearend_top_news_ordering_data($info);

      $block['content'] = theme("year_end_top_news", array("data" => $data));
      break;
    case 'education_how_made_id':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_special_how_i_made_it');
      $info['widget_name'] = 'special_how_made_it_content';
      $data = itg_widget_how_made_it_ordering_data($info);

      $block['content'] = theme("how_made_it", array("data" => $data));
      break;
    case 'yearende_left_top_videos':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_yearender_left');
      $info['widget_name'] = 'yearender_left_news_video';
      $data = itg_widget_yearend_top_videos_ordering_data($info);

      $block['content'] = theme("year_end_top_videos", array("data" => $data));
      break;
    // Trending videos ordering reordering widget case
    case 'trending_videos_widget':
      $info['widget'] = 'trending_videos_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = TREANDING_VIDEO_MAX_RANGE;
      $info['min_limit'] = TREANDING_VIDEO_MIN_RANGE;
      $data = itg_widget_get_widget_data_data($info);
      $block['content'] = theme("trending_videos_widget", array("data" => $data));
      break;
    // Watch Right Now ordering reordering widget case
    case 'watch_right_now_videos_widget':
      $display = get_rhs_block_display_condtion($delta);
      if (empty($display)) {
        return;
      }
      $info['widget'] = 'watch_right_now_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = WATCH_RIGHT_NOW_MAX_RANGE;
      $info['min_limit'] = WATCH_RIGHT_NOW_MIN_RANGE;
      $data = itg_widget_get_widget_data_data($info);
      $block['content'] = theme("itg_widget_watch_right_now_videos_widget", array("data" => $data));
      break;
    // Top takes videos ordering reordering widget case
    case 'top_takes_videos_widget':
      $display = get_rhs_block_display_condtion($delta);
      if (empty($display)) {
        return;
      }
      $info['widget'] = 'top_takes_video_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = TOP_TAKES_MAX_RANGE;
      $info['min_limit'] = TOP_TAKES_MIN_RANGE;
      $data = itg_widget_get_widget_data_data($info);
      $block['content'] = theme("top_takes_videos_widget", array("data" => $data));
      break;
    // home page feature ordering reordering widget case
    case 'home_page_feature':
      $info['widget'] = 'home_page_feature_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = HOME_PAGE_FEATURE_MAX_RANGE;
      $info['min_limit'] = HOME_PAGE_FEATURE_MIN_RANGE;
      $data = itg_widget_get_widget_data_data($info);
      $block['content'] = theme("home_page_feature", array("data" => $data));
      break;
    // featured photo carousel reordering widget case
    case 'featured_photo_carousel':
      drupal_add_library('flexslider', 'flexslider');
      libraries_load('flexslider');
      module_load_include('inc', 'itg_widget', 'includes/featured_photo_carousel');

      drupal_add_js('jQuery(window).load(function() {
            jQuery(".flexslider").flexslider({
            animation: "slide",
            prevText: "",
            nextText: "",
            });
            });', array('type' => 'inline', 'scope' => 'footer', 'weight' => 5)
      );

      drupal_add_css('.flex-caption {
              width: 96%;
              padding: 2%;
              left: 0;
              bottom: 0;
              background: rgba(0,0,0,.5);
              color: #fff;
              text-shadow: 0 -1px 0 rgba(0,0,0,.3);
              font-size: 14px;
              line-height: 18px;
            }', 'inline');


      $info['widget'] = 'photo_carousel_list_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = PHOTO_CAROUSEL_MAX_RANGE;
      $info['min_limit'] = PHOTO_CAROUSEL_MIN_RANGE;
      $result = itg_widget_get_widget_data_data($info);
      $data = itg_widget_featured_photo_carousel_data_fetch($result, 'flexslider');
      $block['content'] = theme("featured_photo_carousel", array("data" => $data));
      break;

    case 'featured_photo_carousel_r':
      // As slider is not using to comment this code.
      global $base_url;
      module_load_include('inc', 'itg_widget', 'includes/featured_photo_carousel');
      //drupal_add_js(drupal_get_path('theme', 'itg'). "");
      drupal_add_js(drupal_get_path('theme', 'itg') . '/js/itg-photo-slider.js', array('type' => 'file', 'scope' => 'footer'));
      drupal_add_js($base_url . '/sites/all/themes/itg/js/jquery.mousewheel.min.js', array('type' => 'external', 'scope' => 'header', 'weight' => 5));

      drupal_add_js("jQuery(document).ready(function () {
            var winWidth = jQuery(window).width();            
            console.log(winWidth);
            if(winWidth > 1024){
            jQuery('.carousel').carousel({
                frontWidth: 645,
                frontHeight: 365,
                carouselWidth: 1170,
                carouselHeight: 450,
                buttonNav: 'none'
              });
            }else{
                jQuery('.carousel .slides').slick({                    
                    infinite: true,    
                    autoplay:true,
                    dots: true,
                    prevArrow: false,
                    nextArrow: false
                });
            }
          });", array('type' => 'inline', 'scope' => 'footer', 'weight' => 5)
      );
      $info['widget'] = 'photo_carousel_list_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = PHOTO_CAROUSEL_MAX_RANGE;
      $info['min_limit'] = PHOTO_CAROUSEL_MIN_RANGE;
      $result = itg_widget_get_widget_data_data($info);
      $data = itg_widget_featured_photo_carousel_data_fetch($result, 'rolling');
      $block['content'] = theme("featured_photo_carousel_rollingslider", array("data" => $data));
      break;

    case 'featured_video_carousel':
      drupal_add_library('flexslider', 'flexslider');
      libraries_load('flexslider');
      module_load_include('inc', 'itg_widget', 'includes/featured_video_carousel');

      drupal_add_js('jQuery(window).load(function() {
            jQuery(".flexslider-video").flexslider({
            animation: "slide"
            });
            });', array('type' => 'inline', 'scope' => 'footer', 'weight' => 5)
      );

      drupal_add_css('.flex-caption {
              width: 96%;
              padding: 2%;
              left: 0;
              bottom: 0;
              background: rgba(0,0,0,.5);
              color: #fff;
              text-shadow: 0 -1px 0 rgba(0,0,0,.3);
              font-size: 14px;
              line-height: 18px;
            }', 'inline');


      module_load_include('inc', 'itg_widget', 'includes/featured_video_carousel');
      $info['widget'] = 'video_carousel_list_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = VIDEO_CAROUSEL_MAX_RANGE;
      $info['min_limit'] = VIDEO_CAROUSEL_MIN_RANGE;
      $data = itg_widget_featured_video_carousel_data($info, 'flexslider');
      $block['content'] = theme("featured_video_carousel", array("data" => $data));
      break;

    case 'featured_video_carousel_r':
      global $base_url;

      drupal_add_js($base_url . '/sites/all/themes/itg/js/itg-photo-slider.js', array('type' => 'external', 'scope' => 'footer', 'weight' => 5));
      drupal_add_js($base_url . '/sites/all/themes/itg/js/jquery.mousewheel.min.js', array('type' => 'external', 'scope' => 'header', 'weight' => 5));
      drupal_add_js("jQuery(document).ready(function () {
            var winWidth = jQuery(window).width();            
            console.log(winWidth);
            if(winWidth > 1024){
            jQuery('.carousel').carousel({
                frontWidth: 645,
                frontHeight: 365,
                carouselWidth: 1170,
                carouselHeight: 450,
                buttonNav: 'none'
              });
            }else{
                jQuery('.carousel .slides').slick({                    
                    infinite: true,    
                    autoplay:true,
                    dots: true,
                    prevArrow: false,
                    nextArrow: false
                });
            }
          });", array('type' => 'inline', 'scope' => 'footer', 'weight' => 5)
      );
      /* drupal_add_js($base_url . '/sites/all/libraries/rollingslider/script/jquery.rollingslider.js', array('type' => 'external', 'scope' => 'footer', 'weight' => 5)
        );
        drupal_add_css($base_url . '/sites/all/libraries/rollingslider/style/index.css', array('type' => 'external', 'scope' => 'footer', 'weight' => 5)
        );

        drupal_add_js("jQuery('#featuredvideo').RollingSlider({
        showArea:'#example',
        prev:'#jprev',
        next:'#jnext',
        moveSpeed:500,
        autoPlay:false
        });", array('type' => 'inline', 'scope' => 'footer', 'weight' => 5)
        );
        drupal_add_js('misc/jquery.js'); */
      module_load_include('inc', 'itg_widget', 'includes/featured_video_carousel');
      $info['widget'] = 'video_carousel_list_widget';
      $info['order'] = 'ASC';
      $info['max_limit'] = VIDEO_CAROUSEL_MAX_RANGE;
      $info['min_limit'] = VIDEO_CAROUSEL_MIN_RANGE;
      $data = itg_widget_featured_video_carousel_data($info, 'rolling');
      $block['content'] = theme("featured_video_carousel_rollingslider", array("data" => $data));
      break;
    // Top takes videos ordering reordering widget case
    case 'anchor_langing_page_menu':
      drupal_add_css(drupal_get_path('theme', 'itg') . '/css/jquery.mCustomScrollbar.min.css', array('scope' => 'footer'));
      drupal_add_js(drupal_get_path('theme', 'itg') . '/js/jquery.mCustomScrollbar.concat.min.js', array('scope' => 'footer'));
      drupal_add_js('             
        jQuery(document).ready(function(){ 
            var getLength = 0;
            var defaultWidth  = jQuery(".anchor-detail-menu").outerWidth(true);
            jQuery(".anchor-detail-menu .tab-buttons span").each(function(){
                getLength += jQuery(this).outerWidth(true);                
            });                
            if(getLength > defaultWidth){
                jQuery(".anchor-detail-menu .tab-buttons").css("width", getLength +"px"); 
                jQuery(".anchor-detail-menu").mCustomScrollbar({
                    axis:"x",                    
                });
            }
       });', array('type' => 'inline', 'scope' => 'footer'));

      $block['content'] = theme("anchor_langing_page_menu", array("data" => $data));
      break;
    case 'personlization':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_personalization');
      $data = get_personlization_front_block_data();
      $block['content'] = theme("personlization_front_end", array("data" => $data));
      drupal_add_js('jQuery(document).ready(function() {
    jQuery(".recommended-slider").slick({
      slidesToShow: 3,
      slidesToScroll: 1,
      centerPadding: "40px",
      prevArrow: "<button class = \'slick-prev\'><i class = \'fa fa-angle-left\'></i></button>",
      nextArrow: "<button class = \'slick-next\'><i class = \'fa fa-angle-right\'></i></button>",
      responsive: [    
        {
          breakpoint: 1024,
          settings: {
            slidesToShow: 2,
            slidesToScroll: 1
          }
        },
         {
          breakpoint: 680,
          settings: {
            slidesToShow: 1,
            slidesToScroll: 1
          }
        }       
      ]
    });
  });', array("type" => "inline"));
      break;
    case 'home_page_poll_widget_block':
      $selected_poll_widget = get_homepage_current_poll_widget('poll', 'poll_widget');
      $block['content'] = itg_poll_home_page_polls_select($selected_poll_widget);
      break;
    case 'sport_poll_widget_block':
      $selected_poll_widget = get_homepage_current_poll_widget('poll', 'poll_widget');
      $block['content'] = itg_poll_home_page_polls_select($selected_poll_widget);
      break;
    case 'sosorry_social_icons_block':
      $block['content'] = '<div class="sosorry-social">
    <ul>
        <li><a href="#"><i class="fa fa-facebook"></i></a></li>
        <li><a href="#"><i class="fa fa-twitter"></i></a></li>
        <li><a href="#"><i class="fa fa-google-plus"></i></a></li>
        <li><a href="#"><i class="fa fa-rss"></i></a></li>        
    </ul>
</div>';
      break;
    case 'auto_reviews':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_special_auto_review');
      $info['widget_name'] = 'special_auto_review_content';
      $data = itg_widget_auto_reviews_ordering_data($info);

      $block['content'] = theme("auto_reviews", array("data" => $data));
      break;
    case 'so_sorry_front_politoons':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_so_sorry');
      $data = itg_widget_so_sorry_politoons_ordering_data();
      $block['content'] = theme('itg_widget_politoons', array('data' => $data));
      break;
    case 'tech_reviews':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_special_auto_review');
      $info['widget_name'] = 'special_auto_review_content';
      $info['var_name'] = 'tech_for_widget';
      $data = itg_widget_tech_reviews_ordering_data($info);

      $block['content'] = theme("tech_reviews", array("data" => $data));
      break;
    case 'tech_most_read':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_most_read');
      $info['widget_name'] = 'most_read_content';
      $info['query_var_name'] = 'tech_for_widget';
      $data = itg_widget_tech_most_read_ordering_data($info);

      $block['content'] = theme("tech_most_read", array("data" => $data));
      break;
    case 'graph_election':
      drupal_add_js('https://code.highcharts.com/highcharts.js', array('type' => 'external', 'scope' => 'header', 'weight' => 5));
      $data = itg_widget_get_graph_data($info);
      foreach ($data as $index => $row) {
        $jsondata = file_get_contents($row->field_election_constituency_tall_value);
        drupal_add_js(' jQuery(function() {
                   
            var ids = "container_' . $index . '";
            var data =' . $jsondata . ';
            var combined = [];
            var colorArray = [];
            var aName = data.election.aName;
            var aSeats = data.election.aSeats;
            var aSeatOthers = data.election.aSeatOthers;
            var aappos = 0;
            var aapcolor = "";
            var aapname = "";
            var aapseats = "";
            var ty = 0;
            for (var x = 0; x < data.election.items.length; x++)
            {
                if (data.election.items[x].pName.toLowerCase() != "bjp+") {
                    colorArray[ty] = data.election.items[x].pColor;
                    combined.push([data.election.items[x].pName, (parseInt(data.election.items[x].pLead) + parseInt(data.election.items[x].pWon))]);
                    ty++;
                } else {
                    aapcolor = data.election.items[x].pColor;
                    aappos = data.election.items[x].pColor;
                    aapname = data.election.items[x].pName;
                    aapseats = (parseInt(data.election.items[x].pLead) + parseInt(data.election.items[x].pWon));
                }
            }
            var showtooltip = true;
            if (aSeatOthers == 0) {
                jQuery("#resultawaited").show();
                colorArray[ty] = "#A2A9AD";
                combined.push(["Result Awaited", "1"]);
                showtooltip = false;
            } else {

                colorArray[(parseInt(data.election.items.length) - 1)] = aapcolor;
                combined.push([aapname, aapseats]);
            }


            var combined = [];
            var colorArray = [];
            var aName = data.election.aName;
            var aSeats = data.election.aSeats;
            var aSeatOthers = data.election.aSeatOthers;
            var aappos = 0;
            var aapcolor = "";
            var aapname = "";
            var aapseats = "";
            var colindex = 0;
            for (var x = 0; x < data.election.items.length; x++)
            {
                if (data.election.items[x].pName.toLowerCase() != "bjp+") {
                    colorArray[colindex] = data.election.items[x].pColor;
                    combined.push([data.election.items[x].pName, (parseInt(data.election.items[x].pLead) + parseInt(data.election.items[x].pWon))]);
                    colindex++;
                } else {
                    aapcolor = data.election.items[x].pColor;
                    aappos = data.election.items[x].pColor;
                    aapname = data.election.items[x].pName;
                    aapseats = (parseInt(data.election.items[x].pLead) + parseInt(data.election.items[x].pWon));
                }
            }
            var showtooltip = true;
            if (aSeatOthers == 0) {
                jQuery("#resultawaited").show();
                colorArray[colindex] = "#A2A9AD";
                combined.push(["Result Awaited", "1"]);
                showtooltip = false;
            } else {

                colorArray[(parseInt(data.election.items.length) - 1)] = aapcolor;
                combined.push([aapname, aapseats]);
            }

           jQuery("#" + ids).highcharts({
                colors: colorArray,
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: 0,
                    plotShadow: false
                },
                title: {
                    text: aSeatOthers +"/"+ aSeats + "<br>" + aName,
                    align: "center",
                    verticalAlign: "middle",
                    y: 12
                },
                tooltip: {
                    enabled: showtooltip,
                    pointFormat: "<b>{point.y}</b>"
                },
                plotOptions: {
                    pie: {
                        dataLabels: {
                            enabled: false,
                            distance: -50,
                            style: {
                                fontWeight: "bold",
                                color: "white",
                                textShadow: "0px 1px 2px black"
                            }
                        },
                        startAngle: -90,
                        endAngle: 90,
                        center: ["50%", "55%"]
                    }
                },
                series: [{
                        type: "pie",
                        name: "",
                        innerSize: "60%",
                        data: combined
                    }]
            });
        });', array('type' => 'inline', 'scope' => 'footer'));
      }

      $block['content'] = theme("graph_election", array("data" => $data));
      break;
    case 'movies_reviews':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_special_auto_review');
      $info['widget_name'] = 'special_auto_review_content';
      $info['var_name'] = 'movie_for_widget';
      $data = itg_widget_movies_reviews_ordering_data($info);

      $block['content'] = theme("auto_reviews", array("data" => $data));
      break;
    case 'ipl_tweets':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_twitter');
      //$block['subject'] = '<div class="ipl_tweets">IPL TWEETS</div>';
      $block['subject'] = '';
      $block['content'] = ipl_tweets();
      break;
    case 'budget_tweets':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_twitter');
      //$block['subject'] = '<div class="ipl_tweets">IPL TWEETS</div>';
      $block['subject'] = '';
      $block['content'] = budget_tweets();
      break;
    case 'live_score':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_live_score');

      $block['subject'] = '';
      $data = live_score();

      $block['content'] = theme("live_score_data", array("data" => $data));
      break;
    case 'cheaper_dearer':
      module_load_include('inc', 'itg_widget', 'includes/itg_widget_budget_predictor');
      $data = itg_budget_predictor_cheaper_dearer_data();
      $block['content'] = $data;
      break;

    case 'podcast_header':
      $menu_get_object = menu_get_object();
      if ($menu_get_object->type == 'podcast') {
        $entity_id = $menu_get_object->field_podcast_audio_upload['und'];
        $podcast_title = $menu_get_object->title;
        $podcast_banner_array = array();
        foreach ($entity_id as $key => $val) {
          $id = $val['value'];
          $entity = entity_load('field_collection_item', array($id));
          $audio_file_object = $entity[$id]->field_podcast_upload_audio_file['und'][0];
          $description = $entity[$id]->field_podcast_description['und'][0]['value'];
          $podcast_image = $entity[$id]->field_podcast_audio_image_upload['und'][0];
          $podcast_banner_array[$key] = array("audio" => $audio_file_object, "desc" => $description, "image" => $podcast_image);
        }
        $block['content'] = theme("podcast_banner", array("podcast_banner_array" => $podcast_banner_array , "podcast_title" => $podcast_title));
      }
      break;
  }


  return $block;
}

/**
 * Function returns data for cutom tables widgets.
 * 
 * @param string $widget_name
 * @param int $range_max
 * @param int $range_min
 * @return array
 */
function itg_widget_get_graph_data() {
  //p($cat_id);
  // Fetch fdata from db.
  global $theme;
  $cat_id = $_GET['section'];
  if ($theme == FRONT_THEME_NAME) {
    $cat_id = arg(2);
  }
  $itg_query = db_select('node', 'n');
  $itg_query->join('field_data_field_election_constituency_tall', 'frq', 'n.nid = frq.entity_id');

  $itg_query->join('field_data_field_section', 'ast', 'n.nid = ast.entity_id');
  $itg_query->fields('n', array('nid'));
  $itg_query->fields('frq', array('field_election_constituency_tall_value'))
      ->condition('type', 'election_graph_xml')
      ->condition('ast.field_section_tid', $cat_id, '=')
      ->condition('status', 1)
      ->range(0, 5);

  //$itg_query->condition('ast.field_astro_type_tid', $astro_type);
  $itg_result = $itg_query->execute()->fetchAll();

  return $itg_result;
}

/**
 * File provide get highlights widget data.
 *
 * @param array $info
 */
function itg_widget_highlights_block_data($info) {
  $widget_name = 'highlights_widget';
  global $theme;

  if (isset($_GET['section']) && !empty($_GET['section'])) {
    $selction_name = 'section';
  }
  else {
    $selction_name = 'section_name';
  }
  $cat_id = $_GET[$selction_name];
  if ($theme == FRONT_THEME_NAME) {
    $cat_id = arg(2);
  }

  $data = array();

  if (!empty($widget_name)) {
    $result = get_view_nodes_form_custom_table_for_widgets_by_category($widget_name, $cat_id, 1, 0);
    foreach ($result as $entity_data_node) {
      $entity_data = array("node_data" => node_load($entity_data_node['nid']), "related" => $entity_data_node['extra']);
    }
    return $entity_data;
  }
}

/**
 * Callbackused for cron. Its any havey cron please run it in midnight
 */
function itg_widget_remove_unpublised_node() {
  $select_node = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.status', 0);
  $data = $select_node->execute()->fetchAll(PDO::FETCH_ASSOC);
  $order_re_order_widgtes = array(
    '\'personalization_widget\'',
    '\'issue_magazin_widget\'',
    '\'yearender_left_news_video\'',
    '\'special_auto_review_content\'',
    '\'most_read_content\'',
    '\'feature_content_by_section\'',
    '\'special_how_made_it_content\'',
    '\'poll_widget\'',
    '\'section_wise_widget\'',
    '\'dont_miss_content_widget\'',
    '\'we_may_suggest_widget\'',
    '\'big_story_format_widget\'',
    '\'so_sorry_widget\'',
  );
  $strg = implode(',', $order_re_order_widgtes);
  foreach ($data as $nids) {
    $nid = $nids['nid'];
    $delete_query = "DELETE from {itg_widget_order} where nid = '" . $nid . "' and widget in ($strg)";
    db_query($delete_query);
  }
}

/**
 * Get video with player
 * @param int $nid
 * @return string $content
 */
function itg_get_video_display_for_big_story($nid) {
  print '<div class="big-story-popup"><span id="close-big-story"><a href="#">X</a></span>';
  itg_widget_dailymotion_get_videogallery_slider($nid);
  print '</div>';
//  $node = node_load($nid);
//  if (module_exists('itg_videogallery')) {
//    $fid = $node->field_upload_video['und'][0]['fid'];
//    $vid = itg_videogallery_get_videoid($fid);
//  }
//  $content = '<span id="close-big-story"><a href="#">X</a></span>
//    <iframe frameborder="0"
//            src="https://www.dailymotion.com/embed/video/' . $vid . '?autoplay=0&mute=1&ui-start-screen-info"
//            allowfullscreen>
//   </iframe>
//  ';
//  print $content;
}

/**
 * Function returns videogallery iframe slider.
 * @param int $nid
 */
function itg_widget_dailymotion_get_videogallery_slider($nid, $type = 'gallery') {
  $videoids = "";
  print '<div class="videogallery-slider slider-for-nid-' . $nid . '">';
  if (function_exists('get_video_in_fieldcollection_by_nid')) {
    $videoids = get_video_in_fieldcollection_by_nid($nid);
  }
  if (!empty($videoids)) {
    $hide_player = "";
    $newimageds = '<div class="row"><div class="col-md-12"><div class="video-slider-images"><ul>';
    foreach ($videoids as $keys => $video_value) {
      if ($keys != 0) {
        $hide_player = 'hide-player';
      }
      ?> <div class="<?php echo $hide_player; ?>" id="video_<?php echo $video_value->video_id; ?>"><?php
      if ($video_value->dailymotion_thumb_url != "") {
        $newimageds.= '<li><img data-tag="video_' . $video_value->video_id . '" src="' . $video_value->dailymotion_thumb_url . '" height="66" width="88"></li>';
      }
      else {
        $newimageds.= '<li><img data-tag="video_' . $video_value->video_id . '" src="' . $base_url . '/' . drupal_get_path('theme', 'itg') . '/images/default_for_all.png" height="66" width="88"></li>';
      }
      $ads_flag = 0;
      if ($video_value->field_include_ads_value == 'yes') {
        $ads_flag = 1;
      }
      ?>
        <div class="iframe-video">
          <iframe class='iframe-video-dailymotion' frameborder="0"
                  src="https://www.dailymotion.com/embed/video/<?php print $video_value->video_id; ?>?autoplay=0&mute=1&endscreen-enable=<?php echo $ads_flag; ?>&ui-start-screen-info"
                  allowfullscreen></iframe>
        </div>
        <?php
        if ($type != 'video') {
          print ucfirst($video_value->field_videogallery_description_value);
        }
        ?>
      </div>

      <?php
    }
    $newimageds.='</ul></div></div></div>';
  }
  print '</div>';
  if (count($videoids) > 1) {
    print $newimageds;
  }
}

/**
 * Function responsible for big story live tv activation or deactivation
 * 
 * @param type $flag
 * 
 */
function itg_widget_big_story_live_tv_flag($flag) {
  $action = FALSE;
  if ($flag == 'yes' || $flag == 'no') {
    $action = TRUE;
    if ($action) {
      $extra_field_value = itg_big_story_get_extra_value();
      // Run db query if live tv is not as big story
      if ($flag == 'yes') {
        itg_widget_delete_big_story_live_tv();
        try {
          db_insert('itg_widget_order')
              ->fields(array(
                'widget' => 'big_story_format_widget',
                'extra' => 'big_story_live_tv_active',
                'nid' => 0,
              ))->execute();
          print "success";
        } catch (Exception $ex) {
          print "error";
        }
      }
      elseif ($flag == 'no') {
        $is_deleted_liv_tv = itg_widget_delete_big_story_live_tv();
        if ($is_deleted_liv_tv) {
          print "deleted";
        }
        else {
          print "notfound";
        }
      }
    }
  }
  else {
    return drupal_access_denied();
  }
}

/**
 * Function delete cotnent form big story widget
 * @return boolean
 */
function itg_widget_delete_big_story_live_tv() {
  try {
    $number_deleted = db_delete('itg_widget_order')
        ->condition('widget', 'big_story_format_widget')
        ->condition('extra', 'big_story_live_tv_active')
        ->execute();
    if ($number_deleted) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  } catch (Exception $ex) {
    return $ex->getMessage();
  }
}

/**
 * Function give extra filed value that uses for chcek weather its a live tv or not.
 * @return string
 */
function itg_big_story_get_extra_value() {
  $extra_data = array();
  $select_query = db_select('itg_widget_order', 'iwo')
          ->fields('iwo', array('extra'))
          ->condition('widget', 'big_story_format_widget')
          ->execute()->fetchAll(PDO::FETCH_ASSOC);
  if (!empty($select_query)) {
    foreach ($select_query as $data) {
      $extra_data[] = $data['extra'];
    }
  }
  return $extra_data;
}

/**
 * Function used in widget add content to get right value for category tid.
 * @param type $get_cat
 * @return int
 */
function itg_widget_get_category_for_db_insert($get_cat) {
  $type_cast_cat = (int) $get_cat;
  if ($type_cast_cat) {
    return $get_cat;
  }
  else {
    return 0;
  }
}

/**
 * Function which gives nid and type of perticular node. Which is used in bulk operation.
 * @param int $nid
 * @return object
 */
function itg_widget_get_required_node_data_for_widget($nid) {
  $query = db_select('node', 'n')
      ->fields('n', array('nid', 'type'))
      ->condition('n.nid', $nid);
  return $query->execute()->fetchObject();
}

/**
 * Function to remove node from widget table.
 * @param string $widget_name
 * @param int $nid
 */
function itg_widget_delete_data_from_widget($widget_name, $nid = 0, $stateid = 0, $cat_id = 0) {
  try {
    $query = db_delete('itg_widget_order');
    $query->condition('widget', $widget_name);

    if ($nid) {
      $query->condition('nid', $nid);
    }

    if ($stateid) {
      $query->condition('state', $stateid);
    }

    if ($cat_id) {
      $query->condition('cat_id', $cat_id);
    }

    $query->execute();
  } catch (Exception $ex) {
    watchdog($widget_name, $ex->getMessage());
  }
}

/**
 * Comman function to insert widget data.
 * @param int $node
 * @param string $widget_name
 * @param string $category_tid
 */
function itg_widget_insert_widget_data($node, $widget_name, $category_tid, $extra = NULL, $state = NULL) {
  try {
    $max_weight = get_min_weight_for_special($widget_name);
    $node_load_data = itg_widget_get_required_node_data_for_widget($node);
    db_insert('itg_widget_order')
        ->fields(array(
          'nid' => $node,
          'widget' => $widget_name,
          'cat_id' => itg_widget_get_category_for_db_insert($category_tid),
          'content_type' => $node_load_data->type,
          'extra' => $extra,
          'state' => $state,
          'weight' => --$max_weight,
        ))
        ->execute();
  } catch (Exception $ex) {
    drupal_set_message($ex->getMessage());
  }
}

/**
 * Function gives count of node with perticular widget.
 * 
 * @param int $nid
 * @param string $widget
 * 
 * @return int
 */
function itg_widget_check_node_in_widget($nid, $widget) {
  $count = 0;
  if (!empty($nid) && !empty($widget)) {
    $query = db_select('itg_widget_order', 'iwo')
        ->fields('iwo', array('nid'))
        ->condition('iwo.nid', $nid)
        ->condition('iwo.widget', $widget);
    $count = $query->execute()->rowCount();
  }
  return $count;
}

/**
 * Implement function for get primary category
 * @param int $nid
 */
function itg_widget_get_primary_cat($nid) {
  $query = db_select('field_data_field_primary_category', 'primary_cat');
  $query->fields('primary_cat', array('field_primary_category_value'));
  $query->condition('primary_cat.entity_id', $nid, '=');
  $query->condition('primary_cat.bundle', 'story', '=');
  $result = $query->execute()->fetchField();
  return $result;
}

/**
 * Function to delete nodes from widget and nodequeue.
 * @param int $nid
 */
function itg_widget_handle_unpublished_node($nid) {
  if ($nid) {
    // List of all widget.
    // IF number of widget is increses then increse this list.  
    // Delete query for itg_widget_query.
    // Widgets are define above from which node is to be delete.
    try {
      db_delete('itg_widget_order')
          ->condition('nid', $nid)
          //->condition('widget', 'key_candidate' ,'!=')
          ->execute();
    } catch (Exception $ex) {
      watchdog("widget_delete", "From itg_widget_order " + $ex->getMessage());
    }
    // Delete from nodequeue. As we have used nodequeue only for widgets. So we can remove from nodeid.
    try {
      db_delete('nodequeue_nodes')
          ->condition('nid', $nid)
          ->execute();
    } catch (Exception $ex) {
      watchdog("widget_delete", "From nodequeue_nodes " + $ex->getMessage());
    }
  }
}

/**
 * Function return max weight from draggable view.
 * @param string $view_name
 * @param string $view_display
 * @param string $args
 *   by default draggable views insert [].
 * @return int
 */
function itg_widget_get_draggable_view_max_weight($view_name, $view_display, $args = "[]") {
  if (!empty($view_name) && !empty($view_display)) {
    $max_query = db_select('draggableviews_structure');
    $max_query->addExpression('MAX(weight)');
    $max_query->condition('view_name', $view_name);
    $max_query->condition('view_display', $view_display);
    $max_query->condition('args', $args);
    $max_result = $max_query->execute()->fetchField();
    return $max_result;
  }
  return 0;
}

############################## WIDGET REWORK ########################

/**
 * Function to use insert data into custom table.
 *
 * @param array $dont_miss_content
 */
function itg_widget_save_bulk_operation_widget_data($form_state, $widget_name) {
  $selected_node = $form_state['selection'];
  if (count($selected_node)) {
    foreach ($selected_node as $node) {
      $is_node_in_widget = itg_widget_check_node_in_widget($node, $widget_name);
      if (!$is_node_in_widget) {
        itg_widget_insert_widget_data($node, $widget_name, 0);
      }
    }
    drupal_set_message(t("Nodes has been saved"));
  }
}

/**
 * Comman function to insert widget data.
 * @param int $node
 * @param string $widget_name
 * @param string $category_tid
 */
function itg_widget_insert_widget_data_by_min_weight($node, $widget_name, $category_tid, $extra = NULL, $state = NULL) {
  try {
    $max_weight = get_min_weight_for_special($widget_name);
    $node_load_data = itg_widget_get_required_node_data_for_widget($node);
    // Handel case if node already exist.
    db_delete('itg_widget_order')
        ->condition('nid', $node)
        ->condition('widget', $widget_name)
        ->execute();
    //  Then delete old entry add newsone.
    db_insert('itg_widget_order')
        ->fields(array(
          'nid' => $node,
          'widget' => $widget_name,
          'cat_id' => itg_widget_get_category_for_db_insert($category_tid),
          'content_type' => $node_load_data->type,
          'extra' => $extra,
          'state' => $state,
          'weight' => --$max_weight,
        ))
        ->execute();
  } catch (Exception $ex) {
    drupal_set_message($ex->getMessage());
  }
}

/**
 * Function returns max weight of perticular content type.
 * @param string $type
 * @return int
 */
function get_min_weight_for_special($type, $cat_id = 0, $extra = 0) {
  $max_query = db_select('itg_widget_order');
  $max_query->addExpression('MIN(weight)');
  $max_query->condition('widget', $type);
  if (is_numeric($cat_id) && $cat_id) {
    $max_query->condition('cat_id', $cat_id);
  }
  if ($extra != 0 && isset($extra)) {
    $max_query->condition('extra', $extra);
  }
  $max_result = $max_query->execute()->fetchField();
  return isset($max_result) ? $max_result : 1;
}

/**
 * Function for save new order in custom table itg_widget_order for we may suggest widget.
 *
 * @param array $form
 * @param array $form_state
 */
function itg_widget_update_weight_during_order_reorder($form, &$form_state) {
  $view_current_display = $form_state['build_info']['args'][0]->current_display;
  $view_name = $form_state['build_info']['args'][0]->name;
  $widget = itg_widget_get_widget_name_from_views($view_name, $view_current_display);
  $draggable_view_data = $form_state['input']['draggableviews'];
  $weightcount = 0;
  foreach ($draggable_view_data as $key => $value) {
    $weightcount = $weightcount + $value['weight'];
  }
  if ($weightcount > 0) {
    foreach ($draggable_view_data as $key => $value) {
      try {
        $weight = (int) $value['weight'];
        $nid = (int) $value['id'];
        db_update('itg_widget_order')
            ->fields(array('weight' => $weight))
            ->condition('widget', $widget)
            ->condition('nid', $nid)
            ->execute();
      } catch (Exception $ex) {
        drupal_set_message($ex->getMessage());
      }
    }
  }
  else {
    drupal_set_message("This order already saved.");
  }
}

function itg_widget_get_widget_name_from_views($view_name, $view_current_display) {
  $widget_name = "";
//  pr($view_name);
//  p($view_current_display);
  if ($view_name == 'story_widget' && $view_current_display == 'page_2') {
    $widget_name = "top_stories_widget";
  }
  if ($view_name == 'home_page_feature_widget' && $view_current_display == 'page_2') {
    $widget_name = "home_page_feature_widget";
  }
  if ($view_name == 'photo_carousel_widget' && $view_current_display == 'photo_carousel') {
    $widget_name = "photo_carousel_list_widget";
  }
  if ($view_name == 'photo_carousel_widget' && $view_current_display == 'video_carousel') {
    $widget_name = "video_carousel_list_widget";
  }
  if ($view_name == 'story_widget' && $view_current_display == 'trending_videos_widget') {
    $widget_name = "trending_videos_widget";
  }
  if ($view_name == 'story_widget' && $view_current_display == 'most_popular_widget') {
    $widget_name = "most_popular_widget";
  }
  if ($view_name == 'story_widget' && $view_current_display == 'top_takes_video_widget') {
    $widget_name = "top_takes_video_widget";
  }
  if ($view_name == 'story_widget' && $view_current_display == 'watch_right_now_widget') {
    $widget_name = "watch_right_now_widget";
  }
  if ($view_name == 'widget_anchors_listing' && $view_current_display == 'anchors_listing_widget') {
    $widget_name = "anchors_listing_widget";
  }
  if ($view_name == 'section_wise_content_ordering_list' && $view_current_display == 'we_may_suggest_widget') {
    $widget_name = "we_may_suggest_widget";
  }
  return $widget_name;
}

/**
 * Function used to get widget name
 * 
 * {@inheritdoc}
 */
function _get_widget_name($view_name, $page_name) {
  $widget = "";
// TODO: Use switch-case
  if (($view_name == 'views_form_section_wise_draggable_content_order_page' || $view_name == 'views_form_section_wise_content_ordering_list_page') && $page_name == 'page') {
    $widget = 'section_wise_widget';
  }
  else if ($view_name == "views_form_story_widget_page" && $page_name == "page_1") {
    $widget = 'top_stories_widget';
  }
  else if ($view_name == "views_form_story_widget_page" && $page_name == "trending_videos") {
    $widget = 'trending_videos_widget';
  }
  else if ($view_name == "views_form_story_widget_page" && $page_name == "most_popular") {
    $widget = 'most_popular_widget';
  }
  else if ($view_name == "views_form_story_widget_page" && $page_name == "top_takes_video") {
    $widget = 'top_takes_video_widget';
  }
  else if ($view_name == "views_form_story_widget_page" && $page_name == "watch_right_now") {
    $widget = 'watch_right_now_widget';
  }
  else if ($view_name == "views_form_widget_anchors_listing_page" && $page_name == "anchors_listing_page") {
    $widget = 'anchors_listing_widget';
  }
  else if ($view_name == "views_form_home_page_feature_widget_page" && $page_name == "page_1") {
    $widget = 'home_page_feature_widget';
  }
  else if ($view_name == "views_form_photo_carousel_widget_page" && $page_name == "photo_carousel_list") {
    $widget = 'photo_carousel_list_widget';
  }
  else if ($view_name == "views_form_photo_carousel_widget_page" && $page_name == "video_carousel_list") {
    $widget = 'video_carousel_list_widget';
  }
  else if ($page_name == 'we_may_suggest_widget') {
    $widget = 'we_may_suggest_widget';
  }
  else if ($page_name == 'most_popular_widget') {
    $widget = 'we_may_suggest_widget';
  }
  else if ($page_name == 'big_story_format') {
    $widget = 'big_story_format_widget';
  }
  else if ($page_name == 'photo_carousel_list') {
    $widget = 'photo_carousel_list_widget';
  }
  else if ($page_name == 'video_carousel_list') {
    $widget = 'video_carousel_list_widget';
  }
  else if ($page_name == 'dont_miss_content') {
    $widget = 'dont_miss_content_widget';
  }
  return $widget;
}

function itg_widget_order_reorder_form() {
  $forms = array(
    'views_form_story_widget_trending_videos_widget', // Trending video widget
    'views_form_story_widget_most_popular_widget', // most popular
    'views_form_story_widget_top_takes_video_widget', // top takes
    'views_form_story_widget_watch_right_now_widget', // watch right now
    'views_form_story_widget_page_2', // top story
    'views_form_home_page_feature_widget_page_2',
    'views_form_photo_carousel_widget_photo_carousel', // photo carousel
    'views_form_photo_carousel_widget_video_carousel',
    'views_form_widget_anchors_listing_anchors_listing_widget',
    'views_form_section_wise_content_ordering_list_we_may_suggest_widget'
  );
  return $forms;
}

/**
 * Function is responsible to sent widget data.
 * @param array $info
 * @return array
 */
function itg_widget_get_widget_data_data($info) {
  if (is_array($info)) {
    $result = array();
    $entity_data = array();
    $widget_name = isset($info['widget']) ? $info['widget'] : FALSE;
    $max_limit = isset($info['max_limit']) ? $info['max_limit'] : FALSE;
    $min_limit = isset($info['min_limit']) ? $info['min_limit'] : FALSE;
    $order = isset($info['order']) ? $info['order'] : FALSE;
    if (isset($widget_name) && isset($max_limit) && isset($min_limit) && isset($order)) {
      $result = get_view_nodes_form_custom_table_for_widgets($widget_name, $max_limit, $min_limit, $order);
    }
    if (!empty($result)) {
      foreach ($result as $entity_data_node) {
        $entity_data[] = $entity_data_node;
      }
      return $entity_data;
    }
    return $result;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function itg_widget_form_views_form_section_wise_content_ordering_list_page_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = "update_itg_widget_order_table_data";
}

/**
 * Added a Query tag as  "query_poll_widget" in poll widget used in View : [poll_widget] [id:poll_widget_format]and written query tag alter as required
 * Implements hook_query_TAG_alter()
 */
function itg_widget_query_poll_widget_alter_tag_alter(QueryAlterableInterface $query) {
  $cur_date = date('Y-m-d H:i:s');
  $query->leftjoin('field_data_field_poll_start_date', 'sd', 'node.nid = sd.entity_id');
  $query->leftjoin('field_data_field_poll_end_date', 'ed', 'node.nid = ed.entity_id');
  $query->condition('sd.field_poll_start_date_value', $cur_date, '<=');
  $query->condition(db_or()->isNull('ed.field_poll_end_date_value')->condition('ed.field_poll_end_date_value', $cur_date, '>='));
}
