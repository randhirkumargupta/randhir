<?php

/**
 * @file
 * itg_widget.module
 *
 * Provides customizations and functions for Widgets.
 *
 */
module_load_include('inc', 'nodequeue_generate', 'nodequeue.actions');
// All views pre render funtion.
module_load_include('inc', 'itg_widget', 'includes/itg_widget_view_pre_render');
// All Order reoder function on widget page.
module_load_include('inc', 'itg_widget', 'includes/itg_widget_order_re_order');
// All Code for action (Bulk Operation).
module_load_include('inc', 'itg_widget', 'includes/itg_widget_actions_bulk_operation');

/**
 * {@inheritdoc}
 */
function itg_widget_init() {
  // Js for move funtionality.
  // This is use in case of nodequeue in case of custom table we calls a callback funtion.
  drupal_add_js(drupal_get_path('module', 'itg_widget') . '/js/itg_widget.js', 'file');
}

/**
 * {@inheritdoc}
 */
function itg_widget_menu() {
    $items = array();
    $items['remove_from_widgets/%/%/%/%'] = array(
        'page callback' => 'remove_from_widgets',
        'page arguments' => array(1, 2, 3, 4),
        'access arguments' => array('administer nodequeue'),
    );
    $items['remove_from_widgets_section/%/%/%/%/%/%'] = array(
        'page callback' => 'remove_from_widgets_with_section',
        'page arguments' => array(1, 2, 3, 4, 5, 6),
        'access arguments' => array('administer nodequeue'),
    );
    $items['move-widget-node/%/%/%/%'] = array(
        'page callback' => 'move_node_from_widget',
        'page arguments' => array(1, 2, 3, 4),
        'access arguments' => array('administer nodequeue'),
    );
    $items['move-dont-miss-widget-node/%/%/%/%'] = array(
        'page callback' => 'move_node_from_dont_miss_widget',
        'page arguments' => array(1, 2, 3, 4),
        'access arguments' => array('administer nodequeue'),
    );
    return $items;
}

/**
 * Funtion used to delete node combination form itg_widget_order table.
 * 
 * @param string $widget_name
 * @param string $content_type
 * @param int $cat_tid
 * @param int $nid
 */
function move_node_from_dont_miss_widget($widget_name, $content_type, $cat_tid, $nid) {
    if (!empty($widget_name) && !empty($nid)) {
        $num = db_delete('itg_widget_order')
                ->condition('nid', $nid)
                ->condition('widget', $widget_name)
                ->execute();
        if ($num) {
            drupal_set_message(t("Node has been moved"));
            drupal_goto($_SERVER['HTTP_REFERER']);
        }
        else {
            drupal_set_message(t("Node id or widget name not found"));
            drupal_goto($_SERVER['HTTP_REFERER']);
        }
    }
}

/**
 * Funtion used to delete node combination form itg_widget_order table.
 * 
 * @param string $widget_name
 * @param string $content_type
 * @param int $cat_tid
 * @param int $nid
 */
function move_node_from_widget($widget_name, $content_type, $cat_tid, $nid) {
    if (!empty($widget_name)  && !empty($cat_tid) && !empty($nid)) {
        $num = db_delete('itg_widget_order')
                ->condition('nid', $nid)
                //->condition('content_type', $content_type)
                ->condition('cat_id', $cat_tid)
                ->condition('widget', $widget_name)
                ->execute();
        if ($num) {
            drupal_set_message(t("Node has been moved"));
            drupal_goto($_SERVER['HTTP_REFERER']);
        }
    }
}

/**
 * Function used for delete node from draggableviews_structure and nodequeue
 * @param int $nid
 * @param int $qid
 * @param string $view_name
 * @param string $page_name
 */
function remove_from_widgets_with_section($nid, $qid, $view_name, $page_name, $section_tid, $type) {
    $draggable_delete = draggable_view_node_delete_section($view_name, $page_name, $nid, $section_tid, $type);
    if ($draggable_delete) {
        nodequeue_subqueue_remove_node($qid, $nid);
        print "deleted";
    }
    else {
        print "notdeleted";
    }
}

/**
 * Function used to delete form draggableviews_structure table
 * @param string $view_name
 * @param string $page_name
 * @param int $nid
 * @return int
 */
function draggable_view_node_delete_section($view_name, $page_name, $nid, $section_tid, $type) {
    if (!empty($view_name) && !empty($page_name) && !empty($nid) && !empty($section_tid) && !empty($type)) {
        $args = '{"field_story_category_tid":"' . $section_tid . '","type":"' . $type . '"}';
        $num_deleted = db_delete('draggableviews_structure')
                ->condition('view_name', $view_name)
                ->condition('view_display', $page_name)
                ->condition('entity_id', $nid)
                ->condition('args', $args)
                ->execute();
        return $num_deleted;
    }
}

/**
 * Function used for delete node from draggableviews_structure and nodequeue
 * @param int $nid
 * @param int $qid
 * @param string $view_name
 * @param string $page_name
 */
function remove_from_widgets($nid, $qid, $view_name, $page_name) {
    $draggable_delete = draggable_view_node_delete($view_name, $page_name, $nid);
    nodequeue_subqueue_remove_node($qid, $nid);
    if ($draggable_delete) {
        //nodequeue_subqueue_remove_node($qid, $nid);
        print "deleted";
    }
    else {
        print "notdeleted";
    }
}

/**
 * Function used to delete form draggableviews_structure table
 * @param string $view_name
 * @param string $page_name
 * @param int $nid
 * @return int
 */
function draggable_view_node_delete($view_name, $page_name, $nid) {
    if (!empty($view_name) && !empty($page_name) && !empty($nid)) {
        $num_deleted = db_delete('draggableviews_structure')
                ->condition('view_name', $view_name)
                ->condition('view_display', $page_name)
                ->condition('entity_id', $nid)
                ->execute();
        return $num_deleted;
    }
}

/**
 * {@inheritdoc}
 */
function itg_widget_block_info() {
    $blocks['top_stories_ordering'] = array(
        'info' => t('Widget: Top Stories Ordering'),
    );
    $blocks['trending_videos_widget'] = array(
        'info' => t('Widget: Trending videos widgets'),
    );
    $blocks['home_page_feature'] = array(
        'info' => t('Widget: Home Page Feature'),
    );
    $blocks['we_may_suggest'] = array(
        'info' => t('Widget: We May Suggest'),
    );
    $blocks['section_wise_order'] = array(
        'info' => t('Widget: Section wise ordering form custom table'),
    );
    $blocks['big_story_format'] = array(
        'info' => t('Widget: Big story form custom table'),
    );
    $blocks['most_popular'] = array(
        'info' => t('Widget: Most popular form custom table'),
    );
    $blocks['dont_miss'] = array(
        'info' => t('Widget: Dont Miss form custom table'),
    );
    return $blocks;
}

/**
 * {@inheritdoc}
 */
function itg_widget_block_view($delta = '') {
    $block = array();
    switch ($delta) {
        // Big Story Content.
        case 'big_story_format':
            module_load_include('inc', 'itg_widget', 'includes/itg_widget_big_story');
            $block['subject'] = t('Big Story Formet');
            $info['widget'] = 'big_story_format_widget';
            $data = itg_widget_big_story_block_data($info);
            $block['content'] = theme("widget_big_story_format", array("data" => $data));
            break;
        // section ordering reordering widget case
        case 'section_wise_order':
            module_load_include('inc', 'itg_widget', 'includes/section-wise-order-from-custom-table');
            // value is hardcoded need to be change for dyanamic functionality
            $info['section'] = '240'; // tid of section
            $info['content_type'] = ''; // content type machine name
            // view name which is stored in draggableviews_structure table
            $info['view_name'] = 'views_form_section_wise_content_ordering_list_page';
            $block['subject'] = t('Section wise ordering from custom table');
            $data = itg_widget_section_wise_ordering_from_custom_table($info);
            $block['content'] = theme("section_wise_ordering", array("data" => $data));
            break;
        case 'we_may_suggest':
            module_load_include('inc', 'itg_widget', 'includes/we-may-suggest');
            $info['section'] = '301'; // tid of section
            $info['content_type'] = 'story'; // content type machine name
            $info['view_name'] = 'we_may_suggest_widget';
            $block['subject'] = t('We may suggest');
            $data = itg_widget_we_may_suggest_ordering_from_custom_table($info);
            $block['content'] = theme("we_may_suggest", array("data" => $data));
            break;
        // Top story ordering reordering widget case
        case 'top_stories_ordering':
            module_load_include('inc', 'itg_widget', 'includes/section-odering');
            $info['view_name'] = 'story_widget'; // view name
            $info['page'] = 'page_2'; // page name
            $data = itg_widget_top_stories_ordering_data($info);
            $block['content'] = theme("top_stories_ordering", array("data" => $data));
            break;
        // Top story ordering reordering widget case
        case 'most_popular':
            module_load_include('inc', 'itg_widget', 'includes/itg_widget_most_popular');
            $info['view_name'] = 'story_widget'; // view name
            $info['page'] = 'most_popular_widget'; // page name
            $data = itg_widget_most_popular_ordering_data($info);
            $block['content'] = theme("most_popular_widget", array("data" => $data));
            break;
        // Top story ordering reordering widget case
        case 'dont_miss':
            module_load_include('inc', 'itg_widget', 'includes/itg_widget_dont_miss');
            $info['widget_name'] = 'dont_miss_content_widget';
            $data = itg_widget_dont_miss_ordering_data($info);
            $block['content'] = theme("dont_miss_widget", array("data" => $data));
            break;
        // Trending videos ordering reordering widget case
        case 'trending_videos_widget':
            module_load_include('inc', 'itg_widget', 'includes/itg_widget_trending_videos_widget');
            $info['view_name'] = 'story_widget'; // view name
            $info['page'] = 'trending_videos_widget'; // page name
            $data = itg_widget_trending_videos_widget_ordering_data($info);
            $block['content'] = theme("trending_videos_widget", array("data" => $data));
            break;
        // home page feature ordering reordering widget case
        case 'home_page_feature':
            module_load_include('inc', 'itg_widget', 'includes/home-page-feature');
            $info['view_name'] = 'home_page_feature_widget'; // view name
            $info['page'] = 'page_2'; // page name
            $data = itg_widget_home_page_feature_data($info);
            $block['content'] = theme("home_page_feature", array("data" => $data));
            break;
    }
    return $block;
}

/**
 * {@inheritdoc}
 */
function itg_widget_form_alter(&$form, &$form_state, $form_id) {
    $setting = array();
    $queue_flag = "";
    $view_name = isset($form_state['view']->name) ? $form_state['view']->name : "";
    $current_display = isset($form_state['view']->current_display) ? $form_state['view']->current_display : "";
    /* Load all nodes queues */
    $queues = nodequeue_load_queues(nodequeue_get_all_qids());
    switch ($view_name) {
        // top story
        case 'story_widget':
            if ($current_display == 'most_popular') {
                watchdog("Widget", "Nodequeue bulk operation settings has been found for : Most Popular");
                $queue_flag = 5; // most popular
            }
            elseif ($current_display == 'trending_videos') {
                watchdog("Widget", "Nodequeue bulk operation settings has been found for : Trending video");
                $queue_flag = 4; // top story widget qid
            }
            else {
                watchdog("Widget", "Nodequeue bulk operation settings has been found for : top story");
                $queue_flag = 1; // trending_videos widget qid
            }
            break;
        // home page feature
        case 'home_page_feature_widget':
            watchdog("Widget", "Nodequeue bulk operation settings has been found for : home page feature");
            $queue_flag = 2; // home page feature qid
            break;
        // We may suggest
        case 'we_may_suggest':
            watchdog("Widget", "Nodequeue bulk operation settings has been found for : we may suggest");
            $queue_flag = 3; // home page feature qid
            break;
    }
    if (!empty($queues[$queue_flag])) {
        watchdog("Widget", "setting sent to js");
        // name of nodequeue
        $setting['name'] = $queues[$queue_flag]->name;
        // qid of nodeduque
        $setting['qid'] = $queues[$queue_flag]->qid;
        // title of nodequeue
        $setting['title'] = $queues[$queue_flag]->title;
        // add js for setting
        drupal_add_js(drupal_get_path('module', 'itg_widget') . '/js/itg_widget.main.js', 'file');
        // pass setting to js for bulk operation
        drupal_add_js(array('itg_widget' => array('data' => $setting)), 'setting');
    }
    // Alter form for confirm message during bulk operation.
    // Below forms are thoese which are not doing action for nodequeue.
    // Nodequeue from are being altered form itg_widget.main.js.
    $form_id_array_to_alter = array(
        'views_form_section_wise_draggable_content_order_big_story_format',
        'views_form_section_wise_draggable_content_order_dont_miss_content',
        'views_form_section_wise_draggable_content_order_we_may_suggest_widget',
        'views_form_section_wise_draggable_content_order_page',
    );
    if(in_array($form_id, $form_id_array_to_alter)) {
      $form['actions']['submit']['#value'] = t('Confirm');
    }
}

/**
 * {@inheritdoc}
 */
function itg_widget_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
    
}

/**
 * {@inheritdoc}
 */
function itg_widget_theme() {
    $themes = array(
        'section_wise_ordering' => array(
            'template' => 'templates/section-ordering-data',
        ),
        'top_stories_ordering' => array(
            'template' => 'templates/top-stories-ordering-data',
        ),
        'home_page_feature' => array(
            'template' => 'templates/home-page-feature',
        ),
        'we_may_suggest' => array(
            'template' => 'templates/we-may-suggest',
        ),
        'widget_big_story_format' => array(
            'template' => 'templates/big-story-format',
        ),
        'trending_videos_widget' => array(
            'template' => 'templates/trending-videos-widget',
        ),
        'most_popular_widget' => array(
            'template' => 'templates/most-popular-widget',
        ),
        'dont_miss_widget' => array(
            'template' => 'templates/dont-miss-widget',
        ),
    );
    return $themes;
}

/**
 * {@inheritdoc}
 */
function get_required_data_from_entity_id($entity_id) {
    return entity_load('node', array($entity_id));
}

/**
 * {@inheritdoc}
 */
function itg_widget_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  switch ($form['#id']) {
    case 'views-exposed-form-home-page-feature-widget-page-1':
      $form['title']['#attributes']['placeholder'] = t('Story Title');
      //$form['title']['#autocomplete_path'] = 'content-title-list/story/autocomplete';
      $form['nid']['#attributes']['placeholder'] = t('Story ID');
      //$form['nid']['#autocomplete_path'] = 'content-nid-list/story/autocomplete';
      break;
    case 'views-exposed-form-story-widget-most-popular':
      $form['title']['#attributes']['placeholder'] = t('Story Title');
      $form['title']['#autocomplete_path'] = 'content-title-list/story/autocomplete';
      $form['nid']['#attributes']['placeholder'] = t('Story ID');
      $form['nid']['#autocomplete_path'] = 'content-nid-list/story/autocomplete';
      break;
    case 'views-exposed-form-story-widget-page-1':
      $form['title']['#attributes']['placeholder'] = t('Story Title');
      $form['title']['#autocomplete_path'] = 'content-title-list/story/autocomplete';
      $form['nid']['#attributes']['placeholder'] = t('Story ID');
      $form['nid']['#autocomplete_path'] = 'content-nid-list/story/autocomplete';
      break;
    case 'views-exposed-form-section-wise-draggable-content-order-we-may-suggest-widget':
      $form['title']['#attributes']['placeholder'] = t('Content Title');
      $form['nid']['#attributes']['placeholder'] = t('Content ID');
      break;
    case 'views-exposed-form-story-widget-trending-videos':
      $form['title']['#attributes']['placeholder'] = t('Video Title');
      $form['nid']['#attributes']['placeholder'] = t('Video ID');
      break;
    case 'views-exposed-form-section-wise-draggable-content-order-big-story-format':
      $form['title']['#attributes']['placeholder'] = t('Content Title');
      $form['nid']['#attributes']['placeholder'] = t('Content ID');
      break;
    case 'views-exposed-form-section-wise-draggable-content-order-dont-miss-content':
      $form['title']['#attributes']['placeholder'] = t('Content Title');
      $form['nid']['#attributes']['placeholder'] = t('Content ID');
      break;
    case 'views-exposed-form-section-wise-draggable-content-order-page':
      $form['title']['#attributes']['placeholder'] = t('Content Title');
      $form['nid']['#attributes']['placeholder'] = t('Content ID');
      break;
  }
}

/**
 * Function used to get widget name
 * 
 * {@inheritdoc}
 */
function _get_widget_name($view_name, $page_name) {
    $widget = "";
    if (($view_name == 'views_form_section_wise_draggable_content_order_page' || $view_name == 'views_form_section_wise_content_ordering_list_page') && $page_name == 'page') {
        $widget = 'section_wise_widget';
    }
    else if ($page_name == 'we_may_suggest_widget') {
        $widget = 'we_may_suggest_widget';
    }
    else if ($page_name == 'most_popular_widget') {
        $widget = 'we_may_suggest_widget';
    }
    else if ($page_name == 'big_story_format') {
        $widget = 'big_story_format_widget';
    }
    else if ($page_name == 'dont_miss_content') {
        $widget = 'dont_miss_content_widget';
    }
    return $widget;
}

/**
 * Implements hook_views_api().
 *
 * This tells drupal that there is Views integration file named
 * itg_social_media.views.inc.
 *
 * {@inheritdoc}
 */
function itg_widget_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'itg_widget') . '/includes/views',
    );
}

/**
 * Implementation of hook_views_query_alter
 * @param type $view
 * @param type $query 
 */
function itg_widget_views_query_alter(&$view, &$query) {
    if ($view->name == 'section_wise_draggable_content_order' && $view->current_display == 'big_story_format' && $_GET['type'] == 'story') {
        unset($query->table_queue['field_data_field_type']);
        unset($query->tables['node']['field_data_field_type']);
        unset($query->where[1]['conditions'][2]);
    }
}
