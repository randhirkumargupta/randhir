<?php

/**
 * @file
 * The ITG layout manager module.
 *
 * Provides layout manager functionality and customizations.
 *
 */
//All common function of layout manager.
module_load_include('inc', 'itg_layout_manager', 'includes/itg_layout_manager.helper');

//All form releted function of layout manager.
module_load_include('inc', 'itg_layout_manager', 'includes/itg_layout_manager.form');

/**
 * Implements hook_menu().
 * @return array $items
 */
function itg_layout_manager_menu() {

  $items['itg-layout-manager'] = array(
    'page callback' => 'itg_layout_admin',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_manager.inc',
  );

  $items['insert-layout-setting-ajax'] = array(
    'page callback' => 'insert_layout_setting_ajax',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_ajax.inc',
  );

  $items['itg-layout-list'] = array(
    'page callback' => 'itg_layout_list',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_manager.inc',
  );

  $items['section-widgets-ajax/%'] = array(
    'page callback' => 'section_widgets_ajax',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_autocomplete.inc',
  );

  // Autocomplete callback for category name
  $items['itg_category_autocomplete_list/%/%'] = array(
    'page callback' => 'itg_category_autocomplete_list',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_autocomplete.inc',
  );

  $items['gethomecarddata'] = array(
    'page callback' => 'itg_layout_gethomecarddata', // se for get the tags by tagid on image.
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'includes/itg_layout_manager.inc',
  );

  $items['getsecttioncarddata'] = array(
    'page callback' => 'itg_layout_getsecttioncarddata', // se for get the tags by tagid on image.
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'includes/itg_layout_manager.inc',
  );

  $items['get_map_data'] = array(
    'page callback' => 'itg_layout_getterm_detials', // se for get the tags by tagid on image.
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'file' => 'includes/itg_layout_manager.inc',
  );

  $items['layout-search-widgets-list/%'] = array(
    'page callback' => 'itg_search_widgets_list',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_autocomplete.inc',
  );

  $items['pre-layout-drag-widgets'] = array(
    'page callback' => 'pre_layout_drag_widgets',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_manager.inc',
  );

  $items['custom-content-widgets/autocomplete'] = array(
    'page callback' => 'content_custom_widgets_title',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_autocomplete.inc',
  );

  $items['custom-content-widgets'] = array(
    'page callback' => 'custom_content_widgets',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_autocomplete.inc',
  );

  $items['itg-deletelayout/%'] = array(
    'page callback' => 'itg_layout_delete',
    'access arguments' => array('access layout delete'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_manager.delete.inc',
  );

  $items['state-election/%/%'] = array(
    'page callback' => 'itg_state_election',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
  );

  $items['section-card-refresh'] = array(
    'page callback' => 'itg_section_card_refresh',
    //'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * This function use for make state election page
 */
function itg_state_election() {
  global $base_url;

  $section = arg(1);
  $state = arg(2);
  drupal_add_js(drupal_get_path('theme', 'itg') . '/js/election_map.js', array('scope' => 'header'));
  $vocabulary = taxonomy_vocabulary_machine_name_load('state_managment');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  foreach ($terms as $values) {
    if ($values->field_section[LANGUAGE_NONE][0]['tid'] == $section && $values->tid == $state) {

      $svgurl = $values->field_state_svg_json[LANGUAGE_NONE][0]['value'];
      $mapgurl = $values->field_state_map_json[LANGUAGE_NONE][0]['value'];
      $colorurl = $values->field_state_map_color_json[LANGUAGE_NONE][0]['value'];
      $urlarray = array('svgurl' => $svgurl, 'mapjson' => $mapgurl, 'color_url' => $colorurl);
    }
  }


  make_graph();

  return theme('itg_state_election', array('widget_data' => $data, 'map_data' => $urlarray));
}

function make_graph() {
  drupal_add_js('https://code.highcharts.com/highcharts.js', array('type' => 'external', 'scope' => 'footer', 'weight' => 5));
  $section = arg(1);
  $state = arg(2);
  $data = itg_widget_get_graph_data_by_state($section, $state);
  foreach ($data as $index => $row) {
    $jsondata = file_get_contents($row->field_election_constituency_tall_value);

    drupal_add_js(' jQuery(function() {
                   
            var ids = "container_' . $index . '";
            var data =' . $jsondata . ';
            var combined = [];
            var colorArray = [];
            var aName = data.election.aName;
            var aSeats = data.election.aSeats;
            var aSeatOthers = data.election.aSeatOthers;
            var aappos = 0;
            var aapcolor = "";
            var aapname = "";
            var aapseats = "";
            var ty = 0;
            for (var x = 0; x < data.election.items.length; x++)
            {
                if (data.election.items[x].pName.toLowerCase() != "bjp+") {
                    colorArray[ty] = data.election.items[x].pColor;
                    combined.push([data.election.items[x].pName, (parseInt(data.election.items[x].pLead) + parseInt(data.election.items[x].pWon))]);
                    ty++;
                } else {
                    aapcolor = data.election.items[x].pColor;
                    aappos = data.election.items[x].pColor;
                    aapname = data.election.items[x].pName;
                    aapseats = (parseInt(data.election.items[x].pLead) + parseInt(data.election.items[x].pWon));
                }
            }
            var showtooltip = true;
            if (aSeatOthers == 0) {
                jQuery("#resultawaited").show();
                colorArray[ty] = "#A2A9AD";
                combined.push(["Result Awaited", "1"]);
                showtooltip = false;
            } else {

                colorArray[(parseInt(data.election.items.length) - 1)] = aapcolor;
                combined.push([aapname, aapseats]);
            }


            var combined = [];
            var colorArray = [];
            var aName = data.election.aName;
            var aSeats = data.election.aSeats;
            var aSeatOthers = data.election.aSeatOthers;
            var aappos = 0;
            var aapcolor = "";
            var aapname = "";
            var aapseats = "";
            var colindex = 0;
            var shets =[];
            var apname =[];
            var apcolor =[];
            for (var x = 0; x < data.election.items.length; x++)
            {
                if (data.election.items[x].pName.toLowerCase() != "bjp+") {
                    colorArray[colindex] = data.election.items[x].pColor;
                    apname.push(data.election.items[x].pName);
                    apcolor.push(data.election.items[x].pColor);
                    shets.push(parseInt(data.election.items[x].pLead) + parseInt(data.election.items[x].pWon));
                    combined.push([data.election.items[x].pName, (parseInt(data.election.items[x].pLead) + parseInt(data.election.items[x].pWon))]);
                    colindex++;
                } else {
                    aapcolor = data.election.items[x].pColor;
                    aappos = data.election.items[x].pColor;
                    aapname = data.election.items[x].pName;
                    aapseats = (parseInt(data.election.items[x].pLead) + parseInt(data.election.items[x].pWon));
                }
            }
            var showtooltip = true;
            if (aSeatOthers == 0) {
                jQuery("#resultawaited").show();
                colorArray[colindex] = "#A2A9AD";
                combined.push(["Result Awaited", "1"]);
                showtooltip = false;
            } else {

                colorArray[(parseInt(data.election.items.length) - 1)] = aapcolor;
                combined.push([aapname, aapseats]);
            }
     loadStateTable(apname,shets,apcolor);
           jQuery("#" + ids).highcharts({
      colors: colorArray,
        chart: {
            plotBackgroundColor: null,
            plotBorderWidth: 0,
            plotShadow: false
        },
        title: {
           text: "Total "+aSeatOthers +"/"+ aSeats,
        },
       tooltip: {
                    enabled: showtooltip,
                    pointFormat: "<b>{point.y}</b>"
                },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                cursor: "pointer",
                dataLabels: {
                 enabled: false
                }
            }
        },
        
        series: [{
            type: "pie",
            name: "Seats",
			data: combined
        }]
    });
                
    });', array('type' => 'inline', 'scope' => 'footer'));
  }
}

/**
 * Implements hook_block_info().
 * @return array $blocks
 */
function itg_layout_manager_block_info() {

  $blocks['header_block'] = array(
    'info' => t('Header Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['footer_block'] = array(
    'info' => t('Footer Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['amp_header_block'] = array(
    'info' => t('AMP Header Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['amp_footer_block'] = array(
    'info' => t('AMP Footer Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['layout_manager_form_block'] = array(
    'info' => t('Layout manager form Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['layout_widget_list_block'] = array(
    'info' => t('Layout widget list block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['layout_button_block'] = array(
    'info' => t('Layout button block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  // for section cards
  $blocks['layout_section_widgets'] = array(
    'info' => t('Layout section widget block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  // for section widgets
  $blocks['layout_section_widget2'] = array(
    'info' => t('Layout section widget2 block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['header_snap_post_block'] = array(
    'info' => t('Snap post Header Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['header_sosorry_block'] = array(
    'info' => t('So sorry Header Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['layout_custom_widget_list_block'] = array(
    'info' => t('Layout custom widget list block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['layout_special_widget_list_block'] = array(
    'info' => t('Layout Special widget list block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['highlights_widget_list_block'] = array(
    'info' => t('Layout highlights widget list block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['front_end_breadcrumb'] = array(
    'info' => t('Front end breadcrumb'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['custom_content_widget_block'] = array(
    'info' => t('Custom content widget block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['layout_election_widget_block'] = array(
    'info' => t('election widget block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_layout_manager_block_view($delta = '') {

  $block = array();

  switch ($delta) {
    case 'header_block':

      $arg = arg();
      $data['itg_main_manu_header'] = menu_tree('menu-itg-main-menu-header');
      $data['itg_top_manu_header'] = menu_tree('menu-itg-top-menu-header');

      if (function_exists('get_second_level_menu')) {
        $second_level_menu = get_second_level_menu();
        foreach ($second_level_menu as $db_data) {
          $temp_data = array();
          $temp_data['db_data'] = $db_data;
          //$temp_data['term_load'] = $db_data['tid'];
          $data['menu_manager'][] = $temp_data;
        }
      }

      $block['content'] = theme('header_block', array('data' => $data));
      break;

    case 'footer_block':
      /* code for change password, email, mobile confirmation popup */
      $sso_msg = '';
      if (arg(0) == 'personalization') {
        // change message according to argument
        $change_pass_msg = '';
        if (!empty($_GET['pass']) && ($_GET['pass'] == 'success')) {
          $change_pass_msg = 'Your password has been changed successfully and kindly Login with Changed Password.';
        }

        if (!empty($_GET['email']) && ($_GET['email'] == 'success')) {
          $change_pass_msg = 'Your profile has been updated successfully and Kindly Relogin with Updated Email.';
        }

        if (!empty($change_pass_msg)) {
          $sso_msg = $change_pass_msg;
        }
      }

      /* code for sso login */
      global $user, $base_url;
      $change_arg = NULL;
      if (array_key_exists(FRONT_USER, $user->roles)) {
        // condition for change password        
        if (arg(0) == 'password-success' || arg(0) == 'complete-page') {
          $change_arg = arg(1);
        }
      }
      $settings = array();
      if ($user->uid > 0) {
        $arg = arg(2);
      }
      if (!empty($arg)) {
        $fin = $arg;
      }
      else {
        $fin = arg(2);
      }



      $settings['uid'] = $user->uid ? $user->uid : 0;
      $settings['check_sso_url'] = $fin;
      $settings['user_arg'] = arg(0);
      $settings['change_arg'] = $change_arg;
      $settings['base_url'] = $base_url;
      if (!empty(variable_get('logoutsec_time'))) {
        $settings['logoutsec'] = variable_get('logoutsec_time');
      } else {
        $settings['logoutsec'] = 20000;
      }
      drupal_add_js(array('itg_sso_login' => array('settings' => $settings)), array('type' => 'setting'));
      drupal_add_js(drupal_get_path('module', 'itg_sso_reg') . '/js/itg_sso_login.js', array('cache' => FALSE, 'defer' => TRUE));
      
      /* end here */

      $data = get_itg_footer_menu();

      $block['content'] = theme('footer_block', array('data' => $data, 'sso_msg' => $sso_msg));

      break;

    case 'amp_header_block':
      $arg = arg();
      $data['itg_main_manu_header'] = menu_tree('menu-itg-main-menu-header');
      $data['itg_top_manu_header'] = menu_tree('menu-itg-top-menu-header');

      if (function_exists('get_second_level_menu')) {
        $second_level_menu = get_second_level_menu();
        foreach ($second_level_menu as $db_data) {
          $temp_data = array();
          $temp_data['db_data'] = $db_data;
          $temp_data['term_load'] = taxonomy_term_load($db_data['tid']);
          $data['menu_manager'][] = $temp_data;
        }
      }
      $block['content'] = theme('amp_header_block', array('data' => $data));
      break;

    case 'amp_footer_block':
      $data = get_itg_footer_menu();
      $block['content'] = theme('amp_footer_block', array('data' => $data));
      break;

    case 'layout_manager_form_block':
      $layout_form = drupal_get_form('itg_layout_manager_page_setting_form');
      $data['layout_form'] = drupal_render($layout_form);
      $block['content'] = theme('layout_manager_block', array('data' => $data));
      break;

    // for admin widgets list in side bar
    case 'layout_widget_list_block':
      if (!empty($_GET['section']) && !empty($_GET['template_name'])) {
        $template_id = check_template_of_section($_GET['section'], $_GET['template_name']);
      }

      if (empty($template_id)) {
        $widget_array['default_widget'] = get_all_widgets_list_by_setting_page('Template widgets list');
      }

      $widget_array['poll_widget'] = get_widgets_poll_list();
      $block['content'] = theme('layout_widgets_list_block', array('data' => $widget_array));
      break;

    case 'layout_button_block':
      $block['content'] = theme('layout_buttons_block', array('data' => ''));
      break;
    // for section cards list in admin side bar
    case 'layout_section_widgets':
      $section_widgets_form = drupal_get_form('layout_section_widgets_search_form');
      $data['section_widgets_form'] = drupal_render($section_widgets_form);
      //condition base change widget
      $widgets_type = '';
      if (!empty($_GET["template_name"]) && $_GET["template_name"] == 'page--section_photo') {
        $widgets_type = 'photo_list_of_category';
      }
      elseif (!empty($_GET["template_name"]) && $_GET["template_name"] == 'page--section_video') {
        $widgets_type = 'video_list_of_category';
      }
      else {
        $widgets_type = 'section_wise_order';
      }
      if (!empty($_GET['section']) && !empty($_GET['template_name'])) {
        $data['widgets_list'] = display_section_widgets_list($_GET['section'], $_GET['template_name'], $widgets_type);
      }

      $block['content'] = theme('layout_section_widgets_block', array('data' => $data));
      break;
    // for section widgets list in admin side bar
    case 'layout_section_widget2':
      $section_widgets_form = drupal_get_form('layout_section_widget2_search_form');
      $data['section_widget2_form'] = drupal_render($section_widgets_form);

      $widgets_type = 'section_widget2_wise_order';

      $data['widgets_list'] = display_section_widgets_list($_GET['section'], $_GET['template_name'], $widgets_type);

      $block['content'] = theme('layout_section_widget2_block', array('data' => $data));
      break;

    case 'header_snap_post_block':
      $block['content'] = theme('header_snap_post_block', array('data' => $data));
      break;

    case 'header_sosorry_block':
      $block['content'] = theme('header_so_sorry_block', array('data' => $data));
      break;

    case 'layout_custom_widget_list_block':
      $html_widgets_form = drupal_get_form('html_widgets_search_form');
      $widget_array['html_widgets_form'] = drupal_render($html_widgets_form);
      $widget_array['custom_widget'] = get_html_custom_widget_list('custom_html_widgets');
      $block['content'] = theme('layout_custom_widgets_list_block', array('data' => $widget_array));
      break;

    case 'layout_special_widget_list_block':
      $widget_array['special_widget'] = get_all_widgets_list_by_setting_page('Special');
      $block['content'] = theme('layout_special_widgets_list_block', array('data' => $widget_array));
      break;

    case 'highlights_widget_list_block':
      $highlights_widgets_form = drupal_get_form('highlights_widgets_search_form');
      $data['highlights_widgets_form'] = drupal_render($highlights_widgets_form);
      $data['highlights_widget'] = get_highlights_widget_list();
      $block['content'] = theme('layout_highlights_widgets_list_block', array('data' => $data));
      break;

    case 'front_end_breadcrumb':
      $breadcrumb = '';
      if (arg(0) == 'node' && arg(1)) {
        $entity_object = menu_get_object();
        if (isset($entity_object->field_primary_category['und'][0]['value'])) {
          $id = $entity_object->field_primary_category['und'][0]['value'];
          if (function_exists('frontend_breadcrumb_display')) {
            $breadcrumb = frontend_breadcrumb_display($id, $entity_object);
          }
        }
        else {
          if (function_exists('frontend_breadcrumb_display')) {
            $breadcrumb = frontend_breadcrumb_display('', $entity_object);
          }
        }
      }
      else if (arg(0) == 'taxonomy' && arg(1) == 'term' && arg(2)) {
        $id = arg(2);
        if (function_exists('frontend_breadcrumb_display')) {
          $breadcrumb = frontend_breadcrumb_display($id);
        }
      }
      else {
        $array_url = array(
          'livetv' => t('Live TV'),
          'funalytics' => t('Funalytics'),
          'itg_active_polls' => t('Poll'),
          'anchors-list' => t('Anchors'),
          'blog' => t('Blog'),
          'podcast' => t('Podcast'),
          'program' => t('Programmes'),
          'snap-post' => ('Snappost'),
          'itg-quiz' => t('Quiz'),
          'itg-survey' => t('Survey'),
          'archives' => t('Archives'),
          'photo-list' => t('IPl Photo'),
          'video-list' => t('IPl Video'),
          'calendar/0/0/magazine.html' => t('Magazine'),
          'rss' => t('RSS'),
          'poll' => t('Polls'),
        );
        if (function_exists('frontend_breadcrumb_display')) {
          if (arg(0) == 'calendar') {
            $arg0 = 'calendar/0/0/magazine.html';
          }
          else {
            $arg0 = arg(0);
          }

          if (!empty($array_url[strtolower($arg0)])) {
            $breadcrumb = frontend_breadcrumb_display('', '', $array_url[strtolower($arg0)]);
          }
        }
      }
      $block['content'] = theme('frontend_breadcrumb_display_block', array('data' => $breadcrumb));
      break;
    case 'custom_content_widget_block':
      $content_widgets_form = drupal_get_form('content_widgets_search_form');
      $widget_array['content_widgets_form'] = drupal_render($content_widgets_form);
      $block['content'] = theme('layout_content_custom_widgets_list_block', array('data' => $widget_array));
      break;

    case 'layout_election_widget_block':
      $election_widgets_form = drupal_get_form('election_widgets_search_form');
      $widget_array['election_widgets_form'] = drupal_render($election_widgets_form);
      $block['content'] = theme('layout_election_widgets_block', array('data' => $widget_array));
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_layout_manager_theme($existing, $type, $theme, $path) {

  $template_name = isset($_GET['template_name']) ? $_GET['template_name'] : "";

  if (!empty($template_name)) {
    $layout = array(
      'arguments' => array('form' => NULL),
      'template' => $template_name,
      'path' => drupal_get_path('theme', FRONT_THEME_NAME) . '/templates/layouts/' . arg(1)
    );
  }
  else {
    $layout = array();
  }

  $themes = array(
    'footer_block' => array(
      'variable' => array('data' => NULL),
      'template' => 'itg-footer',
      'path' => drupal_get_path('theme', FRONT_THEME_NAME) . '/templates/layouts',
    ),
    'header_block' => array(
      'variable' => array('data' => NULL),
      'template' => 'itg-header',
      'path' => drupal_get_path('theme', FRONT_THEME_NAME) . '/templates/layouts',
    ),
    'amp_footer_block' => array(
      'variable' => array('data' => NULL),
      'template' => 'itg-amp-footer',
      'path' => drupal_get_path('theme', AMP_THEME_NAME) . '/templates',
    ),
    'amp_header_block' => array(
      'variable' => array('data' => NULL),
      'template' => 'itg-amp-header',
      'path' => drupal_get_path('theme', AMP_THEME_NAME) . '/templates',
    ),
    'layout_manager_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-manager-form-block',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'itg_layout_admin_page' => $layout,
    'layout_widgets_list_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-widgets-list-block',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'layout_buttons_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-buttons-block',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'layout_section_widgets_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-section-widgets-block',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'layout_section_widget2_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-section-widget2-block',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'header_snap_post_block' => array(
      'variable' => array('data' => NULL),
      'template' => 'itg-header-snap-post',
      'path' => drupal_get_path('theme', FRONT_THEME_NAME) . '/templates/layouts',
    ),
    'header_so_sorry_block' => array(
      'variable' => array('data' => NULL),
      'template' => 'itg-header-sosorry',
      'path' => drupal_get_path('theme', FRONT_THEME_NAME) . '/templates/layouts',
    ),
    'layout_custom_widgets_list_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-custom-widgets-list-block',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'layout_special_widgets_list_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-special-widgets-list-block',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'html_custom_widget' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-html-custom-widget',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'layout_highlights_widgets_list_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-highlights-widgets-list-block',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'itg_highlights_widget' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-itg-highlights-widget',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'frontend_breadcrumb_display_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'frontend-breadcrumb-display',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'layout_content_custom_widgets_list_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-content-custom-widgets-list-block',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'itg_state_election' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-state-election',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
    'layout_election_widgets_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-election-widgets-block',
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',
    ),
  );

  return $themes;
}

/**
 * 
 * This function use for url cleaning 
 * $string string
 * 
 */
function itg_layout_clean_url($string) {
  $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.
  return strtolower(preg_replace('/[^A-Za-z0-9\-]/', '', $string)); // Removes special chars.
}

/**
 * Implements hook_manager_preprocess_page().
 * {@inheritdoc}
 */
function itg_layout_gethomecarddata_new_pre($sectinno) {

  global $theme;

  if ($sectinno >= '25') {
    $sectinno = $sectinno + 1;
  }

  $arg = arg();
  $widget_name1 = 'itg-block-' . ($sectinno);
  $widget_name2 = 'itg-block-' . ($sectinno + 1);
  $widget_name3 = 'itg-block-' . ($sectinno + 2);
  $block_name = array($widget_name1, $widget_name2, $widget_name3);
  $section = 'home_page';
  $template_name = 'page--front';

  $data = get_layout_details_by_block_name($section, $template_name, 'front', $block_name);

  if ($data == "" && $sectinno < 80) {
    return itg_layout_gethomecarddata_new_pre($sectinno + 3);
  }

  $widget_data = $data;

  if (!empty($widget_data[$widget_name1]['widget_name']) || !empty($widget_data[$widget_name2]['widget_name']) || !empty($widget_data[$widget_name3]['widget_name'])) {
    return 1;
  }
  else {
    return 0;
  }
}

/**
 * Implements hook_manager_preprocess_page().
 * {@inheritdoc}
 */
function itg_layout_getsectioncarddata_new_pre($sectinno, $section) {

  global $theme;

  if ($sectinno >= '25') {
    $sectinno = $sectinno + 1;
  }

  $arg = arg();
  $widget_name1 = 'itg-block-' . ($sectinno);
  $widget_name2 = 'itg-block-' . ($sectinno + 1);
  $widget_name3 = 'itg-block-' . ($sectinno + 2);
  $block_name = array($widget_name1, $widget_name2, $widget_name3);

  $template_name = 'page--section_default';

  $data = get_layout_details_by_block_name($section, $template_name, 'front', $block_name);

  if ($data == "" && $sectinno < 80) {
    return itg_layout_getsectioncarddata_new_pre($sectinno + 3, $section);
  }

  $widget_data = $data;

  if (!empty($widget_data[$widget_name1]['widget_name']) || !empty($widget_data[$widget_name2]['widget_name']) || !empty($widget_data[$widget_name3]['widget_name'])) {
    return 1;
  }
  else {
    return 0;
  }
}

/**
 * Implements hook_manager_preprocess_page().
 * {@inheritdoc}
 */
function itg_layout_manager_preprocess_page(&$vars) {
  global $theme;
  $arg = arg();

  $is_fron_page = drupal_is_front_page();

  if (!empty($is_fron_page) && $theme == FRONT_THEME_NAME) {
    $section = 'home_page';
    $template_name = 'page--front';

    $data = get_layout_details($section, $template_name, 'front');
    p($data);
    $data['big_story'] = get_itg_widget('big_story_format');
    $data['personlization'] = get_itg_widget('personlization');
    $data['non_personlization'] = get_itg_widget('recommended_anonymous_user');
    $vars['widget_data'] = $data;
  }

  //section template display on front
  if (($arg[0] == 'taxonomy' && $arg[1] == 'term' && is_numeric($arg[2])) && $theme == FRONT_THEME_NAME) {
    $query = db_select('taxonomy_term_hierarchy', 'tth');
    $query->fields('tth', array('parent'));
    $query->join('taxonomy_term_data', 'ttd', 'ttd.tid = tth.tid');
    $query->condition('tth.tid', $arg[2]);
    $query->condition('ttd.vid', CATEGORY_MANAGMENT);
    $parent_id = $query->execute()->fetchField();
    if ($parent_id == 0) {
      $tpl_name = get_template_name_by_section_name($arg[2]);

      $tid_val = $arg[2]; //section id

      if (!empty($tpl_name)) {
        drupal_set_title('');
        $data = get_layout_details($tid_val, $tpl_name, 'front');
        $vars['widget_data'] = $data;
        $tpl_name = str_replace('--', '__', $tpl_name);
        $vars['theme_hook_suggestions'][] = $tpl_name;
      }
      else {
        $vars['theme_hook_suggestions'][] = 'page__taxonomy_term';
        // remove the extra vocavolary information on page buttom.
        unset($vars['page']['content']['system_main']);
      }
    }
    else {
      $vars['theme_hook_suggestions'][] = 'page__taxonomy_term';
      // remove the extra vocavolary information on page buttom.
      unset($vars['page']['content']['system_main']);
    }
  }
}

/**
 * callback for section card refresh
 */
function itg_section_card_refresh() {
  $data = explode("_", $_REQUEST['card_val']);
  $section_id = $data[1];
  $widget_style = '';
  $block_id = $data[2];
  $data = create_setion_widgets($section_id, $widget_style, $block_id);
  if (function_exists('itg_akamai_setting_ttl_for_section_cart')) {
    itg_akamai_setting_ttl_for_section_cart();
  }
  echo $data;
  exit;
}
