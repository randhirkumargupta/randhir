<?php

/**
 * Implements hook_menu().
 * @return array $items
 */
function itg_layout_manager_menu() {
  $items['itg-layout-manager'] = array(      
      'page callback' => 'itg_layout_admin',
      'access arguments' => array('access itg story'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_layout_manager.inc',
  );
  
  $items['insert-layout-setting-ajax'] = array(      
      'page callback' => 'insert_layout_setting_ajax',
      'access arguments' => array('access itg story'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_layout_ajax.inc',
  );
  
  $items['itg-layout-list'] = array(      
      'page callback' => 'itg_layout_list',
      'access arguments' => array('access itg story'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_layout_manager.inc',
  );
  
  $items['section-widgets-ajax/%'] = array(      
      'page callback' => 'section_widgets_ajax',
      'access arguments' => array('access itg story'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_layout_ajax.inc',
  );
  
  // Autocomplete callback for category name
  $items['itg_category_autocomplete_list'] = array(
    'page callback' => 'itg_category_autocomplete_list',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_layout_autocomplete.inc',
  );
  
  return $items;
}

/**
 * Implements hook_block_info().
 * @return array $blocks
 */
function itg_layout_manager_block_info() {
  $blocks['header_block'] = array(
    'info' => t('Header Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  $blocks['footer_block'] = array(
    'info' => t('Footer Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  $blocks['layout_manager_form_block'] = array(
    'info' => t('Layout manager form Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  $blocks['layout_widget_list_block'] = array(
    'info' => t('Layout widget list block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  $blocks['layout_button_block'] = array(
    'info' => t('Layout button block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  $blocks['layout_section_widgets'] = array(
    'info' => t('Layout section widget block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view()
 * {@inheritdoc}
 */
function itg_layout_manager_block_view($delta = '') {
  
  $block = array();
  
  switch ($delta) {
    case 'header_block':
      $data['itg_main_manu_header'] = menu_tree('menu-itg-main-menu-header');
      $data['itg_top_manu_header'] = menu_tree('menu-itg-top-menu-header');
      $block['content'] = theme('header_block', array('data' => $data));
      break;
    
    case 'footer_block':            
      $data = get_itg_footer_menu();
      $block['content'] = theme('footer_block', array('data' => $data));
      break;
          
    case 'layout_manager_form_block':
      $layout_form = drupal_get_form('itg_layout_manager_page_setting_form');
      $data['layout_form'] = drupal_render($layout_form); 
      $block['content'] = theme('layout_manager_block', array('data' => $data));
    break;
    
    case 'layout_widget_list_block':      
      $widget_array = get_nid_of_widgets_list();
      $block['content'] = theme('layout_widgets_list_block', array('data' => $widget_array));
    break;
    
    case 'layout_button_block':      
      $block['content'] = theme('layout_buttons_block', array('data' => ''));
    break;
  
    case 'layout_section_widgets':
      $section_widgets_form = drupal_get_form('layout_section_widgets_search_form');
      $data['section_widgets_form'] = drupal_render($section_widgets_form);
      $data['widgets_list'] = display_section_widgets_list($_GET['section'], $_GET['template_name']); 
      $block['content'] = theme('layout_section_widgets_block', array('data' => $data));
    break;
  }
  
  return $block;
}

/**
 * Implements hook_theme().
 * {@inheritdoc}
 */
function itg_layout_manager_theme($existing, $type, $theme, $path) {
  
  $template_name =  isset($_GET['template_name']) ? $_GET['template_name'] : "";
  
  if (!empty($template_name)) {
    $layout =  array(
      'arguments' => array('form' => NULL),
      'template' => $template_name,
      'path' => drupal_get_path('theme', FRONT_THEME_NAME) . '/templates/layouts/'.  arg(1)      
    );
  } 
  else {
      $layout = array();
  }
  
  $themes = array(
    'footer_block' => array(
      'variable' => array('data' => NULL),
      'template' => 'itg-footer',
      'path' => drupal_get_path('theme', FRONT_THEME_NAME) . '/templates/layouts',
    ),
    'header_block' => array(
      'variable' => array('data' => NULL),
      'template' => 'itg-header',
      'path' => drupal_get_path('theme', FRONT_THEME_NAME) . '/templates/layouts',
    ),
    'layout_manager_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-manager-form-block',      
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',     
    ),
    'itg_layout_admin_page' => $layout,
    'layout_widgets_list_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-widgets-list-block',      
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',     
    ),
    'layout_buttons_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-buttons-block',      
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',     
    ),
    'layout_section_widgets_block' => array(
      'arguments' => array('form' => NULL),
      'template' => 'layout-section-widgets-block',      
      'path' => drupal_get_path('module', 'itg_layout_manager') . '/templates',     
    ),
  );
  
  return $themes;
}

/**
 * Get template name list
 * @param string $tpl_dir 
 * @return array $data
 */
function get_template_name($tpl_dir) {
  
  $dir = getcwd().'/'.drupal_get_path('theme', FRONT_THEME_NAME) . '/templates/layouts/'.$tpl_dir;
  
  $scanned_directory = array_diff(scandir($dir, 1), array('..', '.'));
  
  $data = array("" => "-- Template --");
  
  foreach ($scanned_directory as $key => $val) {
    $tpl = substr($val,0,-8);
    $data[$tpl] = $tpl;    
  }
  
  return $data;
}

/**
 * Implementation of hook_form for itg_layout_manager_form
 * {@inheritdoc}
 */
function itg_layout_manager_page_setting_form($form, &$form_state) {
  
  $arg1 = arg(1);
  
  global $base_url;
  
  $settings['base_url'] = $base_url;  
  
  drupal_add_js(array('itg_story' => array('settings' => $settings)), array('type' => 'setting'));
  
  drupal_add_js(drupal_get_path('module', 'itg_layout_manager') . '/js/itg_layout_manager.js', array('weight' => 1));
  
  
  $tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = FALSE);
  
  if ($arg1 == 'section') {
    $op = array("" => "-- Section --");
    foreach ($tax as $key => $val) {
      $op[$val->name] = $val->name;
    }
  } 
  elseif ($arg1 == 'home') {
      $op = array('home_page' => 'Home Page');
  }
  
  $template = get_template_name($arg1);
    
  $form['section'] = array(
       '#type' => 'select',
       '#title' => t('Select Section'),
       '#options' => $op,
       '#required' => TRUE,
       '#default_value' => isset($_GET['section']) ? $_GET['section'] : "",       
   );
  
  $form['template_name'] = array(
       '#type' => 'select',
       '#title' => t('Select template'),
       '#options' => $template,
       '#required' => TRUE,
       '#default_value' => isset($_GET['template_name']) ? $_GET['template_name'] : "",       
   );
   
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );

  return $form;
}

/**
 * Custom submit callback for itg_layout_manager_form_submit.
 * {@inheritdoc}
 */
function itg_layout_manager_page_setting_form_submit($form, &$form_state) { 
  $options = array('query' => array('section' => $form_state['input']['section'], 'template_name' => $form_state['input']['template_name']));
  drupal_goto('itg-layout-manager/' . arg(1), $options);  
}

/**
 * Custom validate callback for itg_layout_manager_form_submit.
 * {@inheritdoc}
 */
function itg_layout_manager_page_setting_form_validate($form, &$form_state) {
  
  $template_id = check_template_of_section($form_state['input']['section'], $form_state['input']['template_name']);
  if (empty($template_id)) {
    //form_set_error('edit-section', t('Already tpl select for this section.'));
  }
   
}

/**
 * Get layout manager id
 * @param int $layout_id
 * @param string $block_name 
 * @return int $id
 */
function get_layout_manager_id($layout_id, $block_name) {
  $query = db_select('itg_layout_manager', 'layout');
  $query->fields('layout', array('id'));  
  $query->condition('layout_id', $layout_id)
        ->condition('block_name', $block_name);  
  $id = $query->execute()->fetchField();
  
  return $id;
}

/**
 * Get layout details by section_name and template_name
 * @param string $section_name
 * @param string $template_name 
 * @return array $data
 */
function get_layout_details($section_name, $template_name, $status) {
  
  if ($status == 'admin') {
    $query = db_select('itg_layout_tpl', 'tpl');
    $query->fields('tpl', array('id', 'status'));  
    $query->condition('section_name', $section_name)
          ->condition('template_name', $template_name);
    $query->orderBy('tpl.id', 'DESC')->range(0,1);//LIMIT to 1 records

    $last_tpl = $query->execute()->fetchField();
  }
  
  $itg_query = db_select('itg_layout_tpl', 'layout_tpl');
  $itg_query->fields('layout_manager', array('widget_name', 'block_name', 'block_title', '	filter_url'));  
  $itg_query->join('itg_layout_manager', 'layout_manager', 'layout_tpl.id = layout_manager.layout_id');  
  $itg_query->condition('layout_tpl.section_name', $section_name);    
  $itg_query->condition('layout_tpl.template_name', $template_name);
  
  if ($status == 'front') {
    $itg_query->condition('layout_tpl.status', 1);
  } 
  elseif ($status == 'admin') {
     $itg_query->condition('layout_tpl.id', $last_tpl);     
  }
  
  $itg_result = $itg_query->execute()->fetchAll();
  
  foreach ($itg_result as $itg_val) {
    $result['widget_name'] = $itg_val->widget_name;
    $result['block_title'] = $itg_val->block_title;
    
    if (isset($itg_val->widget_name) && $itg_val->widget_name == 'section_wise_order') {
      $widget = create_setion_widgets($itg_val->filter_url);      
    } 
    elseif (isset($itg_val->widget_name)) {
      $widget = get_itg_widget($itg_val->widget_name);
    } 
    else {
      $widget = '<p>Drag template widgets here !</p>';
    }
    
    $result['widget'] = $widget;
    
    $data[$itg_val->block_name] = $result;
  }
  
  return $data; 
  
}

/**
 * Get itg widget block by widget name 
 * @param string $widget_name 
 * @return array $render_array
 */
function get_itg_widget($widget_name) {  
  $block = block_load('itg_widget', $widget_name);
  $render_array = _block_get_renderable_array(_block_render_blocks(array($block)));
  return render($render_array);
}

/**
 * Implements hook_manager_preprocess_page().
 * {@inheritdoc}
 */
function itg_layout_manager_preprocess_page(&$vars) {
  global $theme;
  $arg = arg();
  
  $is_fron_page = drupal_is_front_page(); 
  if (!empty($is_fron_page) && $theme == FRONT_THEME_NAME) {
    $section = 'home_page';
    $template_name = 'page--front';
    $data = get_layout_details($section, $template_name, 'front'); 
    $data['big_story'] = get_itg_widget('big_story_format');
    $vars['widget_data'] = $data;
  }
  
  //section template display on front
  if (($arg[0] == 'taxonomy' && $arg[1] == 'term' && is_numeric($arg[2]))&& $theme == FRONT_THEME_NAME) {   
    $tpl_name = get_template_name_by_section_name($section_name);
    if (isset($tpl_name)) {
     $tpl_name = str_replace('--', '__', $tpl_name);  
     $vars['theme_hook_suggestions'][] = $tpl_name;
    }
  }
  
}


/**
 * Get tamplate id of section
 * @param string $section_name
 * @param string $template_name 
 * @return int $id
 */
function check_template_of_section($section_name, $template_name) {  
  $query = db_select('itg_layout_tpl', 'tpl');
  $query->fields('tpl', array('id'));  
  $query->condition('section_name', $section_name)
        ->condition('template_name', $template_name, '!=');
  
  $id = $query->execute()->fetchField();
  
  return $id;
}

/**
 * Implements hook_form().
 * {@inheritdoc}
 */
function itg_layout_manager_filter_form($form, &$form_state) {
  $form = array();
  
  $tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = FALSE);  
  
  $op = array("_none" => "-- All --");
  foreach ($tax as $key => $val) {
    $op[$val->name] = $val->name;
  }  
  
  $form['section'] = array(
       '#type' => 'select',
       '#title' => t('Select Section'),
       '#options' => $op,
       '#required' => TRUE,
       '#default_value' => isset($_GET['section']) ? $_GET['section'] : "",       
  );
  
  $form['items_per_page'] = array(
    '#type' => 'select',
    '#title' => 'Items per page',
    '#options' => array(5 => 5, 10 => 10, 20 => 20, 40 => 40, 60 => 60),
    '#default_value' => ($_GET['items_per_page']) ? $_GET['items_per_page'] : 20,
  );
  
  $form['submit'] = array(
    '#value' => 'Apply',
    '#type' => 'submit',
    '#attributes' => array('class' => array('layout-apply')),
    '#prefix' => '<div class = "layout-filter-btn">',
    '#suffix' => '<a class="layout-reset" href="' . base_path() . 'itg-layout-list">Reset</a></div>',
  );
  
  return $form;
}

/**
 * Implements hook_submit()
 * {@inheritdoc}
 */
function itg_layout_manager_filter_form_submit($form, &$form_state) {
  $form_state['redirect'] = array(
    'itg-layout-list',
      array(
        'query' => array(
          'title' => $form_state['values']['section'],
          'items_per_page' => $form_state['values']['items_per_page'],
        ),
      ),
  );
}

/**
 * Implementation of hook_form
 * {@inheritdoc}
 */
function layout_section_widgets_search_form($form, &$form_state) {

  $form['section_name'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#attributes' => array('placeholder' => t('Search')),
    '#autocomplete_path' => 'itg_category_autocomplete_list',
    '#maxlength' => 128,
  );  
  
  $form['section_save'] = array(
    '#markup' => '<a class="btn btn-save" href="javascript:void(0)" id="layout-section-save">+</a>',
    '#weight' => 20,
  );  
  
  return $form;
}

/**
 * Display section widgets list
 * @param string $section_name
 * @param string $template_name 
 * @return string 
 */
function display_section_widgets_list($section_name, $template_name) {
  
  global $base_url;  
  
  // select query    
  $itg_query = db_select('itg_section_widgets_list', 'layout_tpl');
  $itg_query->fields('layout_tpl', array('id','category_name', 'category_id'));
  $itg_query->condition('layout_tpl.template_section_name', $section_name);
  $itg_query->condition('layout_tpl.template_name', $template_name);  
  $itg_result = $itg_query->execute()->fetchAll();
  
  $widget_name = 'section_wise_order';
  
  $content = '<ul id="templates-widgets-section" class="no-bullet pd-10 templates-widgets">';
  
  foreach ($itg_result as $row) {    
    $content .= '<li data-widget="'.$widget_name.'#'.$row->category_id.'">'
            . '<span>'.$row->category_name.' ('.$row->category_id.')</span>'
            . '<span><a class="layout-section-delete" href="javascript:void(0)" data-widget="'.$row->id.'">X</a></span>'
            . '</li>';
  }
  
  $content .= '</ul>';
  
  return $content;
}

/**
 * Get nid of widgets list
 * @param string $section_name
 * @param string $template_name 
 * @return array
 */
function get_nid_of_widgets_list() {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));  
  $query->condition('type', 'itg_template_widgets');        
  $query->orderBy('n.nid', 'DESC')->range(0,1);//LIMIT to 1 records
  $nid = $query->execute()->fetchField();
  
  $node = node_load($nid);
  $widget_array = $node->field_itg_widget_name[LANGUAGE_NONE];
  
  return $widget_array;
}

/**
 * Get itg setion widgets 
 * @return array
 */
function create_setion_widgets($section_id) {
  module_load_include('inc', 'itg_widget', 'includes/section-wise-order-from-custom-table');
  // value is hardcoded need to be change for dyanamic functionality
  $info['section'] = $section_id; // tid of section
  $info['content_type'] = ''; // content type machine name
  // view name which is stored in draggableviews_structure table
  $info['view_name'] = 'views_form_section_wise_content_ordering_list_page';
  $block['subject'] = t('Section wise ordering from custom table');
  
  $data = itg_widget_section_wise_ordering_from_custom_table($info);
  
  return theme("section_wise_ordering", array("data" => $data));
}

/**
 * Get itg footer menu 
 * @return array
 */
function get_itg_footer_menu() {
  
  $data['publications_footer'] = menu_tree('menu-itg-publications-menu-foote');
  $data['distribution_footer'] = menu_tree('menu-itg-distribution-menu-foote');
  $data['education_footer'] = menu_tree('menu-itg-education-menu-footer');
  $data['events_footer'] = menu_tree('menu-itg-events-menu-footer');
  $data['music_footer'] = menu_tree('menu-itg-music-menu-footer');
  $data['printing_footer'] = menu_tree('menu-itg-printing-menu-footer');
  $data['radio_footer'] = menu_tree('menu-itg-radio-menu-footer');
  $data['shopping_footer'] = menu_tree('menu-itg-shopping-menu-footer');
  $data['syndication_footer'] = menu_tree('menu-itg-syndication-menu-footer');
  $data['television_footer'] = menu_tree('menu-itg-television-menu-footer');
  $data['useful_footer'] = menu_tree('menu-itg-useful-menu-footer');
  $data['welfare_footer'] = menu_tree('menu-itg-welfare-menu-footer');
  $data['footer-top-menu'] = menu_tree('menu-itg-main-menu-footer');
  return $data;
}
/**
 * Get template name by section name
 * @return string
 */
function get_template_name_by_section_name($section_name) {
    $query = db_select('itg_layout_tpl', 'tpl');
    $query->fields('tpl', array('template_name'));  
    $query->condition('section_name', $section_name)
          ->condition('status', 1);
    $query->orderBy('tpl.id', 'DESC')->range(0,1);//LIMIT to 1 records

    return $query->execute()->fetchField();
}