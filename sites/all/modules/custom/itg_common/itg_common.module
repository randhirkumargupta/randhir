<?php

/**
 * @file
 * The ITG Common module.
 *
 * Provides common functionality and customizations.
 *
 */
module_load_include('inc', 'itg_common', 'includes/itg_common.helper');

/**
 * Helper function to populate the second dropdown.
 * @param string $id
 * @return array $data
 */
function itg_common_dropdown_supplement($id = '') {

    // Fetch query for supplements
    $select = t('- None -');
    $data = array('_none' => $select);

    $query = db_select('field_data_field_supp_select_magazine', 'm');
    $query->join('node', 'n', 'm.entity_id = n.nid');
    $query->fields('m', array('entity_id'));
    $query->fields('n', array('title'));
    $query->condition('field_supp_select_magazine_target_id', $id, '=');

    $result = $query->execute();

    while ($record = $result->fetchAssoc()) {
        $data[$record['entity_id']] = $record['title'];
    }

    return $data;
}

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_common_form_alter(&$form, &$form_state, $form_id) {
    global $user;

    if ($user->uid != '1') {
        // checkbox hide for all user of Provide a menu link on all form
        drupal_add_js('jQuery(document).ready(function() {                  
             jQuery(".form-item-menu-enabled").hide();                         
      });', array('type' => 'inline', 'scope' => 'footer'));

        if ($form_id == 'menu_edit_item') {
            // Add JS to hide extra element of menu forms
            drupal_add_js('jQuery(document).ready(function() {                  
             jQuery(".form-item-description").hide();
             jQuery(".form-type-checkbox").hide();
             jQuery(".form-item-expanded").hide();
             jQuery(".form-item-parent").hide();
             jQuery(".form-item-weight").hide();             
      });', array('type' => 'inline', 'scope' => 'footer'));
        }
        // hide source relation and type field from other users 
        if ($form_id == 'podcast_node_form' || $form_id == 'videogallery_node_form' || $form_id == 'recipe_node_form' || $form_id == 'photogallery_node_form' || $form_id == 'blog_node_form' || $form_id == 'story_node_form'
        ) {
            $form['field_story_source_id']['#attributes']['class'][] = 'element-hidden';
            $form['field_story_source_type']['#attributes']['class'][] = 'element-hidden';

            // add common hidden type field
            $type = $form['type']['#value'];

            $form['ntype'] = array(
                '#title' => t('Ntype'),
                '#type' => 'hidden',
                '#id' => 'ntype',
                '#description' => t(''),
                '#value' => $type,
            );
        }



        // Add JS to hide Advance seeting from all content type forms
        drupal_add_js('jQuery(document).ready(function() {                  
           jQuery("#edit-metatags-und-advanced").hide();
           jQuery(".form-item-metatags-und-abstract-value").hide();
    });', array('type' => 'inline', 'scope' => 'footer'));
    }

    // Set title on Preview
    if (arg(1) == 'add' && isset($form['#node']->op) && $form['#node']->op == 'Preview') {
        $content_type_name = get_content_type_name($form['#node']->type);
        drupal_set_title('Create ' . $content_type_name);
    }

    // code to change page title on node edit
    if (!empty($form['nid']['#value']) && arg(2) == 'edit') {
        $node_type = $form['#node']->type;
        $node_type = str_replace("_", " ", $node_type);
        $node_type = ucfirst($node_type);
        $node_title = $form['#node']->title;
        $edit_title = 'Edit ' . $node_type . ' - ' . $node_title;
        drupal_set_title($edit_title);
    }


    if ($form_id != 'ask_an_expert_node_form') {
        if (isset($form['title']['#title'])) {
            $form['title']['#description'] = $form['title']['#title'];
        }
    }

    // Button name change some content
    if ($form_id == 'mega_review_critic_node_form' && (empty($form['#node']->nid) || (!empty($form['#node']->nid) && $form['#node']->status == 0))
    ) {
        $form['actions']['itg_custom_button'] = array('#type' => 'submit',
            '#value' => t('Save as Draft'),
            '#submit' => array('node_form_submit'));
        $form['actions']['submit']['#value'] = t('Publish');
    }

    // Extra meta tags element hide from form
    if ($form_id == 'mega_review_critic_node_form' || $form_id == 'story_node_form' || $form_id == 'itg_celebrity_profile_node_form' || $form_id == 'blog_node_form' || $form_id == 'podcast_node_form' || $form_id == 'videogallery_node_form'
    ) {
        if (!array_key_exists(ADMINISTRATOR, $user->roles)) {
            $form['#after_build'][] = 'itg_meta_tags_extra_element_hide';
        }
        $form['#after_build'][] = 'itg_common_cancel_button';
    }

    // Auto Generate image according photo gallery
    if ($form_id == 'photogallery_node_form' || $form_id == 'story_node_form' || $form_id == 'recipe_node_form' || $form_id == 'breaking_news_node_form' || $form_id == 'mega_review_critic_node_form' || $form_id == 'cooking_tips_node_form' || $form_id == 'food_news_node_form' || $form_id == 'videogallery_node_form' || $form_id == 'podcast_node_form'
    ) {

        $form['field_story_extra_large_image']['#suffix'] = '<a class="img-crt button" href="javascript:;">Generate Image</a><span class="generate-image-error error"></span>';
        if (isset($form_state['build_info']['args'][0]->field_story_extra_large_image)) {
            $cover_id = $form_state['build_info']['args'][0]->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'];
            $file = file_load($cover_id);
            $settings['large_node_uri'] = $file->uri;
            drupal_add_js(array('itg_common' => array('settings' => $settings)), array('type' => 'setting', 'scope' => 'footer'));
        }

        $form['#after_build'][] = 'itg_common_image_generate';
    }
    if ($form_id == 'photogallery_node_form' || $form_id == 'story_node_form' || $form_id == 'recipe_node_form' || $form_id == 'breaking_news_node_form' || $form_id == 'mega_review_critic_node_form' || $form_id == 'cooking_tips_node_form' || $form_id == 'food_news_node_form'
    ) {

        $form['field_story_extra_large_image']['#suffix'] = '<a class="img-crt button" href="javascript:;">Generate Image</a><span class="generate-image-error error"></span>';

        if (isset($form_state['build_info']['args'][0]->field_story_extra_large_image)) {
            $cover_id = $form_state['build_info']['args'][0]->field_story_extra_large_image[LANGUAGE_NONE][0]['fid'];
            $file = file_load($cover_id);
            $settings['large_node_uri'] = $file->uri;
            drupal_add_js(array('itg_common' => array('settings' => $settings)), array('type' => 'setting', 'scope' => 'footer'));
        }

        $form['#after_build'][] = 'itg_common_image_generate';
    }
    if ($form_id == "itg_celebrity_profile_node_form") {
        $form['#validate'][] = 'itg_common_managesite_validate';
        $form['actions']['submit']['#submit'][] = 'itg_site_setting_form_custom_callback';
    }
    $form['#after_build'][] = 'itg_common_add_js_top_btn';
}

/**
 * Add btn on top for all content type
 * @param array $form
 * @param array $form_state
 * @return array $form
 */
function itg_common_add_js_top_btn($form, &$form_state) {
    global $theme;
    if (((isset($form['#node']) || $form['#form_id'] == 'taxonomy_form_term') && $theme == 'itgadmin') && $form['#form_id'] != 'node_delete_confirm') {
        drupal_add_js(drupal_get_path('module', 'itg_common') . '/js/itg_common_addbtn.js', array('type' => 'file', 'scope' => 'footer'));
    }
    return $form;
}

/**
 * After submit Cooking Tips
 * @param array $form
 * @param array $form_state
 */
function itg_site_setting_form_custom_callback($form, &$form_state) {

    if (isset($_SESSION['messages']['status'])) {
        unset($_SESSION['messages']['status']);
    }
    if (arg(2) == 'edit') {
        $op = 'updated';
    } else {
        $op = 'created';
    }
    $celebrity_title = $form_state['node']->title;

    drupal_set_message(t('Celebrity profile <b>' . $celebrity_title . '</b> has been ' . $op . '.'));
}

/**
 * Implement after build for image generate according large image.
 * @param array $form
 * @param array $form_state
 * @return array $form
 */
function itg_common_image_generate($form, &$form_state) {
    $cover_id = $form_state['values']['field_story_extra_large_image'][LANGUAGE_NONE][0]['fid'];
    if (isset($cover_id) && !empty($cover_id)) {
        $file = file_load($cover_id);
        $settings['large_uri'] = $file->uri;
    } else {
        $settings['large_uri'] = '';
    }
    drupal_add_js(array('itg_common' => array('settings' => $settings)), array('type' => 'setting', 'scope' => 'footer'));
    drupal_add_js(drupal_get_path('module', 'itg_common') . '/js/itg_common_image.js', array('weight' => 3));

    return $form;
}

/**
 * Implements hook_form_field_ui_field_edit_form_alter
 * {@inheritdoc}
 */
function itg_common_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'field_ui_field_edit_form') {
        // Increase the max cardinality to 12
        $range = drupal_map_assoc(range(1, 12));
        $new_options = array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited')) + $range;

        // Change the options
        $form['field']['cardinality']['#options'] = $new_options;
    }
}

/**
 * Extra meta tags element hide from form
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_meta_tags_extra_element_hide($form, &$form_state) {

    unset($form['additional_settings']['group']['#groups']['additional_settings'][5]['#description']);
    unset($form['metatags']['intro_text']['#markup']);

    $form['path']['pathauto']['#title'] = t('Generate automatic Sef URL');
    $form['path']['#prefix'] = '<h2 class="story-title">' . t('Meta Tags') . '</h2>';

    drupal_add_js('jQuery(document).ready(function() {
             // hide some eliment of metatags
             jQuery(".vertical-tabs-list").hide();
             jQuery("#edit-metatags").show();
             jQuery("#edit-metatags-und-advanced").hide();
             jQuery(".form-item-metatags-und-abstract-value").hide();              
           });', array('type' => 'inline', 'scope' => 'footer'));

    return $form;
}

/**
 * Extra meta tags element hide from form
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_common_cancel_button($form, &$form_state) {

    if (!isset($_REQUEST['destination'])) {
        $destination = '';
    } else {
        $destination_array = explode('?', $_REQUEST['destination']);
        $destination = $destination_array[0];
    }

    $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
        '#weight' => 20,
    );

    return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_common_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
    if (isset($form['title'])) {
        $form['title']['#maxlength'] = 255;

        // remove space from title search field.
        drupal_add_js('jQuery(document).ready(function() {                  
                 jQuery(".form-submit").click(function() {            
                 var title = jQuery.trim(jQuery("#edit-title").val());
                 
                 if (title == "") {
                   jQuery("#edit-title").val("");
                 }
                 
                 var nid = jQuery.trim(jQuery("#edit-nid").val());       
                 if (nid == "") {
                   jQuery("#edit-nid").val("");
                 }
                 
               });              
          });', array('type' => 'inline', 'scope' => 'footer'));

        if ($form['#id'] == 'views-exposed-form-photo-gallery-management-page-1' || $form['#id'] == 'views-exposed-form-movie-review-list-page' || $form['#id'] == 'views-exposed-form-blogs-management-page-1' || $form['#id'] == 'views-exposed-form-manage-quiz-page'
        ) {

            // remove space from title search field.
            drupal_add_js('jQuery(document).ready(function() {                  
               jQuery(".tabledrag-toggle-weight-wrapper").hide();
        });', array('type' => 'inline', 'scope' => 'footer'));
        }
    }
    if ($form['#id'] == 'views-exposed-form-category-manager-dev-page' || $form['#id'] == 'views-exposed-form-tags-management-page'
    ) {

        drupal_add_js('jQuery(document).ready(function() {                  
                 jQuery(".form-submit").click(function() {
                 jQuery("#edit-name").val(jQuery.trim(jQuery("#edit-name").val()));
               });              
          });', array('type' => 'inline', 'scope' => 'footer'));
    }

    if ($form['#id'] == 'views-exposed-form-recipe-management-page' || $form['#id'] == 'views-exposed-form-recipe-management-page-1' || $form['#id'] == 'views-exposed-form-recipe-management-page-2'
    ) {

        drupal_add_js('jQuery(document).ready(function() {                  
                 jQuery(".form-submit").click(function() {
                 jQuery("#edit-title").val(jQuery.trim(jQuery("#edit-title").val()));
               });              
          });', array('type' => 'inline', 'scope' => 'footer'));
    }

    if ($form['#id'] == 'views-exposed-form-manage-users-page') {
        drupal_add_js('jQuery(document).ready(function() {                  
                 jQuery(".form-submit").click(function() {
                 jQuery("#edit-mail").val(jQuery.trim(jQuery("#edit-mail").val()));
                 jQuery("#edit-field-first-name-value").val(jQuery.trim(jQuery("#edit-field-first-name-value").val()));
                 jQuery("#edit-field-mobile-number-value").val(jQuery.trim(jQuery("#edit-field-mobile-number-value").val()));
               });              
          });', array('type' => 'inline', 'scope' => 'footer'));
    }

    if ($form['#id'] == 'views-exposed-form-ask-an-expert-page' || $form['#id'] == 'views-exposed-form-ask-an-expert-page-2'
    ) {

        drupal_add_js('jQuery(document).ready(function() {                  
                 jQuery(".form-submit").click(function() {
                 jQuery("#edit-field-user-email-value").val(jQuery.trim(jQuery("#edit-field-user-email-value").val()));
                 jQuery("#edit-title").val(jQuery.trim(jQuery("#edit-title").val()));
                 
               });              
          });', array('type' => 'inline', 'scope' => 'footer'));
    }

    // bulk operation
    if ($form['#id'] == 'views-exposed-form-manage-users-page') {
        drupal_add_js('jQuery(document).ready(function() {                  
                 jQuery("#edit-submit--2").click(function() {                 
                 var searchIDs = [];
                 var operation = jQuery( "#edit-operation").val();
                 jQuery("#views-form-manage-users-page input:checkbox:checked").map(function(){
                 searchIDs.push(jQuery(this).val());
              });
                 if (searchIDs.length != 0 && operation == "action::user_block_user_action") {
                  var msg = confirm("Are you sure, you want to block user?");
                     if (msg == true) {
                       return true;
                     }
                     return false; 
                 }
                                    
              });              
          });', array('type' => 'inline', 'scope' => 'footer'));
    }

    // code to reset breaking news listing when user click on back button
    drupal_add_js('jQuery(document).ready(function() {                  
           jQuery("form").each(function() {            
           this.reset();
         });              
    });', array('type' => 'inline', 'scope' => 'footer'));

    // code to restrict user to enter only numeric value
    drupal_add_js("jQuery(document).ready(function() {                  
                 jQuery('#edit-nid').keyup(function () { 
                 this.value = this.value.replace(/[^0-9\.]/g,'');
                  });            
          });", array('type' => 'inline', 'scope' => 'footer'));
}

/**
 * Implement hook_date_popup_process_alter().
 * {@inheritdoc}
 */
function itg_common_date_popup_process_alter(&$element, &$form_state, &$context) {
    if ($form_state['build_info']['form_id'] != 'views_exposed_form' && $form_state['build_info']['form_id'] != 'astro_node_form' && $form_state['build_info']['form_id'] != 'views_form_manage_print_team_page' && $form_state['build_info']['form_id'] != 'story_node_form') {
        $element['#datepicker_options'] = array(
            'minDate' => "+0D",
        );
        $element['date'] = date_popup_process_date_part($element);
    }
}

/**
 * Implementation of hook_node_presave().
 * @param object $node
 */
function itg_common_node_presave($node) {
    switch ($node->type) {
        case 'astro':
        case 'recipe':
        case 'poll':
        case 'mega_review_critic':
            if ($node->op == 'Publish') {
                $node->status = 1;
            } elseif ($node->op == 'Save as Draft' || $node->status == 0) {
                $node->status = 0;
            }
    }
}

/**
 * Implements hook_form_FORMID_alter().
 * {@inheritdoc}
 */
function itg_common_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
    // redirect node after delete
    if (!isset($_REQUEST['destination'])) {
        $destination = '';
    } else {
        $destination_array = explode('?', $_REQUEST['destination']);
        $_GET['destination'] = $destination_array[0];
    }
}

/**
 * Get survey count.
 * @param int $nid
 * @param string $tbl_name
 * @param string $field_name
 * @return int
 */
function itg_common_check_record_existance($nid, $tbl_name, $field_name) {
    $result = db_select($tbl_name, 'tbl')
            ->fields('tbl')
            ->condition('tbl.' . $field_name, $nid, '=')
            ->execute();
    $total_survey = $result->rowCount();

    if ($total_survey) {
        return $total_survey;
    } else {
        return 0;
    }
}

/**
 * Get any field value using table name and field name
 * @param string $field_name
 * @param string $tbl_name
 * @param string $cid_name
 * @param string $cid_val
 * @return array
 */
function itg_common_select_field_value($field_name, $tbl_name, $cid_name, $cid_val) {
    $query = db_select($tbl_name, 'tbl')
            ->fields('tbl', array($field_name))
            ->condition('tbl.' . $cid_name, $cid_val, '=');

    $result = $query->execute();

    while ($record = $result->fetchAssoc()) {
        $records[] = $record[$field_name];
    }

    return $records;
}

/**
 * Get content type name by content type machine name.
 * @param string $type
 * @return string $content_type_name
 */
function get_content_type_name($type) {
    $content_type_name = db_select('node_type', 'n')
                    ->fields('n', array('name'))
                    ->condition('type', $type)
                    ->execute()->fetchField();

    return $content_type_name;
}

/**
 * Get node title using nid
 * @param int $nid
 * @return string
 */
function itg_common_get_node_title($nid) {
    $query = db_select('node', 'n')
            ->fields('n', array('title'))
            ->condition('n.nid', $nid, '=');

    return $query->execute()->fetchField();
}

/**
 * Get node count.
 * @param string $content_type
 * @param int $uid
 * @return int
 */
function itg_get_all_node($content_type, $uid) {

    $query = "SELECT COUNT(*) amount FROM {node} n " .
            "WHERE n.type = :type AND n.uid = :uid";
    $result = db_query($query, array(':type' => $content_type, ':uid' => $uid))->fetch();

    return $result->amount;
}

/**
 * Get node publish count.
 * @param string $content_type
 * @param int $uid
 * @return int
 */
function itg_get_all_publish_node($content_type, $uid) {
    $query = "SELECT COUNT(*) amount FROM {node} n " .
            "WHERE n.type = :type AND n.uid = :uid AND n.status = '1'";
    $result = db_query($query, array(':type' => $content_type, ':uid' => $uid))->fetch();

    return $result->amount;
}

/**
 * Get node type.
 * @param int $uid
 * @return array $type
 */
function itg_get_all_node_type($uid) {
    $result = db_select('node', 'n')
            ->fields('n', array('type'))
            ->condition('uid', $uid, '=')
            ->groupBy('type')
            ->execute();

    while ($record = $result->fetchAssoc()) {
        $type[] = $record['type'];
    }

    return $type;
}

/**
 * Get Last node created by user.
 * @param int $uid
 * @return array $last_record_info
 */
function itg_last_node_user($uid) {

    $last_result = db_select('node', 'n')
            ->fields('n', array('title', 'type'))
            ->condition('uid', $uid, '=')
            ->orderBy('created', 'DESC')//ORDER BY created
            ->range(0, 1)
            ->execute();

    while ($last_record = $last_result->fetchAssoc()) {
        $last_record_info['title'] = $last_record['title'];
        $last_record_info['type'] = $last_record['type'];
    }

    return $last_record_info;
}

/**
 * Get Last node published by user.
 * @param int $uid
 * @param int $publish_id
 * @return array $last_record_info_user
 */
function itg_last_publish_user_node($uid, $publish_id) {
    $last_result_user = db_select('node', 'n')
            ->fields('n', array('title', 'type'))
            ->condition('uid', $uid, '=')
            ->condition('status', $publish_id, '=')
            ->orderBy('created', 'DESC')
            ->range(0, 1)
            ->execute();

    while ($last_record_user = $last_result_user->fetchAssoc()) {
        $last_record_info_user['title'] = $last_record_user['title'];
        $last_record_info_user['type'] = $last_record_user['type'];
    }

    return $last_record_info_user;
}

/**
 * Get Last node published by user using workflow.
 * @param int $uid
 * @param int $publish_id
 * @return array $last_publish_record_info
 */
function itg_last_node_published_user($uid, $publish_id) {
    $last_publish_result = db_select('workbench_moderation_node_history', 'w')
            ->fields('w', array('nid', 'vid'))
            ->condition('uid', $uid, '=')
            ->condition('published', $publish_id, '=')
            ->orderBy('stamp', 'DESC')//ORDER BY created
            ->range(0, 1)
            ->execute();

    while ($last_publish_record = $last_publish_result->fetchAssoc()) {
        $last_publish_record_info['vid'] = $last_publish_record['vid'];
        $last_publish_record_info['nid'] = $last_publish_record['nid'];
    }

    return $last_publish_record_info;
}

/**
 * Get Role create permission.
 * @param int $rid
 * @return
 */
function itg_common_check_role_access($rid) {
    $role_not_create_per = array(AUTHOR_GUEST, INTERN, EXPERT);
    if (in_array($rid, $role_not_create_per)) {
        return FALSE;
    } else {
        return TRUE;
    }
}

/**
 * Implements itg_ugc_bad_words
 * @param type string
 * @return string
 */
function itg_ugc_bad_words($description) {
    $vocab_id = taxonomy_vocabulary_machine_name_load('bad_words');
    $tax = taxonomy_get_tree($vocab_id->vid, $parent = 0, $max_depth = 1, $load_entities = FALSE);

    foreach ($tax as $key => $val) {
        $op[$val->tid] = $val->name;
    }

    // implode bad words array
    $keyword = implode("#", $op);
    $keyword = implode('|', explode('#', preg_quote($keyword)));

    return $final_description = preg_replace("/($keyword)/i", "<b style='font-size:14px; color:#FF0000; font-weight:bold;'>$0</b>", $description);
}

/**
 * Implements itg_custom_message
 * @param string $type
 * @param string $workbench_current_state
 * @param string $case
 * @param string $title
 * @param string $destination
 */
function itg_custom_message($type, $workbench_current_state, $case, $title, $destination) {

    if ($case == 'add') {

        if ($workbench_current_state == 'published') {
            $op = 'published';
            drupal_set_message(t($type . ' <b>' . $title . '</b> has been ' . $op . ' successfully.'));
        } else {
            $op = 'created';
            drupal_set_message(t($type . ' <b>' . $title . '</b> has been ' . $op . ' successfully and submitted for further review and approval.'));
        }
        $_GET['destination'] = $destination;
    } else {
        $op = 'updated';
        drupal_set_message(t($type . ' <b>' . $title . '</b> has been ' . $op . '.'));
        $_GET['destination'] = $destination;
    }
}

/**
 * Helper function to check for duplicate node titles
 * @param string $title
 * @param string $type
 * @param int $nid
 * @return int
 */
function itg_common_check_duplicate_title($title, $type, $nid) {
    if (trim($type)) { // Validate duplicate title for content type
        $results = db_select('node')->fields('node', array('title'))
                ->condition('title', $title, '=')
                ->condition('type', $type);
        if (isset($nid)) {
            $results->condition('nid', $nid, '!=');
        }

        return $results->execute()->rowCount();
    }
}

/**
 * Implements hook_node_view()
 * {@inheritdoc}
 */
function itg_common_node_view($node, $view_mode, $langcode) {
    if ($node->type == 'ask_an_expert') {
        $node_title = "Question : " . $node->title;
        drupal_set_title(t($node_title));
    }
}

/**
 * Implement validation for email in manage site
 * @param array $form
 * @param array $form_state
 */
function itg_common_managesite_validate($form, &$form_state) {
    if (isset($form_state['values']['field_reporter_email_id']) && $form_state['values']['field_reporter_email_id'][LANGUAGE_NONE][0]['value'] != '') {
        if (!filter_var($form_state['values']['field_reporter_email_id'][LANGUAGE_NONE][0]['value'], FILTER_VALIDATE_EMAIL)) {
            form_set_error('field_reporter_email_id', t('Please enter valid email address.'));
        }
    }
}
