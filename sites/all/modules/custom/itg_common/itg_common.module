<?php

/**
 * @file
 * The ITG Common module.
 *
 * Provides common functionality and customizations.
 *
 */
define('AUTHOR_GUEST', 4);
define('INTERN', 7);
define('SUBEDITOR_SR_SUB', 9);
define('COPY_EDITOR', 5);
define('SECTION_EDITOR', 8);
define('SECTION_EDITOR_ANCHOR', 20);
define('EDITOR', 6);
define('SITE_ADMIN', 10);
define('SEO', 19);
define('CORRESPONDENT', 13);
define('CO_ORDINATOR', 11);
define('PHOTO_COORDINATOR', 16);
define('PHOTO_HEAD', 17);
define('DESIGN_HEAD', 14);
define('COPY_DESK', 12);
define('DESIGNER', 15);
define('PHOTOGRAPHER', 18);
define('ADMINISTRATOR', 3);
define('CATEGORY_MANAGMENT', 4);
define('EXPERT', 21);


/**
 * Function for debugging arrays and objects.
 * @param $arg
 *  array or object to be printed.
 */
function p($arg) {
    print '<pre>';
    print_r($arg);
    die;
}

function pr($arg) {
    print '<pre>';
    print_r($arg);
    print '</pre>';
}

/**
 * Helper function to populate the second dropdown.
 * @param type $id
 * @return $data
 */
function itg_common_dropdown_supplement($id = '') {
 
  // Fetch query for supplements 
  $data = '';
  $query = db_select('field_data_field_supp_select_magazine', 'm');
  $query->join('node', 'n', 'm.entity_id = n.nid');
  $query->fields('m', array('entity_id'));
  $query->fields('n', array('title'));
  $query->condition('field_supp_select_magazine_target_id', $id, '=');
  // $query->condition('n.type', $content_type, '=');  

  $result = $query->execute(); 
  while ($record = $result->fetchAssoc()) {
    $data[$record['entity_id']] = $record['title'];
  }
  
  //If record found, then return array else return blank
  if (empty($data)) {
      $data = array('_none' => '-Select-');
  }
  
  return $data;

}

/**
 * Implements views header link 
 *
 */
function itg_common_views_pre_render(&$view) {
  
  if ($view->name == "movie_review_list") {
    global $user; // Get user information
    
    $header_content = l('Create Reviews', 'node/add/mega-review-critic');
    
    $view->attachment_before = $header_content;
  }    
}

/**
 * Get file name from fid
 * @param type $audioFid
 */
function itg_common_file_name($audio_fid) {  
  $itg_query = db_select('file_managed', 'f');
  $itg_query->condition('fid', $audio_fid, '=')
      ->fields('f', array('filename'));
  
  $itg_result = $itg_query->execute()->fetchField();  
  if ($itg_result != '') {
    return $itg_result;
  }
  
  return '';
}

/**
 * Implements hook_form_alter().
 */
function itg_common_form_alter(&$form, &$form_state, $form_id) {
  global $user;  
  if ($form_id == 'astro_node_form') {
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'itg_common') . '/js/itg_common.js',
      drupal_get_path('module', 'itg_category_manager') . '/js/moment.js',
    );    
    if ($form['nid']['#value'] == NULL) {
      $form['title']['#default_value'] = date('m/d/Y');
    }    
    $form['#action'] = '?destination=manage-astro';
    $form['actions']['submit']['#submit'][] = 'itg_common_change_message';
    $form['#validate'][] = 'itg_common_validate_astro';
    $form['#after_build'][] = 'itg_common_astro_after_build'; 
    unset($form['field_numerology']['und']['#options']['_none']);
    unset($form['field_astro_frequency2']['und']['#options']['_none']);
  }   
  
}



/**
 * after build function for altering field collection label.
 */
function itg_common_astro_after_build($form, &$form_state) {
 for($i = 0; $i <= 11; $i++) {    
    $name = itg_common_sunsign_name($i);            
    $form['field_astro_zodiac']['und'][$i]['field_buzz_description']['und'][0]['value']['#title'] = $name;
    $form['field_astro_zodiac']['und'][$i]['field_astro_thumb_icon']['und'][0]['#title'] = $name.' Thumbnail Icon'; 
    $form['field_astro_zodiac']['und'][$i]['field_audio']['und'][0]['#title'] = $name.' Audio'; 
    $form['field_astro_zodiac']['und'][$i]['field_astro_video']['und'][0]['#title'] = $name.' Video'; 
  ;}
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'manage-astro', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );   
  global $user;
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);

  $settings = array();  
  $settings['uid'] = $user->uid;

  drupal_add_js(array('uid' => $settings), 'setting');
  
  return $form;
}

/**
 * Function return name of the sunsign.
 */
function itg_common_sunsign_name($index) {
  $name = array(
    'Aries',
    'Taurus',
    'Gemini',
    'Cancer',
    'Leo',
    'Virgo',
    'Libra',
    'Scorpio',
    'Sagittarius',
    'Capricorn',
    'Aquarius',
    'pisces',
  );
  if ($index <= 11) {
    return $name[$index];
  }
  
  return '';
}

/**
 * Implements hook__form_field_ui_field_edit_form_alter
 * @param array $form array of form elements
 * @param arra $form_state array of submitted values
 * @param string $$form_id id of the current form
 */
function itg_common_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {  
  if ($form_id == 'field_ui_field_edit_form') {
    // Increase the max cardinality to 12
    $range = drupal_map_assoc(range(1, 12));
    $new_options =  array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited')) + $range;

    // Change the options
    $form['field']['cardinality']['#options'] = $new_options;
  }  
}

/**
 * Implements hook_field_collection_item_presave().
 * @param FieldCollectionItemEntity $field_collection_item
 */
function itg_common_field_collection_item_presave(FieldCollectionItemEntity $field_collection_item) {    
  static $count = 0;  
  if ($field_collection_item->field_name == 'field_astro_zodiac') {
    $name = itg_common_sunsign_name($count);
    $field_collection_item->field_astro_zodiac_sign_name['und'][0]['value'] = strtolower($name);    
  }
  ++$count;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function itg_common_validate_astro($form, &$form_state) {  
  for ($i = 0; $i <= 11; ++$i) {
    if ($form_state['values']['field_astro_zodiac']['und'][$i]['field_astro_thumb_icon']['und'][0]['fid'] == 0) {
      $name = itg_common_sunsign_name($i);
      form_set_error('field_astro_thumb_icon', $name.' Thumbnail Icon is required.');
    }
  }
  // check manadotory field  
  if ($form_state['values']['field_numerology']['und'][0]['value'] == 1 && $form_state['values']['field_astro_frequency2']['und'][0]['value'] == NULL) {
    form_set_error('field_astro_frequency2', 'Please choose frequency.');
  }
  if ($form_state['values']['field_numerology']['und'][0]['value'] == 1 && $form_state['values']['field_astro_numerology_values']['und'][0]['field_story_source_id']['und'][0]['value'] == '') {
    form_set_error('field_story_source_id', 'Please enter number.');
  }
  if ($form_state['values']['field_numerology']['und'][0]['value'] == 1 && $form_state['values']['field_astro_numerology_values']['und'][0]['field_buzz_description']['und'][0]['value'] == '') {
    form_set_error('field_story_source_id', 'Please enter description.');
  }
}

/**
 * Custom submit callback function to change message after astro node save.
 * @param type $form
 * @param type $form_state
 */
function itg_common_change_message($form, &$form_state) {
  $messages = drupal_get_messages('status');
  drupal_set_message(t('Astro has been successfully filled.'));
}

/**
 * Implements hook_block_info().
 */
function itg_common_block_info() {
  $blocks['astro_tab_form_block'] = array(
    'info' => t('Astro Form Tab Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view()
 * @param type $delta
 */
function itg_common_block_view($delta = '') {
  global $user;
  $block = array();
  $data = '';
  switch ($delta) {
    case 'astro_tab_form_block':                       
      $block['content'] = theme('astro_tab_form_display_block', array('data' => $data));
    break;        
  }
  
  return $block;
}

/**
 * Implements hook_theme().
 * @param type $existing
 * @param type $type
 * @param type $theme
 * @param type $path
 */
function itg_common_theme($existing, $type, $theme, $path) {
  $themes = array(
    'astro_tab_form_display_block' => array(
      'template' => 'astro-form-tab-template',
      'path' => drupal_get_path('module', 'itg_common') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'astro_node_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'astro-node-form',
      'path' => drupal_get_path('module', 'itg_common') . '/templates',
      'render element' => 'form',
    ),
  );

  return $themes;
}