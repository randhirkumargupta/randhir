<?php

/**
 * @file
 * The ITG Common module.
 *
 * Provides common functionality and customizations.
 *
 */
define('AUTHOR_GUEST', 4);
define('INTERN', 7);
define('SUBEDITOR_SR_SUB', 9);
define('COPY_EDITOR', 5);
define('SECTION_EDITOR', 8);
define('SECTION_EDITOR_ANCHOR', 20);
define('EDITOR', 6);
define('SITE_ADMIN', 10);
define('SEO', 19);
define('CORRESPONDENT', 13);
define('CO_ORDINATOR', 11);
define('PHOTO_COORDINATOR', 16);
define('PHOTO_HEAD', 17);
define('DESIGN_HEAD', 14);
define('COPY_DESK', 12);
define('DESIGNER', 15);
define('PHOTOGRAPHER', 18);
define('ADMINISTRATOR', 3);
define('CATEGORY_MANAGMENT', 4);


/**
 * Function for debugging arrays and objects.
 * @param $arg
 *  array or object to be printed.
 */
function p($arg) {
    print '<pre>';
    print_r($arg);
    die;
}

function pr($arg) {
    print '<pre>';
    print_r($arg);
    print '</pre>';
}

/**
 * Implements hook_menu().
 */
function itg_common_menu() {
  $items['cms-user-dashboard'] = array(      
      'page callback' => 'itg_common_cms_user_dashboard',     
      'access callback' => 'user_is_logged_in',  
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_common.inc',
  ); 
  
  return $items;
}


/**
 * Implements hook_form_alter().
 */
function itg_common_form_alter(&$form, &$form_state, $form_id) {
  global $user;  
  if ($form_id == 'astro_node_form') {
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'itg_common') . '/js/itg_common.js',
      drupal_get_path('module', 'itg_category_manager') . '/js/moment.js',
    );
    $form['#action'] = '?destination=manage-astro';
    $form['actions']['submit']['#submit'][] = 'itg_common_change_message';
    $form['#validate'][] = 'itg_common_validate_astro';
    $form['#after_build'][] = 'itg_common_astro_after_build'; 
    unset($form['field_numerology']['und']['#options']['_none']);
    unset($form['field_astro_frequency2']['und']['#options']['_none']);
  }
  
  // condition for user register and profile form
     if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'itg_common') . '/js/itg_common.js',
      drupal_get_path('module', 'itg_category_manager') . '/js/moment.js',
    );
     }
  if ($form_id == 'user_profile_form') {
    $form['account']['name']['#attributes']['disabled'] = 'disabled';
    $form['account']['mail']['#attributes']['disabled'] = 'disabled';
    $form['account']['mail']['#weight'] = '-6';
    $form['#validate'][] = 'itg_common_validate_user_profile_validate';
    $form['#after_build'][] = 'itg_common_after_user_profile_validate';

    if (array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles)) {
      $user_array = array(COPY_EDITOR => COPY_EDITOR, SUBEDITOR_SR_SUB => SUBEDITOR_SR_SUB, INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
      $user_id_log = $user->uid;
      if (isset($user_array) && $user_id_log != arg(1)) {
        unset($form['account']['pass']);
      }
    }
    else if (array_key_exists(COPY_EDITOR, $user->roles)) {
      $user_array = array(SUBEDITOR_SR_SUB => SUBEDITOR_SR_SUB, INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
      $user_id_log = $user->uid;
      if (isset($user_array) && $user_id_log != arg(1)) {
        unset($form['account']['pass']);
      }
    }
    else if (array_key_exists(SUBEDITOR_SR_SUB, $user->roles)) {
      $user_array = array(INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
      $user_id_log = $user->uid;
      if (isset($user_array) && $user_id_log != arg(1)) {
        unset($form['account']['pass']);
      }
    }
  }

  if ($form_id == 'user_register_form') {
    $form['#validate'][] = 'itg_common_validate_user_register_validate';
    $form['#after_build'][] = 'itg_common_after_user_register_validate';
  }

  if ($form_id == 'user_register_form' || $form_id == 'user_profile_form') {
    if (isset($_GET['destination'])) {
      $_GET['destination'] = $_GET['destination'];
    }
    else {
      $form['#action'] = '?destination=user/' . $user->uid;
    }
    if ($user->uid != 1) {
      $form['#after_build'][] = 'itg_user_after_build';

      $user_role = itg_common_role_delegation($form['account']['roles']['#options']);
      if (isset($user_role)) {
        if ($form['#user']->uid != $user->uid) {
          $form['selected'] = array(
            '#type' => 'select',
            '#title' => t('Select role'),
            '#options' => $user_role,
            '#default_value' => $form['account']['roles']['#default_value'][1],
            '#required' => TRUE,
          );
        }
      }
      //Check to default when create new user 'Notify User of New Account' checkbox will be checked.
      $form['account']['notify']['#default_value'] = TRUE;
      // Add cancel button to user edit form and redirects to user manage page on click of cancel button.
      $destination = 'user';
      if (isset($_GET['destination'])) {
        $destination = $_GET['destination'];
      }
      else {
        $destination = 'user/' . $user->uid;
      }
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $destination, array('attributes' => array('class' => 'button'))),
        '#weight' => 20,
        '#value' => t('Cancel'),
      );
    }
  } 
  
}


/**
 * Password validation for adding user profile
 * @param array $form
 * @param array $form_state
 */

function itg_common_validate_user_register_validate(&$form, &$form_state) {
  if ($form_state['values']['pass']) {
    if (!preg_match('/^[A-Za-z0-9!@#$%]{8,}$/', $form_state['values']['pass'])) {
      form_set_error('pass', t('Password must be minimum 8 digit alphanumeric and without space.'));
    }
  }
  
  // get section value
  $section = $form_state['values']['field_user_section'][LANGUAGE_NONE];
  if ($form_state['values']['selected'] == '22') {
    if (empty($section[0]['tid'])) {
    form_set_error('field_user_section', t("Section Field is required!"));
    }
  }
  
  if ($form_state['values']['selected'] == '5' || $form_state['values']['selected'] == '20' || $form_state['values']['selected'] == '6') {
     //pr($form);
    
    $mark_expert = $form_state['values']['field_mark_as_expert'][LANGUAGE_NONE][0]['value'];
    
    if (empty($mark_expert)) {
    form_set_error('field_mark_as_expert', t("Mark as Expert Field is required!"));
    }
    if (!empty($mark_expert) && empty($section[0]['tid'])) {
    form_set_error('field_user_section', t("Section Field is required!"));
    }
  }


}

/**
 * Password validation for minimum or maximum 8 char 
 * @param array $form
 * @param array $form_state
 */

function itg_common_after_user_register_validate(&$form, &$form_state) {
  $form['account']['pass']['#attached']['js'][1]['data']['password']['tooShort']='Make it at least 8 characters';
  return $form;
}
/**
 * Password validation for editing user profile
 * @param array $form
 * @param array $form_state

 */

function itg_common_validate_user_profile_validate(&$form, &$form_state) {
  if ($form_state['values']['pass']) {
    if (!preg_match('/^[A-Za-z0-9!@#$%]{8,}$/', $form_state['values']['pass'])) {
      form_set_error('pass', t('Password must be minimum 8 digit alphanumeric and without space.'));
    }
  }
  // get section value
  $section = $form_state['values']['field_user_section'][LANGUAGE_NONE];
  if ($form_state['values']['selected'] == '21') {
    if (empty($section[0]['tid'])) {
    form_set_error('field_user_section', t("Section Field is required!"));
    }
  }
  
  if ($form_state['values']['selected'] == '5' || $form_state['values']['selected'] == '20' || $form_state['values']['selected'] == '6') {
     //pr($form);
    
    $mark_expert = $form_state['values']['field_mark_as_expert'][LANGUAGE_NONE][0]['value'];
    
    if (empty($mark_expert)) {
    form_set_error('field_mark_as_expert', t("Mark as Expert Field is required!"));
    }
    if (!empty($mark_expert) && empty($section[0]['tid'])) {
    form_set_error('field_user_section', t("Section Field is required!"));
    }
  }

}
/**
 * Password validation for minimum or maximum 8 char 
 * @param array $form
 * @param array $form_state 
 */

function itg_common_after_user_profile_validate(&$form, &$form_state) {
  $form['account']['pass']['#attached']['js'][1]['data']['password']['tooShort']='Make it at least 8 characters';  
  
  return $form;
}

/**
 * Implements views header link 
 *
 */
function itg_common_views_pre_render(&$view) {
    if ($view->name == "manage_users") {
        global $user; // Get user information
        //$roles = user_roles();
        $header_content = '';
        if (!in_array('Intern', $user->roles) && !in_array('Author/Guest', $user->roles)) {
            $header_content = '<a href ="./admin/people/create?destination=manage-users">Create User</a>';
        }
        $view->attachment_before = $header_content;
    }    
}

/**
 * Implements hook_user_logout
 *
 */
function itg_common_user_logout($account) {
    $_GET['destination'] = 'user';
}
/*
 * 
 */
function itg_common_role_delegation($role_array) {
    global $user;

    if (array_key_exists(EDITOR, $user->roles)) {
        $user_array = array(AUTHOR_GUEST => 'Author/Guest', COPY_EDITOR => 'Copy Editor', INTERN => 'Intern', SECTION_EDITOR_ANCHOR => 'Section Editor/Anchor',  SUBEDITOR_SR_SUB => 'Subeditor/Sr.Sub' );
    } else if (array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles)) {
        $user_array = array(AUTHOR_GUEST => 'Author/Guest',COPY_EDITOR => 'Copy Editor', INTERN => 'Intern', SUBEDITOR_SR_SUB => 'Subeditor/Sr.Sub');
    } else if (array_key_exists(COPY_EDITOR, $user->roles)) {
        $user_array = array(AUTHOR_GUEST => 'Author/Guest', INTERN => 'Intern', SUBEDITOR_SR_SUB => 'Subeditor/Sr.Sub' );
    } else if (array_key_exists(SUBEDITOR_SR_SUB, $user->roles)) {
        $user_array = array(AUTHOR_GUEST => 'Author/Guest',INTERN => 'Intern' );
    } else if (array_key_exists(SITE_ADMIN, $user->roles)) {
        unset($role_array[3]);
        $user_array = $role_array;
    } else if (array_key_exists(ADMINISTRATOR, $user->roles)) {
        $user_array = $role_array;
    }

    return $user_array;
}
/*
 * Function return desendent role at add user page 
 */
function itg_common_role_delegation_uid() {
    global $user;

    if (array_key_exists(EDITOR, $user->roles)) {
        $user_array = array(SECTION_EDITOR_ANCHOR => SECTION_EDITOR_ANCHOR, COPY_EDITOR => COPY_EDITOR, SUBEDITOR_SR_SUB => SUBEDITOR_SR_SUB, INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
    } else if (array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles)) {
        $user_array = array(COPY_EDITOR => COPY_EDITOR, SUBEDITOR_SR_SUB => SUBEDITOR_SR_SUB, INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
    } else if (array_key_exists(COPY_EDITOR, $user->roles)) {
        $user_array = array(SUBEDITOR_SR_SUB => SUBEDITOR_SR_SUB, INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
    } else if (array_key_exists(SUBEDITOR_SR_SUB, $user->roles)) {
        $user_array = array(INTERN => INTERN, AUTHOR_GUEST => AUTHOR_GUEST);
    }

    return $user_array;
}

// after build for user management form
function itg_user_after_build($form, &$form_state) {
    drupal_add_js(drupal_get_path('module', 'itg_common') . '/js/itg_common.js', array('weight' => 1));
    return $form;
}

/*
 * Blocked and unblocked option for status filter in manage user view
 */
function itg_common_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
    if (($form['#id'] == 'views-exposed-form-manage-users-page')) {
        $form['status']['#options'][1] = 'Unblocked';
        $form['status']['#options'][0] = 'Blocked';
    }
}

/**
 * Implements hook_theme().
 */
function itg_common_theme($existing, $type, $theme, $path) {
  $themes = array(
    'cms_user_dashboard' => array(
      'template' => 'cms-user-dashboard',
      'path' => drupal_get_path('module', 'itg_common') . '/templates',
      'variables' => array('data' => NULL),
    ),    
  );

  return $themes;
}


/**
 * Helper function to populate the second dropdown.
 * @param type $id
 * @return $data
 */
function itg_common_dropdown_supplement($id = '') {
 
  // Fetch query for supplements 
  $data = '';
  $query = db_select('field_data_field_supp_select_magazine', 'm');
  $query->join('node', 'n', 'm.entity_id = n.nid');
  $query->fields('m', array('entity_id'));
  $query->fields('n', array('title'));
  $query->condition('field_supp_select_magazine_target_id', $id, '=');
  // $query->condition('n.type', $content_type, '=');  

  $result = $query->execute(); 
  while ($record = $result->fetchAssoc()) {
    $data[$record['entity_id']] = $record['title'];
  }
  
  //If record found, then return array else return blank
  if (empty($data)) {
      $data = array('_none' => '-Select-');
  }
  
  return $data;

}


/**
 * Implement hook_user_login
 * @param Array $edit
 * @param Object $account
 */
function itg_common_user_login(&$edit, $account) {  
  if (!array_key_exists(ADMINISTRATOR, $account->roles)) {
    $_GET['destination'] = 'cms-user-dashboard'; // Redirect user to dashboard page after login
  }
}


/**
 * after build function for altering field collection label.
 */
function itg_common_astro_after_build($form, &$form_state) {
 for($i = 0; $i <= 11; $i++) {    
    $name = itg_common_sunsign_name($i);            
    $form['field_astro_zodiac']['und'][$i]['field_buzz_description']['und'][0]['value']['#title'] = $name;
    $form['field_astro_zodiac']['und'][$i]['field_astro_thumb_icon']['und'][0]['#title'] = $name.' Thumbnail Icon'; 
    $form['field_astro_zodiac']['und'][$i]['field_audio']['und'][0]['#title'] = $name.' Audio'; 
    $form['field_astro_zodiac']['und'][$i]['field_astro_video']['und'][0]['#title'] = $name.' Video'; 
  ;}
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'manage-astro', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );   
  global $user;
  unset($form['metatags']['intro_text']['#markup']);
  unset($form['metatags']['#description']);

  $settings = array();  
  $settings['uid'] = $user->uid;

  drupal_add_js(array('uid' => $settings), 'setting');
  
  return $form;
}

/**
 * Function return name of the sunsign.
 */
function itg_common_sunsign_name($index) {
  $name = array(
    'Aries',
    'Taurus',
    'Gemini',
    'Cancer',
    'Leo',
    'Virgo',
    'Libra',
    'Scorpio',
    'Sagittarius',
    'Capricorn',
    'Aquarius',
    'pisces',
  );
  if ($index <= 11) {
    return $name[$index];
  }
  
  return '';
}

/**
 * Implements hook__form_field_ui_field_edit_form_alter
 * @param array $form array of form elements
 * @param arra $form_state array of submitted values
 * @param string $$form_id id of the current form
 */
function itg_common_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {  
  if ($form_id == 'field_ui_field_edit_form') {
    // Increase the max cardinality to 12
    $range = drupal_map_assoc(range(1, 12));
    $new_options =  array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited')) + $range;

    // Change the options
    $form['field']['cardinality']['#options'] = $new_options;
  }  
}

/**
 * Implements hook_field_collection_item_presave().
 * @param FieldCollectionItemEntity $field_collection_item
 */
function itg_common_field_collection_item_presave(FieldCollectionItemEntity $field_collection_item) {    
  static $count = 0;  
  if ($field_collection_item->field_name == 'field_astro_zodiac') {
    $name = itg_common_sunsign_name($count);
    $field_collection_item->field_astro_zodiac_sign_name['und'][0]['value'] = strtolower($name);    
  }
  ++$count;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function itg_common_validate_astro($form, &$form_state) {  
  for ($i = 0; $i <= 11; ++$i) {
    if ($form_state['values']['field_astro_zodiac']['und'][$i]['field_astro_thumb_icon']['und'][0]['fid'] == 0) {
      $name = itg_common_sunsign_name($i);
      form_set_error('field_astro_thumb_icon', $name.' Thumbnail Icon is required.');
    }
  }
  // check manadotory field  
  if ($form_state['values']['field_numerology']['und'][0]['value'] == 1 && $form_state['values']['field_astro_frequency2']['und'][0]['value'] == NULL) {
    form_set_error('field_astro_frequency2', 'Please choose frequency.');
  }
  if ($form_state['values']['field_numerology']['und'][0]['value'] == 1 && $form_state['values']['field_astro_numerology_values']['und'][0]['field_story_source_id']['und'][0]['value'] == '') {
    form_set_error('field_story_source_id', 'Please enter number.');
  }
  if ($form_state['values']['field_numerology']['und'][0]['value'] == 1 && $form_state['values']['field_astro_numerology_values']['und'][0]['field_buzz_description']['und'][0]['value'] == '') {
    form_set_error('field_story_source_id', 'Please enter description.');
  }
}

/**
 * Custom submit callback function to change message after astro node save.
 * @param type $form
 * @param type $form_state
 */
function itg_common_change_message($form, &$form_state) {
  $messages = drupal_get_messages('status');
  drupal_set_message(t('Astro has been successfully filled.'));
}
