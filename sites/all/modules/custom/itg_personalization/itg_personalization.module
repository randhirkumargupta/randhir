<?php
/*
 * @file
 *   This is personalized conent module for user content.
 */
module_load_all_includes('inc', 'includes/itg_personalization.helper');
module_load_all_includes('inc', 'includes/itg_personalization_profile.edit');
module_load_all_includes('inc', 'includes/itg_personalization_refer.friend');
module_load_all_includes('inc', 'includes/personalization_content_list');
module_load_all_includes('inc', 'includes/personalization_follow_unfollow');

/**
 * Implements hook_permission().
 *
 * {@inheritdoc}.
 */
function itg_personalization_permission() {
  return array(
    'view personalized content' => array(
      'title' => t('View personalized user content'),
      'description' => t('This permission grant user to view personalized content.'),
    ),
    'access personalization all content link' => array(
      'title' => t('Personalization all content link'),
      'description' => t('personalization all content link'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * {@inheritdoc}.
 */
function itg_personalization_menu() {
  $items['personalization'] = array(
    'title' => 'Personalization',
    'description' => 'User personalized content.',
    'page callback' => 'itg_personalization_home_page',
    'access arguments' => array('view personalized content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['personalization/%'] = array(
    'title' => 'Personalization - Saved Items',
    'page callback' => 'itg_personalization_home_page',
    'access arguments' => array('view personalized content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['itg-validate-by-usermail'] = array(
    'page callback' => 'itg_personalization_validate_by_usermail',
    'access arguments' => array('view personalized content'),
    'type' => MENU_CALLBACK,
  );
  $items['personalization-all-content'] = array(
    'title' => '',
    'page callback' => 'itg_personalization_all_content_display',
    'access arguments' => array('access personalization all content link'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/personalization_content_list.inc',
  );
  $items['personalization-del-content/%/%'] = array(
    'title' => '',
    'page callback' => 'itg_mongo_delete_ugc_content',
    'page arguments' => array(1,2),
    'access arguments' => array('access personalization all content link'),
    'type' => MENU_CALLBACK,
  );
  $items['following-details-ajax'] = array(
    'page callback' => 'itg_following_details_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['user-remove-follow-activity'] = array(
    'title' => '',
    'page callback' => 'itg_personalization_remove_activity',
    'access arguments' => array('access personalization all content link'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/personalization_follow_unfollow.inc',
  );

  return $items;
}

/**
 * Caback function for personalized content page.
 *
 * @global stdObject $user
 *   Standard user object.
 * 
 * @return array
 *   Html output for this page.
 */
function itg_personalization_home_page() {
  global $user, $base_url;
  $data = array();
  $arg = arg();
  $exclude_page = array('saved-items', 'my-credits');
  if(!in_array($arg[1] , $exclude_page)) {
  drupal_add_js(drupal_get_path('module', 'itg_astro') . '/js/jquery.validate.min.js', array('scope' => 'footer'));
  drupal_add_js(drupal_get_path('module', 'itg_personalization') . '/js/itg_personalization.js', array('scope' => 'footer'));
  }
  // Load user fields
  $user_fields = user_load($user->uid);

  // Render user picture.
  if(!empty($user_fields->field_user_picture['und'][0]['uri']) && getimagesize($user_fields->field_user_picture['und'][0]['uri']) !== false) {
  $data['profile_pic'] = theme(
      'image_style', array(
    'style_name' => 'user_picture',
    'path' => $user_fields->field_user_picture['und'][0]['uri'],
      )
  );
  } else {
    $file = $base_url . '/sites/all/themes/itg/images/default-user.png';
    $user_pic = "<img src=$file width='200' height='200' alt='user-image' title='user-image' />";
    $data['profile_pic'] = $user_pic;
  }
  // Load user name    
  $f_name = $user_fields->field_first_name['und'][0]['value'];
  $l_name = $user_fields->field_last_name['und'][0]['value'];
  $data['full_name'] = $f_name . ' ' . $l_name;
  $data['badge_detail'] = itg_personalization_badge($user->uid);
  // Load badge icon.
  if (!empty($data['badge_detail']['earn']) && $data['badge_detail']['earn'] > 0) {    
    $file = file_load(variable_get('badge_' . $data['badge_detail']['earn'], ''));
    // Render badge icone.
    $data['badge_detail']['badge_icon'] = theme(
        'image_style', array(
      'style_name' => 'medium',
      'path' => $file->uri,
        )
    );
  }

  return theme('personalization_userpage', array('data' => $data));
}

/**
 * Implements hook_theme().
 *
 * {@inheritdoc}.
 */
function itg_personalization_theme() {
  $themes = array(
    'personalization_userpage' => array(
      'template' => 'itg-personalizaton-home',
      'path' => drupal_get_path('module', 'itg_personalization') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'personalization_menu_tab' => array(
      'template' => 'itg-personalizaton-menu-tab',
      'path' => drupal_get_path('module', 'itg_personalization') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'personalization_saved_content_tab' => array(
      'template' => 'itg-personalizaton-saved_content_menu-tab',
      'path' => drupal_get_path('module', 'itg_personalization') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'personalization_my_point' => array(
      'template' => 'personalization-my-point',
      'path' => drupal_get_path('module', 'itg_personalization') . '/templates',
      'variables' => array('data' => NULL),
    ),
    'personalization_edit_profile' => array(
      'template' => 'personalization-edit-profile',
      'path' => drupal_get_path('module', 'itg_personalization') . '/templates',
      'variables' => array('data' => NULL),
    ),
  );

  return $themes;
}

/**
 * Implements hook_block_info().
 *
 * {@inheritdoc}.
 */
function itg_personalization_block_info() {
  $blocks['personalized_content_menu_tab'] = array(
    'info' => t('Personalized menu tab'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['personalized_saved_content'] = array(
    'info' => t('Personalized saved content menu tab'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['user_saved_content'] = array(
    'info' => t('Personalized saved content data'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['user_my_point'] = array(
    'info' => t('Personalized My Points'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['personalization_edit_profile'] = array(
    'info' => t('Edit Profile'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['personalization_refer_friend'] = array(
    'info' => t('Refer a friend'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['personalization_show_content'] = array(
    'info' => t('Personalized Show Content'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['personalization_all_content'] = array(
    'info' => t('Personalized All Content'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  
  $blocks['personalization_to_be_follow'] = array(
    'info' => t('Personalized To BE Follow'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['personalization_following'] = array(
    'info' => t('Personalized Following'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['personalization_manage_follow'] = array(
    'info' => t('Personalized Manage Follow'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Get menu text and class for mobile view.
 *
 * @return array
 *   Name of the menu and menu class.
 */
function itg_personalization_getmenu_title() {
  $arg = arg();
  $sticky_title = '';
  $data_tab = '';
  if (!empty($arg[1])) {
    switch ($arg[1]) {
      case 'my-preferences':
      case 'my-content':
      case 'my-credits':
      case 'edit-profile':
      case 'saved-items':      
        $title = str_replace('-', ' ', $arg[1]);
        $sticky_title = t(ucwords($title));
        $data_tab = $arg[1];
        break;
      case 'my-following':        
        $sticky_title = t('Following');
        $data_tab = $arg[1];
        break;
      case 'my-followers':
        $sticky_title = t('Following');
        $data_tab = $arg[1];
    }
    $data['menu_title'] = $sticky_title;
    $data['data_tab'] = $data_tab;
  }
  
  return $data;
}

/**
 * Implements hook_block_view().
 *
 * {@inheritdoc}.
 */
function itg_personalization_block_view($delta = '') {
  global $user;
  // create url for edit profile
  $change_pass_url = '';
  if ($delta == 'personalization_edit_profile' || $delta == 'personalization_refer_friend') {
    $uri = base64_encode('http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
    $change_pass_url = PARENT_SSO . '/sso/change-password/' . $uri;
  }
  $block = array();
  $output = '<ul class="profile-edit-tab">';
  $output .= '<li>' . l(t('General Settings'), 'personalization/edit-profile/general-settings') . '</li>';
  //$output .= '<li>' . l(t('Change Password'), 'personalization/edit-profile/change-password') . '</li>';
  // check for twitter condition
  if (strpos($user->name, '@') != false || is_numeric($user->name)) {
    $output .= '<li><a href="' . $change_pass_url .'">Change Password</a></li>';
  }
  $output .= '<li>' . l(t('Refer a Friend'), 'personalization/edit-profile/refer-a-friend') . '</li>';
  $output .= '</ul>';
  switch ($delta) {
    // Load personalized menu tab.
    case 'personalized_content_menu_tab':
      $data = itg_personalization_getmenu_title();      
      $block['content'] = theme('personalization_menu_tab', array('data' => $data));
      break;
    // Load personalized saved content menu tab.
    case 'personalized_saved_content':
      $block['content'] = theme('personalization_saved_content_tab');
      break;
    case 'personalization_show_content':
      $block['content'] = _personalization_show_content();
      break;
    case 'personalization_all_content':
      $block['content'] = _personalization_all_content();
      break;
    case 'personalization_to_be_follow':
      $block['content'] = _personalization_to_be_follow_content();
      break;
    case 'personalization_following':
      $block['content'] = _personalization_following_content();
      break;
    case 'user_saved_content':
      $block['content'] = '<div id="target"></div>';
      $block['content'] .= '<div id="target-content"></div>';
      break;
    case 'user_my_point':
      //$data = itg_loyalty_reward_user_details($user->uid);
      if(function_exists('itg_global_loyality_get_sso_id')) {
        $sso_id = itg_global_loyality_get_sso_id($user->uid);
      }
      $property = variable_get('property_name');
      $data = itg_get_global_credits($user->uid, $property, $sso_id);
      $block['content'] = theme('personalization_my_point', array('data' => $data));
      break;
    case 'personalization_edit_profile':
      $data['tab'] = $output;
      $data['form'] = drupal_get_form('itg_personalization_edit_profile_form');
      $block['content'] = theme('personalization_edit_profile', array('data' => $data));
      break;
    case 'personalization_refer_friend':
      $data['tab'] = $output;
      $data['form'] = drupal_get_form('itg_personalization_refer_a_friend_form');
      $block['content'] = theme('personalization_edit_profile', array('data' => $data));
      break;
    case 'personalization_manage_follow':
      $block['content'] = _personalization_manage_follow_content();
      break;
  }

  return $block;
}

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc}.
 */
function itg_personalization_form_alter(&$form, &$form_state, $form_id) {
  $arg = arg();
  if ($form_id == 'ugc_node_form' && $arg[0] == 'personalization') {
    // Hide user name field.

    $content_type_for_icon = '<ul class="saved-item-tab">';
    if (!empty($form['field_ugc_ctype']['und']['#options'])) {
      $icone = "";
      $i = 0;
      unset($form['field_ugc_ctype']['und']['#options']['recipe']);
      foreach ($form['field_ugc_ctype']['und']['#options'] as $key => $values) {

        if ($key == '_none') {
          $values = 'ALL';
          $icone = '<i class="fa fa-repeat" ></i>';
        }
        switch ($key) {
          case 'story':
            $icone = '<i class="fa fa-book" ></i>';
            break;
          case 'recipe':
            $icone = '<i class="fa fa-cutlery" ></i>';
            break;
          case 'photogallery':
            $icone = '<i class="fa fa-picture-o" ></i>';
            break;
          case 'videogallery':
            $icone = '<i class="fa fa-video-camera" ></i>';
            break;
          case 'podcast':
            $icone = '<i class="fa fa-volume-down" ></i>';
            break;
          case 'blog':
            $icone = '<i class="fa fa-rss" ></i>';
            break;
        }
        if ($i == 0) {
          $content_type_for_icon .= '<li ><a href="javascript:void(0)" class="active perchange per-' . $key . '-icon" id="' . $key . '">' . $icone . ' ' . ucfirst($values) . '</a></li>';
        }
        else {
          $content_type_for_icon .= '<li ><a href="javascript:void(0)" class="perchange per-' . $key . '-icon" id="' . $key . '">' . $icone . ' ' . ucfirst($values) . '</a></li>';
        }


        $i++;
      }
    }

    $content_type_for_icon .= '</ul>';
    $form['field_user_name']['#prefix'] = '<div style="display: none;">';
    $form['field_user_name']['#suffix'] = '</div>';
    $form['field_ugc_photo_image']['#prefix'] = '<div style="display: none;">';
    $form['field_ugc_photo_image']['#suffix'] = '</div>';
    // Hide user email field.
    $form['field_user_email']['#prefix'] = '<div style="display: none;">';
    $form['field_user_email']['#suffix'] = '</div>';
    // Hide city field.
    $form['field_user_city']['#prefix'] = '<div style="display: none;">';
    $form['field_user_city']['#suffix'] = '</div>';
    // Hide section field.    
//    $form['field_section']['#prefix'] = '<div style="display: none;">';
//    $form['field_section']['#suffix'] = '</div>';
    $form['field_ugc_ctype']['#prefix'] = '<div class="per-icon">' . $content_type_for_icon . '</div><div style="display: none;">';
    $form['field_ugc_ctype']['#suffix'] = '</div>';
    // Set field visibility for category field.
    $form['field_section']['#states'] = array(
      'visible' => array(
        ':input[name="field_ugc_ctype[und]"]' => array('!value' => '_none'),
      ),
    );
    // Set visibility for title filed.
    $form['title']['#states'] = array(
      'visible' => array(
        ':input[name="field_ugc_ctype[und]"]' => array('!value' => '_none'),
      ),
    );
    // Set visibility for submit buttons.
    $form['actions']['#states'] = array(
      'visible' => array(
        ':input[name="field_ugc_ctype[und]"]' => array('!value' => '_none'),
      ),
    );
    // Set field visibility for tags field.
    $form['field_story_client_title']['#states'] = array(
      'visible' => array(
        ':input[name="field_ugc_ctype[und]"]' => array('value' => 'videogallery'),
      ),
    );
    // Change placeholder of ugc type field.
    $form['field_ugc_ctype']['und']['#options']['_none'] = t('What do you want to submit today?');
    $form['#after_build'][] = 'itg_personalization_after_build';
    unset($form['field_ugc_ctype']['und']['#title']);
  }
}

/**
 * Implements custom after build function for ugs form.
 * 
 * @param array $form
 *   Array containing form elements.
 * @param array $form_state
 *   Array containing form submitted data.
 *
 * @return array
 *   Return altered form elements.
 */
function itg_personalization_after_build($form, &$form_state) {
  // Add astric to upload image field.
  $form['field_ugc_personalization_photo']['und'][0]['field_ugc_upload_photo']['und'][0]['#title'] = t('Upload Photo <span class="form-required" title="This field is required."> *</span>');

  return $form;
}

/**
 * Get content type from nodeid. 
 *
 * @param int $nid
 *   Node id of the node.
 *
 * @return string
 *   Node type of the node.
 */
function itg_personalization_flag_text($nid) {
  $itg_query = db_select('node', 'n');
  $itg_query->fields('n', array('type'))
      ->condition('nid', $nid);
  $itg_result = $itg_query->execute()->fetchField();

  return $itg_result;
}

/**
 * Implements hook_views_pre_render().
 *
 * {@inheritdoc}.
 */
function itg_personalization_views_pre_render(&$view) {
  if ($view->name == 'personalization_my_content') {
    foreach ($view->result as $key => $value) {
      if ($view->result[$key]->node_status == '1' && empty($view->result[$key]->field_field_story_source_type)) {
        $view->result[$key]->field_field_story_source_type[0]['rendered']['#markup'] = 'Under review';
      }
      if ($view->result[$key]->node_status == '0' && empty($view->result[$key]->field_field_story_source_type)) {
        $view->result[$key]->field_field_story_source_type[0]['rendered']['#markup'] = 'Rejected';
      }
      if ($view->result[$key]->node_status == '0' && $view->result[$key]->field_field_story_source_type[0]['raw']['value'] == '1') {
        $view->result[$key]->field_field_story_source_type[0]['rendered']['#markup'] = 'Approved';
      }
    }
  }
}

/**
 * Implements hook_views_api().
 *
 * {@inheritdoc}.
 */
function itg_personalization_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'itg_personalization') . '/views',
  );
}

/**
 * Callback for itg_mobile_services_field_add_more_submit
 * @param array $form
 * @param array $form_state
 */
function itg_personalization_field_add_more_submit($form, &$form_state) {
  if (isset($_SESSION['personalization_node'])) {
    $personalization_node = $_SESSION['personalization_node'];
  }
  $button = $form_state['triggering_element'];
  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $parents = $element['#field_parents'];

  // Alter the number of widgets to show. items_count = 0 means 1.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  //get the number from the select
  $numbtoadd = $form[$field_name]['add_more_number']['#value'];
  if ($numbtoadd) {
    $field_state['items_count'] += $numbtoadd - 1;
    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
    $form_state['rebuild'] = TRUE;
  }
  $node = drupal_rebuild_form('photogallery_node_form', $form_state, $old_form = NULL);

  $i = 0;
  foreach ($form_state['field']['field_gallery_image']['und']['entity'] as $key => $filed_collection) {
    if (!isset($filed_collection->field_images['und']) && $i >= 1) {
      $collection_id = $personalization_node->field_ugc_personalization_photo['und'][$i]['value'];
      $collection_value = field_collection_item_load($collection_id);
      $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_image_caption['und'][0]['value'] = $collection_value->field_story_short_headline['und'][0]['value'];
      $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_images['und'][0]['fid'] = $collection_value->field_ugc_upload_photo['und'][0]['fid'];
      $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_images['und'][0]['alt'] = $collection_value->field_ugc_upload_photo['und'][0]['alt'];
      $form_state['field']['field_gallery_image']['und']['entity'][$key]->field_images['und'][0]['title'] = $collection_value->field_ugc_upload_photo['und'][0]['title'];
    }
    $i++;
  }
}

/**
 * If someone registering on site from referral link then give points to user.
 *
 * @param string $key
 *   Unique referral key.
 */
function itg_personalization_reddem_referfriend($key) {
  try {
    // Update status of the referral link. 
    $itg_query = db_update('itg_lrp_refer_friend')
        ->fields(array('status' => 1))
        ->condition('referral_key', $key)
        ->condition('status', 0);
    $itg_result = $itg_query->execute();
  }
  catch (Exception $ex) {
    drupal_set_message($ex->getMessage(), 'error');
  }
  if ($itg_result) {
    try {
      $itg_query = db_select('itg_lrp_refer_friend', 'u');
      $itg_query->fields('u', array('uid'))
          ->condition('referral_key', $key)
          ->condition('status', 1);
      $itg_result = $itg_query->execute()->fetchField();
    }
    catch (Exception $ex) {
      drupal_set_message($ex->getMessage(), 'error');
    }
    if ($itg_result) {
      if (function_exists('itg_global_loyality_get_sso_id')) {
        $sso_id = itg_global_loyality_get_sso_id($user->uid);
      }
      if(function_exists('itg_global_loyality_send_data')) {
        itg_global_loyality_send_data($itg_result, 'raf', 0, '', $sso_id);
      }
      //itg_loyalty_reward_earnpoint(0, 'raf', $itg_result);
    }
  }
}

/**
 * Implements _personalization_show_content().
 */
function _personalization_show_content() {
  global $user, $base_url;
  $arg = arg();
  if (function_exists('mongodb')) {
    $con = mongodb();
    if (isset($con)) {
      if (!empty(variable_get('read_later_days_config'))) {
        $expiry_days = '-' . variable_get('read_later_days_config') . ' days';
      }
      else {
        $expiry_days = '-30 days';
      }

      $start_date = strtotime(date('d-m-Y', strtotime($expiry_days)));
      $url_arg = array('articles', 'videos', 'photogalleries', 'all');
      $people = $con->front_user_activity;

      if (in_array($arg[2], $url_arg)) {
        $flag = FALSE;
        if ($arg[2] == 'articles') {
          $ntype = 'story';
          $flag = TRUE;
        }
        if ($arg[2] == 'videos') {
          $ntype = 'videogallery';
          $flag = TRUE;
        }
        if ($arg[2] == 'photogalleries') {
          $ntype = 'photogallery';
          $flag = TRUE;
        }
        if ($arg[2] == 'all') {
          $ntype = 'photogallery';
          $flag = FALSE;
        }

        if ($flag) {
          $cursor = $people->find(array('uid' => $user->uid, 'status' => '1', 'ntype' => $ntype, 'activity' => 'read_later', 'timestamp' => array('$gte' => $start_date)))->sort(array('timestamp' => -1));
        }
        else {
          $cursor = $people->find(array('uid' => $user->uid, 'status' => '1', 'activity' => 'read_later', 'timestamp' => array('$gte' => $start_date)))->sort(array('timestamp' => -1));
        }
      }
      else {
        $cursor = $people->find(array('uid' => $user->uid, 'status' => '1', 'activity' => 'read_later', 'timestamp' => array('$gte' => $start_date)))->sort(array('timestamp' => -1));
      }

      $output = '';
      $output.= '<ul class="personal-list">';
      foreach ($cursor as $id => $value) {
        if (function_exists('itg_get_node_status') && itg_get_node_status($value['nid']) == '1') {
          $alias = drupal_get_path_alias('node/' . $value['nid']);
          $actual_link = $base_url . '/' . $alias;
          $short_url = $actual_link;
          $fbShare_title = str_replace("'", "", $value['title']);
          $fbSocial_share_title = htmlentities($fbShare_title, ENT_QUOTES);
          $fbdesc = '';
          if (function_exists('itg_get_front_activity_info')) {
            $opt = itg_get_front_activity_info($value['nid'], $value['ntype'], $user->uid, 'read_later', $status = '');
          }

          if (!empty($value['image']) && file_exists($value['image'])) {
            $file = file_create_url($value['image']);
            $type_image = theme('image_style', array('style_name' => 'anchors_landing', 'path' => $value['image'], 'alt' => $value['image']));
          }
          else {
            $file = $base_url . '/sites/all/themes/itg/images/itg_image370x208.jpg';
            $type_image = '<img src="' . $file . '" alt="itg_image370x208.jpg" title="itg_image370x208.jpg" />';
          }
          $n_url = url($value['path'], array('absolute' => TRUE));
          $output.= '<li class="col-md-4">  
          <div class="personal-details">
          <div class="personal-pic">' . $type_image . '</div>
          <div class="personal-caption">' . $value['primary_category_name'] . '</div>
          <div class="personal-action"><span class="flag-wrapper flag-my-saved-content flag-my-saved-content-2474">';

          if (($opt['status'] == '1')) {
            $output.= '<a title = "Unflag" href="javascript:" class="user-activity" data-rel="' . $value['nid'] . '" data-tag="' . $value['ntype'] . '" data-activity="read_later" data-status="0" class="def-cur-pointer"><i class="fa fa-times" aria-hidden="true"></i><span class="flag-throbber"></span></a>';
          }

          $output.= '</span><a href="javascript:" class="personal-share"><i class="fa fa-share-alt" aria-hidden="true"></i></a>';
          $output.= '<span class="personal-social-share-links">';
          $output .= '<a href="javascript:;" title = "share on facebook" class="def-cur-pointer facebook" onclick=\'fbpop("' . $actual_link . '", "' . urlencode($fbSocial_share_title) . '", "' . urlencode($fbdesc) . '", "' . $file . '", "' . $base_url . '", "' . $value['nid'] . '")\'><i class="fa fa-facebook"></i></a>';
          $output.= '<a href="javascript:;" title = "share on twitter" class="twitter def-cur-pointer" onclick=\'twitter_popup("' . urlencode($fbSocial_share_title) . '","' . urlencode($short_url) . '")\'><i class="fa fa-twitter"></i></a>';
          $output.= '<a href="javascript:;" title="share on google+" class="google def-cur-pointer" onclick=\'return googleplusbtn("' . $actual_link . '")\'><i class="fa fa-google-plus" aria-hidden="true"></i></a>';
          $output.= '</span>';
          $output.= '</div></div><a href="' . $n_url . '">' . $value['title'] . '</a>  </li>';
        }
      } // close for foreach
      $output.= '</ul>';
      if (!empty($value['nid'])) {
        return $output;
      }
      else {
        return t('No Record found!');
      }
    }
  }
}

/**
 * Implements _personalization_to_be_follow_content().
 */
function _personalization_to_be_follow_content() {
  $featured_tag = get_featured_tag();
  $output = '<div class="to_be_follow"><h2>To Be Follow</h2>';
  foreach ($featured_tag as $key => $value) {
    if (itg_personalization_get_followed_status($key) == 0) {
        $link = '<a class="tobe-follow" href="javascript:void(0)" data-tag="follow" data-value="'.$key.'"> Follow</a>';
        $output .='<div class="featured-name">' . $value . '<span>'.$link.'</span></div>';
    }
  }
  $output .= '</div>';

  return $output;
}

/**
 * Implements _personalization_following_content().
 */
function _personalization_following_content() {
  global $user;
  $featured_tag = itg_personalization_get_followed_tag($user->uid);
  $output = '<div class="to_be_follow"><h2>Following</h2>';
  foreach ($featured_tag as $key => $value) {
      if (function_exists('get_term_name_from_tid_for_report')) {
        $link = '<a class="tobe-follow" href="javascript:void(0)" data-tag="unfollow" data-value="'.$value['tid'].'"> Un Follow</a>';
        $output .='<div class="featured-name">' . get_term_name_from_tid_for_report($value['tid']) . '<span>'.$link.'</span></div>';
      }
  }
  $output .= '</div>';

  return $output;
}

/**
 * Helper function to get facebook share count
 * @param int $uid
 * @param string $type
 */
function itg_user_fb_share_count($uid, $type) {
  if (!empty($uid) && !empty($type))
  {
    $result = db_select('itg_lrp_loyalty_points', 'fs')
        ->fields('fs')
        ->condition('uid', $uid)
        ->condition('loyalty_type', $type)
        ->execute();
    $num_of_results = $result->rowCount();
    return $num_of_results;
  }
}

/**
 * Helper function to get featured tag
 */
function get_featured_tag() {
  $query = db_select('field_data_field_tags_display', 'ts');
  $query->join('field_data_field_tags_status', 'th', 'th.entity_id = ts.entity_id');
  $query->join('taxonomy_term_data', 'tn', 'tn.tid = ts.entity_id');
  $query->condition('ts.field_tags_display_value', 'Yes');
  $query->condition('th.field_tags_status_value', 'Published');
  $query->fields('ts', array('entity_id'));
  $query->fields('tn', array('name'));
  $result = $query->execute();
  foreach ($result as $row) {
    $tags_id[$row->entity_id] = $row->name;
  }
  return $tags_id;
}

/**
 * Helper function to get featured tag status
 */
function get_featured_tag_status($entity_id) {
   $result = db_select('field_data_field_tags_status', 'ts')
        ->fields('ts', array('field_tags_status_value'))
        ->condition('ts.entity_id', $entity_id)
        ->execute();
    $featured_data = $result->fetchField();
    return $featured_data;
}

/*
 * Helper function for follwing personalization
 */
function itg_following_details_callback() {
  global $user;
  $tid = $_POST['tid'];
  $dtag = $_POST['dtag'];
  if (function_exists('mongodb')) {
    $con = mongodb();
    // check connection
    if ($con && !empty($tid)) {
      if($dtag == 'follow') {
      $people = $con->following_personalization;
      $qry = array("tid" => $tid, "uid" => $user->uid, "tag-status" => $dtag, "timestamp" =>time());
      $result = $people->insert($qry);
      $response = array('success' => 'true');
      print json_encode($response);
      }
      
      if($dtag == 'unfollow') {
      $people = $con->following_personalization;
      $people->remove(array("tid" => $tid, "uid" => $user->uid));
      $response = array('success' => 'fail');
      print json_encode($response);
      }
    } //close connection
  }
}


/**
 * Implements hook_user_login().
 */
function itg_personalization_user_login(&$edit, $account) {
  global $user;
  if ($user->uid > 0) {
  //watchdog('itg_forced_login', $user->uid);
    $expire = time() + 86400;
    setrawcookie("itg_forced_login", "itg_user" . $user->uid, $expire,'/', SSO_COOKIE_DOMAIN);
  }
  $user_mail = $user->mail;
  $uids = itg_personalization_refer_friend_existence($user_mail);
  if (!empty($uids)) {
    foreach ($uids as $key => $value) {
      if (function_exists('itg_global_loyality_get_sso_id')) {
        $sso_id = itg_global_loyality_get_sso_id($value['uid']);
      }
      if (function_exists('itg_global_loyality_send_data') && !empty($value)) {
        itg_global_loyality_send_data($value['uid'], 'raf', 0, '', $sso_id);
        //itg_loyalty_reward_earnpoint(0, 'raf', $value);
        $itg_query = db_update('itg_lrp_refer_friend')
            ->fields(array('status' => 1))
            ->condition('mail', $user_mail)
            ->condition('status', 0);
        $itg_result = $itg_query->execute();
      }
    }
  }
}

/**
 * Helper function to check refer a friend existence().
 * @param string $mail
 */
function itg_personalization_refer_friend_existence($mail) {
  $query = db_select('itg_lrp_refer_friend', 'ref');
  $query->fields('ref', array('uid'))
      ->condition('ref.mail', $mail)
      ->condition('ref.status', 0);
  $result = $query->execute();
  return $record = $result->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * Manage follow/unfollow in personalization page.
 * @return string
 */
function _personalization_manage_follow_content() {
  global $user;
  if (function_exists('mongodb')) {
    $con = mongodb();
    if (isset($con)) {
      $people = $con->front_user_activity;
      $cursor = $people->find(array('uid' => $user->uid, 'status' => '1'));
      $output = '';

      foreach ($cursor as $row) {
        $result[$row['ntype']][] = $row;
      } // close for foreach
      $cnt_anchor = count($result['anchor']) - 1;
      $cnt_author = count($result['author']) - 1;
      $cnt_tag = count($result['tag']) - 1;
      $output.= "<div class='itg-personalization-text'>" . t('Here you can view all the Authors and Topics currently being followed by you.') . "</div>";
      $output.= '<div class="personal-list"><div class="personal-follow"><a class="letter" id="follow-author" href="#">Author</a><a class="letter" id="follow-topics" href="#">Topics</a><a class="letter activetab" id="follow-anchor" href="#">Anchor</a></div>';
      foreach ($result as $key => $rows) {
        if (is_array($rows) && count($rows) > 0) {
          foreach ($rows as $id => $value) {
            // for author
            if ($key == 'author') {
              if ($id == '0') {
                $output .= '<ul class="personal-lists-col follow-author">';
                $output .= "<li class='mhide'><h3>Author</h3></li>";
              }
              if ($value['title']) {
                $output .= "<li class='follow-author'><button class='btn btn-sm btn-dang er delete_class' id='" . $value['nid'] . "' >X</button><span>" . $value['title'] . "</span></li>";
              }
              if ($id == $cnt_author) {
                $output .= '</ul>';
              }
            }
            // for tag
            if ($key == 'tag') {
              if ($id == '0') {

                $output .= '<ul class="personal-lists-col follow-topics">';
                $output .= "<li class='mhide'><h3>Topics</h3></li>";
              }
              $output .= "<li class='follow-topics'><button class='btn btn-sm btn-dang er delete_class' id='" . $value['nid'] . "' >X</button><span>" . $value['title'] . "</span></li>";
              if ($id == $cnt_tag) {
                $output .= '</ul>';
              }
            }
            // for anchor
            if ($key == 'anchor') {
              if ($id == '0') {
                $output .= '<ul class="personal-lists-col follow-anchor">';
                $output .= "<li class='mhide'><h3>Anchor</h3></li>";
              }
              $output .= "<li><button class='btn btn-sm btn-danger delete_class' id='" . $value['nid'] . "' >X</button><span>" . $value['title'] . "</span></li>";
              if ($id == $cnt_anchor) {
                $output .= '</ul>';
              }
            }
          }
        }
      }
      return $output .= '</div>';
    }
  }
}

/**
 * Implements hook_cronapi().
 * {@inheritdoc}
 */
function itg_personalization_cronapi($op, $job = NULL) {
  $items['personalization_follow_mail'] = array(
    'description' => 'send follow story to Mail by author / topic.',
    'weight' => 5,
    'callback' => 'itg_personalization_send_follow_mail',
  );
  $items['personalization_follow_mail_anchor'] = array(
    'description' => 'send follow story to Mail by anchor.',
    'weight' => 5,
    'callback' => 'itg_personalization_follow_mail_for_anchor',
  );
  return $items;
}


/**
 * Implements callback function for 'itg_personalization_send_follow_mail'
 * @return bool
 */
function itg_personalization_send_follow_mail() {
  module_load_include('inc', 'itg_ugc', 'include/itg_follow_story_mail');
  $data = _get_following_user_story();

  if (!empty($data)) {
    $story_url = $data['node_url'];
    foreach ($data['author'] as $follow_user) {
      $node_type = $obj = (object) array('type' => 'story');
      $uname = user_load($follow_user);
      if (function_exists('itg_mail_templates_get_mailcontent')) {
        $mail_data = itg_mail_templates_get_mailcontent($node_type, 'Follow Story');
        $mail_body_author = str_replace('[itg_mail_token:itg_account_user_fname]', $uname->name, $mail_data->field_mail_body_follow_story[LANGUAGE_NONE][0]['value']);
        $mail_content_title = str_replace('[itg_mail_token:itg_node_title]', $type, $mail_body_author);
        $mail_contents = str_replace('[itg_mail_token:itg_node_title_link]', $story_url, $mail_content_title);
        $mail_subject = $mail_data->field_mail_subject_follwo_story[LANGUAGE_NONE][0]['value'];
      }

      $mail_content = preg_replace("/\[([^\[\]]++|(?R))*+\]/", "", $mail_contents);
      $params = array(
        'body' => $mail_content,
        'subject' => $mail_subject,
      );

      $to = itg_get_user_email_by_id($follow_user);
      if (!empty($to)) {
        $mail = drupal_mail('itg_ugc_user', 'send_mail_to_follow_story_user', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
      }
    }

    // for topic
    foreach ($data['tag'] as $follow_user) {
      $node_type = $obj = (object) array('type' => 'story');
      $uname = user_load($follow_user);
      if (function_exists('itg_mail_templates_get_mailcontent')) {
        $mail_data = itg_mail_templates_get_mailcontent($node_type, 'Follow Story');
        $mail_body_author = str_replace('[itg_mail_token:itg_account_user_fname]', $uname->name, $mail_data->field_mail_body_follow_story[LANGUAGE_NONE][0]['value']);
        $mail_content_title = str_replace('[itg_mail_token:itg_node_title]', $type, $mail_body_author);
        $mail_contents = str_replace('[itg_mail_token:itg_node_title_link]', $story_url, $mail_content_title);
        $mail_subject = $mail_data->field_mail_subject_follwo_story[LANGUAGE_NONE][0]['value'];
      }

      $mail_content = preg_replace("/\[([^\[\]]++|(?R))*+\]/", "", $mail_contents);
      $params = array(
        'body' => $mail_content,
        'subject' => $mail_subject,
      );

      $to = itg_get_user_email_by_id($follow_user);
      if (!empty($to)) {
        $mail = drupal_mail('itg_ugc_user', 'send_mail_to_follow_story_user', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
      }
    }
  }
  return TRUE;
}

/**
 * Implements callback function for 'itg_personalization_follow_mail_for_anchor'
 * @return bool
 */
function itg_personalization_follow_mail_for_anchor() {
  module_load_include('inc', 'itg_ugc', 'include/itg_follow_story_mail');
  $data = _get_following_user_anchor();
  if (!empty($data)) {
    $story_url = $data['node_url'];
    foreach ($data['anchor'] as $follow_user) {
      $node_type = $obj = (object) array('type' => 'story');
      $uname = user_load($follow_user);
      if (function_exists('itg_mail_templates_get_mailcontent')) {
        $mail_data = itg_mail_templates_get_mailcontent($node_type, 'Follow Story');
        $mail_body_author = str_replace('[itg_mail_token:itg_account_user_fname]', $uname->name, $mail_data->field_mail_body_follow_story[LANGUAGE_NONE][0]['value']);
        $mail_content_title = str_replace('[itg_mail_token:itg_node_title]', $type, $mail_body_author);
        $mail_contents = str_replace('[itg_mail_token:itg_node_title_link]', $story_url, $mail_content_title);
        $mail_subject = $mail_data->field_mail_subject_follwo_story[LANGUAGE_NONE][0]['value'];
      }

      $mail_content = preg_replace("/\[([^\[\]]++|(?R))*+\]/", "", $mail_contents);
      $params = array(
        'body' => $mail_content,
        'subject' => $mail_subject,
      );
      $to = itg_get_user_email_by_id($follow_user);
      if (!empty($to)) {
        $mail = drupal_mail('itg_ugc_user', 'send_mail_to_follow_story_user', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
      }
    }

  }
  return TRUE;
}

