<?php

/**
 * Check duplicate title
 */
function itg_syndication_check_duplicate($title, $sharing_mode, $nid = NULL) {
  $itg_query = db_select('node', 'n');
  if ($nid != NULL) {
    $itg_query->condition('n.nid', $nid, '!=');
  }
  $itg_query->condition('n.title', $title)
      ->fields('n', array('nid'));
  $itg_query->join('field_data_field_content_sharing_mode', 'cm', 'n.nid = cm.entity_id');
  $itg_query->condition('cm.field_content_sharing_mode_value', $sharing_mode);
  $itg_result = $itg_query->execute()->fetchField();
  
  return $itg_result;
}

/**
 * Implements hook_form_alter()
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
 
function itg_syndication_form_alter(&$form, &$form_state, $form_id) {    
  if ($form_id == 'syndication_client_node_form') {        
    // Load vocabulary id from machine name.
    $vid = taxonomy_vocabulary_machine_name_load('client_title');
    
    // Load list of clients from master
    $options = taxonomy_get_tree($vid->vid);
    
    // Create default option for list
    $data['_none']  = '- Select a value -';
    
    // Prepare options list from php stdObject
    foreach ($options as $value) {
      $data[$value->name] = $value->name;
    }
    
    // Convert title fields from textfield to select fields.
    $form['title'] = array(
      '#type' => 'select',
      '#title' => t('Client Title'),
      '#description' => t('Clientâ€™s name will be fetched from Master Sheet.  e.g. Airtel, Vodafone etc'),
      '#required' => TRUE,
      '#options' => $data,
      '#default_value' => $form['nid']['#value'] != NULL ? $form['title']['#default_value'] : '_none',
    );
    
    // Include js file
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'itg_syndication') . '/js/itg_syndication.js',      
    );
    
    // Custom callback for  after form built
    $form['#after_build'][] = 'itg_syndication_after_build';
    $form['actions']['submit']['#submit'][] = 'itg_syndication_change_message';
  }
}

/**
 * After build callback function.
 * @param type $form
 * @param type $form_state
 */
 
function itg_syndication_after_build($form, &$form_state) {
  $form['field_email_address']['#states'] = array(
    'visible' => array(      
      ':input[name="field_content_sharing_mode[und]"]' => array('value' => '3'),
    ),    
    'required' => array(      
      ':input[name="field_content_sharing_mode[und]"]' => array(
        'value' => '1'
      ),
    ),
  );
  $form['field_service_fetch_link']['#states'] = array(
    'visible' => array(      
      ':input[name="field_content_sharing_mode[und]"]' => array('value' => '1'),
    ),
    'required' => array(      
      ':input[name="field_content_sharing_mode[und]"]' => array('value' => '1'),
    ),
  );
  
  // Add cancel button to create/edit astro page
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'syndication-client-listing', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );
  
  return $form;
}

/**
 * Implements hook_field_group_build_pre_render_alter.
 */
function itg_syndication_field_group_build_pre_render_alter(&$element) {
  if (isset($element['#form_id'])) {
    if ($element['#form_id'] == 'syndication_client_node_form') {
      $element['group_syndication_ftp']['#states'] = array(
        'visible' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
        'required' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        )
      );
      $element['group_syndication_ftp']['#id'] = 'group_syndication_ftp';
    }
  }
}

/**
 * Implemtnts hook_node_validate()
 * @param type $node
 * @param type $form
 * @param type $form_state
 */
function itg_syndication_node_validate($node, $form, &$form_state) {   
  if ($node->type == 'syndication_client') {
    $sharing_mode = $node->field_content_sharing_mode['und'][0]['value'];
    switch ($sharing_mode) {
      // Web url Case
      case '1':
        if (isset($node->field_service_fetch_link['und'][0]['value']) && $node->field_service_fetch_link['und'][0]['value'] == '') {
          form_set_error('field_service_fetch_link', t('Fetch link (our server) field is required'));
        }
        break;
        
      // FTP case
      case '2':
        if (isset($node->field_ftp_ip_address['und'][0]['value']) && $node->field_ftp_ip_address['und'][0]['value'] == '') {
          form_set_error('field_ftp_ip_address', t('FTP IP Address field is required.'));
        }
        elseif (isset($node->field_ftp_username['und'][0]['value']) && $node->field_ftp_username['und'][0]['value'] == '') {
          form_set_error('field_ftp_username', t('FTP Username field is required'));          
        }
        elseif (isset($node->field_ftp_password['und'][0]['value']) && $node->field_ftp_password['und'][0]['value'] == '') {
          form_set_error('field_ftp_password', t('FTP Password field is required'));
        }
        else {
          
        }
        break;
        
      // Mail to case
      case '3':        
        if (isset($node->field_email_address['und'][0]['value']) && $node->field_email_address['und'][0]['value'] == '') {
          form_set_error('field_email_address', t('Mail to field is required.'));
        }
    }
    
    // Validate same client with same sharing mode.
    $is_dupl_client = 0;
    if ($node->nid != NULL) {
      $is_dupl_client = itg_syndication_check_duplicate($node->title, $node->field_content_sharing_mode['und'][0]['value'], $node->nid);
    }
    else {
      $is_dupl_client = itg_syndication_check_duplicate($node->title, $node->field_content_sharing_mode['und'][0]['value']);
    }
    
    if ($is_dupl_client) {
      form_set_error('title', t('Client already exist for selected content sharing mode.'));
    }
    
  }
}

/**
 * Custom submit callback function to change message after astro node save.
 * @param type $form
 * @param type $form_state
 */
function itg_syndication_change_message($form, &$form_state) {    
  $messages = drupal_get_messages('status');
  if ($form_state['values']['changed'] == '') {
    drupal_set_message(t('Client created successfully.'));
  }
  else {
    drupal_set_message(t('Client updated successfully.'));
  }  
}