<?php

/**
 * Implement hook_permissions()
 */
function itg_syndication_permission() {
  return array(
    'administer itg_syndication settings' => array(
      'title' => t('Administer Syndication Feed Generator'),
      'description' => t('Generate feeds for syndication.'),
    ),
  );
}

/**
 * Implements hook_menu()
 * @return array
 */
function itg_syndication_menu() {
  $items['syndication/feed-generator-of-content'] = array(
    'page callback' => 'feed_generator_of_content',
    'access arguments' => array('access itg story'),
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_syndication.inc',
  );

  return $items;
}

/**
 * Check duplicate client name.
 * @param string $title
 * @param string $sharing_mode
 * @param integer $nid
 * @return integer
 */
function itg_syndication_check_duplicate($title, $sharing_mode, $nid = NULL) {
  $itg_query = db_select('node', 'n');
  if ($nid != NULL) {
    $itg_query->condition('n.nid', $nid, '!=');
  }
  $itg_query->condition('n.title', $title)
      ->fields('n', array('nid'));
  $itg_query->join('field_data_field_content_sharing_mode', 'cm', 'n.nid = cm.entity_id');
  $itg_query->condition('cm.field_content_sharing_mode_value', $sharing_mode);
  $itg_result = $itg_query->execute()->fetchField();

  return $itg_result;
}

/**
 * Callback function for client list
 * @param string $voc_name Vocabulary name
 * @return array
 */
function itg_syndication_get_client() {
  
  // Create default option for list
  $data['_none'] = '- Select a value -';
  $itg_query = db_select('node', 'n');
      $itg_query->fields('tax', array('name'));
      $itg_query->fields('n', array('nid', 'title'));
      $itg_query->join('field_data_field_syndication_client_title', 'sc', 'n.nid = sc.entity_id');
      $itg_query->join('taxonomy_term_data', 'tax', 'tax.tid = sc.field_syndication_client_title_tid');
      $itg_query->condition('n.type', 'syndication_client');
  $itg_result = $itg_query->execute()->fetchAll();
  
  foreach ($itg_result as $itg_val) {
    $data[$itg_val->name.'-'.$itg_val->title] = $itg_val->name.'-'.$itg_val->title;
  }
  
  return $data;
}

/**
 * Implements hook_form_alter()
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_syndication_form_alter(&$form, &$form_state, $form_id) {
  
  if ($form_id == 'syndication_client_node_form') {     
    $form['#after_build'][] = 'itg_syndication_after_build';
    $form['actions']['submit']['#submit'][] = 'itg_syndication_change_message';    
  }
  
  if ($form_id == 'syndication_rule_node_form') {    
    //code for client related mode display in dropdown
    $syndication_mode = 'field_syndication_mode';
    $syndication_rule_title = 'field_syndication_rule_title';
    
    $form[$syndication_rule_title][LANGUAGE_NONE]['#options'] = itg_syndication_get_client('client_title');    
    $form[$syndication_rule_title][LANGUAGE_NONE]['#ajax'] = array(
                    'event' => 'change',
                    'callback' => 'itg_syndication_mode_ajax_callback',
                    'wrapper' => $syndication_mode.'_replace',
            );
    
    $form['field_syndication_rule_details']['#prefix'] = '<div id="'.$syndication_mode.'_replace">';
    $form['field_syndication_rule_details']['#suffix'] = '</div>';
    //temp code for testing
    if($form_state['input'][$syndication_rule_title][LANGUAGE_NONE] == 'Airtel-UP') {
      $tid = 4;
    }else if($form_state['input'][$syndication_rule_title][LANGUAGE_NONE] == 'Idea-delhi') {
      $tid = 2;
    }
    
    $tax = taxonomy_get_tree($tid, $parent = 0, $max_depth = 1, $load_entities = FALSE);  
    $op = array();
    
    foreach ($tax as $key => $val) {
      $op[$val->tid] = $val->name;
    }
    
    foreach ($form['field_syndication_rule_details'][LANGUAGE_NONE] as $key => $item) {
      if (is_numeric($key)) {
        $form['field_syndication_rule_details'][LANGUAGE_NONE][$key][$syndication_mode][LANGUAGE_NONE]['#options'] = $op;
        unset($form['field_syndication_rule_details'][LANGUAGE_NONE][$key][$syndication_mode]['#validated']);
      }
    }    
    
    //code end    
    
    $form['#after_build'][] = 'itg_syndication_rule_after_build';
  }
  
  // Add client dropdown to view
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'syndication_feed_generator') {    
    $form['client_title'] = array(
      '#type' => 'select',
      '#title' => t('Select Client'),
      '#options' => itg_syndication_get_client(),
      '#default_value' => '_none',
      '#weight' => 1,
    );
    
    $form['issue'] = array(
      '#type' => 'select',
      '#title' => t('Select Issue'),
      '#options' => array('_none' => '-Select '),
      '#default_value' => '_none',
      '#weight' => 3,
      '#states' => array(
        'visible' => array(
          ':input[name="type"]' => array('value' => 'magazine'),
        ),
      ),
    );
    
    $form['type']['#weight'] = 2;
    $form['submit']['#weight'] = 4;
  }
  
  // View autocomplete title field.
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'syndication_client') {
    $form['title']['#autocomplete_path'] = 'content-title-list/syndication_client/autocomplete';
  }  
}

/**
* Ajax callback for syndication_mode dropdown
* @param type $form
* @param type $form_state
*/
function itg_syndication_mode_ajax_callback($form, $form_state) {  
  //watchdog('shravan', '<pre>'. print_r($form['field_syndication_rule_details'][LANGUAGE_NONE][0][$syndication_mode][LANGUAGE_NONE]['#options'], TRUE) .'</pre>');
  return $form['field_syndication_rule_details'];   
}


/**
 * After build callback function.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_syndication_after_build($form, &$form_state) {
  foreach ($form['field_syndication_ftp_details'][LANGUAGE_NONE] as $key => $item) {
    if (is_numeric($key)) {
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_name'][LANGUAGE_NONE][0]['value']['#title'] = '';
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_url'][LANGUAGE_NONE][0]['value']['#title'] = '';
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_username'][LANGUAGE_NONE][0]['value']['#title'] = '';
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_password'][LANGUAGE_NONE][0]['value']['#title'] = '';
      
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_name'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Enter FTP Name');
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_url'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Enter FTP URL');
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_username'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Enter FTP Username');
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_password'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Enter FTP Password');
    }
  }
  
  $form['field_email_address']['#states'] = array(
      'visible' => array(
        ':input[name="field_syndication_delivery_mode[und][Email]"]' => array('checked' => TRUE),
      )
    );
  
  $form['field_service_fetch_link']['#states'] = array(
      'visible' => array(
        ':input[name="field_syndication_delivery_mode[und][Web URL]"]' => array('checked' => TRUE),
      )
    );
  
   $form['field_syndication_ftp_details']['#states'] = array(
      'visible' => array(
        ':input[name="field_syndication_delivery_mode[und][FTP]"]' => array('checked' => TRUE),
      )
    );
  
 
  // Add cancel button to create/edit astro page
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'syndication-client-listing', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );
  $form['additional_settings']['#access'] = FALSE;

  return $form;
}


/**
 * After build callback function.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_syndication_rule_after_build($form, &$form_state) { 
  
  drupal_add_js(drupal_get_path('module', 'itg_syndication') . '/js/itg_syndication_rule.js', array('weight' => 1));
  $tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = FALSE);
  $op = array();
  foreach ($tax as $key => $val) {
    $op[$val->tid] = $val->name;
  } 
  
  foreach ($form['field_syndication_rule_details'][LANGUAGE_NONE] as $key => $item) {
    if (is_numeric($key)) {
      $form['field_syndication_rule_details'][LANGUAGE_NONE][$key]['field_syndication_select_section'][LANGUAGE_NONE]['#options'] = $op;
      
    }
  }    
    
  // Add cancel button to create/edit astro page
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'syndication-rule-listing', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );
  $form['additional_settings']['#access'] = FALSE;

  return $form;
}



/**
 * Implements hook_field_group_build_pre_render_alter.
 * @param array $element
 */
function itg_syndication_field_group_build_pre_render_alter(&$element) {
  if (isset($element['#form_id'])) {
    if ($element['#form_id'] == 'syndication_client_node_form') {
      $element['group_syndication_ftp']['#states'] = array(
        'visible' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
        'required' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        )
      );
      $element['group_syndication_ftp']['#id'] = 'group_syndication_ftp';
    }
  }
}

/**
 * Implemtnts hook_node_validate()
 * @param Object $node
 * @param array $form
 * @param array $form_state
 */
function itg_syndication_node_validate($node, $form, &$form_state) {  
  if ($node->type == 'syndication_client' && $form_state['clicked_button']['#value'] != 'Delete') {
    $sharing_mode = $node->field_content_sharing_mode['und'][0]['value'];
    switch ($sharing_mode) {
      // Web url Case
      case '1':
        if (isset($node->field_service_fetch_link['und'][0]['value']) && $node->field_service_fetch_link['und'][0]['value'] == '') {
          form_set_error('field_service_fetch_link', t('Fetch link (our server) field is required.'));
        }
        if (!preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i", $node->field_service_fetch_link['und'][0]['value'])) {
          form_set_error('field_service_fetch_link', t('Invalid URL.'));
        }        
        break;

      // FTP case
      case '2':
        if (isset($node->field_ftp_ip_address['und'][0]['value']) && $node->field_ftp_ip_address['und'][0]['value'] == '') {
          form_set_error('field_ftp_ip_address', t('FTP IP Address field is required.'));
        }
        if (!filter_var($node->field_ftp_ip_address['und'][0]['value'], FILTER_VALIDATE_IP)) {
          form_set_error('field_ftp_ip_address', t('FTP IP Address is not valid.'));
        }
        if (isset($node->field_ftp_username['und'][0]['value']) && $node->field_ftp_username['und'][0]['value'] == '') {
          form_set_error('field_ftp_username', t('FTP Username field is required.'));
        }
        if (!preg_match('/^(?=.*[A-Za-z])[A-Za-z0-9!@#$%]{8,}$/', $node->field_ftp_username['und'][0]['value'])) {
          form_set_error('field_ftp_username', t('FTP Username must be minimum 8 digit alphanumeric and without space.'));
        }
        if (isset($node->field_ftp_password['und'][0]['value']) && $node->field_ftp_password['und'][0]['value'] == '') {
          form_set_error('field_ftp_password', t('FTP Password field is required.'));
        }
        if (!preg_match('/^(?=.*[A-Za-z])[A-Za-z0-9!@#$%]{8,}$/', $node->field_ftp_password['und'][0]['value'])) {
          form_set_error('field_ftp_password', t('FTP Password must be minimum 8 digit alphanumeric and without space.'));
        }        
        break;

      // Mail to case
      case '3':
        
        if (isset($node->field_email_address['und'][0]['value']) && $node->field_email_address['und'][0]['value'] == '') {
          form_set_error('field_email_address', t('Mail to field is required.'));
        }
        // Validate email                
        if (!filter_var($node->field_email_address['und'][0]['value'], FILTER_VALIDATE_EMAIL)) {
          form_set_error('field_email_address', t('Please enter valid email address.'));
        }                
    }
    
    // Validate same client with same sharing mode.
    /*
    $is_dupl_client = 0;
    if ($node->nid != NULL) {
      $is_dupl_client = itg_syndication_check_duplicate($node->title, $node->field_content_sharing_mode['und'][0]['value'], $node->nid);
    }
    else {
      $is_dupl_client = itg_syndication_check_duplicate($node->title, $node->field_content_sharing_mode['und'][0]['value']);
    }

    if ($is_dupl_client) {
      form_set_error('title', t('Client already exist for selected content sharing mode.'));
    }
    * 
    */   
  }
}

/**
 * Custom submit callback function to change message after Syndication client node save/update.
 * @param array $form
 * @param array $form_state
 */
function itg_syndication_change_message($form, &$form_state) {
  drupal_get_messages('status');
  if ($form_state['values']['changed'] == '') {
    drupal_set_message(t('Client created successfully.'));
  }
  else {
    drupal_set_message(t('Client updated successfully.'));
  }
}
