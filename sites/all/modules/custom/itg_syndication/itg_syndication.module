<?php

/**
 * Implement hook_permissions()
 */
function itg_syndication_permission() {
  return array(
    'administer itg_syndication settings' => array(
      'title' => t('Administer Syndication Feed Generator'),
      'description' => t('Generate feeds for syndication.'),
    ),
  );
}

/**
 * Implements hook_menu()
 * @return array
 */
function itg_syndication_menu() {
  $items['syndication/feed-generator-of-content'] = array(
    'page callback' => 'feed_generator_of_content',
    'access arguments' => array('access itg story'),
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_syndication.inc',
  );

  return $items;
}


/**
 * Implements hook_form_FORMID_alter().
 * @param type $form
 * @param type $form_state
 * @param type $form_id  
 */
function itg_syndication_form_syndication_client_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#after_build'][] = 'itg_syndication_after_build';
  $form['actions']['submit']['#submit'][] = 'itg_syndication_change_message'; 
}

/**
 * After build callback function.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_syndication_after_build($form, &$form_state) {
  foreach ($form['field_syndication_ftp_details'][LANGUAGE_NONE] as $key => $item) {
    if (is_numeric($key)) {
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_name'][LANGUAGE_NONE][0]['value']['#title'] = '';
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_url'][LANGUAGE_NONE][0]['value']['#title'] = '';
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_username'][LANGUAGE_NONE][0]['value']['#title'] = '';
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_password'][LANGUAGE_NONE][0]['value']['#title'] = '';
      
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_name'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Enter FTP Name');
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_url'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Enter FTP URL');
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_username'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Enter FTP Username');
      $form['field_syndication_ftp_details'][LANGUAGE_NONE][$key]['field_syndication_ftp_password'][LANGUAGE_NONE][0]['value']['#attributes']['placeholder'] = t('Enter FTP Password');
    }
  }
  
  unset($form['actions']['delete']);
  
  $form['field_email_address']['#states'] = array(
      'visible' => array(
        ':input[name="field_syndication_delivery_mode[und][Email]"]' => array('checked' => TRUE),
      )
    );
  
  $form['field_service_fetch_link']['#states'] = array(
      'visible' => array(
        ':input[name="field_syndication_delivery_mode[und][Web URL]"]' => array('checked' => TRUE),
      )
    );
  
   $form['field_syndication_ftp_details']['#states'] = array(
      'visible' => array(
        ':input[name="field_syndication_delivery_mode[und][FTP]"]' => array('checked' => TRUE),
      )
    );  
 
  // Add cancel button to create/edit astro page
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'syndication-client-listing', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );
  
  $form['additional_settings']['#access'] = FALSE;

  return $form;
}

/**
 * Custom submit callback function to change message after Syndication client node save/update.
 * @param array $form
 * @param array $form_state
 */
function itg_syndication_change_message($form, &$form_state) {
  drupal_get_messages('status');
  if ($form_state['values']['changed'] == '') {
    drupal_set_message(t('Client created successfully.'));
  }
  else {
    drupal_set_message(t('Client updated successfully.'));
  }
}

/**
 * Implements hook_form_FORMID_alter()
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_syndication_form_syndication_rule_node_form_alter(&$form, &$form_state, $form_id) {
  //code for client related mode display in dropdown
    $syndication_mode = 'field_syndication_mode';
    $syndication_rule_title = 'field_syndication_rule_title';
    
    $form[$syndication_rule_title][LANGUAGE_NONE]['#options'] = itg_syndication_get_client();    
    $form[$syndication_rule_title][LANGUAGE_NONE]['#ajax'] = array(
                    'event' => 'change',
                    'callback' => 'itg_syndication_mode_ajax_callback',
                    'wrapper' => $syndication_mode.'_replace',
            );
    
    $form['field_syndication_rule_details']['#prefix'] = '<div id="'.$syndication_mode.'_replace">';
    $form['field_syndication_rule_details']['#suffix'] = '</div>';
    
    //Get mode 
    if (isset($form_state['input'][$syndication_rule_title][LANGUAGE_NONE])) {
      $op = itg_syndication_get_mode($form_state['input'][$syndication_rule_title][LANGUAGE_NONE]);
    }else {
      $op = array('_none' => '- None -');
    }
    
    foreach ($form['field_syndication_rule_details'][LANGUAGE_NONE] as $key => $item) {
      if (is_numeric($key)) {
        $form['field_syndication_rule_details'][LANGUAGE_NONE][$key][$syndication_mode][LANGUAGE_NONE]['#options'] = $op;
        unset($form['field_syndication_rule_details'][LANGUAGE_NONE][$key][$syndication_mode]['#validated']);
      }
    }    
    
    //code end    
    
    $form['#after_build'][] = 'itg_syndication_rule_after_build';
}

/**
 * After build callback function.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_syndication_rule_after_build($form, &$form_state) { 
  
  drupal_add_js(drupal_get_path('module', 'itg_syndication') . '/js/itg_syndication_rule.js', array('weight' => 1));
  
  $tax = taxonomy_get_tree(CATEGORY_MANAGMENT, $parent = 0, $max_depth = 1, $load_entities = FALSE);
  $op = array();
  foreach ($tax as $key => $val) {
    $op[$val->tid] = $val->name;
  } 
  
  foreach ($form['field_syndication_rule_details'][LANGUAGE_NONE] as $key => $item) {
    if (is_numeric($key)) {
      $form['field_syndication_rule_details'][LANGUAGE_NONE][$key]['field_syndication_select_section'][LANGUAGE_NONE]['#options'] = $op;
      
    }
  }    
    
  // Add cancel button to create/edit
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'syndication-rule-listing', array('attributes' => array('class' => 'button'))),
    '#weight' => 20,
  );
  
  $form['additional_settings']['#access'] = FALSE;

  return $form;
}

/**
* Ajax callback for syndication_mode dropdown
* @param type $form
* @param type $form_state
*/
function itg_syndication_mode_ajax_callback($form, $form_state) {
  return $form['field_syndication_rule_details'];   
}

/**
 * Implements hook_form_alter()
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function itg_syndication_form_alter(&$form, &$form_state, $form_id) {
   //pr($form_id);
  // Add client dropdown to view
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'syndication_feed_generator') {    
    $form['client_title'] = array(
      '#type' => 'select',
      '#title' => t('Select Client'),
      '#options' => itg_syndication_get_client(),
      '#default_value' => '_none',
      '#weight' => 1,             
    );
    //p($form_state['input']);
//    if (isset($form_state['input'][$syndication_rule_title][LANGUAGE_NONE])) {
//      $op = itg_syndication_get_mode($form_state['input'][$syndication_rule_title][LANGUAGE_NONE]);
//    }
//    
//    foreach ($form['field_syndication_rule_details'][LANGUAGE_NONE] as $key => $item) {
//      if (is_numeric($key)) {
//        $form['field_syndication_rule_details'][LANGUAGE_NONE][$key][$syndication_mode][LANGUAGE_NONE]['#options'] = $op;
//        unset($form['field_syndication_rule_details'][LANGUAGE_NONE][$key][$syndication_mode]['#validated']);
//      }
//    } 
    
     
    
    $form['issue'] = array(
      '#type' => 'select',
      '#title' => t('Select Issue'),
      //'#options' => array('_none' => '-Select '),
      '#options' => itg_syndication_get_issue_list(),
      '#default_value' => '_none',
      '#weight' => 3,
      '#states' => array(
        'visible' => array(
          ':input[name="type"]' => array('value' => 'magazine'),
        ),
      ),
    );   
    
    
    $form['type']['#weight'] = 2;
    $form['submit']['#weight'] = 4;
 } else if ($form_id == 'views_form_syndication_feed_generator_page') {
   if (isset($_GET['client_title'])) {
    $op = itg_syndication_get_mode($_GET['client_title']);
   } else {
     $op = array('_none' => '- None -');
   }
  // p($form);
   $form['client_delivery_mode'] = array(
      '#type' => 'select',
      '#title' => t('Select Delivery Mode'),
      '#options' => $op,
      '#default_value' => '_none',
      '#weight' => 98,
      '#prefix' => '<div id="client_delivery_mode_replace">',
      '#suffix' => '</div>',
    );
   
   $feed_type_options = array(t('xml') => t('XML'), 
                    t('rss') => t('RSS'), 
                    t('mrss') => t('MRSS'), 
                    t('ussd') => t('USSD'), 
                    t('sms') => t('SMS'), 
                    t('stf') => t('SIMPLE TEXT FEED'), 
                    t('html') => t('HTML')
              );

   $form['feed_type'] = array(
    '#type' => 'radios',
    '#title' => t('Select Feed Type'),
    '#default_value' => 'xml',
    '#options' => $feed_type_options,
    //'#description' => t('When a poll is closed, visitors can no longer vote for it.'),
    '#weight' => 99,
  );
   $form['actions']['download_feed'] = array('#type' => 'submit', '#value' => t('Download Feed'));
   $form['actions']['submit']['#value'] = 'Generate feed and Send it to client';
   // Add cancel button to create/edit
    $form['actions']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'syndication-rule-listing', array('attributes' => array('class' => 'button'))),
      '#weight' => 20,
    );
 }

  // View autocomplete title field.
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'syndication_client') {
    $form['title']['#autocomplete_path'] = 'content-title-list/syndication_client/autocomplete';
  }  
}

/**
* Ajax callback for syndication_mode dropdown
* @param type $form
* @param type $form_state
*/
function itg_syndication_delivery_mode_ajax_callback($form, $form_state) {  
  return $form['client_delivery_mode'];   
}


/**
 * Get mode for syndication .
 * @param string $title
 * @param string $sharing_mode
 * @param integer $nid
 * @return integer
 */
function itg_syndication_get_mode($client_name) {
  
  $client = explode('-', $client_name);
  $client_description = $client[1];
  $client_title = $client[0];
  $itg_query = db_select('node', 'n');
  $itg_query->condition('n.title', $client_description)
      ->fields('n', array('nid'));
  $itg_query->join('field_data_field_syndication_client_title', 'sc', 'n.nid = sc.entity_id');
  $itg_query->join('taxonomy_term_data', 'term', 'term.tid = sc.field_syndication_client_title_tid');
  $itg_query->condition('term.name', $client_title);
  $itg_result = $itg_query->execute()->fetchField();

  $node = node_load($itg_result);
  $data[] = '- None -';
  
  //Code for FTP
  foreach($node->field_syndication_ftp_details[LANGUAGE_NONE] as $key => $val) {   
    $field_collection_item = entity_load('field_collection_item', array($val['value']));
    $ftp_name = $field_collection_item[$val['value']]->field_syndication_ftp_name[LANGUAGE_NONE][0]['value'];
    $data[$ftp_name] = $ftp_name;
  }
  
  //Code for Email id
  foreach($node->field_email_address[LANGUAGE_NONE] as $key => $val) {
    $data[$val['value']] = $val['value'];
  }
  
  //Code for Weburl
  if (isset($node->field_service_fetch_link[LANGUAGE_NONE][0]['value'])) {
    $data[$node->field_service_fetch_link[LANGUAGE_NONE][0]['value']] = $node->field_service_fetch_link[LANGUAGE_NONE][0]['value'];
  }
  
  return $data;
}

/**
 * Check duplicate client name.
 * @param string $title
 * @param string $sharing_mode
 * @param integer $nid
 * @return integer
 */
function itg_syndication_check_duplicate($client_title, $client_description) { 
  $itg_query = db_select('node', 'n');
  $itg_query->condition('n.title', $client_description)
      ->fields('n', array('nid'));
  $itg_query->join('field_data_field_syndication_client_title', 'sc', 'n.nid = sc.entity_id');
  $itg_query->condition('sc.field_syndication_client_title_tid', $client_title);
  $itg_result = $itg_query->execute()->fetchField();

  return $itg_result;
}

/**
 * Callback function for client list
 * @param string $voc_name Vocabulary name
 * @return array
 */
function itg_syndication_get_client() {
  
  // Create default option for list
  $data['_none'] = '- Select -';
  
  $itg_query = db_select('node', 'n');
      $itg_query->fields('tax', array('name'));
      $itg_query->fields('n', array('nid', 'title'));
      $itg_query->join('field_data_field_syndication_client_title', 'sc', 'n.nid = sc.entity_id');
      $itg_query->join('taxonomy_term_data', 'tax', 'tax.tid = sc.field_syndication_client_title_tid');
      $itg_query->condition('n.type', 'syndication_client');
  $itg_result = $itg_query->execute()->fetchAll();
  
  foreach ($itg_result as $itg_val) {
    $data[$itg_val->name.'-'.$itg_val->title] = $itg_val->name.'-'.$itg_val->title;
  }
  
  return $data;
}

/**
 * Implemtnts hook_node_validate()
 * @param Object $node
 * @param array $form
 * @param array $form_state
 */
function itg_syndication_node_validate($node, $form, &$form_state) {
  
  if ($node->type == 'syndication_client' && $form_state['clicked_button']['#value'] != 'Delete') {
    
    foreach($node->field_syndication_delivery_mode[LANGUAGE_NONE] as $key_mode => $val_mode) {
      if ($val_mode['value'] == 'FTP') {
        
        foreach($node->field_syndication_ftp_details[LANGUAGE_NONE] as $key => $val) {
          //validate for ftp name
          
          if ($val['field_syndication_ftp_name'][LANGUAGE_NONE][0]['value'] == '') {
            form_set_error('field_syndication_ftp_name', t('FTP Name field is required.'));
          }
         //p($val['field_syndication_ftp_url'][LANGUAGE_NONE][0]['value']);
          //validate for ftp url
          if ($val['field_syndication_ftp_url'][LANGUAGE_NONE][0]['value'] == '') {
            form_set_error('field_syndication_ftp_url', t('FTP URL field is required.'));
          } else {
              if (!filter_var($val['field_ftp_ip_address']['und'][0]['value'], FILTER_VALIDATE_IP)) {
                form_set_error('field_syndication_ftp_url', t('FTP IP Address is not valid.'));
              }
          }
          
          //validate for ftp User name
          if ($val['field_syndication_ftp_username'][LANGUAGE_NONE][0]['value'] == '') {
            form_set_error('field_syndication_ftp_username', t('FTP User Name field is required.'));
          } else {
              if (!preg_match('/^(?=.*[A-Za-z])[A-Za-z0-9!@#$%]{8,}$/', $val['field_ftp_username']['und'][0]['value'])) {
                form_set_error('field_syndication_ftp_username', t('FTP Username must be minimum 8 digit alphanumeric and without space.'));
              }
          }
          
          //validate for ftp password
          if ($val['field_syndication_ftp_password'][LANGUAGE_NONE][0]['value'] == '') {
            form_set_error('field_syndication_ftp_password', t('FTP Password field is required.'));
          } else {
              if (!preg_match('/^(?=.*[A-Za-z])[A-Za-z0-9!@#$%]{8,}$/', $val['field_syndication_ftp_password']['und'][0]['value'])) {
               form_set_error('field_syndication_ftp_password', t('FTP Password must be minimum 8 digit alphanumeric and without space.'));
              }  
          }
      
        }
      } if ($val_mode['value'] == 'Email') {
            foreach ($node->field_email_address[LANGUAGE_NONE] as $key_mail => $val_val) {
              if ($val_val['value'] == '') {
                form_set_error('field_email_address', t('Mail to field is required.'));
              } else {
                 // Validate email                
                  if (!filter_var($node->field_email_address['und'][0]['value'], FILTER_VALIDATE_EMAIL)) {
                    form_set_error('field_email_address', t('Please enter valid email address.'));
                  }
              }
            }
          }
    }
     
  
    
  
   $is_dupl_client = itg_syndication_check_duplicate($node->field_syndication_client_title['und'][0]['tid'], $node->title);
   
   if ($is_dupl_client) {
      form_set_error('title', t('client already exists.'));
   }
  } else if ($node->type == 'syndication_rule') {
    foreach($node->field_syndication_rule_details[LANGUAGE_NONE] as $key_time => $val_time) {
      if (isset($val_time['field_syndication_time'][LANGUAGE_NONE][0]['value'])) {
        if (!preg_match('/^(?:[01][0-9]|2[0-3]):[0-5][0-9]$/',$val_time['field_syndication_time'][LANGUAGE_NONE][0]['value'])) {
          form_set_error('field_email_address', t('Please enter valid time.'));
        }
      }
    }
  }
}

/**
 * Implements hook_field_group_build_pre_render_alter.
 * @param array $element
 */
/*function itg_syndication_field_group_build_pre_render_alter(&$element) {
  if (isset($element['#form_id'])) {
    if ($element['#form_id'] == 'syndication_client_node_form') {
      $element['group_syndication_ftp']['#states'] = array(
        'visible' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        ),
        'required' => array(
          ':input[name="field_content_sharing_mode[und]"]' => array('value' => '2'),
        )
      );
      $element['group_syndication_ftp']['#id'] = 'group_syndication_ftp';
    }
  }
}*/

/**
 * Callback function for Issue list
 * @param string $voc_name Vocabulary name
 * @return array
 */
function itg_syndication_get_issue_list() {
  
  // Create default option for list
  $data['_none'] = '- Select -';
  
  $itg_query = db_select('node', 'n');
              $itg_query->fields('n', array('title'));      
              $itg_query->condition('n.type', 'issue');              
  $itg_result = $itg_query->execute()->fetchAll();
  
  foreach ($itg_result as $itg_val) {
    $data[$itg_val->title] = date('d/m/Y', strtotime($itg_val->title));
  }
  
  return $data;
}

/*function upload_feed_by_ftp($xml, $ftp_server, $ftp_user_name, $ftp_user_pass) {
  $file = $xml;
  $remote_file = 'readme.txt';
  $ftp_server = '';
  
  // set up basic connection
  $conn_id = ftp_connect($ftp_server);

  // login with username and password
  $login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

  // upload a file
  if (ftp_put($conn_id, $remote_file, $file, FTP_ASCII)) {
   echo "successfully uploaded $file\n";
  } else {
   echo "There was a problem while uploading $file\n";
  }

  // close the connection
  ftp_close($conn_id);
}*/