<?php

module_load_include('inc', 'itg_tv_schedule', 'include/tv_schedule_listing.inc');

/**
 * Implementation of hook_permission()
 */
function itg_tv_schedule_permission() {
  return array(
    'administer my module' => array(
      'title' => t('Administer my module'),
      'description' => t('Permission for TV Schedule upload.'),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function itg_tv_schedule_menu() {
  $items = array();

  $items['tv'] = array(
    'title' => 'Upload Tv Schedule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('itg_tv_schedule_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['tv-show'] = array(
    'title' => 'Tv Show Schedule',
    'page callback' => 'tv_schedule_listing',
    'page arguments' => array('itg_tv_schedule_search_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'include/tv_schedule_listing.inc',
  );

  return $items;
}

/**
 * Implementation of hook_form()
 * {@inheritdoc}
 */
function itg_tv_schedule_form($form, &$form_state) {

  $form['file'] = array(
    '#type' => 'managed_file',
    '#required' => TRUE,
    '#title' => t('Tv Schedule Upload'),
    '#description' => t('Allowed extensions: csv'),
    '#upload_location' => 'public://tv_schedule',
    '#upload_validators' => array(
      'file_validate_extensions' => array('csv'),
    ),
  );

    $form['submit'] = array(
      '#type' => 'submit',
      '#prefix' => '<div class="form-actions">',
      '#suffix' => '</div>',
      '#value' => t('Submit'),
    );

  return $form;
}

/**
 * Implementation of hook_form
 * {@inheritdoc}
 */
function itg_tv_schedule_search_form($form, &$form_state) {

  $form['title'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#attributes' => array('placeholder' => t('Search')),
    '#maxlength' => 128,
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Implementation of hook_form
 * {@inheritdoc}
 */
function itg_tv_schedule_date_form($form, &$form_state) {

  $form['date'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => t('June 30, 2016 (IST)'),
    '#maxlength' => 128,
    '#attributes' => array('readonly' => 'readonly'),
  );

  return $form;
}

/**
 * Implementation of hook_form
 * {@inheritdoc}
 */
function itg_tv_schedule_time_form($form, &$form_state) {

  $form['time_zone'] = array(
    '#type' => 'select',
    '#options' => array(
      'IST' => t('IST'),
      'PST' => t('PST'),
      'GMT' => t('GMT')
    ),
    '#default_value' => (isset($_GET['time_zone']) ? $_GET['time_zone'] : 'IST'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  drupal_add_js('jQuery("#edit-time-zone").change(function()
                 {
                     jQuery("#itg-tv-schedule-time-form").submit();
                 });', array('type' => 'inline', 'scope' => 'footer'));

  return $form;
}

/**
 * Custom method for data uploading in database.
 *
 * @param integer $file_id
 * @return bool
 */
function itg_tv_schedule_uploadmongo($file_id) {

  if (!isset($file_id)) {
    // TODO: check on this later for exception handling.
    return FALSE;
  }

  // connection with database
  $db = mongodb();
  if ($db) {
    $people = $db->tv_schedule;
    $people->drop();
    // create collection
    $db->createCollection("tv_schedule");
    // Select Collection
    $people = $db->tv_schedule;
  }
  else {
    return FALSE;
  }

  $i = 1;
  $upload_date = date("Y/m/d");
  $itg_query = db_select('file_managed', 'f');
  $itg_result = $itg_query->condition('fid', $file_id, '=')
    ->fields('f', array('uri'))->execute()->fetchField();
  $file_url = file_create_url($itg_result);
  $file = fopen($file_url, "r");
  while (($data = fgetcsv($file)) !== FALSE) {
    if ($i > 1) {
      // monday corresponding value insertion
      if ($data[1]) {
        $query = array("time" => $data[0], "day" => "MON", "program" => $data[1], "upload date" => $upload_date);
        $people->insert($query);
      }

      //tuesday corresponding value insertion
      if ($data[2]) {
        $query = array("time" => $data[0], "day" => "TUE", "program" => $data[2], "upload date" => $upload_date);
        $people->insert($query);
      }

      //wednesday corresponding value insertion
      if ($data[3]) {
        $query = array("time" => $data[0], "day" => "WED", "program" => $data[3], "upload date" => $upload_date);
        $people->insert($query);
      }

      //thursday corresponding value insertion
      if ($data[4]) {
        $query = array("time" => $data[0], "day" => "THU", "program" => $data[4], "upload date" => $upload_date);
        $people->insert($query);
      }

      //friday corresponding value insertion
      if ($data[5]) {
        $query = array("time" => $data[0], "day" => "FRI", "program" => $data[5], "upload date" => $upload_date);
        $people->insert($query);
      }

      //saturday corresponding value insertion
      if ($data[6]) {
        $query = array("time" => $data[0], "day" => "SAT", "program" => $data[6], "upload date" => $upload_date);
        $people->insert($query);
      }

      //sunday corresponding value insertion
      if ($data[7]) {
        $query = array("time" => $data[0], "day" => "SUN", "program" => $data[7], "upload date" => $upload_date);
        $people->insert($query);
      }
    }
    $i++;
  }

  fclose($file);
}

/**
 * Custom submit callback for saving csv file.
 * {@inheritdoc}
 */
function itg_tv_schedule_form_submit($form, &$form_state) {
  global $user;
  $file_id = $form_state['input']['file']['fid'];
  $file = file_load($form_state['values']['file']);
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  file_usage_add($file, 'user', 'user', $user->uid);
  drupal_set_message(t('The file has been submitted successfully, filename: @filename.', array('@filename' => $file->filename)));
  itg_tv_schedule_uploadmongo($file_id);
}

/**
 * Custom validation for searching popup.
 * {@inheritdoc}
 */
function itg_tv_schedule_search_form_validate($form, &$form_state) {

  $options = $form_state['input']['title'];
  if (empty($options)) {
    form_set_error('title', t('Search field is empty.'));
  }
}

/**
 * Custom submit callback for searching popup.
 * {@inheritdoc}
 */
function itg_tv_schedule_search_form_submit($form, &$form_state) {
  $options = array('query' => array('title' => $form_state['input']['title']));
  drupal_goto('tv-show/' . arg(1), $options);
}

/**
 * Custom submit callback for searching popup.
 * {@inheritdoc}
 */
function itg_tv_schedule_time_form_submit($form, &$form_state) {

  $options = array('query' => array('time_zone' => $form_state['input']['time_zone']));
  drupal_goto('tv-show/' . arg(1), $options);
}

/**
 * Implements hook_theme().
 */
function itg_tv_schedule_theme() {
  return array(
    'itg_tv_schedule' => array(
      'variables' => array('output' => NULL),
      'variables' => array('search' => NULL),
      'variables' => array('total' => NULL),
      'variables' => array('noresult' => NULL),
      'variables' => array('search_count' => NULL),
      'variables' => array('title' => NULL),
      'path' => drupal_get_path('module', 'itg_tv_schedule') . '/templates',
      'template' => 'itg-tv-schedule',
    ),
  );
}

/**
 * Custom method for time conversion.
 *
 * @param string $date
 * @param string $time_zone
 * @return string
 */
function time_zone_conversion($date, $time_zone) {

  $date = explode('-', $date);
  date_default_timezone_set('Asia/Kolkata');
  if (isset($date[0])) {
    $time = new DateTime($date[0]);
    $timezone = timezone_list();

    if ($time_zone == 'GMT') {
      $time->setTimezone(new DateTimeZone($timezone['GMT']));
    }
    elseif ($time_zone == 'PST') {
      $time->setTimezone(new DateTimeZone($timezone['GMT-07:00']));
    }
    else {
      return $time->format('H:i');
    }

    return $time->format('H:i');
  }
}

/**
 * Custom method for different timezones.
 *
 * @return string
 */
function timezone_list() {
  static $timezones = NULL;

  if ($timezones === NULL) {
    $timezones = [];
    $offsets = [];
    $now = new DateTime();

    foreach (DateTimeZone::listIdentifiers() as $timezone) {
      $now->setTimezone(new DateTimeZone($timezone));
      $offsets[] = $offset = $now->getOffset();
      $timezones[format_gmt_offset($offset)] = $timezone;
    }

    array_multisort($offsets, $timezones);
  }

  return $timezones;
}

/**
 * Custom method for time formatting.
 * @param integer $offset
 * @return string
 */
function format_gmt_offset($offset) {
  $hours = intval($offset / 3600);
  $minutes = abs(intval($offset % 3600 / 60));
  return 'GMT' . ($offset ? sprintf('%+03d:%02d', $hours, $minutes) : '');
}