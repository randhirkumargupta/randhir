<?php

/**
 * @file
 * The ITG Event Registration module.
 *
 * Contains functionality for event registration.
 *
 */

/**
 * Implementation of hook_menu
 * 
 * @return array
 *   an array $item with all menu callbacks
 */
function itg_event_registration_menu() {

  $items = array();

  $items['event-registration'] = array(
      'title' => t('Event Registration'),
      'page callback' => 'itg_event_registration_form',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_event_registration.inc',
  );
  return $items;
}

/**
 * Implementation of hook_theme
 * 
 * @return array
 *   an array with templates information and other array variables
 */
function itg_event_registration_theme() {
  return array(
      'event_registration_tab_form_display_block' => array(
          'template' => 'event-registration-form-tab',
          'path' => drupal_get_path('module', 'itg_event_registration') . '/templates',
          'variables' => array('data' => NULL),
      ),
  );
}

/**
 * Implementation of hook_form_alter
 * 
 * @param array $form
 *   Contains whole information of a from
 * 
 * @param array $form_state
 *   the form state structure to extract the info from.  
 * 
 * @param string $form_id
 *    the form ID of the form we are currently processing
 */
function itg_event_registration_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'event_registration_node_form') {
    
    //Fields treatment
    unset($form['#metatags']);
    unset($form['actions']['preview']);
    $form['title']['#description'] = t('Please enter first name.');
    
    if ($form_state['storage']['step'] == 'step_erf_order_summary') {
      $current_event_nid = $_GET['event_id'];
      
      if (isset($current_event_nid)) {
        $event_node = node_load($current_event_nid);
        $registration_type = $event_node->field_event_type[LANGUAGE_NONE][0]['value'];
        
        
        if ($registration_type == 'free') {
          
          //Hide fee field & payment drop-down field and display a message, if registration is free.
          unset($form['field_erf_total_fee']);
          $form['field_erf_payment_gateway']['#access'] = FALSE;

        }
        else {
          $count_people = 0;
          foreach($form['#node']->field_erf_registration_fee[LANGUAGE_NONE] as $registered_people){
            if(!empty($registered_people['field_first_name'])){
              $count_people = $count_people + 1;
            }
          }
          
          //Collect fee variables
          $individual_fee = $event_node->field_individual_registration_fe[LANGUAGE_NONE][0]['value'];
          $group_fee_five = $event_node->field_group_registration_fee_5[LANGUAGE_NONE][0]['value'];
          $group_fee_ten = $event_node->field_group_registration_fee_10[LANGUAGE_NONE][0]['value'];
          $no_of_registration = $count_people+1;
          
          //Logic for fee calculation of total fee
          if($no_of_registration < 10){
            if($no_of_registration < 5){
              $total_fee = $no_of_registration * $individual_fee;
            }
            else {
              $extract = $no_of_registration % 5;
              $total_fee = $group_fee_five + ($extract * $individual_fee);
            }
          }
          else {
            if($no_of_registration < 15) {
              $extract = $no_of_registration % 10;
              $total_fee = $group_fee_ten + ($extract * $individual_fee);
            }
            else {
              if($no_of_registration < 20){
                $extract = $no_of_registration % 15;
                $total_fee = $group_fee_ten + $group_fee_five + ($extract * $individual_fee);
              }
              else {
                if($no_of_registration < 25) {
                  $divide = (int) ($no_of_registration / 10);
                  $extract = $no_of_registration % 10;
                  $total_fee = ($divide * $group_fee_ten) + ($extract * $individual_fee);
                }
                else {
                  $divide = (int) ($no_of_registration / 10);
                  $extract = $no_of_registration % 5;
                  $total_fee = ($divide * $group_fee_ten) + $group_fee_five + ($extract * $individual_fee);
                }
                
              }
              
            }
          }
        }
        $total_fee = ceil($total_fee);
      } 
      
      $total_fee = $total_fee ? $total_fee : '0.00';
      $form['field_erf_total_fee'][LANGUAGE_NONE][0]['value']['#value'] = $total_fee;
      $form['field_erf_total_fee']['#disabled'] = TRUE;
    }
    
    $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['event_id'];
    $form['field_story_source_id']['#access'] = TRUE;

    //Call function after form build
    $form['#after_build'][] = 'itg_event_registration_form_after_build';
    
    //Call custom summit callback
    $form['actions']['submit']['#submit'][] = 'itg_event_registration_form_custom_submit_callback';
  }
}

/**
 * After build function for Event Registration
 * 
 * @param array $form
 *   Contains whole information of a from
 * 
 * @param array $form_state
 *    the form state structure to extract the info from.
 * 
 * @return array
 *   the manipulated form
 */
function itg_event_registration_form_after_build($form, &$form_state) {
  global $user, $base_url;

  //Extract type of node
  if (arg(0) == 'node') {
    if (arg(1) == 'add') {
      $type = arg(2);
      $nid = '';
    } else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }

  //Array used in event_registration.js
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;

  drupal_add_js(array('itg_event_registration' => array('settings' => $settings)), array('type' => 'setting'));

  //Add JS for Event Registration
  drupal_add_js(drupal_get_path('module', 'itg_event_registration') . '/js/itg_event_registration.js', array('weight' => 1));

  //Hide submit button for all steps except last one
  if($form_state['storage']['step'] == 'step_erf_company_details' || $form_state['storage']['step'] == 'step_erf_registration_fee'){
    unset($form['actions']['submit']);
  }
  
  
  if ($form_state['storage']['step'] == 'step_erf_order_summary') {
    $current_event_nid = $_GET['event_id'];
    $event_node = node_load($current_event_nid);
    $registration_type = $event_node->field_event_type[LANGUAGE_NONE][0]['value'];
    if ($registration_type == 'free') {
      $form['cutomtext'] = array(
          '#type' => 'item',
          '#markup' => '<div >You are welcome in event <strong>' . $event_node->title . '</strong>. Please click on "Save" button to complete your registration.</div>',
          '#weight' => 100,
      );
    }
  }
  
  return $form;
}

/**
 * Custom function on submit of Event Registration form
 * 
 * @param array $form
 *   Contains whole information of a from
 * 
 * @param array $form_state
 *    the form state structure to extract the info from.
 */
function itg_event_registration_form_custom_submit_callback($form, &$form_state) {

  //Unset drupal redirection and add custom redirection URL
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  //Set custom message on creation of event registration form.
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }

  //Set Redirection after completion of event registration form
  if (!empty($_GET['event_id'])) {
    $form_state['redirect'] = array('event-registration', array('query' => array('event_id' => $_GET['event_id'])));
  } else {
    $form_state['redirect'] = 'event-registration';
  }
  $event_name = itg_common_get_node_title($_GET['event_id']);
  drupal_set_message(t('Congratulations! You have successfully registered yourself for the event <strong>@eventname</strong>.', array('@eventname' => $event_name)));
}

/**
 * Implementation of hook_views_pre_render
 * 
 * @param object $view
 */
function itg_event_registration_views_pre_render(&$view) {

  //Add "Event Registration" button on listing page of event registered user
  if ($view->name == "manage_event_registration") {
    $header_content_event = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_event .= l(t('Registration for Event'), 'event-registration');
    $view->attachment_before = $header_content_event;
  }
}

/**
 * Implementation of hook_form_views_exposed_form_alter
 * 
 * @param array $form
 *   Contains whole information of a from
 * 
 * @param array $form_state
 *    the form state structure to extract the info from.
 * 
 * @param string $form_id
 *    the form ID of the form we are currently processing
 */
function itg_event_registration_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#id'] == 'views-exposed-form-manage-event-registration-page') {

    //Call function autocomplete to show matching titles
    $form['title']['#autocomplete_path'] = 'content-title-list/event_registration/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
}

/**
 * Implementation of hook_node_validate
 * 
 * @param object $node
 *   Contains whole information of current node
 */
function itg_event_registration_node_validate($node){
  
  if ($node->type == 'event_registration') {

    if (!preg_match("/^[a-zA-Z ]*$/", $node->title)) {
      form_set_error('title', t('First Name must be alphabetic.'));
    }

    if (!preg_match("/^[a-zA-Z ]*$/", $node->field_last_name[LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_last_name', t('Last Name must be alphabetic.'));
    }

    if (!preg_match("/^[0-9]{10}$/", $node->field_erf_mobile[LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_erf_mobile', t('Mobile number must be 10 digit numeric value.'));
    }
  }
}

/**
 * Get total no. of registerd user for a event by a parent user.
 * 
 * @param int $nid
 *   unique id of current node.
 * 
 * @return string
 *   returning link to view user's list registered for an event.
 */
function itg_event_registration_get_registered_user($nid){
  $node = node_load($nid);
  $count_people = count($node->field_erf_registration_fee[LANGUAGE_NONE]);

  //Prepare text and link to view registered users
  $text = 'List Users(' . $count_people . ')';
  $path = 'event-users-list/' . $node->nid;
  
  if ($count_people < 1) {
    return $text;
  } else {
    return l($text, $path, array('attributes' => array('target' => '_blank')));
  }
}

/**
 * Get ID type value
 * @param string $val
 * @return string
 *   ID type
 */
function itg_event_registration_get_id_type($val){
  switch ($val) {
    case 'aadhar_card':
      $id_type = 'Aadhar Card';
      break;
    case 'driving_licence':
      $id_type = 'Driving Licence';
      break;
    case 'pan':
      $id_type = 'PAN Card';
      break;
    case 'passport':
      $id_type = 'Passport';
      break;
    case 'voter_id':
      $id_type = 'Voter Id Card';
      break;
    default:
      break;
  }
  return $id_type;
}

/**
 * Registration details of a event
 * @param int $nid
 * @return int
 */
function itg_event_registration_registered_user_detail($nid){
      if (isset($nid)) {
      $registration_main_users = itg_common_check_record_existance($nid, 'field_data_field_story_source_id', 'field_story_source_id_value');

      //Count group users registration for an event
      $main_user_nid_arr = itg_common_select_field_value('entity_id', 'field_data_field_story_source_id', 'field_story_source_id_value', $nid);
      $registration_group_users = 0;
      foreach ($main_user_nid_arr as $main_user_nid) {
        $registration_group_users = $registration_group_users + itg_common_check_record_existance($main_user_nid, 'field_data_field_erf_registration_fee', 'entity_id');
      }

      //Total count for an event
      $total_registration_users = $registration_main_users + $registration_group_users;
      $total_registration_for_event = $total_registration_users ? $total_registration_users : 0;
    }
    return $total_registration_for_event;
}
