<?php

/**
 * @file
 * The ITG Event Registration module.
 *
 * Contains functionality for event registration.
 *
 */

/**
 * Implementation of hook_permission
 * @return array
 */
function itg_event_registration_permission() {
  return array(
    'event registered users' => array(
      'title' => t('View Event Registered User List'),
    )
  );
}

/**
 * Implementation of hook_menu
 *
 * @return array
 *   an array $item with all menu callbacks
 */
function itg_event_registration_menu() {

  $items = array();

  $items['registration'] = array(
    'title' => 'Event Registration',
    'page callback' => 'itg_event_reg_form',
    'access callback' => TRUE,
  );
  
  $items['event/%/registration'] = array(
    'title' => 'Event Registration',
    'page callback' => 'itg_event_reg_form',
    'access callback' => TRUE,
  );

  $items['event-registration/users-list/%'] = array(
    'title' => 'Registered Users List',
    'page callback' => 'itg_event_registration_users_list',
    'access callback' => 'user_access',
    'access arguments' => array('event registered users'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_event_registration.inc',
  );
  $items['event-registration/users-list/download/%'] = array(
    'title' => 'Registered Users List Download',
    'page callback' => 'itg_event_registration_users_list_download',
    'access callback' => 'user_access',
    'access arguments' => array('event registered users'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/itg_event_registration.inc',
  );
  return $items;
}

function itg_event_reg_form() {
  return '';
}

/**
 * Implementation of hook_theme
 *
 * @return array
 *   an array with templates information and other array variables
 */
function itg_event_registration_theme() {
  $theme = array(
      'event_registration_tab_form_display_block' => array(
          'template' => 'event-registration-form-tab',
          'path' => drupal_get_path('module', 'itg_event_registration') . '/templates',
          'variables' => array('data' => NULL),
      ),
      'event_registration_not_published' => array(
          'template' => 'event-registration-not-published',
          'path' => drupal_get_path('module', 'itg_event_registration') . '/templates',
          'variables' => array('node' => NULL),
      ),
      'event_registration_closed' => array(
          'template' => 'event-registration-closed',
          'path' => drupal_get_path('module', 'itg_event_registration') . '/templates',
          'variables' => array('node' => NULL),
      ),
      'event_registration_not_started' => array(
          'template' => 'event-registration-not-started',
          'path' => drupal_get_path('module', 'itg_event_registration') . '/templates',
          'variables' => array('node' => NULL),
      ),
      'event_registration_tickets_not_available' => array(
          'template' => 'event-registration-tickets-not-available',
          'path' => drupal_get_path('module', 'itg_event_registration') . '/templates',
          'variables' => array('node' => NULL),
      ),
  );
  return $theme;
}

/**
 * Implementation of hook_form_alter
 * {@inheritdoc}
 */
function itg_event_registration_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'event_registration_node_form') {
    
/*    $form['field_no_of_members']= array(
        '#prefix' => '<div class= "event-member-container">',
        '#title' => 'No. Of Memebers',
        '#type' => 'item',
        '#markup' => '<div class = "event-no-of-memeber"><span class="event-form-remove">-</span><input readonly value="1" type="text" name="no_of_mem" class="event-form-number" /><span class="event-form-add">+</span></div>',
        '#suffix'=> '</div>'
    );*/
    
    $current_event_nid = itg_event_registration_get_event_nid();
    $max_delta = $form['field_erf_registration_fee'][LANGUAGE_NONE]['#max_delta'] + 1;
    $node = node_load($current_event_nid);
    $no_of_tickets = $node->field_no_of_tickets[LANGUAGE_NONE][0]['value'];

    $total_registered_users = itg_event_registration_get_total_registration($current_event_nid);
    $tickets_available = $no_of_tickets - $total_registered_users;
    $group_tickets_available = $tickets_available - 1;

    if ($group_tickets_available > 0) {
      $_SESSION['total_ava_ticket'] = $group_tickets_available;
    }

    if ($tickets_available == 1) {
      drupal_add_js('jQuery(document).ready(function() {                  
          jQuery("#field-erf-registration-fee-values").hide();
          jQuery("#edit-field-erf-type").append("<p><strong>No more tickets available for this event.</strong></p>");
          jQuery("p").css("padding-left", "200px");
     });', array('type' => 'inline', 'scope' => 'footer'));

      unset($form['field_erf_registration_fee']['und']['add_more']);
    }

    //Hide add more button, if ticket are not available
    if (isset($max_delta) && $max_delta >= $_SESSION['total_ava_ticket']) {
      unset($form['field_erf_registration_fee']['und']['add_more']);
    }
    
    // Hide none option from ticket type
    for($member = 0; $member < $max_delta; $member++) {
      unset($form['field_erf_registration_fee']['und'][$member]['field_erf_ticket_type']['und']['#options']['_none']);
    }
  
    // Hide metatags and priview button
    unset($form['title']);
    unset($form['#metatags']);
    unset($form['actions']['preview']);
    $form['field_erf_total_fee']['#access'] = FALSE;
    
    // Rename submit button from "Save" to "Submit"
    $form['actions']['submit']['#value'] = 'Submit';
    //$form['actions']['submit']['#attributes'] = array("onclick" => "javascript: this.value='Please Wait...'; this.disabled = true;");

    if (isset($current_event_nid)) {
      $event_node = node_load($current_event_nid);
      $registration_type = $event_node->field_event_type[LANGUAGE_NONE][0]['value'];
     
      if ($registration_type == 'free') {
        unset($form['field_erf_total_fee']);
        $form['field_erf_payment_gateway']['#access'] = FALSE;
            $form['add_form_scroll_container'] = array(
            '#prefix' => '<div class= "form-field-name-field-erf-payment-gateway">',
            '#type' => 'item',
            '#suffix' => '</div>',
            '#weight' => 9
        );
      } else {
        $form['total_fees_container'] = array(
            '#prefix' => '<div class= "event-total-fees-container">',
            '#title' => 'Total Fees',
            '#type' => 'item',
            '#markup' => '<span class="event-total-fees-text"><span class="event-fees-amount">Rs 00</span> for <span class="event-number-of-members">1</span> Members',
            '#suffix' => '</div>',
            '#weight' => 10
        );

        $form['have_a_coupon_code'] = array(
            '#prefix' => '<div class= "have-a-coupon-code">',
            '#type' => 'item',
            '#markup' => '<span class="event-number-of-members">Have a Coupon Code?</span> <a class="have-a-coupon-code-link" href="javascript:">Apply</a>',
            '#suffix' => '</div>',
            '#weight' => 11
        );
      }
    }

    // Assign event id into source id field
    $form['field_story_source_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $current_event_nid;
    $form['field_story_source_id']['#access'] = TRUE;

    // After build and validate function 
    $form['#after_build'][] = 'itg_event_registration_form_after_build';

    // Call custom summit callback
    $form['actions']['submit']['#submit'][] = 'itg_event_registration_form_custom_submit_callback';
  }
}

/**
 * After build function for Event Registration
 * {@inheritdoc}
 */
function itg_event_registration_form_after_build($form, &$form_state) {
  global $user, $base_url;
  $current_event_nid = itg_event_registration_get_event_nid();
  
  // Array used in event_registration.js
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['nid'] = $current_event_nid;

  drupal_add_js(array('itg_event_registration' => array('settings' => $settings)), array('type' => 'setting'));

  // Add JS for Event Registration
  drupal_add_js(drupal_get_path('module', 'itg_event_registration') . '/js/itg_event_registration.js', array('weight' => 1));

  $form['event_registration_title'] = array(
       '#type' => 'item',
       '#markup' => '<div class="event-registration-title"><h2>REGISTRATION</h2><span>Fill out the form to register to our event</span></div>',
       '#weight' => -100,
     );

   // Dynamic title of each form
   $form['field_erf_registration_fee'][LANGUAGE_NONE]['#title'] = '';
   for ($ereg = 0; $ereg <= $form['field_erf_registration_fee']['und']['#max_delta']; $ereg++) {
     $count = $ereg + 1;
     $form['field_erf_registration_fee']['und'][$ereg]['#prefix'] = '<div class="event-registration-form-header" id="event-registration-memeber-'.$count.'">Member '.$count.'</div><div class="event-registration-form-content">';
     $form['field_erf_registration_fee']['und'][$ereg]['#suffix'] = '</div>';
     $form['field_erf_registration_fee']['und'][$ereg]['field_erf_date_of_birth']['und'][0]['#prefix'] = '<div class="date-box-wrapper"><label>Date of Birth</label>';
     $form['field_erf_registration_fee']['und'][$ereg]['field_erf_date_of_birth']['und'][0]['#suffix'] = '</div>';
   }
   
  // If limited tickets are available
//  $event_node = node_load($current_event_nid);
//  $no_of_tickets = $event_node->field_no_of_tickets[LANGUAGE_NONE][0]['value'];
//
//  $total_registered_users = itg_event_registration_get_total_registration($current_event_nid);
//  $tickets_available = $no_of_tickets - $total_registered_users;

  return $form;
}

/**
 * Custom function on submit of Event Registration form
 * @param array $form
 * @param array $form_state
 */
function itg_event_registration_form_custom_submit_callback($form, &$form_state) {
  global $base_url;
  $arg = arg();
  if ($arg[0] == 'event') {
    $baseurl = $base_url . '/' . $arg[0] . '/' . $arg[1];
  } elseif (is_numeric(arg(1))) {
    $baseurl = $base_url . '/' . drupal_get_path_alias('node/' . arg(1));
  } else {
    $baseurl = $base_url;
  }
  
  // Unset drupal redirection and add custom redirection URL
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  // Set custom message on creation of event registration form.
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }

  $current_event_nid = itg_event_registration_get_event_nid();
  $form_state['redirect'] = $baseurl.'/registration';
  $event_name = itg_common_get_node_title($current_event_nid);
  drupal_set_message(t('Congratulations! You have successfully registered yourself for the event <strong>@eventname</strong>.', array('@eventname' => $event_name)));
}

/**
 * Implementation of hook_views_pre_render
 *
 * @param object $view
 */
function itg_event_registration_views_pre_render(&$view) {
  // Add count on listing page of event registered user
  if ($view->name == "manage_event_registration") {
    $header_content_event = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $view->attachment_before = $header_content_event;
  }
}

/**
 * Implementation of hook_form_views_exposed_form_alter
 * {@inheritdoc}
 */
function itg_event_registration_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-manage-event-registration-page') {
    $form['title']['#autocomplete_path'] = 'content-title-list/event_registration/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
}

/**
 * Implementation of hook_node_presave
 * {@inheritdoc}
 */
function itg_event_registration_node_presave($node) {
  if ($node->type == 'event_registration') {
    $node->title = itg_common_get_node_title(itg_event_registration_get_event_nid());
  }
}
/**
 * Implementation of hook_node_validate
 * {@inheritdoc}
 */
function itg_event_registration_node_validate($node) {

  if ($node->type == 'event_registration') {

    $member = 1;
    foreach ($node->field_erf_registration_fee[LANGUAGE_NONE] as $regdata) {
      
      // Validate Ticket type field
      if (empty($regdata['field_erf_ticket_type'][LANGUAGE_NONE][0]['value']) && $regdata['field_erf_ticket_type'][LANGUAGE_NONE][0]['value'] != 'A') {
        form_set_error('field_erf_ticket_type'.$member, t('Ticket type field is required for Member @member', array('@member' => $member)));
      }
      
      // Validate Name field
      if (empty($regdata['field_erf_name'][LANGUAGE_NONE][0]['value']) && $regdata['field_erf_name'][LANGUAGE_NONE][0]['value'] != 'A') {
        form_set_error('field_erf_name'.$member, t('Name field is required for Member @member', array('@member' => $member)));
      } else {
        if (!preg_match("/^[a-zA-Z ]*$/", $regdata['field_erf_name'][LANGUAGE_NONE][0]['value'])) {
          form_set_error('field_erf_name'.$member, t('Name <strong>@name</strong> must be alphabetic for Member @member', array('@name' => $regdata['field_erf_name'][LANGUAGE_NONE][0]['value'], '@member' => $member)));
        }
      }
      
      // Validate Mobile field
      if (empty($regdata['field_erf_mobile'][LANGUAGE_NONE][0]['value']) && $regdata['field_erf_mobile'][LANGUAGE_NONE][0]['value'] != 'A') {
        form_set_error('field_erf_mobile' . $member, t('Mobile field is required for Member @member', array('@member' => $member)));
      } else {
        if (!preg_match("/^[0-9]{10}$/", $regdata['field_erf_mobile'][LANGUAGE_NONE][0]['value']) && $regdata['field_erf_mobile'][LANGUAGE_NONE][0]['value'] != 'A') {
          form_set_error('field_erf_mobile'.$member, t('Mobile number <strong>@mobile</strong> must be 10 digit numeric value for Member @member', array('@mobile' => $regdata['field_erf_mobile'][LANGUAGE_NONE][0]['value'], '@member' => $member)));
        }
        if (substr($regdata['field_erf_mobile'][LANGUAGE_NONE][0]['value'], 0, -8) == '000' && $regdata['field_erf_mobile'][LANGUAGE_NONE][0]['value'] != 'A') {
          form_set_error('field_erf_mobile'.$member, t('Mobile number <strong>@mobile</strong> is not a valid mobile number for Member @member', array('@mobile' => $regdata['field_erf_mobile'][LANGUAGE_NONE][0]['value'], '@member' => $member)));
        }
      }
      
      // Validate Email field
      if (empty($regdata['field_erf_email'][LANGUAGE_NONE][0]['value']) && $regdata['field_erf_email'][LANGUAGE_NONE][0]['value'] != 'A') {
        form_set_error('field_erf_email'.$member, t('Email field is required for Member @member', array('@member' => $member)));
      } else {
        if (!valid_email_address($regdata['field_erf_email'][LANGUAGE_NONE][0]['value']) && $regdata['field_erf_email'][LANGUAGE_NONE][0]['value'] != 'A') {
          form_set_error('field_erf_email'.$member, t('Email <strong>@email</strong> is not a valid email for Member @member', array('@email' => $regdata['field_erf_email'][LANGUAGE_NONE][0]['value'], '@member' => $member)));
        }
      }
      
      // Validate Pincode
      if (!empty($regdata['field_erf_postal_code'][LANGUAGE_NONE][0]['value']) && $regdata['field_erf_postal_code'][LANGUAGE_NONE][0]['value'] == '000000' && $regdata['field_erf_postal_code'][LANGUAGE_NONE][0]['value'] != 'A') {
          form_set_error('field_erf_postal_code'.$member, t('Pincode <strong>@pincode</strong> is not a valid pincode for Member @member', array('@pincode' => $regdata['field_erf_postal_code'][LANGUAGE_NONE][0]['value'], '@member' => $member)));
      }
      $member++;
    }
  }
}

/**
 * Get total no. of registered user for an event by a parent user.
 * @param int $nid
 * @return string
 */
function itg_event_registration_get_registered_user($nid) {
  $node = node_load($nid);
  $count_people = count($node->field_erf_registration_fee[LANGUAGE_NONE]);
  $text = 'List Users(' . $count_people . ')';
  return $text;
}

/**
 * Get ID type value
 * @param string $val
 * @return string
 */
function itg_event_registration_get_id_type($val) {
  switch ($val) {
    case 'aadhar_card':
      $id_type = 'Aadhar Card';
      break;
    case 'driving_licence':
      $id_type = 'Driving Licence';
      break;
    case 'pan':
      $id_type = 'PAN Card';
      break;
    case 'passport':
      $id_type = 'Passport';
      break;
    case 'voter_id':
      $id_type = 'Voter Id Card';
      break;
    default:
      break;
  }
  return $id_type;
}

/**
 * Registration details of a event
 * @param int $nid
 * @return int
 */
function itg_event_registration_registered_user_detail($nid) {

  if (isset($nid)) {
    $total_registration_users = itg_event_registration_get_total_registration($nid);
    $total_registration_for_event = $total_registration_users ? $total_registration_users : 0;
  }
  $total_registered_users =  $total_registration_for_event ? l($total_registration_for_event, 'event-registration/users-list/'.$nid, array('attributes' => array('class' => 'colorbox-load'))) : '0';
  return $total_registered_users;
}

/**
 * Get total no. of registered users for a event
 * @param int $nid
 * @return int $total_registration_users
 */
function itg_event_registration_get_total_registration($nid) {

  // Count group users registration for an event
  $main_user_nid_arr = itg_common_select_field_value('entity_id', 'field_data_field_story_source_id', 'field_story_source_id_value', $nid);
  $registration_group_users = 0;

  foreach ($main_user_nid_arr as $main_user_nid) {
    $registration_group_users = $registration_group_users + itg_common_check_record_existance($main_user_nid, 'field_data_field_erf_registration_fee', 'entity_id');
  }
  // Total count for an event
  $total_registration_users = $registration_group_users;
  return (int) $total_registration_users;
}

/**
 * Get event nid using host
 * @global string $base_url
 * @return int
 */
function itg_event_registration_get_event_nid() {
  global $base_url;
  $arg = arg();
  if ($arg[0] == 'event') {
    $path = drupal_lookup_path("source", $arg[0] . '/' . $arg[1]);
    $node = menu_get_object("node", 1, $path);
    return $node->nid;
  } elseif (is_numeric($arg[1])) {
    return $arg[1];
  } else {
    $host_detail = itg_event_backend_get_redirect_record('redirect', $base_url);
    $host_node_arr = explode('/', $host_detail['source']);
    return $host_node_arr[1];
  }
}

/**
 * Call templete file for registration status message
 * @param string $message_type
 * @return type
 */
function itg_event_registration_get_status_message($node, $message_type) {
  return theme('event_registration_'.$message_type, array('node' => $node));
}

/**
 * Get Event Registration form
 * @global string $base_url
 * @return string
 */
function itg_event_registration_get_form() {
  global $base_url;
  
  module_load_include('inc', 'node', 'node.pages');
  $form = node_add('event_registration');
  
  /*$host_detail = itg_event_backend_get_redirect_record('redirect', $base_url);
  $host_node_arr = explode('/', $host_detail['source']);
  $host_node = node_load($host_node_arr[1]);*/
  $event_node = itg_event_backend_get_event_node();
  $host_node = node_load($event_node);
  $form['#cache'] = TRUE;
  if(!empty($host_node->field_story_expert_description[LANGUAGE_NONE])){
  $form['cutomtext'] = array(
      '#type' => 'item',
      '#markup' => '<div class="event-registration-main-container"><div><b>Terms and Conditions:</b></div><div class="tc-txt"> <ul>'.$host_node->field_story_expert_description[LANGUAGE_NONE][0]['value'].'  </ul></div></div>',
      '#weight' => 1000,
  );
  }
  return $form;
}
