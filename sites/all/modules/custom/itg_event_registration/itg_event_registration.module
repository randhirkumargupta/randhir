<?php

/**
 * @file
 * The ITG Event Registration module.
 *
 * Contains functionality for event registration.
 *
 */

/**
 * Implementation of hook_menu
 * 
 * @return array
 *   an array $item with all menu callbacks
 */
function itg_event_registration_menu() {

  $items = array();

  $items['event-registration'] = array(
      'title' => t('Event Registration'),
      'page callback' => 'itg_event_registration_form',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'includes/itg_event_registration.inc',
  );
  return $items;
}

/**
 * Implementation of hook_theme
 * 
 * @return array
 *   an array with templates information and other array variables
 */
function itg_event_registration_theme() {
  return array(
      'event_registration_tab_form_display_block' => array(
          'template' => 'event-registration-form-tab',
          'path' => drupal_get_path('module', 'itg_event_registration') . '/templates',
          'variables' => array('data' => NULL),
      ),
  );
}

/**
 * Implementation of hook_form_alter
 * 
 * @param array $form
 *   Contains whole information of a from
 * 
 * @param array $form_state
 *   the form state structure to extract the info from.  
 * 
 * @param string $form_id
 *    the form ID of the form we are currently processing
 */
function itg_event_registration_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'event_registration_node_form') {

    //Fields treatment
    unset($form['#metatags']);
    unset($form['actions']['preview']);
    $form['title']['#description'] = t('Please enter first name.');

    //Call function after form build
    $form['#after_build'][] = 'itg_event_registration_form_after_build';
    
    //Call custom summit callback
    $form['actions']['submit']['#submit'][] = 'itg_event_registration_form_custom_submit_callback';
  }
}

/**
 * After build function for Event Registration
 * 
 * @param array $form
 *   Contains whole information of a from
 * 
 * @param array $form_state
 *    the form state structure to extract the info from.
 * 
 * @return array
 *   the manipulated form
 */
function itg_event_registration_form_after_build($form, &$form_state) {
  global $user, $base_url;

  //Extract type of node
  if (arg(0) == 'node') {
    if (arg(1) == 'add') {
      $type = arg(2);
      $nid = '';
    } else {
      $node = node_load(arg(1));
      $type = $node->type;
      $nid = arg(1);
    }
  }

  //Array used in event_registration.js
  $settings = array();
  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['type'] = ucfirst($type);
  $settings['nid'] = $nid;

  drupal_add_js(array('itg_event_registration' => array('settings' => $settings)), array('type' => 'setting'));

  //Add JS for Event Registration
  drupal_add_js(drupal_get_path('module', 'itg_event_registration') . '/js/itg_event_registration.js', array('weight' => 1));

  //Hide SEF url path setting
  //$form['path']['#access'] = FALSE;
  
  return $form;
}

/**
 * Custom function on submit of Event Registration form
 * 
 * @param array $form
 *   Contains whole information of a from
 * 
 * @param array $form_state
 *    the form state structure to extract the info from.
 */
function itg_event_registration_form_custom_submit_callback($form, &$form_state) {

  //Unset drupal redirection and add custom redirection URL
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  //Set custom message on creation of event registration form.
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }

  //Set Redirection after completion of event registration form
  if (!empty($_GET['event_id'])) {
    $form_state['redirect'] = array('event-registration', array('query' => array('event_id' => $_GET['event_id'])));
  } else {
    $form_state['redirect'] = 'event-registration';
  }

  drupal_set_message(t('Congratulations! You have successfully registered yourself for the event.'));
}

/**
 * Implementation of hook_views_pre_render
 * 
 * @param object $view
 */
function itg_event_registration_views_pre_render(&$view) {

  //Add "Event Registration" button on listing page of event registered user
  if ($view->name == "manage_event_registration") {
    $header_content_event = '<span class="count">Count(' . $view->total_rows . ')&nbsp;</span>';
    $header_content_event .= l(t('Registration for Event'), 'event-registration');
    $view->attachment_before = $header_content_event;
  }
}

/**
 * Implementation of hook_form_views_exposed_form_alter
 * 
 * @param array $form
 *   Contains whole information of a from
 * 
 * @param array $form_state
 *    the form state structure to extract the info from.
 * 
 * @param string $form_id
 *    the form ID of the form we are currently processing
 */
function itg_event_registration_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#id'] == 'views-exposed-form-manage-event-registration-page') {

    //Call function autocomplete to show matching titles
    $form['title']['#autocomplete_path'] = 'content-title-list/event_registration/autocomplete';
    $form['title']['#attributes'] = array('placeholder' => t('Title'));
  }
}

/**
 * Implementation of hook_node_validate
 * 
 * @param object $node
 *   Contains whole information of current node
 */
function itg_event_registration_node_validate($node){
  
  if ($node->type == 'event_registration') {

    if (!preg_match("/^[a-zA-Z ]*$/", $node->title)) {
      form_set_error('title', t('First Name must be alphabetic.'));
    }

    if (!preg_match("/^[a-zA-Z ]*$/", $node->field_last_name[LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_last_name', t('Last Name must be alphabetic.'));
    }

    if (!preg_match("/^[0-9]{10}$/", $node->field_erf_mobile[LANGUAGE_NONE][0]['value'])) {
      form_set_error('field_erf_mobile', t('Mobile number must be 10 digit numeric value.'));
    }
  }
}
