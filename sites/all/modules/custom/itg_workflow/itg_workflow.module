<?php
/**
 * @file
 * ITG workflow module.
 *
 * Provides customizations and functions for workflow.
 *
 */

/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_workflow_form_alter(&$form, &$form_state, $form_id) {
  
  switch ($form_id) {
    case 'story_node_form':
    case 'photogallery_node_form':
    case 'blog_node_form':
    case 'podcast_node_form':
    case 'videogallery_node_form':
      $form['#after_build'][] = 'itg_workflow_after_build';
    break;
    
    case 'views_exposed_form':
      $form['#after_build'][] = 'itg_workflow_views_exposed_form_after_build';      
    break;
  }

}

/**
 * After build for story form.
 * @param array $form
 * @param array $form_state
 */
function itg_workflow_after_build($form, &$form_state) {
    global $user, $base_url;

    // code for sequence change of modration field
    $form['additional_settings']['group']['#groups']['additional_settings'][0]['#weight'] = -1;
    $log = $form['revision_information']['log'];
    $state = $form['revision_information']['workbench_moderation_state_new'];
    
    unset($form['revision_information']['log']);
    unset($form['revision_information']['workbench_moderation_state_new']);
    
    $form['revision_information']['workbench_moderation_state_new'] = $state;

    // Code for rejection master message
    if ($form['#entity']->workbench_moderation['current']->state == 'needs_review') {
        $vid = taxonomy_vocabulary_machine_name_load('reasons_for_reject');
        $terms = taxonomy_get_tree($vid->vid);
        foreach ($terms as $key => $val) {
            $term_name[$val->name] = $val->name;
        }
        $form['revision_information']['reject_msg'] = array(
          '#type' => 'select',
          '#title' => t('Remarks'),
          '#options' => $term_name,
          '#attributes' => array('class' => array('reasons-form-msg')),
          '#prefix' => '<div class="reasons-form">',
          '#suffix' => '</div>',
        );
    }

    $form['revision_information']['log'] = $log;
    
    $form['revision_information']['log']['#title'] = t('Remarks');

    // hide workbench dropdown
    drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-revision-information").show();
              jQuery(".form-item-workbench-moderation-state-new").hide();
              jQuery("#edit-field-story-archive").hide();              
            });', array('type' => 'inline', 'scope' => 'footer'));

    if (array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) 
            || array_key_exists(COPY_EDITOR, $user->roles) 
            || array_key_exists(EDITOR, $user->roles) 
            || array_key_exists(UGC_MODERATOR, $user->roles)) {
        if (!isset($form['#node']->workbench_moderation['current'])) {
            $state_class = ' published';
            $submit_name = 'Publish';
            $form['actions']['submit']['#value'] = t('Save as Draft');
        }
        elseif (isset($form['#node']->workbench_moderation['current'])) {
            if ($form['#node']->workbench_moderation['current']->state == 'draft') {
                $state_class = ' published';
                $submit_name = 'Publish';
                $form['actions']['submit']['#value'] = t('Save as Draft');
            }
            elseif ($form['#node']->workbench_moderation['current']->state == 'needs_review') {
                $submit_name = '';
                $state_class = ' published';
                $form['actions']['submit']['#attributes']['class'][] = 'edit-submit-class';                

                drupal_add_js('jQuery(document).ready(function() {              
                    jQuery(".form-item-workbench-moderation-state-new").show();
                    jQuery(".reasons-form").hide();              
                    jQuery("#edit-log").val("");

                     jQuery("#edit-workbench-moderation-state-new").change(function() {
                      jQuery("#edit-log").val("");
                      if(jQuery("#edit-workbench-moderation-state-new").val() == "rejected") {                  
                        jQuery(".form-item-log").hide();
                        jQuery("#edit-log").val(jQuery(".reasons-form-msg").val());
                        jQuery(".reasons-form").show();

                        jQuery(".reasons-form-msg").change(function() {
                          jQuery("#edit-log").val(jQuery(".reasons-form-msg").val());
                        });
                      } else {
                        jQuery(".form-item-log").show();
                        jQuery(".reasons-form").hide();
                      }
                    });
                });', array('type' => 'inline', 'scope' => 'footer'));
            }
        }
    }
    elseif (array_key_exists(AUTHOR_GUEST, $user->roles) || array_key_exists(INTERN, $user->roles) || array_key_exists(SUBEDITOR_SR_SUB, $user->roles)) {
        if (!isset($form['#node']->workbench_moderation['current'])) {
            $submit_name = 'Submit for Review';
            $state_class = ' needs_review';
            $form['actions']['submit']['#value'] = t('Save as Draft');
        }
        elseif (isset($form['#node']->workbench_moderation['current']) && ($form['#node']->workbench_moderation['current']->state == 'draft' || $form['#node']->workbench_moderation['current']->state == 'needs_review' || $form['#node']->workbench_moderation['current']->state == 'needs_modification')) {
            if ($form['#node']->workbench_moderation['current']->state == 'needs_review') {
                $submit_name = '';
            }
            elseif ($form['#node']->workbench_moderation['current']->state == 'needs_modification') {
                $submit_name = 'Submit for Review';
                $state_class = ' needs_review';
                $form['actions']['submit']['#value'] = t('Save as Draft');

                drupal_add_js('jQuery(document).ready(function() {
                      jQuery("#edit-workbench-moderation-state-new").val("needs_modification");              
                });', array('type' => 'inline', 'scope' => 'footer'));
            }
            elseif ($form['#node']->workbench_moderation['current']->state == 'published') {
                $submit_name = '';
            }
            elseif ($form['#node']->workbench_moderation['current']->state == 'draft') {
                $submit_name = 'Submit for Review';
                $state_class = ' needs_review';
                $form['actions']['submit']['#value'] = t('Save as Draft');
            }
            
        }
    }

    if (!empty($submit_name)) {
        $form['actions']['submit_link'] = array(
          '#markup' => '<a href="javascript:void(0)" id="story_submit_link" class="button' . $state_class . '">' . t($submit_name) . '</a>',
          '#weight' => 20,
        );
    }
    
    $settings['base_url'] = $base_url;
    $settings['uid'] = $user->uid;
    $settings['ntype'] = $form['type']['#value'];

    drupal_add_js(array('itg_workflow' => array('settings' => $settings)), array('type' => 'setting'));
    
    drupal_add_js(drupal_get_path('module', 'itg_workflow') . '/js/itg_workflow.js', array('weight' => 1));

    // Code for UGC. For now below code is commented may be we need it in future.
    /*
    $arg3 = arg(3);
    
    if (arg(1) == 'add' && isset($arg3) && is_numeric($arg3)) {
        drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-submit").hide();              
            });', array('type' => 'inline', 'scope' => 'footer'));
    }
     * 
     */
   
    return $form;
}

/**
 * Implements hook_node_presave.
 * @param object $node
 */
function itg_workflow_node_presave($node) {
  if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
    if ($node->workbench_moderation['current']->state == 'published' && $node->status == 1) {
       $node->workbench_moderation_state_new = 'published';
    }
  }
}

/**
 * After build for views exposed form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_workflow_views_exposed_form_after_build($form, &$form_state) {
    global $user, $base_url;

    if ($form['#id'] == 'views-exposed-form-strory-menegment-page-6' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-6') {
        $form['state']['#options'] = array('All' => '-All-',
          'needs_review' => 'Submitted for Review',
          'rejected' => 'Rejected',
          'needs_modification' => 'Needs Modification');
    }
    elseif ($form['#id'] == 'views-exposed-form-strory-menegment-page-5') {
        $form['field_story_schedule_date_time_value_1_op']['#options'] = array('empty' => t('-All-'), '<' => 'Published', '>=' => t('To Be Live'));

        drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-field-story-schedule-date-time-value-value-wrapper").hide();              
            });', array('type' => 'inline', 'scope' => 'footer'));
    }
    elseif ($form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12') {
      
        $form['field_story_schedule_date_time_value_op']['#options'] = array('empty' => t('-All-'), '<' => 'Published', '>=' => t('To Be Live'));

        drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-field-story-schedule-date-time-value-value-wrapper").hide();
              jQuery("#edit-field-story-schedule-date-time-value-op").click(function() {                     
                     jQuery("#edit-field-story-schedule-date-time-value-value-wrapper").hide();                     
                 });
            });', array('type' => 'inline', 'scope' => 'footer'));
    }
    elseif ($form['#id'] == 'views-exposed-form-strory-menegment-page') {

        // Code for Bulk opration related work for story

        drupal_add_js('jQuery(document).ready(function() {
               jQuery("#edit-actionviews-bulk-operations-modify-action").val("Archive");
               var myInputBoxID = "edit-bundle-story-appendfield-story-archive";
               jQuery("label[for=" + myInputBoxID + "]").hide();
               jQuery("#edit-bundle-story-appendfield-story-archive").hide();
               jQuery("#edit-tokens").hide();
               jQuery("#edit-actions-submit").val("Archive");
               jQuery("#edit-bundle-story-field-story-archive-und-yes").attr("checked", true);
               jQuery("#edit-bundle-story-field-story-archive-und").hide();               
             });', array('type' => 'inline', 'scope' => 'footer'));
    }
    elseif ($form['#id'] == 'views-exposed-form-photo-gallery-management-page') {

        // Code for Bulk opration related work for Gallery        

        drupal_add_js('jQuery(document).ready(function() {
               jQuery("#edit-actionviews-bulk-operations-modify-action").val("Archive");
               var myInputBoxID = "edit-bundle-photogallery-appendfield-story-archive";
               jQuery("label[for=" + myInputBoxID + "]").hide();
               jQuery("#edit-bundle-photogallery-appendfield-story-archive").hide();
               jQuery("#edit-tokens").hide();
               jQuery("#edit-actions-submit").val("Archive");
               jQuery("#edit-bundle-photogallery-field-story-archive-und-yes").attr("checked", true);
               jQuery("#edit-bundle-photogallery-field-story-archive-und").hide();               
             });', array('type' => 'inline', 'scope' => 'footer'));
    }
    elseif ($form['#id'] == 'views-exposed-form-blogs-management-page') {
        
        // Code for Bulk opration related work for Blog
        drupal_add_js('jQuery(document).ready(function() {
               jQuery("#edit-actionviews-bulk-operations-modify-action").val("Archive");
               var myInputBoxID = "edit-bundle-blog-appendfield-story-archive";
               jQuery("label[for=" + myInputBoxID + "]").hide();
               jQuery("#edit-bundle-blog-appendfield-story-archive").hide();
               jQuery("#edit-tokens").hide();
               jQuery("#edit-actions-submit").val("Archive");
               jQuery("#edit-bundle-blog-field-story-archive-und-yes").attr("checked", true);
               jQuery("#edit-bundle-blog-field-story-archive-und").hide();               
             });', array('type' => 'inline', 'scope' => 'footer'));
    }
    elseif ($form['#id'] == 'views-exposed-form-podcast-management-page') {
        
        // Code for Bulk opration related work for podcast
        drupal_add_js('jQuery(document).ready(function() {
               jQuery("#edit-actionviews-bulk-operations-modify-action").val("Archive");
               var myInputBoxID = "edit-bundle-podcast-appendfield-story-archive";
               jQuery("label[for=" + myInputBoxID + "]").hide();
               jQuery("#edit-bundle-podcast-appendfield-story-archive").hide();
               jQuery("#edit-tokens").hide();
               jQuery("#edit-actions-submit").val("Archive");
               jQuery("#edit-bundle-podcast-field-story-archive-und-yes").attr("checked", true);
               jQuery("#edit-bundle-podcast-field-story-archive-und").hide();               
             });', array('type' => 'inline', 'scope' => 'footer'));
    }
    
    elseif ($form['#id'] == 'views-exposed-form-videogallery-management-page') {
        
        // Code for Bulk opration related work for videogallery
        drupal_add_js('jQuery(document).ready(function() {
               jQuery("#edit-actionviews-bulk-operations-modify-action").val("Archive");
               var myInputBoxID = "edit-bundle-videogallery-appendfield-story-archive";
               jQuery("label[for=" + myInputBoxID + "]").hide();
               jQuery("#edit-bundle-videogallery-appendfield-story-archive").hide();
               jQuery("#edit-tokens").hide();
               jQuery("#edit-actions-submit").val("Archive");
               jQuery("#edit-bundle-videogallery-field-story-archive-und-yes").attr("checked", true);
               jQuery("#edit-bundle-videogallery-field-story-archive-und").hide();               
             });', array('type' => 'inline', 'scope' => 'footer'));
    }
    

    return $form;
}

/**
 * Implementation of hook_views_query_alter
 * {@inheritdoc}
 */
function itg_workflow_views_query_alter(&$view, &$query) {

  // < published and >= approved
  // for story list
  if ($view->name != 'related_photo_video_content') {
    if ((!isset($_REQUEST['field_story_schedule_date_time_value_1_op'])) && $view->current_display == 'page_5') {
      unset($view->query->where[1]['conditions'][4]);
    }
    elseif ((!isset($_REQUEST['field_story_schedule_date_time_value_op'])) && $view->current_display == 'page_1') {
      unset($view->query->where[1]['conditions'][4]);
    }
  }
}

/**
 * Implementation of hook_query_alte
 * {@inheritdoc} 
 */
function itg_workflow_query_alter(QueryAlterableInterface $query) {
    if (isset($query->hasTag) && $query->hasTag('views')) {
        static $count;
        $view = & $query->getMetaData('view');
        
        if ($view->name == 'view_moderation_history' || $view->current_display == 'block_1') {
            $query->groupBy('node_revision_vid');
        }
    }
}

/**
 * Implements hook_node_access.
 * Check access for forum menu item.
 * {@inheritdoc}
 */
function itg_workflow_node_access($node, $op, $account) {
    global $user;

    $arr_source_type = array('issue', 'supplement');

    if (isset($node->type) && $node->type == 'story' && $op == 'update' && (isset($node->field_story_source_type[LANGUAGE_NONE]) && !in_array($node->field_story_source_type[LANGUAGE_NONE][0]['value'], $arr_source_type))) {
        $story_expiry_date = strtotime($node->field_story_expiry_date[LANGUAGE_NONE][0]['value']);
        $current_time = time();

        if ($node->status == 0 && (($node->field_story_archive[LANGUAGE_NONE][0]['value'] == 'Yes') || $node->workbench_moderation['current']->state == 'rejected'))
            return NODE_ACCESS_DENY;
        elseif (($story_expiry_date < $current_time) && (arg(0) != 'issue-listing'))
            return NODE_ACCESS_DENY;
    } elseif (isset($node->type) && $op == 'update' && ($node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery')) {
        if ($node->status == 0 && (($node->field_story_archive[LANGUAGE_NONE][0]['value'] == 'Yes') || $node->workbench_moderation['current']->state == 'rejected')) {
            return NODE_ACCESS_DENY;
        }
    }

    // code for lock story  
    if (isset($node->type) && $node->type == 'story' && $node->status == 1) {
        if (!array_key_exists(COPY_EDITOR, $user->roles) && !array_key_exists(SECTION_EDITOR, $user->roles) && !array_key_exists(EDITOR, $user->roles)) {
            foreach ($node->field_story_configurations[LANGUAGE_NONE] as $key => $val) {
                if ($val['value'] == 'display_lock') {
                    return NODE_ACCESS_DENY;
                }
            }
        }
    }

    return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_view.
 * {@inheritdoc}
 */
function itg_workflow_node_view($node, $view_mode, $langcode) {
    if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
        $node->moderation_history_block = views_embed_view('view_moderation_history', 'block_2');
    }
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}   
 */
function itg_workflow_node_validate($node, $form, &$form_state) {
    // Code for check remarks field is empty or not
    if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
        if (empty($node->log) && (($node->workbench_moderation_state_new == 'needs_modification') || ($node->workbench_moderation_state_new == 'rejected'))) {
            form_set_error('log', t("Remarks field is required."));
        }
    }
}

/**
 * Bulk opration related work
 * @param type $field1:edit-bundle-blog-appendfield-story-archive
 * @param type $field2:edit-bundle-blog-field-story-archive-und    
 */
function itg_workflow_bulk_opration_related($field1, $field2) {
    drupal_add_js('jQuery(document).ready(function() {
                jQuery("#edit-actionviews-bulk-operations-modify-action").val("Archive");
                var myInputBoxID = ' . $field1 . ';
                jQuery("label[for=" + myInputBoxID + "]").hide();
                jQuery("#"+myInputBoxID).hide();
                jQuery("#edit-tokens").hide();
                jQuery("#edit-actions-submit").val("Archive");
                var fieldId = ' . $field2 . ';
                jQuery("#"+fieldId+"-yes").attr("checked", true);
                jQuery("#"+fieldId).hide();               
             });', array('type' => 'inline', 'scope' => 'footer'));
}


/**
 * Implements hook_node_insert
 * @param object $node
 */
function itg_workflow_node_insert($node) {
  if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {

    global $user;
    
    $current = $user->uid;
    //getting mail id's of high level users
    $id = array('5', '6', '20');
    $query = db_select('users', 'u');
    $query->fields('u', array('mail'));
    $query->join('users_roles', 'ur', 'ur.uid = u.uid');
    $query->condition('ur.rid', $id, IN);
    $result = $query->execute();
    
    foreach ($result as $val) {
        $value .= $val->mail . ',';
    }
    
    $high_level_user = trim($value, ",");

     $query = db_select('users', 'us');
     $query->fields('us', array('name')); 
     $query->condition('us.uid', $current, '=');
     $result = $query->execute();
     foreach ($result as $vals) {
      $current_user_name .= $vals->name;
     }

     workflow_get_mail_content($node, 'create', $high_level_user, $node->name, $current_user_name);
   }
}

/**
 * Implements hook_node_update
 * @param object $node
 */
function itg_workflow_node_update($node) {
    if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
      global $user;
      $current = $user->uid;
      $node_id = $node->nid;
      $user_id = $node->uid;

      $value = '';
      //getting mail id's of high level users
      if ($current == $user_id) {
          $id = array('5', '6', '20');
          $query = db_select('users', 'u');
          $query->fields('u', array('mail'));
          $query->join('users_roles', 'ur', 'ur.uid = u.uid');
          $query->condition('ur.rid', $id, IN);
          $result = $query->execute();
          foreach ($result as $val) {
              $value .= $val->mail . ',';
          }
          $high_level_user = trim($value, ",");
      } 
      else {
          $query = db_select('users', 'u')
              ->fields('u', array('mail'))
              ->condition('uid', $user_id, '=');
          $result = $query->execute();
          
          foreach ($result as $val) {
            $value .= $val->mail;
          }
          
          $high_level_user = $value;
      }
       $query = db_select('users', 'us');
       $query->fields('us', array('name')); 
       $query->condition('us.uid', $current, '=');
       $result = $query->execute();
       
       foreach ($result as $vals) {
         $current_user_name .= $vals->name;
       }
       
       workflow_get_mail_content($node, 'update', $high_level_user, $node->name, $current_user_name);
    }
}

/**
 * Get Mail content
 * @global String $base_url
 * @param object $node
 * @param string $event
 * @param string $to
 * @param string $user_name
 * @param string $current_user_name
 * @return 
 */
function workflow_get_mail_content($node, $event, $to, $user_name, $current_user_name) {
      
    global $base_url;
    
    $content_type = $node->type;
    $review = $node->workbench_moderation_state_new;
    if ($event == 'create') {
        $task_subject = 'A new '.$content_type.' has been submitted for your review, please find details below.';
        $submitted_by = 'Submitted By: '.$current_user_name;
        $subject = ucfirst($content_type).' Submitted '. $node->title;
    }
    elseif ($event == 'update') {
        if ($review == 'needs_review'){
          $task_subject = 'A new '.$content_type.' has been updated and submitted for your review, please find details below.';
        }
        else if ($review == 'rejected'){
          $task_subject = 'Your '.$content_type.' has been rejected, please find details below.';  
        }
        else if ($review == 'needs_modification'){
          $task_subject = 'Your '.$content_type.' has been required some modification, please find details below.';  
        }
        else if ($review == 'published'){
          $task_subject = 'Your '.$content_type.' has been published, please find details below.';  
        }
        
        $submitted_by = 'Updated By: '.$current_user_name;
        $subject = ucfirst($content_type).' Updation '. $node->title;
    }

    $node_url = $base_url . '/node/' . $node->nid;
    $content = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
              <html xmlns:v="urn:schemas-microsoft-com:vml">
                <head><title></title></head>
                <body style="margin:0; padding:0;">';
    $content .= 'Dear Team,';
    $content .= '<br /><br />' . $task_subject;
    $content .= '<br /><br />'.ucfirst($content_type).' Title: ' . $node->title;
    $content .= '<br />URL: ' . $node_url;
    $content .= '<br />' .$submitted_by;
    $content .= '<br /><br /><br />Thanks,<br>ITG Team';    
    $content .= '</body>';    
    $content .= '</html>';    

   
    $params = array(
      'body' => $content,
      'subject' => $subject,
    );
    
    $mail = drupal_mail('itg_workflow', 'send_mail_to_task', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
    if ($mail['result']) {
        return TRUE;
    }
    else {
        $error_msg = 'Failed to send the email!';
        watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
        return FALSE;
    }
}

/**
 * Implements hook_mail
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_workflow_mail($key, &$message, $params) {
    switch ($key) {
        case 'send_mail_to_task':
            $headers = array(
              'MIME-Version' => '1.0',
              'Content-Type' => 'text/html; charset=iso-8859-1;',
              'Content-Transfer-Encoding' => '8Bit',
              'X-Mailer' => 'Drupal'
            );

            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            foreach ($headers as $key => $value) {
                $message['headers'][$key] = $value;
            }
            break;
    }
}