<?php

/**
 * @file
 * ITG workflow module.
 *
 * Provides customizations and functions for workflow.
 *
 */
module_load_include('inc', 'itg_workflow', 'includes/workflow-mail-content');

/**
 * Implements hook_permissions().
 *
 * Set access permission on ITG Autosave settings form.
 *
 * {@inheridoc}.
 */
function itg_workflow_permission() {
  return array(
    'administer itg_preview_log settings' => array(
      'title' => t('administer itg_preview_log settings'),
      'description' => t('administer itg_preview_log settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 * @return array $items
 */
function itg_workflow_menu() {

  $items['preview-content-logs-report'] = array(
    'title' => "Audit Logs",
    'page callback' => 'itg_workflow_logs_detailis',
    'access arguments' => array('administer itg_preview_log settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/workflow-logs-detailis.inc',
  );

  $items['preview-content-logs-report/nid/autocomplete'] = array(
    'page callback' => 'itg_workflow_content_nid',
    'access arguments' => array('administer itg_preview_log settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/workflow-logs-detailis.inc',
  );

  $items['preview-content-logs-report/title/autocomplete'] = array(
    'page callback' => 'itg_workflow_content_title',
    'access arguments' => array('administer itg_preview_log settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/workflow-logs-detailis.inc',
  );

  $items['preview-content-logs-report/username/autocomplete'] = array(
    'page callback' => 'itg_workflow_content_username',
    'access arguments' => array('administer itg_preview_log settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/workflow-logs-detailis.inc',
  );

  $items['preview-content-logs-report/email/autocomplete'] = array(
    'page callback' => 'itg_workflow_content_email',
    'access arguments' => array('administer itg_preview_log settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/workflow-logs-detailis.inc',
  );

  return $items;
}

/**
 * function which gives valid content type for workflow.
 * @return array
 */
function itg_workflow_valid_content_type() {
  return array("blog", "story", "videogallery", "photogallery", "podcast");
}


/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_workflow_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'story_node_form':
    case 'photogallery_node_form':
    case 'blog_node_form':
    case 'podcast_node_form':
    case 'videogallery_node_form':
      $form['field_preview_unique_id']['#attributes']['class'][] = 'hide';
      module_load_include('inc', 'itg_workflow', 'includes/itg_workflow_preview_log');
      $preview_id = _get_unique_id_for_node_field();
      $form['field_preview_unique_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $preview_id;
      // Condition to check valid user to perform preview log submit.
      if (_is_preview_log_submit_true($user)) {
        $form['actions']['submit']['#submit'][] = 'itg_workflow_preview_log_submit';
        $form['actions']['preview']['#submit'][] = 'itg_workflow_preview_log_submit';
      }
      $form['#after_build'][] = 'itg_workflow_after_build';
      break;

    case 'views_exposed_form':
      $form['#after_build'][] = 'itg_workflow_views_exposed_form_after_build';
      break;
  }
}

/**
 * function return flag for user have preview log functionality.
 * 
 * @param array $user
 * @return boolean
 */
function _is_preview_log_submit_true($user) {
  $access_log_submit = FALSE;
  $access_users_roles = array(
    'administrator',
    'Site Admin',
    'Section Editor/Anchor',
    'Copy Editor',
    'Editor'
  );
  $current_user_roles_array = array_values($user->roles);
  foreach ($current_user_roles_array as $role) {
    if (in_array($role, $access_users_roles)) {
      $access_log_submit = TRUE;
    }
  }
  return $access_log_submit;
}

/**
 * {@inheritdoc}
 */
function itg_workflow_preview_log_submit($form, $form_state) {
  global $user;

  // validation for preview button only.
  if ($form_state['values']['op'] == 'Preview') {
    $preview_unique_id = $form_state['values']['field_preview_unique_id']['und'][0]['value'];
    $user_id = $user->uid;
    // Give nid default value 0.
    itg_workflow_preview_db_merge($preview_unique_id, $user_id, 0);
  }
}

/**
 * Function to save preview values.
 * 
 * @param string $preview_unique_id
 * @param int $user_id
 * @param ind $nid
 */
function itg_workflow_preview_db_merge($preview_unique_id, $user_id, $nid = 0) {
  try {
    db_merge('itg_workflow_preview_log')
        ->key(array(
          'preview_id' => $preview_unique_id,
          'uid' => $user_id,
        ))
        ->fields(array(
          'preview_id' => $preview_unique_id,
          'uid' => $user_id,
          'nid' => $nid,
        ))->execute();
  }
  catch (Exception $ex) {
    drupal_set_message($ex->getMessage(), 'error');
  }
}

/**
 * After build for story form.
 * @param array $form
 * @param array $form_state
 */
function itg_workflow_after_build($form, &$form_state) {
  global $user, $base_url;

  // code for sequence change of modration field
  $form['additional_settings']['group']['#groups']['additional_settings'][0]['#weight'] = -1;
  $log = $form['revision_information']['log'];
  $state = !empty($form['revision_information']['workbench_moderation_state_new']) ? $form['revision_information']['workbench_moderation_state_new'] : '';

  unset($form['revision_information']['log']);
  unset($form['revision_information']['workbench_moderation_state_new']);

  $form['revision_information']['workbench_moderation_state_new'] = $state;
  $term_name = '';
  // Code for rejection master message
  if (!empty($form['#entity']->workbench_moderation['current']->state) && $form['#entity']->workbench_moderation['current']->state == 'needs_review') {
    $vid = taxonomy_vocabulary_machine_name_load('reasons_for_reject');
    $terms = taxonomy_get_tree($vid->vid);
    foreach ($terms as $key => $val) {
      $term_name[$val->name] = $val->name;
    }
    $form['revision_information']['reject_msg'] = array(
      '#type' => 'select',
      '#title' => t('Remarks'),
      '#options' => $term_name,
      '#attributes' => array('class' => array('reasons-form-msg')),
      '#prefix' => '<div class="reasons-form">',
      '#suffix' => '</div>',
    );
  }

  $form['revision_information']['log'] = $log;

  $form['revision_information']['log']['#title'] = t('Remarks');

  if (array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) || array_key_exists(COPY_EDITOR, $user->roles) || array_key_exists(EDITOR, $user->roles) || array_key_exists(UGC_MODERATOR, $user->roles) || array_key_exists(SITE_ADMIN, $user->roles)) {
    if (!isset($form['#node']->workbench_moderation['current'])) {
      $state_class = ' published';
      $submit_name = 'Publish';
      $form['actions']['submit']['#value'] = t('Save as Draft');
    }
    elseif (isset($form['#node']->workbench_moderation['current'])) {
      if ($form['#node']->workbench_moderation['current']->state == 'draft' && $form['#node']->status == 0) {
        $state_class = ' published';
        $submit_name = 'Publish';
        $form['actions']['submit']['#value'] = t('Save as Draft');
      }
      elseif ($form['#node']->workbench_moderation['current']->state == 'needs_review') {
        $submit_name = '';
        $state_class = ' published';
        $form['actions']['submit']['#attributes']['class'][] = 'edit-submit-class';
      }
    }
  }
  elseif (array_key_exists(AUTHOR_GUEST, $user->roles) || array_key_exists(INTERN, $user->roles) || array_key_exists(SUBEDITOR_SR_SUB, $user->roles)) {
    if (!isset($form['#node']->workbench_moderation['current'])) {
      $submit_name = 'Submit for Review';
      $state_class = ' needs_review';
      $form['actions']['submit']['#value'] = t('Save as Draft');
    }
    elseif (isset($form['#node']->workbench_moderation['current']) && ($form['#node']->workbench_moderation['current']->state == 'draft' || $form['#node']->workbench_moderation['current']->state == 'needs_review' || $form['#node']->workbench_moderation['current']->state == 'needs_modification')) {
      if ($form['#node']->workbench_moderation['current']->state == 'needs_review') {
        $submit_name = '';
      }
      elseif ($form['#node']->workbench_moderation['current']->state == 'needs_modification') {
        $submit_name = 'Submit for Review';
        $state_class = ' needs_review';
        $form['actions']['submit']['#value'] = t('Save as Draft');
      }
      elseif ($form['#node']->workbench_moderation['current']->state == 'published') {
        $submit_name = '';
      }
      elseif ($form['#node']->workbench_moderation['current']->state == 'draft') {
        $submit_name = 'Submit for Review';
        $state_class = ' needs_review';
        $form['actions']['submit']['#value'] = t('Save as Draft');
      }
    }
  }

  if (!empty($submit_name)) {
    $form['actions']['submit_link'] = array(
      '#markup' => '<a href="javascript:void(0)" id="story_submit_link" class="button' . $state_class . ' btn-submit">' . t($submit_name) . '</a>',
      '#weight' => 20,
    );
  }

  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['ntype'] = $form['type']['#value'];
  $settings['mstate'] = isset($form['#node']->workbench_moderation['current']->state) ? $form['#node']->workbench_moderation['current']->state : '';

  drupal_add_js(array('itg_workflow' => array('settings' => $settings)), array('type' => 'setting'));

  drupal_add_js(drupal_get_path('module', 'itg_workflow') . '/js/itg_workflow.js', array('weight' => 1, 'scope' => 'footer'));

  // Code for UGC. For now below code is commented may be we need it in future.
  /*
    $arg3 = arg(3);

    if (arg(1) == 'add' && isset($arg3) && is_numeric($arg3)) {
    drupal_add_js('jQuery(document).ready(function() {
    jQuery("#edit-submit").hide();
    });', array('type' => 'inline', 'scope' => 'footer'));
    }
   * 
   */

  return $form;
}

/**
 * Implements hook_node_presave.
 * @param object $node
 */
function itg_workflow_node_presave($node) {
  //set custom path alias  
  if (itg_workflow_stop_node_update_batch_for_widgets()) {
    return;
  }
  
  if (isset($node->op) && !empty($node->op)) {
    if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast') {
      if (!empty($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'published' && $node->status == 1) {
        $node->workbench_moderation_state_new = 'published';
      }
      if ($node->workbench_moderation_state_new == 'published' && $node->workbench_moderation_state_current != 'published' && empty($node->field_itg_content_publish_date[LANGUAGE_NONE][0]['value'])) {
        $node->field_itg_content_publish_date[LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i'); //2017-02-21 23:45
      }
    }

    if ($node->type == 'videogallery') {
      if (!empty($node->op)) {
        $node->field_op_flag[LANGUAGE_NONE][0]['value'] = $node->workbench_moderation_state_new;
      }
      global $user;
      $is_draft = 0;
      $node_id = $node->nid;
      foreach ($node->field_story_itg_tags[LANGUAGE_NONE] as $tags) {
        $tag[] = $tags['name'];
      }
      $tag_value = implode(', ', $tag);
      $tags_value = trim($tag_value, ",");
      $items = field_get_items('node', $node, 'field_video_upload');

      foreach ($items as $imagecollection) {
        if ($node->status == 0 && $node->workbench_moderation['current']->state == 'published') {
          $entitydata = entity_load('field_collection_item', $imagecollection);
          $v_fid = $entitydata[$imagecollection['value']]->field_videogallery_video_upload;
          $fids = $v_fid[LANGUAGE_NONE][0]['fid'];
          if (function_exists('itg_videogallery_unpublish_content_delete_video')) {
            itg_videogallery_unpublish_content_delete_video($fids);
          }
        }
        else {
          if ($imagecollection['field_videogallery_video_upload'][LANGUAGE_NONE][0]['fid']) {
            $fids = $imagecollection['field_videogallery_video_upload'][LANGUAGE_NONE][0]['fid'];
            $priv_status = $imagecollection['field_video_private'][LANGUAGE_NONE][0]['value'];
          }
          else {
            $entitydata = entity_load('field_collection_item', $imagecollection);
            $v_fid = $entitydata[$imagecollection['value']]->field_videogallery_video_upload;
            $fids = $v_fid[LANGUAGE_NONE][0]['fid'];
            $priv_status = $entitydata[$imagecollection['value']]->field_video_private;
          }
          if ((int) $fids != 0) {
            $video_image = itg_videogallery_get_video_info_by_fid($fids);
            if (empty($video_image)) {
              $video_fid = $fids;
              $file_details = file_load($fids);

              $real_path = drupal_realpath($file_details->uri);
              if (file_exists($file_details->uri)) {
                if ($real_path == "") {
                  $real_path = file_create_url($file_details->uri);
                }
                $is_draft = 1;

                if ($node_id) {
                  drupal_set_message('The video is not published. It will auto published once it published on Daily motion.');
                  // use for upload local video to DM
                  itg_videogallery_send_local_video_to_dailymotion($real_path, $file_details, $video_fid, $tags_value, $node_id, 'is_draft', $priv_status);
                }
              }
            }
            else {
              $video_image = itg_videogallery_get_video_all($fids);
             
              if ($video_image == 1) {
                $is_draft = 1;
              }
            }
          }
        }
        $file_video = itg_videogallery_get_video_info_by_fid($fids);
      }
// Need to chenge this for redirect
      if ($is_draft == 1) {
        if (!empty($node->op)) {
          if ($node->workbench_moderation['current']->state == 'published') {
//            $node->workbench_moderation['current']->from_state = 'draft';
//            $node->workbench_moderation['current']->state = 'draft';
//            $node->workbench_moderation['published']->from_state = 'draft';
//            $node->workbench_moderation['published']->state = 'draft';
//            $node->status = 0;
//            $node->revision = 0;
              
              if($node->status) {
              $node->workbench_moderation_state_new = 'published';
              }
              if (!empty($node->op)) {
         $node->field_op_flag[LANGUAGE_NONE][0]['value'] = $node->workbench_moderation_state_new;
       }
          }
          else {

            $node->workbench_moderation_state_new = 'draft';
          }
        }
      }
      else {
        if (!empty($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'published' && $node->status == 1) {
          $node->workbench_moderation_state_new = 'published';
        }
      }

      if ($node->workbench_moderation_state_new == 'published' && $node->workbench_moderation_state_current != 'published' && empty($node->field_itg_content_publish_date[LANGUAGE_NONE][0]['value']) && $node->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
        $node->field_itg_content_publish_date[LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i'); //2017-02-21 23:45
      }
    }
  }
  else if ($node->field_story_source_type[LANGUAGE_NONE][0]['value'] == 'migrated' && arg(0) == 'node' && arg(2) == 'edit' && is_numeric(arg(1)) && isset($node->op) && $node->status == 1) { //comment this code before migrate
      $node->workbench_moderation_state_new = 'published';
  }
  if (!empty($node->op)) {
    if($node->type == 'breaking_news' && empty($node->field_itg_content_publish_date[LANGUAGE_NONE][0]['value'])) {
      $node->field_itg_content_publish_date[LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i');
    }
    if (array_key_exists(AUTHOR_GUEST, $user->roles) || array_key_exists(INTERN, $user->roles) || array_key_exists(SUBEDITOR_SR_SUB, $user->roles)) {
      $node->field_video_status_flag[LANGUAGE_NONE][0]['value'] = 'low_level';
    }
    else {
      $node->field_video_status_flag[LANGUAGE_NONE][0]['value'] = '';
    }
  }
}

/* After build for views exposed form.
 * @param array $form
 * @param array $form_state
 * @return array
 */

function itg_workflow_views_exposed_form_after_build($form, &$form_state) {
  global $user, $base_url;

  $settings = array();

  $settings['form_id'] = $form['#id'];
  drupal_add_js(array('itg_workflow' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_workflow') . '/js/itg_workflow_form.js', array('scope' => 'footer'));

  if ($form['#id'] == 'views-exposed-form-strory-menegment-page-6' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-6') {
    $form['state']['#options'] = array('All' => '-All-',
      'needs_review' => 'Submitted for Review',
      'rejected' => 'Rejected',
      'needs_modification' => 'Needs Modification');
  }
  elseif ($form['#id'] == 'views-exposed-form-strory-menegment-page-5') {
    $form['field_story_schedule_date_time_value_1_op']['#options'] = array('empty' => t('-All-'), '<' => 'Published', '>=' => t('To Be Live'));
  }
  elseif ($form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12') {

    $form['field_story_schedule_date_time_value_op']['#options'] = array('empty' => t('-All-'), '<' => 'Published', '>=' => t('To Be Live'));
  }

  return $form;
}

/**
 * Implementation of hook_views_query_alter
 * {@inheritdoc}
 */
function itg_workflow_views_query_alter(&$view, &$query) {

  // < published and >= approved
  // for story list

  if ($view->name != 'related_photo_video_content') {
    if ((!isset($_REQUEST['field_story_schedule_date_time_value_1_op'])) && $view->current_display == 'page_5') {
      unset($view->query->where[1]['conditions'][4]);
    }

    if ($view->name == 'strory_menegment' || $view->name == 'photo_gallery_management' || $view->name == 'videogallery_management' || $view->name == 'blogs_management' || $view->name == 'podcast_management') {

      if ((!isset($_REQUEST['field_story_schedule_date_time_value_op'])) && $view->current_display == 'page_1') {
        unset($view->query->where[1]['conditions'][4]);
      }
    }
  }

  if ($view->name == 'preview_content_report' && $view->current_display == 'page') {
    $query->add_where(1, 'itg_workflow_preview_log.nid', NULL);
  }
}

/**
 * Implementation of hook_views_pre_render
 * {@inheritdoc} 
 */
function itg_workflow_views_pre_render(&$view) {
  if ($view->name == "preview_content_report" && $view->current_display == 'page') {
    $header_content = '<span class="count">Count (' . $view->total_rows . ') </span>';
    $view->attachment_before = $header_content;
  }
}

/**
 * Implementation of hook_query_alte
 * {@inheritdoc} 
 */
function itg_workflow_query_alter(QueryAlterableInterface $query) {
  if (isset($query->hasTag) && $query->hasTag('views')) {
    static $count;
    $view = & $query->getMetaData('view');

    if ($view->name == 'view_moderation_history' || $view->current_display == 'block_1' || $view->current_display == 'page_1') {
      $query->groupBy('node_revision_vid');
    }
  }
}

/**
 * Implements hook_node_access.
 * Check access for forum menu item.
 * {@inheritdoc}
 */
function itg_workflow_node_access($node, $op, $account) {
  global $user;

  $story_expiry_date = '';
  $arr_source_type = array('issue', 'supplement');

  // code for redirect_url
//  if (arg(0) == 'node' && is_numeric(arg(1))) {
//    if (function_exists('itg_get_node_redirect_url')) {
//      itg_get_node_redirect_url($node, $op);
//    }
//  }


  if (isset($node->workbench_moderation['current']->from_state) && $node->workbench_moderation['current']->from_state == 'draft' && $node->workbench_moderation['current']->state == 'draft' && $node->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
    if ($node->uid != $user->uid) {
      return NODE_ACCESS_DENY;
    }
  }

  if (isset($node->type) && $node->type == 'story' && $op == 'update' && (isset($node->field_story_source_type[LANGUAGE_NONE]) && !in_array($node->field_story_source_type[LANGUAGE_NONE][0]['value'], $arr_source_type))) {
    if (!empty($node->field_story_expiry_date[LANGUAGE_NONE][0]['value'])) {
      $story_expiry_date = strtotime($node->field_story_expiry_date[LANGUAGE_NONE][0]['value']);
    }
    
    if (!empty($node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value'])) {
      $story_schedule_date = strtotime($node->field_story_schedule_date_time[LANGUAGE_NONE][0]['value']);
    }

    $current_time = time();

    if ($node->status == 0 && ((isset($node->field_story_archive[LANGUAGE_NONE][0]['value']) && $node->field_story_archive[LANGUAGE_NONE][0]['value'] == 'Yes') || (isset($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'rejected'))) {
      return NODE_ACCESS_DENY;
    }
    elseif ((!empty($story_expiry_date) && $story_expiry_date < $current_time) && (arg(0) != 'issue-listing')) {
      return NODE_ACCESS_DENY;
    }
    /*elseif ((!empty($story_schedule_date) && $story_schedule_date > $current_time)) {
      return NODE_ACCESS_DENY;
    }*/
  }
  elseif (isset($node->type) && $op == 'update' && ($node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery')) {
    if (!empty($node) && $node->status == 0 && ((!empty($node->field_story_archive[LANGUAGE_NONE][0]['value']) && $node->field_story_archive[LANGUAGE_NONE][0]['value'] == 'Yes') || $node->workbench_moderation['current']->state == 'rejected')) { //shravan
      return NODE_ACCESS_DENY;
    }
  }

  // code for lock story  
  if (isset($node->type) && $node->type == 'story' && $node->status == 1) {
    if (!array_key_exists(COPY_EDITOR, $user->roles) && !array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) && !array_key_exists(EDITOR, $user->roles)) {
      if (!empty($node->field_story_configurations[LANGUAGE_NONE])) {
        foreach ($node->field_story_configurations[LANGUAGE_NONE] as $key => $val) {
          if ($val['value'] == 'display_lock') {
            return NODE_ACCESS_DENY;
          }
        }
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_view.
 * {@inheritdoc}
 */
function itg_workflow_node_view($node, $view_mode, $langcode) {
    
  global $theme, $user;
  
  // code for redirect_url
  $is_fron_page = drupal_is_front_page();
  if (empty($is_fron_page)) {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      if (function_exists('itg_get_node_redirect_url')) {
        itg_get_node_redirect_url($node, $view_mode);
      }
    }
    if ($theme != FRONT_THEME_NAME) {
      if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
        $node->moderation_history_block = views_embed_view('view_moderation_history', 'block_2');
      }
    } else {
          module_load_include('inc', 'itg_workflow', 'includes/itg_workflow_preview_log');
          if (isset($_GET['preview_log']) && ($_GET['preview_log'] == $node->nid) && _is_preview_log_submit_true($user)) {
            $preview_id = _get_unique_id_for_node_field();
            $user_id = $user->uid;
            itg_workflow_preview_db_merge($preview_id, $user_id, 0);
          }
      }
  }
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}   
 */
function itg_workflow_node_validate($node, $form, &$form_state) {
  // Code for check remarks field is empty or not
  if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
    if (empty($node->log) && (($node->workbench_moderation_state_new == 'needs_modification') || ($node->workbench_moderation_state_new == 'rejected'))) {
      form_set_error('log', t("Remarks field is required."));
    }
  }
}

/**
 * Bulk opration related work
 * @param type $field1:edit-bundle-blog-appendfield-story-archive
 * @param type $field2:edit-bundle-blog-field-story-archive-und    
 */
function itg_workflow_bulk_opration_related($field1, $field2) {
  drupal_add_js('jQuery(document).ready(function() {
                jQuery("#edit-actionviews-bulk-operations-modify-action").val("Archive");
                var myInputBoxID = ' . $field1 . ';
                jQuery("label[for=" + myInputBoxID + "]").hide();
                jQuery("#"+myInputBoxID).hide();
                jQuery("#edit-tokens").hide();
                jQuery("#edit-actions-submit").val("Archive");
                var fieldId = ' . $field2 . ';
                jQuery("#"+fieldId+"-yes").attr("checked", true);
                jQuery("#"+fieldId).hide();               
             });', array('type' => 'inline', 'scope' => 'footer'));
}

/**
 * Implements hook_node_insert
 * @param object $node
 */
function itg_workflow_node_insert($node) {

  global $user;
//  
//  if (isset($node->op)) {
  if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
    //drupal_set_message("under itg_workflow_node_insert");
    // for code email
    /* if (!array_key_exists(COPY_EDITOR, $user->roles) &&
      !array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) &&
      !array_key_exists(EDITOR, $user->roles) &&
      !array_key_exists(SITE_ADMIN, $user->roles) &&
      !($node->workbench_moderation_state_new == 'draft')) {
      } */
    //getting mail id's of high level users
//      
    $rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, EDITOR, AUTHOR_GUEST);
    if ($node->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
      $user_email = get_email_by_roll($rid);
      workflow_get_mail_content($node, 'create', $user_email, $node->name, $user->name);
    }
    //   drupal_set_message("unser node insert");
    //unset session if exists during node insert.
    if (isset($_SESSION['node_preview_unique'][$node->nid])) {
      unset($_SESSION['node_preview_unique'][$node->nid]);
    }
  }
//  }
}

/**
 * Implements hook_node_update
 * @param object $node
 */
function itg_workflow_node_update($node) {
  if (isset($_REQUEST['id']) && !empty($_REQUEST['id'])) {
    if ($node->type == 'videogallery' && $node->status == 0) {
      itg_videogallery_node_publish_to_unpublish($node->nid);
    }
  }
  global $user;
  if ($node->type == 'story') {
    itg_videogallery_save_story_video_data($node->body['und'][0]['value'], $node->nid);
  }
  if (itg_workflow_stop_node_update_batch_for_widgets()) {
   // watchdog("email_widget", "<pre>" . print_r($_REQUEST, TRUE) . "</pre>");
    return;
  }
  //if (isset($node->op)) {
  watchdog("email_test_asd", "<pre>" . print_r($_REQUEST, TRUE) . "</pre>");
  if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
    //drupal_set_message("under itg_workflow_node_update");
    // get preview log ID.
    $preview_unique_id = $node->field_preview_unique_id['und'][0]['value'];
    $user_id = $user->uid;
    $node_id = $node->nid;
    if (_is_preview_log_submit_true($user)) {
      // Delete entry of node if user is previously previewed the node.
      try {
        db_delete('itg_workflow_preview_log')
            ->condition('nid', $node_id)
            ->condition('uid', $user_id)
            ->condition('preview_id', $preview_unique_id, "!=")
            ->execute();
      }
      catch (Exception $ex) {
        //drupal_set_message("Direct published node cache block");
        drupal_set_message($ex->getMessage());
      }

      try {
        db_update('itg_workflow_preview_log')
            ->fields(array(
              'nid' => $node_id,
              'preview_id' => $preview_unique_id,
              'uid' => $user_id,
            ))
            ->condition('preview_id', $preview_unique_id)
            ->condition('uid', $user_id)
            ->execute();
      }
      catch (Exception $ex) {
        //drupal_set_message("Direct published node cache block");
        drupal_set_message($ex->getMessage());
      }
    }
    unset($_SESSION['node_preview_unique'][$node->nid]);
     
    if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'videogallery' && $node->workbench_moderation['current']->state == 'published' || $node->workbench_moderation['current']->state == 'draft') {
      
      $node_state = $node->workbench_moderation['current']->state;
      $query = db_select('node', 'n');
      if (!empty($node_state) && $node_state == 'published') {
        $query->condition('n.status', 0, '=');
      } 
      elseif (!empty($node_state) && $node_state == 'draft') {
        $query->condition('n.status', 1, '=');
      }
      $query->fields('n', array('title', 'nid'));
      
      if (isset($node->type) && $node->type == 'story') {
        $query->condition('n.type', 'story', '=');
      } 
      elseif (isset($node->type) && $node->type == 'photogallery') {
        $query->condition('n.type', 'photogallery', '=');
      } 
      elseif(isset($node->type) && $node->type == 'videogallery') {
        $query->condition('n.type', 'videogallery', '=');
      }
      
      $query->condition('n.nid', $node->nid, '=');
      $result = $query->execute();
      $num_of_results = $result->rowCount();
      if ($num_of_results >= 1) {
        $rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, SEO, EDITOR);
        $user_email = get_email_by_roll($rid);
        workflow_get_mail_content($node, 'update', $user_email, $node->name, $user->name, 'pub-unpub', $node_state);
      }
    }

    if ($node->workbench_moderation_state_new != 'draft') {

      $itguser = user_load($node->uid);
      //getting mail id's of high level users
      if ($node->type == 'story' && $node->workbench_moderation_state_new == 'published') {
        //$rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, EDITOR, SEO);
        $rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, SEO, EDITOR);
      }
      else {
        $rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, EDITOR);
        //$rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, EDITOR);
      }

      //$user_email = get_email_by_roll($rid);
      $user_email[] = $itguser->mail;

      if (itg_workflow_stop_email_during_bulk_operation($_REQUEST)) {
        //workflow_get_mail_content($node, 'create', $user_email, $node->name, $user->name);
      }
      if ($node->field_story_source_type[LANGUAGE_NONE][0]['value'] != 'migrated') {
        if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {

          $preview_unique_id = $node->field_preview_unique_id['und'][0]['value'];

          if ($node->workbench_moderation_state_new != 'draft') {
            $itguser = user_load($node->uid);
            //getting mail id's of high level users
            if ($node->type == 'story' && $node->workbench_moderation_state_new == 'published') {
              //$rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, EDITOR, SEO);
              $rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, SEO, EDITOR);
              $user_email = get_email_by_roll($rid);
              workflow_get_mail_content($node, 'update', $user_email, $node->name, $user->name);
            }
            else {
              $rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, EDITOR);
              $user_email = get_email_by_roll($rid);
              workflow_get_mail_content($node, 'update', $user_email, $node->name, $user->name);
              //$rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, EDITOR);
            }

            //$user_email = get_email_by_roll($rid);
            $user_email[] = $itguser->mail;

            unset($_SESSION['node_preview_unique'][$node->nid]);
            if (itg_workflow_stop_email_during_bulk_operation($_REQUEST)) {
              //workflow_get_mail_content($node, 'create', $user_email, $node->name, $user->name);
            }
          }
        }
      }
    }
  }
//}
}

/**
 * Function for prevent sent email during widget add bulk operation.
 * @param array $request
 * @return boolean
 */
function itg_workflow_stop_email_during_bulk_operation($request) {
  if (isset($request['op']) && $request['op'] == 'do') {
    return FALSE;
  }
  return TRUE;
}

/**
 * Common Function for Getting all the cities of the story
 * @param array $tids
 * @return string
  */
function story_city_list($tids){
  $city = array();
  foreach ($tids as $tax){
    $city[] = $tax['taxonomy_term']->name;

  }
  return $all_city = implode(',', $city);
}

/**
 * Implements hook_mail
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_workflow_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_mail_to_task':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=iso-8859-1;',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );

      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Implements hook_views_api().
 *
 * This tells drupal that there is Views integration file named
 * itg_social_media.views.inc.
 *
 * {@inheritdoc}
 */
function itg_workflow_views_api() {
  
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'itg_workflow') . '/includes/views',
  );
  
}
