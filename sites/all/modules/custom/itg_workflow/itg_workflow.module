<?php

/**
 * @file
 * ITG workflow module.
 *
 * Provides customizations and functions for workflow.
 *
 */

/**
 * Implements hook_menu().
 * @return array $items
 */
function itg_workflow_menu() {

  $items['preview-content-logs-report'] = array(
    'title' => "Audit Logs",
    'page callback' => 'itg_workflow_logs_detailis',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK,
  );

  $items['preview-content-logs-report/nid/autocomplete'] = array(
    'page callback' => 'itg_workflow_content_nid',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK
  );

  $items['preview-content-logs-report/title/autocomplete'] = array(
    'page callback' => 'itg_workflow_content_title',
    'access arguments' => array('access itg story'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Autocomplete for node id.
 * @param int $nid
 */
function itg_workflow_content_nid($nid) {
  $matches = array();
  $content_type = itg_workflow_valid_content_type();
  $itg_query = db_select("node", "n");
  $itg_query->leftJoin('itg_workflow_preview_log', 'iwf', 'iwf.nid=n.nid');
  $itg_query->fields('n', array('nid'));
  $itg_query->condition('n.nid', '%' . db_like($nid) . '%', 'LIKE');
  $itg_query->condition('n.type', array($content_type), 'IN');
  $itg_query->isNull('iwf.nid');
  $itg_query->range(0, 50);
  $return = $itg_query->execute();
  foreach ($return as $row) {
    $matches[$row->nid] = check_plain($row->nid);
  }

  drupal_json_output($matches);
}

/**
 * Autocompelte helper for title.
 * @param title $title
 */
function itg_workflow_content_title($title) {
  $matches = array();
  $content_type = itg_workflow_valid_content_type();
  $itg_query = db_select("node", "n");
  $itg_query->leftJoin('itg_workflow_preview_log', 'iwf', 'iwf.nid=n.nid');
  $itg_query->fields('n', array('title'));
  $itg_query->condition('n.title', '%' . db_like($title) . '%', 'LIKE');
  $itg_query->condition('n.type', array($content_type), 'IN');
  $itg_query->isNull('iwf.nid');
  $itg_query->range(0, 50);
  $return = $itg_query->execute();
  foreach ($return as $row) {
    $matches[$row->title] = check_plain($row->title);
  }

  drupal_json_output($matches);
}

/**
 * function which gives valid content type for workflow.
 * @return array
 */
function itg_workflow_valid_content_type () {
  return array("blog" ,"story","videogallery","photogallery","podcast");
}

/**
 * Implements hook_form().
 * {@inheritdoc}
 */
function itg_workflow_preview_log_filter_form($form, &$form_state) {
  $form = array();

  $form['nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Node Id'),
    '#default_value' => isset($_GET['nid']) ? $_GET['nid'] : "",
    '#autocomplete_path' => 'preview-content-logs-report/nid/autocomplete',
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($_GET['title']) ? $_GET['title'] : "",
    '#autocomplete_path' => 'preview-content-logs-report/title/autocomplete',
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Content type'),
    '#options' => array("All" => "All", "blog" => "Blog", "story" => "Story", "videogallery" => "Videogallery", "photogallery" => "Photogallery", "podcast" => "Podcast"),
    '#default_value' => isset($_GET['type']) ? $_GET['type'] : "",
  );

  $form['items_per_page'] = array(
    '#type' => 'select',
    '#title' => t('Items per page'),
    '#options' => array(5 => 5, 10 => 10, 20 => 20, 40 => 40, 60 => 60),
    '#default_value' => isset($_GET['items_per_page']) ? $_GET['items_per_page'] : 20,
  );

  $form['submit'] = array(
    '#value' => 'Apply',
    '#type' => 'submit',
    '#attributes' => array('class' => array(' layout-apply',' btn-small'.' form-submit')),
    '#prefix' => '<div class = "layout-filter-btn">',
    '#suffix' => '<a class="layout-reset btn-small btn-reset" href="' . base_path() . 'preview-content-logs-report">Reset</a></div>',
  );

  return $form;
}

/**
 * Implements hook_submit()
 * {@inheritdoc}
 */
function itg_workflow_preview_log_filter_form_submit($form, &$form_state) {
  $item_per_page = $form_state['values']['items_per_page'];
  $nid = $form_state['values']['nid'];
  $title = $form_state['values']['title'];
  $type = $form_state['values']['type'];
  $form_state['redirect'] = array(
    'preview-content-logs-report',
    array(
      'query' => array(
        'nid' => $nid,
        'title' => $title,
        'type' => $type,
        'items_per_page' => $item_per_page,
      ),
    ),
  );
}

/**
 *  Give output of audit log.
 * @return string
 */
function itg_workflow_logs_detailis() {
  // configure the table header columns
  $header = array(
    array('data' => t('ID')),
    array('data' => t('Nid')),
    array('data' => t('Title')),
    array('data' => t('User')),
    array('data' => t('Type')),
    array('data' => t('Action')),
  );

  if (isset($_GET['items_per_page'])) {
    $items_per_page = $_GET['items_per_page'];
  }
  else {
    $items_per_page = 20;
  }

  $itg_query = db_select('node', 'n')->extend('PagerDefault')->limit($items_per_page);
  $itg_query->leftJoin('itg_workflow_preview_log', 'iwf', 'iwf.nid=n.nid');
  $itg_query->leftJoin('users', 'user', 'user.uid=n.uid');

  if (!isset($_GET['type']) || (isset($_GET['type']) && $_GET['type'] == "All")) {
    $itg_query->condition("n.type", array("story", "videogallery", "blog", "photogallery"), "IN");
  }
  else {
    $itg_query->condition("n.type", $_GET['type']);
  }

  if (isset($_GET['nid']) && !empty($_GET['nid'])) {
    $itg_query->condition("n.nid", $_GET['nid']);
  }

  if (isset($_GET['title']) && !empty($_GET['title'])) {
    $title_chunk_array = explode(" ", $_GET['title']);
    foreach ($title_chunk_array as $title_chunk) {
      $itg_query->condition('title', '%' . db_like($title_chunk) . '%', 'LIKE');
    }
  }
  $itg_query->condition('n.status',1);
  $itg_query->fields('n', array('nid', 'title', 'uid', 'type'));
  $itg_query->fields('user', array('name'));
  $itg_query->fields('iwf', array('nid'));
  $itg_query->isNull('iwf.nid');
  $itg_query->orderBy('n.nid', "DESC");
  $itg_result = $itg_query->execute()->fetchAll();
  $rows = array();
  $count = 0;

  foreach ($itg_result as $row) {
    $rows[] = array(
      array('data' => $count + 1),
      array('data' => $row->nid),
      array('data' => $row->title),
      array('data' => l($row->name, "user/$row->uid")),
      array('data' => $row->type),
      array('data' => l("<span class='view-link'>View</span>", "node/$row->nid", array("html" => TRUE, "attributes" => array("target" => "_blank")))),
    );
    $count++;
  }

  $filter_form = drupal_get_form('itg_workflow_preview_log_filter_form');
  $output = render($filter_form);
//  $output .= '<div class="view"><div class="attachment"><span class="count">Count (' .$total_items . ') </span>';
//  $output .= '</div></div>';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('views-table')), 'empty' => 'No result found.'));

  // add the pager
  $output .= theme('pager');

  return $output;
}
/**
 * Implements hook_form_alter().
 * {@inheritdoc}
 */
function itg_workflow_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
    case 'story_node_form':
    case 'photogallery_node_form':
    case 'blog_node_form':
    case 'podcast_node_form':
    case 'videogallery_node_form':
      $form['field_preview_unique_id']['#attributes']['class'][] = 'hide';
      module_load_include('inc', 'itg_workflow', 'includes/itg_workflow_preview_log');
      $preview_id = _get_unique_id_for_node_field();
      $form['field_preview_unique_id'][LANGUAGE_NONE][0]['value']['#default_value'] = $preview_id;
      $form['actions']['submit']['#submit'][] = 'itg_workflow_preview_log_submit';
      $form['actions']['preview']['#submit'][] = 'itg_workflow_preview_log_submit';
      $form['#after_build'][] = 'itg_workflow_after_build';
      break;

    case 'views_exposed_form':
      $form['#after_build'][] = 'itg_workflow_views_exposed_form_after_build';
      break;
  }
}

function itg_workflow_preview_log_submit($form, $form_state) {
  global $user;
  $preview_unique_id = $form_state['values']['field_preview_unique_id']['und'][0]['value'];
  $user_id = $user->uid;
  $arg = arg();
  //if ($arg[0] == 'node' && $arg[1] == 'add') {
    // Give nid default value 0.
    itg_workflow_preview_db_merge($preview_unique_id, $user_id, 0);
  //}
}

/**
 * Function to save preview values.
 * 
 * @param string $preview_unique_id
 * @param int $user_id
 * @param ind $nid
 */
function itg_workflow_preview_db_merge($preview_unique_id, $user_id, $nid = 0) {
  try {
    db_merge('itg_workflow_preview_log')
        ->key(array(
          'preview_id' => $preview_unique_id,
          'uid' => $user_id,
        ))
        ->fields(array(
          'preview_id' => $preview_unique_id,
          'uid' => $user_id,
          'nid' => $nid,
        ))->execute();
  } catch (Exception $ex) {
    drupal_set_message($ex->getMessage(), 'error');
  }
}

/**
 * After build for story form.
 * @param array $form
 * @param array $form_state
 */
function itg_workflow_after_build($form, &$form_state) {
  global $user, $base_url;

  // code for sequence change of modration field
  $form['additional_settings']['group']['#groups']['additional_settings'][0]['#weight'] = -1;
  $log = $form['revision_information']['log'];
  $state = $form['revision_information']['workbench_moderation_state_new'];

  unset($form['revision_information']['log']);
  unset($form['revision_information']['workbench_moderation_state_new']);

  $form['revision_information']['workbench_moderation_state_new'] = $state;

  // Code for rejection master message
  if (!empty($form['#entity']->workbench_moderation['current']->state) && $form['#entity']->workbench_moderation['current']->state == 'needs_review') {
    $vid = taxonomy_vocabulary_machine_name_load('reasons_for_reject');
    $terms = taxonomy_get_tree($vid->vid);
    foreach ($terms as $key => $val) {
      $term_name[$val->name] = $val->name;
    }
    $form['revision_information']['reject_msg'] = array(
      '#type' => 'select',
      '#title' => t('Remarks'),
      '#options' => $term_name,
      '#attributes' => array('class' => array('reasons-form-msg')),
      '#prefix' => '<div class="reasons-form">',
      '#suffix' => '</div>',
    );
  }

  $form['revision_information']['log'] = $log;

  $form['revision_information']['log']['#title'] = t('Remarks');

  // hide workbench dropdown
  drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-revision-information").show();
              jQuery(".form-item-workbench-moderation-state-new").hide();
              jQuery("#edit-field-story-archive").hide();              
            });', array('type' => 'inline', 'scope' => 'footer'));

  if (array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) 
          || array_key_exists(COPY_EDITOR, $user->roles) 
          || array_key_exists(EDITOR, $user->roles) 
          || array_key_exists(UGC_MODERATOR, $user->roles) 
          || array_key_exists(SITE_ADMIN, $user->roles)) {
    if (!isset($form['#node']->workbench_moderation['current'])) {
      $state_class = ' published';
      $submit_name = 'Publish';
      $form['actions']['submit']['#value'] = t('Save as Draft');
    }
    elseif (isset($form['#node']->workbench_moderation['current'])) {
      if ($form['#node']->workbench_moderation['current']->state == 'draft') {
        $state_class = ' published';
        $submit_name = 'Publish';
        $form['actions']['submit']['#value'] = t('Save as Draft');
      }
      elseif ($form['#node']->workbench_moderation['current']->state == 'needs_review') {
        $submit_name = '';
        $state_class = ' published';
        $form['actions']['submit']['#attributes']['class'][] = 'edit-submit-class';

        drupal_add_js('jQuery(document).ready(function() {              
                    jQuery(".form-item-workbench-moderation-state-new").show();
                    jQuery(".reasons-form").hide();              
                    jQuery("#edit-log").val("");

                     jQuery("#edit-workbench-moderation-state-new").change(function() {
                      jQuery("#edit-log").val("");
                      if(jQuery("#edit-workbench-moderation-state-new").val() == "rejected") {                  
                        jQuery(".form-item-log").hide();
                        jQuery("#edit-log").val(jQuery(".reasons-form-msg").val());
                        jQuery(".reasons-form").show();

                        jQuery(".reasons-form-msg").change(function() {
                          jQuery("#edit-log").val(jQuery(".reasons-form-msg").val());
                        });
                      } else {
                        jQuery(".form-item-log").show();
                        jQuery(".reasons-form").hide();
                      }
                    });
                });', array('type' => 'inline', 'scope' => 'footer'));
      }
    }
  }
  elseif (array_key_exists(AUTHOR_GUEST, $user->roles) || array_key_exists(INTERN, $user->roles) || array_key_exists(SUBEDITOR_SR_SUB, $user->roles)) {
    if (!isset($form['#node']->workbench_moderation['current'])) {
      $submit_name = 'Submit for Review';
      $state_class = ' needs_review';
      $form['actions']['submit']['#value'] = t('Save as Draft');
    }
    elseif (isset($form['#node']->workbench_moderation['current']) && ($form['#node']->workbench_moderation['current']->state == 'draft' || $form['#node']->workbench_moderation['current']->state == 'needs_review' || $form['#node']->workbench_moderation['current']->state == 'needs_modification')) {
      if ($form['#node']->workbench_moderation['current']->state == 'needs_review') {
        $submit_name = '';
      }
      elseif ($form['#node']->workbench_moderation['current']->state == 'needs_modification') {
        $submit_name = 'Submit for Review';
        $state_class = ' needs_review';
        $form['actions']['submit']['#value'] = t('Save as Draft');

        drupal_add_js('jQuery(document).ready(function() {
                      jQuery("#edit-workbench-moderation-state-new").val("needs_modification");              
                });', array('type' => 'inline', 'scope' => 'footer'));
      }
      elseif ($form['#node']->workbench_moderation['current']->state == 'published') {
        $submit_name = '';
      }
      elseif ($form['#node']->workbench_moderation['current']->state == 'draft') {
        $submit_name = 'Submit for Review';
        $state_class = ' needs_review';
        $form['actions']['submit']['#value'] = t('Save as Draft');
      }
    }
  }

  if (!empty($submit_name)) {
    $form['actions']['submit_link'] = array(
      '#markup' => '<a href="javascript:void(0)" id="story_submit_link" class="button' . $state_class . ' btn-submit">' . t($submit_name) . '</a>',
      '#weight' => 20,
    );
  }

  $settings['base_url'] = $base_url;
  $settings['uid'] = $user->uid;
  $settings['ntype'] = $form['type']['#value'];

  drupal_add_js(array('itg_workflow' => array('settings' => $settings)), array('type' => 'setting'));

  drupal_add_js(drupal_get_path('module', 'itg_workflow') . '/js/itg_workflow.js', array('weight' => 1));

  // Code for UGC. For now below code is commented may be we need it in future.
  /*
    $arg3 = arg(3);

    if (arg(1) == 'add' && isset($arg3) && is_numeric($arg3)) {
    drupal_add_js('jQuery(document).ready(function() {
    jQuery("#edit-submit").hide();
    });', array('type' => 'inline', 'scope' => 'footer'));
    }
   * 
   */

  return $form;
}

/**
 * Implements hook_node_presave.
 * @param object $node
 */
function itg_workflow_node_presave($node) {
  if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
    if (!empty($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'published' && $node->status == 1) {
      $node->workbench_moderation_state_new = 'published';
    }
  }
}

/**
 * After build for views exposed form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function itg_workflow_views_exposed_form_after_build($form, &$form_state) {
  global $user, $base_url;

  $settings = array();

  $settings['form_id'] = $form['#id'];
  drupal_add_js(array('itg_workflow' => array('settings' => $settings)), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'itg_workflow') . '/js/itg_workflow_form.js');

  if ($form['#id'] == 'views-exposed-form-strory-menegment-page-6' || $form['#id'] == 'views-exposed-form-photo-gallery-management-page-6') {
    $form['state']['#options'] = array('All' => '-All-',
      'needs_review' => 'Submitted for Review',
      'rejected' => 'Rejected',
      'needs_modification' => 'Needs Modification');
  }
  elseif ($form['#id'] == 'views-exposed-form-strory-menegment-page-5') {
    $form['field_story_schedule_date_time_value_1_op']['#options'] = array('empty' => t('-All-'), '<' => 'Published', '>=' => t('To Be Live'));

    drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-field-story-schedule-date-time-value-value-wrapper").hide();              
            });', array('type' => 'inline', 'scope' => 'footer'));
  }
  elseif ($form['#id'] == 'views-exposed-form-strory-menegment-page-1' || $form['#id'] == 'views-exposed-form-strory-menegment-page-12') {

    $form['field_story_schedule_date_time_value_op']['#options'] = array('empty' => t('-All-'), '<' => 'Published', '>=' => t('To Be Live'));

    drupal_add_js('jQuery(document).ready(function() {
              jQuery("#edit-field-story-schedule-date-time-value-value-wrapper").hide();
              jQuery("#edit-field-story-schedule-date-time-value-op").click(function() {                     
                     jQuery("#edit-field-story-schedule-date-time-value-value-wrapper").hide();                     
                 });
            });', array('type' => 'inline', 'scope' => 'footer'));
  }

  return $form;
}

/**
 * Implementation of hook_views_query_alter
 * {@inheritdoc}
 */
function itg_workflow_views_query_alter(&$view, &$query) {

  // < published and >= approved
  // for story list
  if ($view->name != 'related_photo_video_content') {
    if ((!isset($_REQUEST['field_story_schedule_date_time_value_1_op'])) && $view->current_display == 'page_5') {
      unset($view->query->where[1]['conditions'][4]);
    }
    elseif ((!isset($_REQUEST['field_story_schedule_date_time_value_op'])) && $view->current_display == 'page_1') {
      unset($view->query->where[1]['conditions'][4]);
    }
  }

  if ($view->name == 'preview_content_report' && $view->current_display == 'page') {
    $query->add_where(1, 'itg_workflow_preview_log.nid', NULL);
  }
}

function itg_workflow_views_pre_render(&$view) {

  if ($view->name == "preview_content_report" && $view->current_display == 'page') {
    $header_content = '<span class="count">Count (' . $view->total_rows . ') </span>';
    $view->attachment_before = $header_content;
  }
}

/**
 * Implementation of hook_query_alte
 * {@inheritdoc} 
 */
function itg_workflow_query_alter(QueryAlterableInterface $query) {
  if (isset($query->hasTag) && $query->hasTag('views')) {
    static $count;
    $view = & $query->getMetaData('view');

    if ($view->name == 'view_moderation_history' || $view->current_display == 'block_1' || $view->current_display == 'page_1') {
      $query->groupBy('node_revision_vid');
    }
  }
}

/**
 * Implements hook_node_access.
 * Check access for forum menu item.
 * {@inheritdoc}
 */
function itg_workflow_node_access($node, $op, $account) {
  global $user;

  $arr_source_type = array('issue', 'supplement');

  if (isset($node->type) && $node->type == 'story' && $op == 'update' && (isset($node->field_story_source_type[LANGUAGE_NONE]) && !in_array($node->field_story_source_type[LANGUAGE_NONE][0]['value'], $arr_source_type))) {
    $story_expiry_date = strtotime($node->field_story_expiry_date[LANGUAGE_NONE][0]['value']);
    $current_time = time();

    if ($node->status == 0 && (($node->field_story_archive[LANGUAGE_NONE][0]['value'] == 'Yes') || $node->workbench_moderation['current']->state == 'rejected'))
      return NODE_ACCESS_DENY;
    elseif (($story_expiry_date < $current_time) && (arg(0) != 'issue-listing'))
      return NODE_ACCESS_DENY;
  } elseif (isset($node->type) && $op == 'update' && ($node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery')) {
    if (!empty($node) && $node->status == 0 && ((!empty($node->field_story_archive[LANGUAGE_NONE][0]['value']) && $node->field_story_archive[LANGUAGE_NONE][0]['value'] == 'Yes') || $node->workbench_moderation['current']->state == 'rejected')) { //shravan
      return NODE_ACCESS_DENY;
    }
  }

  // code for lock story  
  if (isset($node->type) && $node->type == 'story' && $node->status == 1) {
    if (!array_key_exists(COPY_EDITOR, $user->roles) && !array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) && !array_key_exists(EDITOR, $user->roles)) {
      if (!empty($node->field_story_configurations[LANGUAGE_NONE])) {
        foreach ($node->field_story_configurations[LANGUAGE_NONE] as $key => $val) {
          if ($val['value'] == 'display_lock') {
            return NODE_ACCESS_DENY;
          }
        }
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_view.
 * {@inheritdoc}
 */
function itg_workflow_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
    $node->moderation_history_block = views_embed_view('view_moderation_history', 'block_2');
  }
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}   
 */
function itg_workflow_node_validate($node, $form, &$form_state) {
  // Code for check remarks field is empty or not
  if ($node->type == 'story' || $node->type == 'photogallery' || $node->type == 'blog' || $node->type == 'podcast' || $node->type == 'videogallery') {
    if (empty($node->log) && (($node->workbench_moderation_state_new == 'needs_modification') || ($node->workbench_moderation_state_new == 'rejected'))) {
      form_set_error('log', t("Remarks field is required."));
    }
  }
}

/**
 * Bulk opration related work
 * @param type $field1:edit-bundle-blog-appendfield-story-archive
 * @param type $field2:edit-bundle-blog-field-story-archive-und    
 */
function itg_workflow_bulk_opration_related($field1, $field2) {
  drupal_add_js('jQuery(document).ready(function() {
                jQuery("#edit-actionviews-bulk-operations-modify-action").val("Archive");
                var myInputBoxID = ' . $field1 . ';
                jQuery("label[for=" + myInputBoxID + "]").hide();
                jQuery("#"+myInputBoxID).hide();
                jQuery("#edit-tokens").hide();
                jQuery("#edit-actions-submit").val("Archive");
                var fieldId = ' . $field2 . ';
                jQuery("#"+fieldId+"-yes").attr("checked", true);
                jQuery("#"+fieldId).hide();               
             });', array('type' => 'inline', 'scope' => 'footer'));
}

/**
 * Implements hook_node_insert
 * @param object $node
 */
function itg_workflow_node_insert($node) {
  global $user;
  
  if ($node->type == 'story' 
          || $node->type == 'photogallery' 
          || $node->type == 'blog' 
          || $node->type == 'podcast' 
          || $node->type == 'videogallery') {    

    /*if (!array_key_exists(COPY_EDITOR, $user->roles) &&
            !array_key_exists(SECTION_EDITOR_ANCHOR, $user->roles) &&
            !array_key_exists(EDITOR, $user->roles) &&
            !array_key_exists(SITE_ADMIN, $user->roles) &&
            !($node->workbench_moderation_state_new == 'draft')) {

      //getting mail id's of high level users
      $rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, EDITOR);
      $user_email = get_email_by_roll($rid);
      workflow_get_mail_content($node, 'create', $user_email, $node->name, $user->name);
     }*/
    if(!empty($node->field_preview_unique_id['und'])){
    $preview_unique_id = $node->field_preview_unique_id['und'][0]['value'];
    $user_id = $user->uid;
    $node_id = $node->nid;

    try {
      db_update('itg_workflow_preview_log')
          ->fields(array(
            'nid' => $node_id,
            'preview_id' => $preview_unique_id,
            'uid' => $user_id,
          ))
          ->condition('preview_id', $preview_unique_id)
          ->condition('uid', $user_id)
          ->execute();
    } catch (Exception $ex) {
      drupal_set_message($ex->getMessage());
    }
    unset($_SESSION['node_preview_unique']);
  }
          }

}

/**
 * Implements hook_node_update
 * @param object $node
 */
function itg_workflow_node_update($node) {
  global $user;   
  
  if ($node->type == 'story' 
          || $node->type == 'photogallery' 
          || $node->type == 'blog' 
          || $node->type == 'podcast' 
          || $node->type == 'videogallery') {
    
    $preview_unique_id = $node->field_preview_unique_id['und'][0]['value'];
    
    if ($node->workbench_moderation_state_new != 'draft') {
      $itguser = user_load($node->uid);
      //getting mail id's of high level users
      if($node->type == 'story' && $node->workbench_moderation_state_new == 'published') {       
        //$rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, EDITOR, SEO);
        $rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, SEO);
      } else {
        $rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR);
        //$rid = array(COPY_EDITOR, SECTION_EDITOR_ANCHOR, EDITOR);
      }
      
      $user_email = get_email_by_roll($rid);
      $user_email[] = $itguser->mail;
      
      // Delete first if user has already created log.
      try {
      // Condition to delete 0 nid and previous added nid logs value.
      $or = db_or()->condition('nid', $node->nid)->condition('nid', 0);
      db_delete('itg_workflow_preview_log')
            ->condition($or)
            ->condition('uid', $node->uid)
            ->execute();
      } catch (Exception $ex) {
          drupal_set_message($ex->getMessage());
      }
      
      try {
        db_insert('itg_workflow_preview_log')
            ->fields(array(
              'nid' => $node->nid,
              'preview_id' => $preview_unique_id,
              'uid' => $node->uid,
            ))
            ->execute();
      }
      catch (Exception $ex) {
        drupal_set_message($ex->getMessage());
      }
      
      unset($_SESSION['node_preview_unique']);
      
      workflow_get_mail_content($node, 'create', $user_email, $node->name, $user->name);
    }
    


  }
}

/**
 * Get Mail content
 * @global String $base_url
 * @param object $node
 * @param string $event
 * @param string $to
 * @param string $user_name
 * @param string $current_user_name
 * @return 
 */
function workflow_get_mail_content($node, $event, $to, $user_name, $current_user_name) {

  global $base_url;

  $content_type = $node->type;
  $review = $node->workbench_moderation_state_new;
  if ($event == 'create') {
    $task_subject = 'A new ' . $content_type . ' has been submitted for your review, please find details below.';
    $submitted_by = 'Submitted By: ' . $current_user_name;
    $subject = ucfirst($content_type) . ' Submitted ' . $node->title;
  }
  elseif ($event == 'update') {
    if ($review == 'needs_review') {
      $task_subject = 'A new ' . $content_type . ' has been updated and submitted for your review, please find details below.';
    }
    else if ($review == 'rejected') {
      $task_subject = 'Your ' . $content_type . ' has been rejected, please find details below.';
    }
    else if ($review == 'needs_modification') {
      $task_subject = 'Your ' . $content_type . ' has been required some modification, please find details below.';
    }
    else if ($review == 'published') {
      $task_subject = 'Your ' . $content_type . ' has been published, please find details below.';
    }

    $submitted_by = 'Updated By: ' . $current_user_name;
    $subject = ucfirst($content_type) . ' Updation ' . $node->title;
  }

  $node_url = $base_url . '/node/' . $node->nid;
  $content = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
              <html xmlns:v="urn:schemas-microsoft-com:vml">
                <head><title></title></head>
                <body style="margin:0; padding:0;">';
  $content .= 'Dear Team,';
  $content .= '<br /><br />' . $task_subject;
  $content .= '<br /><br />' . ucfirst($content_type) . ' Title: ' . $node->title;
  $content .= '<br />URL: ' . $node_url;
  $content .= '<br />' . $submitted_by;
  $content .= '<br /><br /><br />Thanks,<br>ITG Team';
  $content .= '</body>';
  $content .= '</html>';


  $params = array(
    'body' => $content,
    'subject' => $subject,
  );

  $mail = drupal_mail('itg_workflow', 'send_mail_to_task', $to, language_default(), $params, 'no-reply@kelltontech.com', TRUE);
  if ($mail['result']) {
    return TRUE;
  }
  else {
    $error_msg = 'Failed to send the email!';
    watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
    return FALSE;
  }
}

/**
 * Implements hook_mail
 * @param string $key
 * @param string $message
 * @param array $params
 */
function itg_workflow_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_mail_to_task':
      $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=iso-8859-1;',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );

      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      break;
  }
}

/**
 * Get email by roll
 * @param string $key
 * @param string $message
 * @param array $params
 */
function get_email_by_roll($id) {
  $query = db_select('users', 'u');
  $query->fields('u', array('mail'));
  $query->join('users_roles', 'ur', 'ur.uid = u.uid');
  $query->condition('ur.rid', $id, IN);
  $result = $query->execute();

  foreach ($result as $val) {
    $value[] = $val->mail;
  }
 return $value;
}

/**
 * Implements hook_views_api().
 *
 * This tells drupal that there is Views integration file named
 * itg_social_media.views.inc.
 *
 * {@inheritdoc}
 */
function itg_workflow_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'itg_workflow') . '/includes/views',
  );
}
