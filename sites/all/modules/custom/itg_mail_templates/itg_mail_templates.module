<?php

/**
 * Implements hook_token_info().
 */
function itg_mail_templates_token_info() {
  $info = array();
  $info['types']['itg_mail_token'] = array(
    'name' => t('ITG Mail Tokens'),
    'description' => t('A token type for ITG Mail Tokens.'),
  );
  $info['tokens']['itg_mail_token']['itg_site_name'] = array(
    'name' => t('ITG Site Name'),
    'description' => t('A token that will be used for ITG Site Name.'),
  );
  $info['tokens']['itg_mail_token']['itg_author'] = array(
    'name' => t('ITG Content Author'),
    'description' => t('A token that will be used for ITG Content Author in Mail Body.'),
  );
  $info['tokens']['itg_mail_token']['itg_node_title'] = array(
    'name' => t('ITG Node Title'),
    'description' => t('A token that will be used for ITG Content Title in Mail Body.'),
  );
  $info['tokens']['itg_mail_token']['itg_loyalty_user'] = array(
    'name' => t('ITG Loyalty User'),
    'description' => t('A token that will be used for ITG Loyalty User Name.'),
  );
  $info['tokens']['itg_mail_token']['itg_loyalty_expiry'] = array(
    'name' => t('ITG Loyalty and Reward Expiry'),
    'description' => t('A token that will be used for ITG Loyalty and Reward Expiry.'),
  );
  $info['tokens']['itg_mail_token']['itg_loyalty_points'] = array(
    'name' => t('ITG Loyalty Points'),
    'description' => t('A token that will be used for ITG Loyalty Expiry.'),
  );
  $info['tokens']['itg_mail_token']['itg_product_name'] = array(
    'name' => t('ITG Product Name'),
    'description' => t('A token that will be used for ITG Product Name.'),
  );
  $info['tokens']['itg_mail_token']['itg_product_code'] = array(
    'name' => t('ITG Product Code'),
    'description' => t('A token that will be used for ITG Product Code.'),
  );
  $info['tokens']['itg_mail_token']['itg_product_count'] = array(
      'name' => t('ITG Product/Inventry Count'),
      'description' => t('A token that will be used for ITG Product/Inventry Count.'),
  );
  $info['tokens']['itg_mail_token']['itg_expert_question'] = array(
    'name' => t('ITG Ask an Expert Question'),
    'description' => t('A token that will be used for ITG Ask an Expert Question.'),
  );
  $info['tokens']['itg_mail_token']['itg_expert_name'] = array(
    'name' => t('ITG Ask an Expert Name'),
    'description' => t('A token that will be used for ITG Ask an Expert Name.'),
  );
  $info['tokens']['itg_mail_token']['itg_expert_email'] = array(
    'name' => t('ITG Ask an Expert Email'),
    'description' => t('A token that will be used for ITG ITG Ask an Expert Email.'),
  );
  $info['tokens']['itg_mail_token']['itg_expert_city'] = array(
    'name' => t('ITG Ask an Expert City'),
    'description' => t('A token that will be used for ITG Ask an Expert City.'),
  );
  $info['tokens']['itg_mail_token']['itg_expert_state'] = array(
    'name' => t('ITG Ask an Expert State'),
    'description' => t('A token that will be used for ITG Ask an Expert State.'),
  );
  $info['tokens']['itg_mail_token']['itg_loggedin_user'] = array(
    'name' => t('ITG Logged In User Name'),
    'description' => t('A token that will be used for ITG Logged In User Name.'),
  );
  $info['tokens']['itg_mail_token']['itg_task_date_time'] = array(
    'name' => t('ITG Task Date/Time'),
    'description' => t('A token that will be used for ITG Task Date/Time.'),
  );
  $info['tokens']['itg_mail_token']['itg_node_body'] = array(
    'name' => t('ITG Task/Idea'),
    'description' => t('A token that will be used for ITG Task/Idea.'),
  );
  $info['tokens']['itg_mail_token']['itg_node_title_link'] = array(
    'name' => t('ITG Node Title With Link'),
    'description' => t('A token that will be used for ITG Node Title With Link.'),
  );
  $info['tokens']['itg_mail_token']['itg_task_comment'] = array(
    'name' => t('ITG Task Comment'),
    'description' => t('A token that will be used for ITG Task Comment.'),
  );
  $info['tokens']['itg_mail_token']['itg_task_assignee'] = array(
    'name' => t('ITG Task Assignee'),
    'description' => t('A token that will be used for ITG Task Comment.'),
  );
  $info['tokens']['itg_mail_token']['itg_task_assigner'] = array(
    'name' => t('ITG Task Assigner'),
    'description' => t('A token that will be used for ITG Task Comment.'),
  );
  $info['tokens']['itg_mail_token']['itg_account_activation_link'] = array(
    'name' => t('ITG Account Activation'),
    'description' => t('A token that will be used for ITG Account Activation.'),
  );
  $info['tokens']['itg_mail_token']['itg_node_type'] = array(
    'name' => t('ITG NODE TYPE'),
    'description' => t('A token that will be used for ITG Node Type.'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function tets_token_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'itg_mail_token') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'itg_node_type':
          $value = '[ITG_NODE_TYPE]';
          $replacements[$original] = $value;
          break;
        case 'itg_account_activation_link':
          $value = '[ITG_ACCOUNT_ACTIVATION_LINK]';
          $replacements[$original] = $value;
          break;
        case 'itg_task_comment':
          $value = '[ITG_TASK_COMMENT]';
          $replacements[$original] = $value;
          break;
        case 'itg_loggedin_user':
          $value = '[ITG_LOGGED_IN_USER]';
          $replacements[$original] = $value;
          break;
        case 'itg_task_date_time':
          $value = '[ITG_TASK_DATE_TIME]';
          $replacements[$original] = $value;
          break;
        case 'itg_node_body':
          $value = '[ITG_TASK_IDEA]';
          $replacements[$original] = $value;
          break;
        case 'itg_node_title_link':
          $value = '[ITG_NODE_TITLE_WITH_LINK]';
          $replacements[$original] = $value;
          break;
        case 'itg_author':
          $value = '[ITG_AUTHOR]';
          $replacements[$original] = $value;
          break;
        case 'itg_node_title':
          $value = '[ITG_NODE_TITLE]';
          $replacements[$original] = $value;
          break;
        case 'itg_loyalty_user':
          $value = '[ITG_LOYALTY_USER]';
          $replacements[$original] = $value;
          break;
        case 'itg_loyalty_expiry':
          $value = '[ITG_LOYALTY_EXP]';
          $replacements[$original] = $value;
          break;
        case 'itg_loyalty_points':
          $value = '[ITG_LOYALTY_POINTS]';
          $replacements[$original] = $value;
          break;
        case 'itg_site_name':
          $value = '[ITG_SITE_NAME]';
          $replacements[$original] = $value;
          break;
        case 'itg_product_name':
          $value = '[ITG_PRODUCT_NAME]';
          $replacements[$original] = $value;
          break;
        case 'itg_product_code':
          $value = '[ITG_PRODUCT_CODE]';
          $replacements[$original] = $value;
          break;
        case 'itg_product_count':
          $value = '[ITG_PRODUCT_COUNT]';
          $replacements[$original] = $value;
          break;
        case 'itg_expert_question':
          $value = '[ITG_EXPERT_QUESTION]';
          $replacements[$original] = $value;
          break;
        case 'itg_expert_name':
          $value = '[ITG_EXPERT_NAME]';
          $replacements[$original] = $value;
          break;
        case 'itg_expert_email':
          $value = '[ITG_EXPERT_EMAIL]';
          $replacements[$original] = $value;
          break;
        case 'itg_expert_city':
          $value = '[ITG_EXPERT_CITY]';
          $replacements[$original] = $value;
          break;
        case 'itg_expert_state':
          $value = '[ITG_EXPERT_STATE]';
          $replacements[$original] = $value;
          break;
      }
    }
  }
  return $replacements;
}

/*
 * Implements hook_node_validate
 */
function itg_mail_templates_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'mail_templates_node_form') {
    $form['title']['#attributes'] = array('readonly' => 'readonly');
    drupal_add_js("jQuery('#edit-field-mail-template-category-und').change(function(){
          var select_option = jQuery('#edit-field-mail-template-category-und option:selected').text(); 
          jQuery('#edit-title').val(select_option);
        });", array('type' => 'inline', 'scope' => 'footer'));
  }
}

/**
 * Implements hook_node_validate().
 * {@inheritdoc}
 */
function itg_mail_templates_node_validate($node, $form, &$form_state) {
  if (empty($form['nid']['#value'])) {
    $title = isset($node->title) ? $node->title : '';
    $data_val['title'] = array();
    if ($node->title == 'Ask an Expert') {
      $expert_case = $node->field_ask_an_expert_case[LANGUAGE_NONE][0]['value'];
      $data_val['field_ask_an_expert_case_value'] = array();
      $query = db_select('node', 'n');
      $query->leftJoin('field_data_field_ask_an_expert_case', 'aaec', 'n.nid = aaec.entity_id');
      $query->condition('n.status', 1, '=');
      $query->fields('n', array('title', 'nid'));
      $query->fields('aaec', array('field_ask_an_expert_case_value'));
      $query->condition('n.title', $title, '=');
      $query->condition('n.type', 'mail_templates', '=');
      $result = $query->execute();
      $records = $result->fetchAll();
      foreach ($records as $k => $data_vals) {
        $data_val['title'] = $data_vals->title;
        $data_val['field_ask_an_expert_case_value'][] = $data_vals->field_ask_an_expert_case_value;
      }
      if ($data_val['title'] == $title && in_array($expert_case, $data_val['field_ask_an_expert_case_value'])) {
        form_set_error('title', t("Mail Template for @title against @expert_case is already Exists, You can only update this mail template", array('@title' => $title, '@expert_case' => ucwords(str_replace('_', " ", $expert_case)))));
      }
    }

    if ($node->title == 'Follow Story') {
      $result = db_query("SELECT title from {node} n WHERE n.title = :title AND n.type = :type", array(":title" => $title, ":type" => "mail_templates"))->fetchField();
      if (!empty($result)) {
        form_set_error('title', t("Mail Template for @title is already Exists, you can only update this mail template", array('@title' => $title)));
      }
    }

    if ($node->title == 'Sign up') {
      $result = db_query("SELECT title from {node} n WHERE n.title = :title AND n.type = :type", array(":title" => $title, ":type" => "mail_templates"))->fetchField();
      if (!empty($result)) {
        form_set_error('title', t("Mail Template for @title is already Exists, you can only update this mail template", array('@title' => $title)));
      }
    }

    if ($node->title == 'Loyalty Points Expiration') {
      $result = db_query("SELECT title from {node} n WHERE n.title = :title AND n.type = :type", array(":title" => $title, ":type" => "mail_templates"))->fetchField();
      if (!empty($result)) {
        form_set_error('title', t("Mail Template for @title is already Exists, you can only update this mail template", array('@title' => $title)));
      }
    }

    if ($node->title == 'Product Expiration') {
      $offer_period = $node->field_product_expiration_status[LANGUAGE_NONE][0]['value'];
      $data_val['field_product_expiration_status_value'] = array();
      $query = db_select('node', 'n');
      $query->leftJoin('field_data_field_product_expiration_status', 'pes', 'n.nid = pes.entity_id');
      $query->condition('n.status', 1, '=');
      $query->fields('n', array('title', 'nid'));
      $query->fields('pes', array('field_product_expiration_status_value'));
      $query->condition('n.title', $title, '=');
      $query->condition('n.type', 'mail_templates', '=');
      $result = $query->execute();
      $records = $result->fetchAll();
      foreach ($records as $k => $data_vals) {
        $data_val['title'] = $data_vals->title;
        $data_val['field_product_expiration_status_value'][] = $data_vals->field_product_expiration_status_value;
      }
      if ($data_val['title'] == $title && in_array($offer_period, $data_val['field_product_expiration_status_value'])) {
        form_set_error('title', t("Mail Template for @title against @offer_period is already Exists, You can only update this mail template", array('@title' => $title, '@offer_period' => ucwords(str_replace('_', " ", $offer_period)))));
      }
    }

    if ($node->title == 'UGC') {
      $ugc_comment = $node->field_ugc_comments_status[LANGUAGE_NONE][0]['value'];
      $data_val['field_ugc_comments_status_value'] = array();
      $query = db_select('node', 'n');
      $query->leftJoin('field_data_field_ugc_comments_status', 'ucs', 'n.nid = ucs.entity_id');
      $query->condition('n.status', 1, '=');
      $query->fields('n', array('title', 'nid'));
      $query->fields('ucs', array('field_ugc_comments_status_value'));
      $query->condition('n.title', $title, '=');
      $query->condition('n.type', 'mail_templates', '=');
      $result = $query->execute();
      $records = $result->fetchAll();
      foreach ($records as $k => $data_vals) {
        $data_val['title'] = $data_vals->title;
        $data_val['field_ugc_comments_status_value'][] = $data_vals->field_ugc_comments_status_value;
      }
      if ($data_val['title'] == $title && in_array($ugc_comment, $data_val['field_ugc_comments_status_value'])) {
        form_set_error('title', t("Mail Template for @title against @ugc_comment is already Exists, You can only update this mail template", array('@title' => $title, '@ugc_comment' => ucwords(str_replace('_', " ", $ugc_comment)))));
      }
    }

    if ($node->title == 'Task/Idea') {
      $task_status = $node->field_new_task_status[LANGUAGE_NONE][0]['value'];
      $data_val['field_new_task_status_value'] = array();
      $query = db_select('node', 'n');
      $query->leftJoin('field_data_field_new_task_status', 'nts', 'n.nid = nts.entity_id');
      $query->condition('n.status', 1, '=');
      $query->fields('n', array('title', 'nid'));
      $query->fields('nts', array('field_new_task_status_value'));
      $query->condition('n.title', $title, '=');
      $query->condition('n.type', 'mail_templates', '=');
      $result = $query->execute();
      $records = $result->fetchAll();
      foreach ($records as $k => $data_vals) {
        $data_val['title'] = $data_vals->title;
        $data_val['field_new_task_status_value'][] = $data_vals->field_new_task_status_value;
      }
      if ($data_val['title'] == $title && in_array($task_status, $data_val['field_new_task_status_value'])) {
        form_set_error('title', t("Mail Template for @title against @task_status is already Exists, You can only update this mail template", array('@title' => $title, '@task_status' => ucwords(str_replace('_', " ", $task_status)))));
      }
    }

    if ($node->title == 'CMS Mail Template') {

      $template_cat = $node->field_cms_mail_template_category[LANGUAGE_NONE][0]['value'];
      $cms_status = $node->field_cms_status[LANGUAGE_NONE][0]['value'];
      if ($cms_status == 'updated') {
        $query = db_select('node', 'n');
        $query->leftJoin('field_data_field_cms_mail_template_category', 'cmtc', 'n.nid = cmtc.entity_id');
        $query->leftJoin('field_data_field_cms_status', 'cs', 'n.nid = cs.entity_id');
        $query->condition('n.status', 1, '=');
        $query->fields('n', array('title', 'nid'));
        $query->fields('cmtc', array('field_cms_mail_template_category_value'));
        $query->fields('cs', array('field_cms_status_value'));

        $query->condition('n.title', $title, '=');
        $query->condition('n.type', 'mail_templates', '=');
        $query->condition('cmtc.field_cms_mail_template_category_value', $template_cat, '=');
        $query->condition('cs.field_cms_status_value', $cms_status, '=');
        $result = $query->execute();
        $num_of_results = $result->rowCount();
        if ($num_of_results >= 1) {
          form_set_error('title', t("Mail Template for @title against @template_cat in status of @cms_status is already Exists, You can only update this mail template", array(
              '@title' => $title,
              '@cms_status' => ucwords(str_replace('_', " ", $cms_status)),
              '@template_cat' => ucwords(str_replace('_', " ", $template_cat)),
          )));
        }
      } elseif ($cms_status == 'New_created') {
        $query = db_select('node', 'n');
        $query->leftJoin('field_data_field_cms_mail_template_category', 'cmtc', 'n.nid = cmtc.entity_id');
        $query->leftJoin('field_data_field_cms_status', 'cs', 'n.nid = cs.entity_id');
        $query->condition('n.status', 1, '=');
        $query->fields('n', array('title', 'nid'));
        $query->fields('cmtc', array('field_cms_mail_template_category_value'));
        $query->fields('cs', array('field_cms_status_value'));

        $query->condition('n.title', $title, '=');
        $query->condition('n.type', 'mail_templates', '=');
        $query->condition('cmtc.field_cms_mail_template_category_value', $template_cat, '=');
        $query->condition('cs.field_cms_status_value', $cms_status, '=');
        $result = $query->execute();
        $num_of_results = $result->rowCount();
        if ($num_of_results >= 1) {
          form_set_error('title', t("Mail Template for @title against @template_cat in status of @cms_status is already Exists, You can only update this mail template", array(
              '@title' => $title,
              '@cms_status' => ucwords(str_replace('_', " ", $cms_status)),
              '@template_cat' => ucwords(str_replace('_', " ", $template_cat)),
          )));
        }
      } elseif ($cms_status == 'needs_review') {
        $query = db_select('node', 'n');
        $query->leftJoin('field_data_field_cms_mail_template_category', 'cmtc', 'n.nid = cmtc.entity_id');
        $query->leftJoin('field_data_field_cms_status', 'cs', 'n.nid = cs.entity_id');
        $query->condition('n.status', 1, '=');
        $query->fields('n', array('title', 'nid'));
        $query->fields('cmtc', array('field_cms_mail_template_category_value'));
        $query->fields('cs', array('field_cms_status_value'));

        $query->condition('n.title', $title, '=');
        $query->condition('n.type', 'mail_templates', '=');
        $query->condition('cmtc.field_cms_mail_template_category_value', $template_cat, '=');
        $query->condition('cs.field_cms_status_value', $cms_status, '=');
        $result = $query->execute();
        $num_of_results = $result->rowCount();
        if ($num_of_results >= 1) {
          form_set_error('title', t("Mail Template for @title against @template_cat in status of @cms_status is already Exists, You can only update this mail template", array(
              '@title' => $title,
              '@cms_status' => ucwords(str_replace('_', " ", $cms_status)),
              '@template_cat' => ucwords(str_replace('_', " ", $template_cat)),
          )));
        }
      } elseif ($cms_status == 'rejected') {
        $query = db_select('node', 'n');
        $query->leftJoin('field_data_field_cms_mail_template_category', 'cmtc', 'n.nid = cmtc.entity_id');
        $query->leftJoin('field_data_field_cms_status', 'cs', 'n.nid = cs.entity_id');
        $query->condition('n.status', 1, '=');
        $query->fields('n', array('title', 'nid'));
        $query->fields('cmtc', array('field_cms_mail_template_category_value'));
        $query->fields('cs', array('field_cms_status_value'));

        $query->condition('n.title', $title, '=');
        $query->condition('n.type', 'mail_templates', '=');
        $query->condition('cmtc.field_cms_mail_template_category_value', $template_cat, '=');
        $query->condition('cs.field_cms_status_value', $cms_status, '=');
        $result = $query->execute();
        $num_of_results = $result->rowCount();
        if ($num_of_results >= 1) {
          form_set_error('title', t("Mail Template for @title against @template_cat in status of @cms_status is already Exists, You can only update this mail template", array(
              '@title' => $title,
              '@cms_status' => ucwords(str_replace('_', " ", $cms_status)),
              '@template_cat' => ucwords(str_replace('_', " ", $template_cat)),
          )));
        }
      } elseif ($cms_status == 'needs_modification') {
        $query = db_select('node', 'n');
        $query->leftJoin('field_data_field_cms_mail_template_category', 'cmtc', 'n.nid = cmtc.entity_id');
        $query->leftJoin('field_data_field_cms_status', 'cs', 'n.nid = cs.entity_id');
        $query->condition('n.status', 1, '=');
        $query->fields('n', array('title', 'nid'));
        $query->fields('cmtc', array('field_cms_mail_template_category_value'));
        $query->fields('cs', array('field_cms_status_value'));

        $query->condition('n.title', $title, '=');
        $query->condition('n.type', 'mail_templates', '=');
        $query->condition('cmtc.field_cms_mail_template_category_value', $template_cat, '=');
        $query->condition('cs.field_cms_status_value', $cms_status, '=');
        $result = $query->execute();
        $num_of_results = $result->rowCount();
        if ($num_of_results >= 1) {
          form_set_error('title', t("Mail Template for @title against @template_cat in status of @cms_status is already Exists, You can only update this mail template", array(
              '@title' => $title,
              '@cms_status' => ucwords(str_replace('_', " ", $cms_status)),
              '@template_cat' => ucwords(str_replace('_', " ", $template_cat)),
          )));
        }
      }
    }
  }
}

/*
 * Get the mail content for each CMS Template 
 */

function itg_mail_templates_get_mailcontent($key, $task_event, $ugc_status) {

  if ($key == 'story' && $task_event == 'UGC') {
    if ($ugc_status == 'Published') {
      $status = 'approved';
    } elseif ($ugc_status == 'Rejected') {
      $status = 'reject';
    }

    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_ugc_comments_status', 'ucs', 'n.nid = ucs.entity_id');
    $query->fields('n');
    $query->condition('n.status', 1, '=');
    $query->condition('n.title', '%' . db_like($task_event) . '%', 'LIKE');
    $query->condition('n.type', 'mail_templates', '=');
    $query->condition('ucs.field_ugc_comments_status_value', $status, '=');
    $result = $query->execute();
    $records = $result->fetchAssoc();
    $get_mail_content = node_load($records['nid']);
    return $get_mail_content;
  }

  if (!empty($key) && $key == 'Sign up' || $key == 'Password Changed') {

    if ($key == 'Sign up') {
      $action_name = $key;
    } elseif ($key == 'Password Changed') {
      $action_name = $key;
    }
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('n.status', 1, '=');
    $query->condition('n.title', '%' . db_like($key) . '%', 'LIKE');
    $query->condition('n.type', 'mail_templates', '=');
    $result = $query->execute();
    $records = $result->fetchAssoc();
    $get_mail_content = node_load($records['nid']);
    return $get_mail_content;
  }

  if ($key == 'blog' || $key == 'story' || $key == 'photogallery' || $key == 'videogallery' || $key == 'podcast' && !empty($task_event)) {
    if ($task_event == 'create') {
      $cms = "New_created";
    } elseif ($task_event == 'update') {
      $cms = "updated";
    } elseif ($task_event == 'needs_review') {
      $cms = "needs_review";
    } elseif ($task_event == 'rejected') {
      $cms = "rejected";
    } elseif ($task_event == 'needs_modification') {
      $cms = "needs_modification";
    }

    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_cms_mail_template_category', 'cmtc', 'n.nid = cmtc.entity_id');
    $query->leftJoin('field_data_field_cms_status', 'fcs', 'n.nid = fcs.entity_id');
    $query->fields('n');
    $query->condition('n.status', 1, '=');
    $query->condition('n.title', '%' . db_like('CMS Mail Template') . '%', 'LIKE');
    $query->condition('n.type', 'mail_templates', '=');
    $query->condition('fcs.field_cms_status_value', $cms, '=');
    $query->condition('cmtc.field_cms_mail_template_category_value', $key, '=');
    $result = $query->execute();
    $records = $result->fetchAssoc();
    $get_mail_content = node_load($records['nid']);
    return $get_mail_content;
  }

  if ($key->type == 'print_team_integration') {
    $get_title = explode("_", $key->type);
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('n.status', 1, '=');
    $query->condition('n.title', '%' . db_like($get_title[0]) . '%', 'LIKE');
    $query->condition('n.type', 'mail_templates', '=');
    $result = $query->execute();
    $records = $result->fetchAssoc();
    $get_mail_content = node_load($records['nid']);
    return $get_mail_content;
  }

  if ($key->type == 'task_idea_allocation_tracking' || $key == 'task_idea_allocation_tracking' && !empty($task_event)) {
    if ($task_event == 'create') {
      $task_status = 'task_assigned';
    } else if ($task_event == 'update') {
      $task_status = 'task_modified';
    } else if ($task_event == 'comment') {
      $task_status = 'comment_on_task';
    } else if ($task_event == 'task_expiry') {
      $task_status = 'task_expiration';
    }

    $get_title = explode("_", $key->type);
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_new_task_status', 'fnts', 'n.nid = fnts.entity_id');
    $query->condition('fnts.field_new_task_status_value', $task_status, '=');
    $query->fields('n');
    $query->condition('n.status', 1, '=');
    $query->condition('n.title', '%' . db_like($get_title[0]) . '%', 'LIKE');
    $query->condition('n.type', 'mail_templates', '=');
    $result = $query->execute();
    $records = $result->fetchAssoc();
    $get_mail_content = node_load($records['nid']);
    return $get_mail_content;
  }
  if ($key->type == 'ask_an_expert') {
    $key_type = str_replace("_", " ", $key->type);
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('n.status', 1, '=');
    $query->condition('n.title', '%' . db_like($key_type) . '%', 'LIKE');
    $query->condition('n.type', 'mail_templates', '=');
    $result = $query->execute();
    $records = $result->fetchAssoc();
    $get_mail_content = node_load($records['nid']);
    return $get_mail_content;
  }

  if (is_string($key)) {
    $get_title = explode("_", $key);
    $title = $get_title[1];
    $query = db_select('node', 'n');
    $query->fields('n');
    $query->condition('n.status', 1, '=');
    $query->condition('n.title', '%' . db_like($title) . '%', 'LIKE');
    $query->condition('n.type', 'mail_templates', '=');
    $result = $query->execute();
    $records = $result->fetchAssoc();
    $get_mail_content = node_load($records['nid']);
    return $get_mail_content;
  } else {
    $title = "Product Expiration";
    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_product_expiration_status', 'pes', 'n.nid = pes.entity_id');
    $query->fields('n');
    $query->condition('pes.field_product_expiration_status_value', 'offer_period_expiration_status', '=');
    $query->condition('n.status', 1, '=');
    $query->condition('n.title', '%' . db_like($title) . '%', 'LIKE');
    $query->condition('n.type', 'mail_templates', '=');
    $result = $query->execute();
    $records = $result->fetchAssoc();
    $get_mail_content = node_load($records['nid']);
    return $get_mail_content;
  }
}
